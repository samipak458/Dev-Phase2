<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMAllClaims_HMClaimTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formDataSourceStr(HMAllClaims, HMClaimTable))]
final class HMAllClaims_HMClaimTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        str callerName = 'SelfClaim';

        next init();

        this.queryBuildDataSource().sortClear();

        this.queryBuildDataSource().addSortField(fieldNum(HMClaimTable, HMClaimPriority),SortOrder::Ascending);

        if(element.args().parm() == callerName)
        {
            this.queryBuildDataSource().addRange(fieldNum(HMClaimTable, RecId)).value(SysQuery::value(element.args().record().RecId));
        }

        this.object(fieldNum(HMClaimTable,HMUniqueID)).allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    public void executeQuery()
    {
        next executeQuery();

        HMClaimTable    hmClaimTable = this.cursor();
        FormRun         formRun = this.formRun();
       
        if (hmClaimTable.ClaimType == HMInvoiceClaimType::UBO4_Institutional)
        {
            formRun.design().controlName(formControlStr(HMAllClaims, Prescription)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, PrescriberCompoundInformation)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMLastApprovalDate)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMCMN)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateofInjury)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateOfServiceStart)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateOfServiceEnd)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, ProviderGroup)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProvider)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderNPI)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderQualifier)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderQualifierValue)).visible(false);

            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_DrugName)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMNDC)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Quantity)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Cost)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_UCCharge)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_GrossAmount)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMItemOrServiceCode)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMPlaceOfService)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMDiagnosisIdentifier1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_DiagnosisPointer1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_AdjustedAmount)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMAuthorization)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Balance)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMNDCQualifier)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMNDCUnits)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMRxNumber)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMTotalPaid)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier2)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier3)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier4)).visible(false);
        }
        else if (hmClaimTable.ClaimType == HMInvoiceClaimType::DO_Pharmacy)
        {
            formRun.design().controlName(formControlStr(HMAllClaims, UBO4Institutional)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMLastApprovalDate)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateofInjury)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateOfServiceStart)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMDateOfServiceEnd)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMCMN)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ICD10Code1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ICD10Code2)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ICD10Code3)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ICD10Code4)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTable_HMRemitToSite)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, ProviderGroup)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProvider)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderNPI)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderQualifier)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimTableDetails_ReferringProviderQualifierValue)).visible(false);

            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMDescriptionofCharges)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_CPT_HCPCS_Code)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMUnits)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMItemOrServiceCode)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMPlaceOfService)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMChargeLineAmount1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMDiagnosisIdentifier1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_DiagnosisPointer1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_AdjustedAmount)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMAuthorization)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Balance)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMNDCQualifier)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMNDCUnits)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMRxNumber)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMTotalPaid)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMServiceFromDate)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMServiceToDate)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier1)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier2)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier3)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMProcedureModifier4)).visible(false);
        }
        else if (hmClaimTable.ClaimType == HMInvoiceClaimType::CMS1500)
        {
            formRun.design().controlName(formControlStr(HMAllClaims, UBO4Institutional)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, Prescription)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, PrescriberCompoundInformation)).visible(false);

            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_HMItemOrServiceCode)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_DrugName)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Quantity)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_Cost)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_UCCharge)).visible(false);
            formRun.design().controlName(formControlStr(HMAllClaims, HMClaimChargeLine_GrossAmount)).visible(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>SiteDescription</Name>
				<Source><![CDATA[
    //[SysClientCacheDataMethodAttribute(true)]
    //public display HMRegionName RegionName()
    //{
    //    HMSiteTable     hmSite;
    //    HMClaimTable    hmClaimTable;

    //    hmClaimTable = this.cursor();

    //    select firstonly hmSite
    //        where hmSite.HMSiteName == hmClaimTable.HMSite;

    //    return hmSite.HMRegion;
    //}

    [SysClientCacheDataMethodAttribute(true)]
    public display HMSiteDescription SiteDescription()
    {
        HMSiteTable     hmSite;
        HMClaimTable    hmClaimTable;
        
        hmClaimTable = this.cursor();

        select firstonly hmSite
            where hmSite.HMSiteName == hmClaimTable.HMSite;

        return hmSite.HMDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>active</Name>
				<Source><![CDATA[
    /// <summary>
    /// Active method of <c>HMClaimTable_1</c> datasource
    /// </summary>
    /// <returns>Returns the boolean of active</returns>
    public int active()
    {
        HMAdjudicationHeader                   adjudicationHeader;
        HMClaimTableIntegrationStatusData      hmClaimTableIntegrationStatusData;
        HMClaimChargeLineIntegrationStatusData hmClaimChargeLineIntegrationStatusData;
        HMClaimTable                           hmClaimTable = this.cursor();
        int                                    ret;
        FormRun                                formRun;
        FormFunctionButtonControl              waystarBtn,uhcBtn,adjudicationBtn;
        
        ret = next active();

        formRun      = this.formRun();
        hmClaimTable = this.cursor();

        uhcBtn          = formRun.design().controlName(formControlStr(HMAllClaims, UHCStatusBtn));
        waystarBtn      = formRun.design().controlName(formControlStr(HMAllClaims, WaystarStatusBtn));
        adjudicationBtn = formRun.design().controlName(formControlStr(HMAllClaims, AdjudicationHeaderBtn));

        adjudicationHeader                = HMAdjudicationHeader::existAdjudicationHeader(hmClaimTable.CaseNo, hmClaimTable.HMInsuranceCarrier);
        hmClaimTableIntegrationStatusData = HMClaimTableIntegrationStatusData::find(hmClaimTable.ClaimID);

        if (adjudicationHeader.RecId)
        {
            adjudicationBtn.enabled(true);
        }
        else
        {
            adjudicationBtn.enabled(false);
        }
        
        if (hmClaimTableIntegrationStatusData.RecId)
        {
            waystarBtn.enabled(true);
        }
        else
        {
            waystarBtn.enabled(false);

            hmClaimChargeLineIntegrationStatusData = HMClaimChargeLineIntegrationStatusData::findByClaimId(hmClaimTable.ClaimID);

            if (hmClaimChargeLineIntegrationStatusData.RecId)
            {
                uhcBtn.enabled(true);
            }
            else
            {
                uhcBtn.enabled(false);
            }
        }        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>