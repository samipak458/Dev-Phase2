<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMCustCollectionsPool_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(CustCollectionsPool))]
public final class HMCustCollectionsPool_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called when the form is opened.
    /// </summary>
	public void init()
    {
        str                     priorityStrategyID;
        HMPriorityStrategy      hmPriorityStrategy;
        QueryBuildDataSource    qbds;

        this.form().design().showNewButton(0);

        next init();
        
        if (this.args() && this.args().menuItemName() == menuItemDisplayStr(HMRelatedPools))
        {
            hmPriorityStrategy = this.args().record();

            if(hmPriorityStrategy.RecId != 0)
            {
                priorityStrategyID = hmPriorityStrategy.HMPriorityStrategyID;

                qbds = CustCollectionsPool_DS.queryBuildDataSource();
                qbds.addRange(fieldnum(CustCollectionsPool, HMPriorityStrategyID)).value(queryvalue(priorityStrategyID));
            }
        }
        else
        {
            this.design(0).controlName(FormControlStr(CustCollectionsPool, MoveUp)).visible(false);
            this.design(0).controlName(FormControlStr(CustCollectionsPool, MoveDown)).visible(false);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method swap sequence no up and down in  <c>CustCollectionsPool</c> form.
    /// </summary>
    /// <param name = "_swapingVal">_swapingVal</param>
    public void swapPriority(int _swapingVal)
    {
        CustCollectionsPool custCollectionsPoolTable, custCollectionsPool, custCollectionsPoolMaxSeq, custCollectionsPoolTableUpdate;
        FormRun             formRun;
        FormDataSource      custCollectionsPool_DS;
        HMSequenceNumber    savePreviousSequenceNumber;
        RecId               custCollectionsPoolRecId;

        formRun                = this as FormRun;
        custCollectionsPool_DS = formRun.datasource(FormDatasourceStr(CustCollectionsPool, CustCollectionsPool));
        custCollectionsPool    = custCollectionsPool_DS.Cursor();

        select forupdate custCollectionsPoolTable
            where custCollectionsPoolTable.HMSequenceNumber == custCollectionsPool.HMSequenceNumber + _swapingVal;

        savePreviousSequenceNumber    = custCollectionsPool.HMSequenceNumber;
        custCollectionsPoolRecId      = custCollectionsPool.RecId;

        try
        {
            ttsbegin;

            if (custCollectionsPoolTable.RecId != 0)
            {
                custCollectionsPool.HMSequenceNumber = savePreviousSequenceNumber + _swapingVal;
                custCollectionsPool.update();

                custCollectionsPoolTable.HMSequenceNumber = savePreviousSequenceNumber;
                custCollectionsPoolTable.update();
            }
            else
            {
                custCollectionsPool.HMSequenceNumber = custCollectionsPool.HMSequenceNumber + _swapingVal;
                custCollectionsPool.update();
            }

            ttscommit;
        }
        catch
        {
            warning("@Optum:UnableToUpdateSequenceNo");
        }
        
        custCollectionsPool_DS.executeQuery();
        custCollectionsPool_DS.findValue(fieldNum(CustCollectionsPool, recId), int642str(custCollectionsPoolRecId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>