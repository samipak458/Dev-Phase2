<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMDataPrepForAllClaimExportMultiThreadTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMDataPrepForAllClaimExportMultiThreadTask extends RunBaseBatch
{
    QueryRun    gQueryRun;
    int         queryStartPosition, perThreadRecords, taskNumber;
    static str  taskDescription;
    RecId       hmClaimBatchJobLogsHeader;

    #define.CurrentVersion(1)
    #LOCALMACRO.QueryStartPosition
        queryStartPosition
    #ENDMACRO
    #LOCALMACRO.PerThreadRecords
        perThreadRecords
    #ENDMACRO
    #LOCALMACRO.TaskDescription
        taskDescription
    #ENDMACRO
    #LOCALMACRO.TaskNumber
        taskNumber
    #ENDMACRO
    #LOCALMACRO.HMClaimBatchJobLogsHeader
        hmClaimBatchJobLogsHeader
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the class
    /// </summary>
    /// <returns>Return the class object</returns>
    public server static HMDataPrepForAllClaimExportMultiThreadTask construct()
    {
        return new HMDataPrepForAllClaimExportMultiThreadTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// </summary>
    /// <returns>Return the class desc</returns>
    public client server static ClassDescription description()
    {
        return taskDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void run()
    {
        try
        {
            HMDataPrepForAllClaimExportBusinessLogic hmDataPrepForAllClaimExportBusinessLogic = HMDataPrepForAllClaimExportBusinessLogic::construct();

            gQueryRun.enablePositionPaging(true);

            gQueryRun.addPageRange(queryStartPosition, perThreadRecords);

            hmDataPrepForAllClaimExportBusinessLogic.processInit(gQueryRun, taskNumber, hmClaimBatchJobLogsHeader);

        }
        catch
        {
            throw error(strFmt('@MAZ:DataPreparationBatchJobTaskFailed',taskNumber, xSession::xppCallStack()));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    //Stores parameters of the batch
    public container pack()
    {
        container pack = conNull();

        if (gQueryRun)
        {
            pack = gQueryRun.pack();
        }

        return [#CurrentVersion] + [pack] + [#QueryStartPosition] + [#PerThreadRecords] + [#TaskDescription] + [#TaskNumber] + [#HMClaimBatchJobLogsHeader];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    //Returns the stored object for the batch to use
    public boolean unpack(container packedClass)
    {
        boolean     ret         = false;
        int         version     = RunBase::getVersion(packedClass);
        container   packedQuery = conNull();

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #QueryStartPosition, #PerThreadRecords, #TaskDescription, #TaskNumber, #HMClaimBatchJobLogsHeader] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    gQueryRun   = new QueryRun(packedQuery);
                    ret         = true;
                }
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public void parmQueryRun(QueryRun _qr)
    {
        gQueryRun = _qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryStartPosition</Name>
				<Source><![CDATA[
    public void parmQueryStartPosition(int _queryStartPosition)
    {
        queryStartPosition = _queryStartPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerThreadRecords</Name>
				<Source><![CDATA[
    public void parmPerThreadRecords(int _perThreadRecords)
    {
        perThreadRecords = _perThreadRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskDescription</Name>
				<Source><![CDATA[
    public void parmTaskDescription(str _taskDescription)
    {
        taskDescription = _taskDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskNumber</Name>
				<Source><![CDATA[
    public void parmTaskNumber(int _taskNumber)
    {
        taskNumber = _taskNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHMClaimBatchJobLogsHeader</Name>
				<Source><![CDATA[
    public void parmHMClaimBatchJobLogsHeader(RecId _hmClaimBatchJobLogsHeader)
    {
        hmClaimBatchJobLogsHeader = _hmClaimBatchJobLogsHeader;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>