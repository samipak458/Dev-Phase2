<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClearClaimBatchLogsBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMClearClaimBatchLogsBatchJob extends RunBaseBatch
{
    QueryRun            gQueryRun;
    DialogField         dlgNumberOfDays;
    int                 numberOfDays;

    #OCCRetryCount
    #define.CurrentVersion(1)
    #localmacro.NumberofDays
        numberOfDays
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public server static HMClearClaimBatchLogsBatchJob construct()
    {
        return new HMClearClaimBatchLogsBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        HMClearClaimBatchLogsBatchJob obj = HMClearClaimBatchLogsBatchJob::construct();

        obj.caption();

        if (obj.prompt())
        {
            obj.run();
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@Optum:ClearClaimBatchLogs";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        HMClaimBatchJobLogsHeader   hmClaimBatchJobLogsHeader;
        HMClaimBatchJobsLogs        hmClaimBatchJobsLogs;
        utcdatetime                 fromDateTime;
        RecId                       hmClaimBatchJobLogsHeaderRecId;
        
        fromDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone()), numberOfDays * -1)), str2Time("12:00:00 am"));

        try
        {
            ttsbegin;

            while select forupdate hmClaimBatchJobLogsHeader
                where hmClaimBatchJobLogsHeader.CreatedDateTime <= fromDateTime
            {
                hmClaimBatchJobLogsHeaderRecId = hmClaimBatchJobLogsHeader.RecId;

                hmClaimBatchJobLogsHeader.delete();

                delete_from hmClaimBatchJobsLogs
                    where hmClaimBatchJobsLogs.HMClaimBatchJobLogsHeader == hmClaimBatchJobLogsHeaderRecId;

            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@Optum:FailedToDeleteDataFromTable", "HMClaimBatchJobLogsHeader"));
            }
            else
            {
                retry;
            }

        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@Optum:FailedToDeleteDataFromTable", "HMClaimBatchJobLogsHeader"));
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion] + [#NumberOfDays];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    //Returns the stored object for the batch to use
    public boolean unpack(container packedClass)
    {
        boolean     ret         = true;
        int         version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #NumberOfDays] = packedClass;

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    // <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void initParmDefault()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// </summary>
    /// <returns></returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgNumberOfDays = dialog.addFieldValue(extendedTypeStr(Integer), numberOfDays, "@Optum:NumberOfDays");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        numberOfDays = dlgNumberOfDays.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ret;
 
        ret = super(_calledFrom);
 
        if (numberOfDays == 0)
        {
            ret = checkFailed(strFmt("@SYS26332", "@Optum:NumberOfDays"));
        }
        else if(numberOfDays < 0)
        {
            ret = checkFailed("@Optum:NegativeValNotAllowed");
        }
 
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>