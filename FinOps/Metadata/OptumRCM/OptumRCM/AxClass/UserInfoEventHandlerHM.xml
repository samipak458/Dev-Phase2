<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UserInfoEventHandlerHM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used for event handler fr the table <c>UserInfo</c>
/// </summary>
class UserInfoEventHandlerHM
{ 
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>UserInfo_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after the insertion of <c>UserInfo</c> record
    /// </summary>
    /// <param name="sender">Event sender</param>
    /// <param name="e">Event arguements</param>
    [DataEventHandler(tableStr(UserInfo), DataEventType::Inserted)]
    public static void UserInfo_onInserted(Common sender, DataEventArgs e)
    {
        HMUserInfo hmUserInfo;
        UserInfo   userInfo = sender as UserInfo;

        try
        {
            hmUserInfo = HMUserInfo::find(userInfo.id);

            if(hmUserInfo.RecId != 0)
            {
                ttsbegin;

                hmUserInfo.selectForUpdate(true);
                hmUserInfo.delete();

                ttscommit;
            }

            hmUserInfo.clear();
            hmUserInfo.UserId = userInfo.id;

            if(userInfo.enable == true)
            {
                hmUserInfo.EnabledDateAndTime = DateTimeUtil::utcNow();
            }
            else
            {
                hmUserInfo.EnabledDateAndTime = dateNull();
            }

            hmUserInfo.insert();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Error;
            }
            else
            {
                retry;
            }
        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Error;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UserInfo_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after the updation of <c>UserInfo</c> record
    /// </summary>
    /// <param name="sender">Event sender</param>
    /// <param name="e">Event arguements</param>
    [DataEventHandler(tableStr(UserInfo), DataEventType::Updated)]
    public static void UserInfo_onUpdated(Common sender, DataEventArgs e)
    {
        HMUserInfo hmUserInfo;
        UserInfo   userInfo = sender as UserInfo;

        hmUserInfo = HMUserInfo::find(userInfo.id);

        if(userInfo.enable == true)
        {
            hmUserInfo.EnabledDateAndTime = DateTimeUtil::utcNow();
        }
        else
        {
            hmUserInfo.EnabledDateAndTime = dateNull();
        }

        ttsbegin;

        if (hmUserInfo.RecId == 0)
        {
            hmUserInfo.UserId = userInfo.id;

            hmUserInfo.insert();
        }
        else
        {
            hmUserInfo.selectForUpdate(true);

            hmUserInfo.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMUserInfo_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(UserInfo), DataEventType::Deleted)]
    public static void HMUserInfo_onDeleted(Common sender, DataEventArgs e)
    {
        HMUserInfo hmUserInfo;
        UserInfo   userInfo = sender as UserInfo;

        hmUserInfo = HMUserInfo::find(userInfo.id);

        if(hmUserInfo.RecId != 0)
        {
            ttsbegin;

            hmUserInfo.selectForUpdate(true);
            hmUserInfo.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>