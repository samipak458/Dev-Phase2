<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMZeroClaimAgeCalculateMultiThreadBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used as the main batch job class for calculation and updation of aging days batch job for $0 denied claims
/// </summary>
class HMZeroClaimAgeCalculateMultiThreadBatchJob extends RunBaseBatch
{
    BatchHeader         batchHeader;
    HMNumberOfThreads   numberOfThreads;
    static str          taskDescription;
    RecId               hmClaimBatchJobLogsHeader, hmClaimBatchJobLogsHeaderDataPrep;

    #define.CurrentVersion(1)
    #localmacro.NumberOfThreads
        numberOfThreads
    #endmacro
    #LOCALMACRO.TaskDescription
        taskDescription
    #ENDMACRO
    #LOCALMACRO.HMClaimBatchJobLogsHeader
        hmClaimBatchJobLogsHeader
    #ENDMACRO
    #LOCALMACRO.HMClaimBatchJobLogsHeaderDataPrep
        hmClaimBatchJobLogsHeaderDataPrep
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the class
    /// </summary>
    /// <returns>Return the class object</returns>
    public server static HMZeroClaimAgeCalculateMultiThreadBatchJob construct()
    {
        return new HMZeroClaimAgeCalculateMultiThreadBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Description of the task
    /// </summary>
    /// <returns>Return description of the task</returns>
    static ClassDescription description()
    {
        return taskDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initiated the task for calculation and updation of aging days batch job for $0 denied claims
    /// </summary>
    public void run()
    {
        HMZeroClaimAgeCalculateMultiThreadTask  hmZeroClaimAgeCalculateMultiThreadTask;

        try
        {
            if(this.isInBatch())
            {

                for(int i = 1; i <= numberOfThreads; i++)
                {
                    if(!batchHeader)
                    {
                        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                    }
                    
                    hmZeroClaimAgeCalculateMultiThreadTask = HMZeroClaimAgeCalculateMultiThreadTask::construct();
                    hmZeroClaimAgeCalculateMultiThreadTask.parmTaskDescription(strFmt("@Optum:AssignmentOfAgeOnZeroClaimsMultipleThreadTask", i));
                    hmZeroClaimAgeCalculateMultiThreadTask.parmTaskNumber(i);
                    hmZeroClaimAgeCalculateMultiThreadTask.parmHMClaimBatchJobLogsHeader(hmClaimBatchJobLogsHeader);
                    hmZeroClaimAgeCalculateMultiThreadTask.parmHMClaimBatchJobLogsHeaderDataPrep(hmClaimBatchJobLogsHeaderDataPrep);

                    // add tasks to the batch header
                    batchHeader.addRuntimeTask(hmZeroClaimAgeCalculateMultiThreadTask, this.parmCurrentBatch().RecId);
                }
                
            }

            if(batchHeader)
            {
                // save the batchheader with added tasks
                batchHeader.save();
            }

        }
        catch
        {
            throw error(strFmt("@MAZ:AgeAssignmentBatchJobFailed",xSession::xppCallStack()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    //Stores parameters of the batch
    public container pack()
    {
        return [#CurrentVersion] + [#NumberOfThreads] + [#TaskDescription] + [#HMClaimBatchJobLogsHeader] + [#HMClaimBatchJobLogsHeaderDataPrep];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    //Returns the stored object for the batch to use
    public boolean unpack(container packedClass)
    {
        boolean     ret     = true;
        int         version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #NumberOfThreads, #TaskDescription, #HMClaimBatchJobLogsHeader, #HMClaimBatchJobLogsHeaderDataPrep] = packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfThreads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the numberOfThreads value
    /// </summary>
    /// <param name="_numberOfThreads"><c>HMNumberOfThreads</c> value</param>
    public void parmNumberOfThreads(HMNumberOfThreads _numberOfThreads)
    {
        numberOfThreads = _numberOfThreads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the taskDescription value
    /// </summary>
    /// <param name="_taskDescription">Task description value</param>
    public void parmTaskDescription(str _taskDescription)
    {
        taskDescription = _taskDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHMClaimBatchJobLogsHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the hmClaimBatchJobLogsHeader value
    /// </summary>
    /// <param name="_hmClaimBatchJobLogsHeader"><c>HMClaimBatchJobLogsHeader</c> record id</param>
    public void parmHMClaimBatchJobLogsHeader(RecId _hmClaimBatchJobLogsHeader)
    {
        hmClaimBatchJobLogsHeader = _hmClaimBatchJobLogsHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHMClaimBatchJobLogsHeaderDataPrep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the hmClaimBatchJobLogsHeaderDataPrep value
    /// </summary>
    /// <param name="_hmClaimBatchJobLogsHeaderDataPrep"><c>HMClaimBatchJobLogsHeader</c> record id</param>
    public void parmHMClaimBatchJobLogsHeaderDataPrep(RecId _hmClaimBatchJobLogsHeaderDataPrep)
    {
        hmClaimBatchJobLogsHeaderDataPrep = _hmClaimBatchJobLogsHeaderDataPrep;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>