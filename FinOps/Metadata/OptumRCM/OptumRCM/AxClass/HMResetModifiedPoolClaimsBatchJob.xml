<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMResetModifiedPoolClaimsBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMResetModifiedPoolClaimsBatchJob extends RunBaseBatch
{
    HMIsSkipClaims      isSkipClaims;
    DialogField         dlgIsSkipClaims;
    DialogRunbase       dlg;

    #define.CurrentVersion(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the class
    /// </summary>
    /// <returns>Return the class object</returns>
    public server static HMResetModifiedPoolClaimsBatchJob construct()
    {
        return new HMResetModifiedPoolClaimsBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "Reset Modified Pool Claims Batch Jobs";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void run()
    {
        CustCollectionsPool CustCollectionsPool;
        HMClaimTable        hmClaimTable;

        while select forupdate RecId,HMIsCriteriaChanged from CustCollectionsPool
            where custCollectionsPool.HMIsCriteriaChanged == NoYes::Yes
                && custCollectionsPool.ClaimQueryPacked != conNull()
        {
            ttsbegin;

            update_recordset hmClaimTable
            setting
                ClaimPool = 0,
                PoolName = "",
                ClaimAgent = 0,
                AgentName = ""
            where hmClaimTable.ClaimPool == CustCollectionsPool.RecId
                && (isSkipClaims == NoYes::No
                    || hmClaimTable.ClaimAgent == 0);

            CustCollectionsPool.HMIsCriteriaChanged = NoYes::No;
            CustCollectionsPool.update();

            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    //Needs to be set to true so class can be ran in a batch
    boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    //Stores parameters of the batch
    public container pack()
    {
        HMIsSkipClaims hmIsSkipClaims;

        hmIsSkipClaims = isSkipClaims;

        return [#CurrentVersion] + [hmIsSkipClaims];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    //Returns the stored object for the batch to use
    public boolean unpack(container packedClass)
    {
        boolean         ret         = false;
        int             version     = RunBase::getVersion(packedClass);
        HMIsSkipClaims  hmIsSkipClaims;

        switch (version)
        {
            case #CurrentVersion:
                [version, hmIsSkipClaims] = packedClass;

                isSkipClaims    = hmIsSkipClaims;
                ret             = true;

                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    //Determines whether to run on server or client
    //True - Server; False - Client
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name = "args"></param>
    public static void main(Args args)
    {
        HMResetModifiedPoolClaimsBatchJob hmrResetModifiedPoolClaimsBatchJob = HMResetModifiedPoolClaimsBatchJob::construct();

        if (hmrResetModifiedPoolClaimsBatchJob.prompt())
        {
            hmrResetModifiedPoolClaimsBatchJob.run();
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void initParmDefault()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// </summary>
    /// <returns></returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgIsSkipClaims = dialog.addFieldValue(extendedTypeStr(HMIsSkipClaims),isSkipClaims);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        isSkipClaims = dlgIsSkipClaims.value();
        
        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>