<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMWellSkyAPIReset</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMWellSkyAPIReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    	public static void main (Args _args)
    {
        FormDataSource fdsWellSkyApiLogs = _args.record().dataSource();
        HMWellSkyAPIReset HMWellSkyAPIReset = new HMWellSkyAPIReset();

        HMWellSkyAPIReset.process(fdsWellSkyApiLogs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(FormDataSource _fdsWellSkyAPILogs)
    {
        MultiSelectionHelper    selectionHelper;
        HMWellSkyAPIRequest WellSkyAPI, hmWellSkyAPIlocal;
        boolean recordUpdated = false;
        selectionHelper = MultiSelectionHelper::construct();
        selectionHelper.parmDataSource(_fdsWellSkyAPILogs);
        
        //remove the code becasue customer wants to reset the already sent message as well
        //if(!this.validateRecords(_fdsWellSkyAPILogs))
        //{
        //    throw warning("@Optum:ResetMessage");
        //}

        WellSkyAPI  = selectionHelper.getFirst();

        try
        { 
            ttsbegin;
            if (WellSkyAPI.RecId)
            {
                while (WellSkyAPI.RecId != 0)
                {
                    select forupdate hmWellSkyAPIlocal
                            where hmWellSkyAPIlocal.RecId == WellSkyAPI.RecId;

                    if(hmWellSkyAPIlocal)
                    {
                        hmWellSkyAPIlocal.MessageRetryCount = 0;
                        hmWellSkyAPIlocal.MessageSent = NoYes::No;
                        hmWellSkyAPIlocal.update();
                        recordUpdated = true;
                    }
                    WellSkyAPI = selectionHelper.getNext();
                }

            }                       
            else
            {
                throw error("@Optum:NoRecordSelection");
            }

            ttscommit;
            if(recordUpdated)
            {
                info("@Optum:RecordUpdated");
            }
        
        }
        catch
        {
            throw error("@Optum:CatchError");
        }

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecords</Name>
				<Source><![CDATA[
    private boolean validateRecords(FormDataSource _fdsWellSkyAPILogs)
    {
        MultiSelectionHelper    selectionHelper;
        HMWellSkyAPIRequest     WellSkyAPI;

        selectionHelper = MultiSelectionHelper::construct();
        selectionHelper.parmDataSource(_fdsWellSkyAPILogs);

        WellSkyAPI  = selectionHelper.getFirst();

        if (WellSkyAPI.RecId)
        {
            while (WellSkyAPI.RecId != 0)
            {
                if(WellSkyAPI.MessageSent == NoYes::Yes)
                {
                    return false;
                }
                WellSkyAPI = selectionHelper.getNext();
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>