<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimChargeLineIntegrationStatusDataEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimChargeLineIntegrationStatusDataEntity extends common
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean                             ret;
        HMIntegrationStatus                 hmIntegrationStatus;
        HMClaimTableIntegrationStatusData   hmClaimTableIntegrationStatusData;
        HMClaimTable                        hmClaimTable;
        HMClaimChargeLine                   hmClaimChargeLine;
        str                                 newClaimId = '';
        boolean                             isCPT_HCPCS_CodeExist, isHMUnitsExist, isHMServiceFromDateExist;
        str                                 msg = "";

        ret = super();

        newClaimId = this.HMInvoiceNumber + '-' + this.ClaimNumber;

        select firstonly RecId from hmClaimTable
            where hmClaimTable.ClaimID == newClaimId;

        if (hmClaimTable.RecId == 0)
        {
            ret = checkFailed(strFmt("@Optum:IntegrationClaimDoesNotExists", newClaimId));

            return ret;
        }
        
        select firstonly RecId from hmClaimChargeLine
            where hmClaimChargeLine.ClaimID == newClaimId;

        if (hmClaimChargeLine.RecId != 0)
        {
            select firstonly RecId from hmClaimChargeLine
                where hmClaimChargeLine.ClaimID               == newClaimId
                    && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate
                    && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code
                    && hmClaimChargeLine.HMUnits              == this.HMUnits;

            if(hmClaimChargeLine.RecId == 0)
            {
                select firstonly RecId from hmClaimChargeLine
                    where hmClaimChargeLine.ClaimID               == newClaimId
                        && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate;

                isHMServiceFromDateExist = hmClaimChargeLine.RecId == 0 ? false : true;

                select firstonly RecId from hmClaimChargeLine
                    where hmClaimChargeLine.ClaimID               == newClaimId
                        && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code;

                isCPT_HCPCS_CodeExist = hmClaimChargeLine.RecId == 0 ? false : true;

                select firstonly RecId from hmClaimChargeLine
                    where hmClaimChargeLine.ClaimID               == newClaimId
                        && hmClaimChargeLine.HMUnits              == this.HMUnits;

                isHMUnitsExist = hmClaimChargeLine.RecId == 0 ? false : true;

                if(!isHMServiceFromDateExist && !isCPT_HCPCS_CodeExist && !isHMUnitsExist)
                {
                    ret = checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg1", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId));
                }
                else if(isHMServiceFromDateExist && !isCPT_HCPCS_CodeExist && !isHMUnitsExist)
                {
                    ret = checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg2", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId));
                }
                else if(!isHMServiceFromDateExist && isCPT_HCPCS_CodeExist && !isHMUnitsExist)
                {
                    ret = checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg2", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId));
                }
                else if(!isHMServiceFromDateExist && !isCPT_HCPCS_CodeExist && isHMUnitsExist)
                {
                    ret = checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg2", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ9404", newClaimId));
                }
                else if(!isHMServiceFromDateExist && isCPT_HCPCS_CodeExist && isHMUnitsExist)
                {
                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code
                            && hmClaimChargeLine.HMUnits              == this.HMUnits;

                    ret = hmClaimChargeLine.RecId != 0 ? checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg3", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ9404", newClaimId)) :
                                                        checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg4", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId));
                }
                else if(isHMServiceFromDateExist && !isCPT_HCPCS_CodeExist && isHMUnitsExist)
                {
                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate
                            && hmClaimChargeLine.HMUnits              == this.HMUnits;

                    ret = hmClaimChargeLine.RecId != 0 ? checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg3", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9404", newClaimId)) :
                                                        checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg4", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId));
                }
                else if(isHMServiceFromDateExist && isCPT_HCPCS_CodeExist && !isHMUnitsExist)
                {
                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate
                            && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code;

                    ret = hmClaimChargeLine.RecId != 0 ? checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg3", "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId)) :
                                                        checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg4", "@MAZ9490", this.HMUnits, "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9404", newClaimId));
                }
                else if(isHMServiceFromDateExist && isCPT_HCPCS_CodeExist && isHMUnitsExist)
                {
                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate
                            && hmClaimChargeLine.HMUnits              == this.HMUnits;

                    msg = hmClaimChargeLine.RecId == 0 ? strFmt("@Optum:UHCClaimLineValidateErrorMsg5", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ9490", this.HMUnits) : "";

                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.HMServiceFromDate    == this.HMServiceFromDate
                            && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code;

                    msg += hmClaimChargeLine.RecId == 0 ? msg == "" ? strFmt("@Optum:UHCClaimLineValidateErrorMsg5", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code) :
                                                                    strFmt("@Optum:UHCClaimLineValidateErrorMsg6", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code) : "";

                    select firstonly RecId from hmClaimChargeLine
                        where hmClaimChargeLine.ClaimID               == newClaimId
                            && hmClaimChargeLine.CPT_HCPCS_Code       == this.CPT_HCPCS_Code
                            && hmClaimChargeLine.HMUnits              == this.HMUnits;

                    msg += hmClaimChargeLine.RecId == 0 ? msg == "" ? strFmt("@Optum:UHCClaimLineValidateErrorMsg5", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits) :
                                                                    strFmt("@Optum:UHCClaimLineValidateErrorMsg6", "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits) : "";

                    ret = msg == "" ? checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg7", "@Optum:MAZOPT0084", this.HMServiceFromDate, "@MAZ:HMCPTHCPS", this.CPT_HCPCS_Code, "@MAZ9490", this.HMUnits, "@MAZ9404", newClaimId)) :
                                    checkFailed(strFmt("@Optum:UHCClaimLineValidateErrorMsg8", msg, "@MAZ9404", newClaimId));

                }
                
                return ret;
            }
            
        }
        else
        {
            ret = checkFailed(strFmt("The claim line does not exist against %1: %2.","@MAZ9404", newClaimId));

            return ret;
        }
        
        hmIntegrationStatus = HMIntegrationStatus::find(this.HMRemarkCode1);

        if (hmIntegrationStatus.RecId == 0)
        {
            ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.HMRemarkCode1, "@Optum:HMRemarkCode1", "@Optum:HMIntegrationStatusTableLabel"));

            return ret;
        }

        hmClaimTableIntegrationStatusData = HMClaimTableIntegrationStatusData::find(newClaimId);

        if (hmClaimTableIntegrationStatusData.RecId != 0)
        {
            ret = checkFailed(strFmt("@Optum:RecordAlreadyExistError",'Waystar', newClaimId));
        }

        if (this.HMRemarkCode2 != '')
        {
            hmIntegrationStatus = HMIntegrationStatus::find(this.HMRemarkCode2);

            if (hmIntegrationStatus.RecId == 0)
            {
                ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.HMRemarkCode2, "@Optum:HMRemarkCode2", "@Optum:HMIntegrationStatusTableLabel"));

                return ret;
            }

        }

        if (this.HMRemarkCode3 != '')
        {
            hmIntegrationStatus = HMIntegrationStatus::find(this.HMRemarkCode3);

            if (hmIntegrationStatus.RecId == 0)
            {
                ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.HMRemarkCode3, "@Optum:HMRemarkCode3", "@Optum:HMIntegrationStatusTableLabel"));

                return ret;
            }

        }

        if (this.HMRemarkCode4 != '')
        {
            hmIntegrationStatus = HMIntegrationStatus::find(this.HMRemarkCode4);

            if (hmIntegrationStatus.RecId == 0)
            {
                ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.HMRemarkCode4, "@Optum:HMRemarkCode4", "@Optum:HMIntegrationStatusTableLabel"));

                return ret;
            }

        }

        if (this.HMRemarkCode5 != '')
        {
            hmIntegrationStatus = HMIntegrationStatus::find(this.HMRemarkCode5);

            if (hmIntegrationStatus.RecId == 0)
            {
                ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.HMRemarkCode5, "@Optum:HMRemarkCode5", "@Optum:HMIntegrationStatusTableLabel"));

                return ret;
            }

        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name= "_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMClaimTable                                  hmClaimTable;
        HMClaimChargeLineIntegrationStatusDataStaging staging, stagingFind;
        HMIntegrationStatus                           integrationStatus;
        HMClaimIdsTmp                                 claimIdsTmp;

        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            while select ClaimID from staging
                group by staging.ClaimID
            where staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
               && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.TransferStatus  == DMFTransferStatus::Completed
            {
                select firstonly UniqueID, LineNbr from stagingFind
                        order by CreatedDateTime desc
                            where stagingFind.ClaimID         == staging.ClaimID
                               && stagingFind.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                               && stagingFind.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                               && stagingFind.TransferStatus  == DMFTransferStatus::Completed;
                    
                if (stagingFind.RecId != 0)
                {
                    try
                    {
                        ttsbegin;
                        claimIdsTmp.clear();
                        claimIdsTmp.ClaimId    = staging.ClaimID;
                        claimIdsTmp.UniqueID   = stagingFind.UniqueID;
                        claimIdsTmp.LineNumber = stagingFind.LineNbr;
                        claimIdsTmp.insert();
                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Error;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    catch
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Error;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    
                }
            }

            try
            {
                update_recordset hmClaimTable
                    setting APIStatus = NoYes::Yes
                join claimIdsTmp
                    where hmClaimTable.ClaimID          == claimIdsTmp.ClaimId
                       && hmClaimTable.APIStatus        == NoYes::No
                join staging
                    where staging.ClaimID         == claimIdsTmp.ClaimId
                       && staging.UniqueID        == claimIdsTmp.UniqueID
                       && staging.LineNbr         == claimIdsTmp.LineNumber
                       && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                       && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                       && staging.TransferStatus  == DMFTransferStatus::Completed
                join integrationStatus
                        where integrationStatus.Name == staging.HMRemarkCode1
                          && (integrationStatus.Type == HMIntegrationStatusType::Payment
                          || integrationStatus.Type == HMIntegrationStatusType::Denial);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() ==  0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMClaimChargeLineIntegrationStatusDataStaging stagingTable;  

        try
        {
            ttsbegin;

            update_recordset stagingTable
            setting ClaimID = stagingTable.HMInvoiceNumber + '-' + stagingTable.ClaimNumber
        where stagingTable.DefinitionGroup     == _dmfDefinitionGroupExecution.DefinitionGroup
           && stagingTable.ExecutionId         == _dmfDefinitionGroupExecution.ExecutionId
           && stagingTable.TransferStatus      == DMFTransferStatus::NotStarted
           && stagingTable.HMInvoiceNumber     != ''
           && stagingTable.ClaimNumber         != '';

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() ==  0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Optum:HMClaimChargeLineIntegrationStatusDataEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>HMClaimChargeLineIntegrationStatusDataStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ClaimChargeLineIntegrationStatusDatas</PublicCollectionName>
	<PublicEntityName>ClaimChargeLineIntegrationStatusData</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClaimNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UniqueID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNbr</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DOS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SVCCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Units</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Billed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisAllowedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AllowedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DedAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Copay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Coinsurance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaidToProviderAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PatientRespAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRemarkCode1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRemarkCode2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRemarkCode3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRemarkCode4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRemarkCode5</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckEFTDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckEFTNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClaimStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMInvoiceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimNumber</Name>
			<DataField>ClaimNumber</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UniqueID</Name>
			<DataField>UniqueID</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNbr</Name>
			<AllowEdit>No</AllowEdit>
			<DataField>LineNbr</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DOS</Name>
			<DataField>DOS</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SVCCode</Name>
			<DataField>SVCCode</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Units</Name>
			<DataField>Units</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Billed</Name>
			<DataField>Billed</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DisAllowedAmt</Name>
			<DataField>DisAllowedAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AllowedAmt</Name>
			<DataField>AllowedAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DedAmt</Name>
			<DataField>DedAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Copay</Name>
			<DataField>Copay</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Coinsurance</Name>
			<DataField>Coinsurance</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>WithholdAmt</Name>
			<DataField>WithholdAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaidAmt</Name>
			<DataField>PaidAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PaidToProviderAmt</Name>
			<DataField>PaidToProviderAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PatientRespAmt</Name>
			<DataField>PatientRespAmt</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRemarkCode1</Name>
			<DataField>HMRemarkCode1</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRemarkCode2</Name>
			<DataField>HMRemarkCode2</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRemarkCode3</Name>
			<DataField>HMRemarkCode3</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRemarkCode4</Name>
			<DataField>HMRemarkCode4</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRemarkCode5</Name>
			<DataField>HMRemarkCode5</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckEFTDate</Name>
			<DataField>CheckEFTDate</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckEFTNumber</Name>
			<DataField>CheckEFTNumber</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProcessedDate</Name>
			<DataField>ProcessedDate</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimStatus</Name>
			<DataField>ClaimStatus</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMInvoiceNumber</Name>
			<DataField>HMInvoiceNumber</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimID</Name>
			<Mandatory>No</Mandatory>
			<DataField>ClaimID</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMServiceFromDate</Name>
			<DataField>HMServiceFromDate</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CPT_HCPCS_Code</Name>
			<DataField>CPT_HCPCS_Code</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMUnits</Name>
			<DataField>HMUnits</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMProcedureModifier1</Name>
			<DataField>HMProcedureModifier1</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMProcedureModifier2</Name>
			<DataField>HMProcedureModifier2</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMProcedureModifier3</Name>
			<DataField>HMProcedureModifier3</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMProcedureModifier4</Name>
			<DataField>HMProcedureModifier4</DataField>
			<DataSource>HMClaimChargeLineIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ClaimNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>UniqueID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>HMInvoiceNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>HMClaimChargeLineIntegrationStatusData</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>HMClaimChargeLineIntegrationStatusData</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>