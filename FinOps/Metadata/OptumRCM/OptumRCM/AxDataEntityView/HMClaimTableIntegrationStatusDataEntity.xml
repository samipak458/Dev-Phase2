<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimTableIntegrationStatusDataEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimTableIntegrationStatusDataEntity extends common
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    public boolean validateWrite()
    {
        boolean                                ret;
        HMIntegrationStatus                    hmIntegrationStatus;
        HMClaimChargeLineIntegrationStatusData hmClaimChargeLineIntegrationStatusData;
        HMClaimTable                           hmClaimTable;
        str                                    newClaimId = '';

        ret = super();

        newClaimId = this.HMInvoiceNumber + '-' + this.ClaimNumber;

        select firstonly RecId from hmClaimTable
            where hmClaimTable.ClaimID == newClaimId;

        if (hmClaimTable.RecId == 0)
        {
            ret = checkFailed(strFmt("@Optum:IntegrationClaimDoesNotExists", newClaimId));

            return ret;
        }
        
        hmIntegrationStatus = HMIntegrationStatus::find(this.StatusCode);

        if (hmIntegrationStatus.RecId == 0)
        {
            ret = checkFailed(strFmt("@Optum:ValueNotFoundInTableError",this.StatusCode, "@optum:HMStatusCode", "@Optum:HMIntegrationStatusTableLabel"));

            return ret;
        }

        hmClaimChargeLineIntegrationStatusData = HMClaimChargeLineIntegrationStatusData::findByClaimId(newClaimId);

        if (hmClaimChargeLineIntegrationStatusData.RecId != 0)
        {
            ret = checkFailed(strFmt("@Optum:RecordAlreadyExistError",'UHC', newClaimId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTargetProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the logic once after processing the target data.
    /// </summary>
    /// <param name= "_dmfDefinitionGroupExecution">
    /// The definition group that should be processed.
    /// </param>
    public static void postTargetProcess(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMClaimTable                             hmClaimTable;
        HMClaimTableIntegrationStatusDataStaging staging, stagingFind;
        HMIntegrationStatus                      integrationStatus;
        HMClaimIdsTmp                            claimIdsTmp;

        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            while select ClaimID from staging
                group by staging.ClaimID
            where staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
               && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && staging.TransferStatus  == DMFTransferStatus::Completed
            {
                select firstonly UniqueID from stagingFind
                        order by CreatedDateTime desc
                            where stagingFind.ClaimID         == staging.ClaimID
                               && stagingFind.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                               && stagingFind.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                               && stagingFind.TransferStatus  == DMFTransferStatus::Completed;
                    
                if (stagingFind.RecId != 0)
                {
                    try
                    {
                        ttsbegin;
                        claimIdsTmp.clear();
                        claimIdsTmp.ClaimId   = staging.ClaimID;
                        claimIdsTmp.UniqueID  = stagingFind.UniqueID;
                        claimIdsTmp.insert();
                        ttscommit;
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Error;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    catch
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::Error;
                        }
                        else
                        {
                            retry;
                        }
                    }
                }
            }

            try
            {
                update_recordset hmClaimTable
                    setting APIStatus = NoYes::Yes
                join claimIdsTmp
                    where hmClaimTable.ClaimID          == claimIdsTmp.ClaimId
                       && hmClaimTable.APIStatus        == NoYes::No
                join staging
                    where staging.ClaimID         == claimIdsTmp.ClaimId
                       && staging.UniqueID        == claimIdsTmp.UniqueID
                       && staging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                       && staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                       && staging.TransferStatus  == DMFTransferStatus::Completed
                join integrationStatus
                        where integrationStatus.Name == staging.StatusCode
                          && (integrationStatus.Type == HMIntegrationStatusType::Payment
                          || integrationStatus.Type == HMIntegrationStatusType::Denial);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() ==  0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetImportSuccessResults</Name>
				<Source><![CDATA[
    [
        SysODataActionAttribute("GetImportSuccessResults", false)
    ]
    public static str GetImportSuccessResults(DMFExecutionId _executionId)
    {
        str jsonString = '';

        HMDMFExecutionDetailsImport dmfExecutionDetailsImport;

        dmfExecutionDetailsImport = HMClaimTableIntegrationStatusDataEntity::getImportSuccessExecutionResult(_executionId);

        jsonString = FormJsonSerializer::serializeClass(dmfExecutionDetailsImport);

        return jsonString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportSuccessExecutionResult</Name>
				<Source><![CDATA[
    public static HMDMFExecutionDetailsImport getImportSuccessExecutionResult(DMFExecutionId _executionId)
    {
        DMFDefinitionGroupExecution       definitionGroupExecution;
        DMFExecution                      dmfExecution;
        DMFExecutionSummaryStatus         summaryStatus;
        HMDMFExecutionDetailsImport       dmfExecutionDetailsImport;
        HMDMFExecutionDetailsImportEntity dmfExecutionDetailsImportEntity;
        List                              entityList;

        select firstonly dmfExecution
                where dmfExecution.ExecutionId == _executionId;

        dmfExecutionDetailsImport = new HMDMFExecutionDetailsImport();
        entityList                = new List(Types::Class);

        dmfExecutionDetailsImport.parmDataProjectName(dmfExecution.DefinitionGroup);
        dmfExecutionDetailsImport.parmStartDateTime(dmfExecution.getExecutionStartDateTime());
        dmfExecutionDetailsImport.parmEndDateTime(dmfExecution.getExecutionEndDateTime());
        dmfExecutionDetailsImport.parmExecutionId(_executionId);
        summaryStatus   = dmfExecution.GetExecutionSummaryStatus();
        dmfExecutionDetailsImport.parmExecutionStatus(DMFExecutionStatusHelper::GetExecutionSummaryStatusText(summaryStatus));
        dmfExecutionDetailsImport.parmErrorRecords(dmfExecution.getErrorRecordCount());

        while select definitionGroupExecution
                where definitionGroupExecution.ExecutionId == _executionId
        {
            dmfExecutionDetailsImportEntity = new HMDMFExecutionDetailsImportEntity();

            dmfExecutionDetailsImportEntity.parmEntityName(definitionGroupExecution.Entity);
            dmfExecutionDetailsImportEntity.parmEntityStatus(enum2Str(definitionGroupExecution.GetExecutionSummaryStatus()));
            dmfExecutionDetailsImportEntity.parmEntityPending(int642Str(DMFExecutionStatusHelper::getPending(definitionGroupExecution)));
            dmfExecutionDetailsImportEntity.parmEntityInStaging(int642Str(definitionGroupExecution.NumOfTargetNew + definitionGroupExecution.NumOfTargetUpdated));
            dmfExecutionDetailsImportEntity.parmEntityCreated(definitionGroupExecution.NumOfTargetNew);
            dmfExecutionDetailsImportEntity.parmEntityUpdated(definitionGroupExecution.NumOfTargetUpdated);
            dmfExecutionDetailsImportEntity.parmTotalEntityRecords(definitionGroupExecution.NoOfRecords);

            entityList.addEnd(dmfExecutionDetailsImportEntity);
        }

        dmfExecutionDetailsImport.parmEntitiesList(entityList);

        return dmfExecutionDetailsImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMClaimTableIntegrationStatusDataStaging stagingTable;

        try
        {
            ttsbegin;

            update_recordset stagingTable
            setting ClaimID = stagingTable.HMInvoiceNumber + '-' + stagingTable.ClaimNumber
        where stagingTable.DefinitionGroup     == _dmfDefinitionGroupExecution.DefinitionGroup
           && stagingTable.ExecutionId         == _dmfDefinitionGroupExecution.ExecutionId
           && stagingTable.TransferStatus      == DMFTransferStatus::NotStarted
           && stagingTable.HMInvoiceNumber     != ''
           && stagingTable.ClaimNumber         != '';

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() ==  0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Optum:HMClaimTableIntegrationStatusDataEntityLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>HMClaimTableIntegrationStatusDataStaging</DataManagementStagingTable>
	<EntityCategory>Transaction</EntityCategory>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ClaimTableIntegrationStatusDatas</PublicCollectionName>
	<PublicEntityName>ClaimTableIntegrationStatusData</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClaimNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UniqueID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ServiceStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalChargeAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckEFTDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckEFTNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CheckEFTAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LatestResponse</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMInvoiceNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimNumber</Name>
			<DataField>ClaimNumber</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>UniqueID</Name>
			<DataField>UniqueID</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ServiceStartDate</Name>
			<DataField>ServiceStartDate</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TotalChargeAmount</Name>
			<DataField>TotalChargeAmount</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>StatusCode</Name>
			<DataField>StatusCode</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckEFTDate</Name>
			<DataField>CheckEFTDate</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckEFTNumber</Name>
			<DataField>CheckEFTNumber</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CheckEFTAmount</Name>
			<DataField>CheckEFTAmount</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LatestResponse</Name>
			<DataField>LatestResponse</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimID</Name>
			<Mandatory>No</Mandatory>
			<DataField>ClaimID</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMInvoiceNumber</Name>
			<DataField>HMInvoiceNumber</DataField>
			<DataSource>HMClaimTableIntegrationStatusData</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>ClaimNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>UniqueID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>HMInvoiceNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>HMClaimTableIntegrationStatusData</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>HMClaimTableIntegrationStatusData</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>