<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimPaymentPostingEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimPaymentPostingEntity extends common
{
    #OCCRetryCount
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        // Claims payment posting archiving process
        HMClaimPaymentPostingArchivingHelper claimPaymentPostingArchivingHelper = HMClaimPaymentPostingArchivingHelper::construct();
        claimPaymentPostingArchivingHelper.processInit(_dmfDefinitionGroupExecution);
        // Claims payment posting archiving process

        if (_dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Finished)
        {
            HMClaimPaymentPostingEntity::setFlagUp(_dmfDefinitionGroupExecution);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFlagUp</Name>
				<Source><![CDATA[
    private static void setFlagUp(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMClaimTable                    hmClaimTable;
        HMClaimPaymentPostingStaging    hmClaimPaymentPostingStaging, hmClaimPaymentPostingStagingFind;
        TransDate                       datePosted;
        HMClaimIdsTmp                   claimIdsTmp;
        str                             payment = 'PAYMENT';
        str                             denial  = 'DENIAL';

        while select ClaimID from hmClaimPaymentPostingStaging
                group by hmClaimPaymentPostingStaging.ClaimID
            where hmClaimPaymentPostingStaging.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
               && hmClaimPaymentPostingStaging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
               && hmClaimPaymentPostingStaging.TransferStatus  == DMFTransferStatus::Completed
        {
            select firstonly DatePosted from hmClaimPaymentPostingStagingFind
                order by DatePosted desc
                    where hmClaimPaymentPostingStagingFind.ClaimID         == hmClaimPaymentPostingStaging.ClaimID
                       && hmClaimPaymentPostingStagingFind.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                       && hmClaimPaymentPostingStagingFind.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                       && hmClaimPaymentPostingStagingFind.TransferStatus  == DMFTransferStatus::Completed;

            // insert claim id and latest dateposted in temp table
            try
            {
                ttsbegin;
                claimIdsTmp.clear();
                claimIdsTmp.ClaimId   = hmClaimPaymentPostingStaging.ClaimID;
                claimIdsTmp.DateField = hmClaimPaymentPostingStagingFind.DatePosted;
                claimIdsTmp.insert();
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Error;
                }
                else
                {
                    retry;
                }
            }
            catch
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Error;
                }
                else
                {
                    retry;
                }
            }
        }

        try
        {
            claimIdsTmp.clear();
            hmClaimPaymentPostingStagingFind.clear();

            //update recordset claim table set Is Denied Eligible
            update_recordset hmClaimTable
                setting IsDeniedEligible = NoYes::Yes,
                        HMClaimPriority  = 0
                join claimIdsTmp
                    where hmClaimTable.ClaimID          == claimIdsTmp.ClaimId
                       && hmClaimTable.HMBalanceAmount  == 0
                       && hmClaimTable.IsDeniedEligible == NoYes::No
                exists join hmClaimPaymentPostingStagingFind
                    where hmClaimPaymentPostingStagingFind.DatePosted      == claimIdsTmp.DateField
                       && hmClaimPaymentPostingStagingFind.Type            == denial
                       && hmClaimPaymentPostingStagingFind.ClaimID         == claimIdsTmp.ClaimId
                       && hmClaimPaymentPostingStagingFind.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                       && hmClaimPaymentPostingStagingFind.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                       && hmClaimPaymentPostingStagingFind.TransferStatus  == DMFTransferStatus::Completed;

            claimIdsTmp.clear();
            hmClaimPaymentPostingStagingFind.clear();

            //update recordset claim table set API Status
            update_recordset hmClaimTable
                setting APIStatus = NoYes::No
                join claimIdsTmp
                    where hmClaimTable.ClaimID          == claimIdsTmp.ClaimId
                       && hmClaimTable.APIStatus        == NoYes::Yes
                exists join hmClaimPaymentPostingStagingFind
                    where hmClaimPaymentPostingStagingFind.DatePosted      == claimIdsTmp.DateField
                       && (hmClaimPaymentPostingStagingFind.Type           == denial || hmClaimPaymentPostingStagingFind.Type == payment)
                       && hmClaimPaymentPostingStagingFind.ClaimID         == claimIdsTmp.ClaimId
                       && hmClaimPaymentPostingStagingFind.ExecutionId     == _dmfDefinitionGroupExecution.ExecutionId
                       && hmClaimPaymentPostingStagingFind.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                       && hmClaimPaymentPostingStagingFind.TransferStatus  == DMFTransferStatus::Completed;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() ==  0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BillNClaimMgmt</ConfigurationKey>
	<FormRef>HMAllClaims</FormRef>
	<Label>@Optum:HMClaimPaymentPostingEntity</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>HMClaimPaymentPostingStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>ClaimPaymentPostings</PublicCollectionName>
	<PublicEntityName>ClaimPaymentPosting</PublicEntityName>
	<SupportsSetBasedSqlOperations>Yes</SupportsSetBasedSqlOperations>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMClaimPaymentDate</Name>
			<DataField>HMClaimPaymentDate</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ClaimID</Name>
			<DataField>ClaimID</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Payor</Name>
			<DataField>Payor</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DatePosted</Name>
			<DataField>DatePosted</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Type</Name>
			<DataField>Type</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Amount</Name>
			<DataField>Amount</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Code_Cheque</Name>
			<DataField>Code_Cheque</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TransToClaim</Name>
			<DataField>TransToClaim</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LineNumber</Name>
			<DataField>LineNumber</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ChargeLineNumber</Name>
			<Label>ChargeLineNumber</Label>
			<DataField>ChargeLineNumber</DataField>
			<DataSource>HMClaimPaymentPosting</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>IsClaimDeleted</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Label>@Optum:IsClaimDeleted</Label>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<IsComputedField>No</IsComputedField>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>LineNumber</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ClaimID</DataField>
				</AxDataEntityViewKeyField>
				<AxDataEntityViewKeyField>
					<DataField>ChargeLineNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings />
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>HMClaimPaymentPosting</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>HMClaimPaymentPosting</Table>
				<DataSources />
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>