<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMResourceSchedulingAppointmentDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
/* TODO: (Code Upgrade) [Vertical Button Group Rule] Please review placement of buttongroup [CopyOfButtonGroup] in the application bar. */
[Form]
public class HMResourceSchedulingAppointmentDialog extends FormRun
{
    HmResourceSchedulingAttachmentTmpTable _HmResourceSchedulingAttachmentTmpTable;
    boolean                                     fetch;
    recId                                       HMPatientRecId;
    recId                                       HMScheduleTypeRecId, scheduleTypePseudoRecId;
    HMResourceSchedulingPlanningObject          hmResourceSchedulingPlanningObjectMain;
    HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
    boolean                                     isInserted;
    HMAppointmentFormOpen                       openMode;
    HMClinicStaff                               hmClinicStaff;
    HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentNew;
    HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentForEdit;
    HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentForDataFetch;
    boolean                                     fromScheduleTypeLookup;
    int                                         appointmentCounters;
    RecId                                       appointmentReason;
    RecId                                       recurrenceRecid;
    TransDate                                   occuranceEndDate,finalEndDate;
    List                                        appointmentList;
    ListEnumerator                              listEnum;
    int                                         recurScheduleApptCounter;
    HMAppointmentInventTmp                      hmAppointmentInventTmpReplica;
    QueryBuildRange                             qbrAssetTableRange,qbrAssetTableRecIdRange,qbrClinicStaffRange,qbrClinicStaffRecIdRange;
    RecId                                       encounterRecId;
    RecId                                       orderedEncounterRecId;
    RecId                                       bedRecId;
    HMWaitType                                  hmWaitType;
    Map                                         mapKeyValueReason;
    MapEnumerator                               enumerReason;
    int                                         recurrTime;
    //NumberSeqFormHandler                        numberSeqFormHandler;
    RecId                                       ouRecId;
    HMNumberSequenceGeneratorClass              appointmentClass;
    int64                                       taskId;
    HMAppointmentNumber                         appointmentNumber;
    #task
    boolean                                     IsRecurrence;
    HMRecurrentApptDetail                       recurrenceAppointmentDetail;
    Common                                      _common;
    RecId                                       resourceMasterRecId;
    HMResourceSchedulingAppointmentTmp          HMResourceSchedulingAppointmentTmpLocalChecking;
    boolean                                     isModified;
    HMParameters                                hmParameters;
    boolean                                     RescheduleConfirmation;
    HMCaseType                                  caseType;
    boolean                                     searchform;
    HMResourceSchedulingOpenTimeSlotsSearch     hmResourceSchedulingOpenTimeSlotsSearchSchedule;
    HMComplementType                            hmComplementType;
    RecId                                       BomVersionId;
    HMComments                                  incomleteInfoMessage;
    #define.Medisys("Medisys")
    boolean isSchedule;
    Map                                         reqDocsMap;
    MenuItemName        callerMenuItemCaller;
    Common              callerCommonRecord;
    HMCaseTrans         hmCaseTrans;
    container           caseTransContainer;
    HMReferralsTmp      hmReferralsTmp;

    recId                                       resourceGroupRecId;
    QueryBuildRange                             qbrResourceOrgUnit;
    Set                                         setPlanObj;
    boolean                                     incompleteInfo, sendEmail;
    boolean                                     patientChartExist;
    RecId                                       bookingOriginRecId, clientBillingAddressRecId, serviceLocationRecId, clientReportAddressRecId, patientInsuranceRecId;

    //HMBillParameters                            billParameters;

    HMResourceSchedulingTypeCode            schedulingTypeCode;

    boolean                                 insuranceExists, isFollowUpEligible;
    int                                     freeFollowUpDays;
    InventTable                             freeFollowUpInventTable;
    InventTableModule                       inventModule;
}
]]></Source>
			</Method>
			<Method>
				<Name>addDefaultOrderService</Name>
				<Source><![CDATA[
    public void addDefaultOrderService()
    {
        HMAppointmentInventTmp hmAppointmentInventTmpLocal;
        Query qry = new Query();
        InventTable inventTable;
        int i;
        QueryBuildDataSource qbdsParent, qbdsChild;
        QueryRun qryRun;
    
        qbdsParent = qry.addDataSource(tableNum(HMCaseTrans));
    
        qbdsChild = qbdsParent.addDataSource(tableNum(InventTable));
        qbdsChild.relations(true);
    
        if(conLen(caseTransContainer) > 0)
        {
            for(i = 1;i<= conLen(caseTransContainer);i++)
            {
                qbdsParent.addRange(fieldNum(HMCaseTrans, RecId)).value(SysQuery::value(conPeek(caseTransContainer, i)));
            }
        }
        else
        {
            qbdsParent.addRange(fieldNum(HMCaseTrans, RecId)).value(SysQuery::value(hmCaseTrans.RecId));
        }
    
        qryRun = new QueryRun(qry);
    
        while(qryRun.next())
        {
            inventTable = qryRun.get(tableNum(InventTable));
    
            hmAppointmentInventTmpLocal.clear();
            hmAppointmentInventTmpLocal.initValue();
            hmAppointmentInventTmpLocal.EcoResProduct = inventTable.Product;
            hmAppointmentInventTmpLocal.ItemId = inventTable.ItemId;
            hmAppointmentInventTmpLocal.ItemName = inventTable.itemName();
            hmAppointmentInventTmpLocal.insert();
        }
    
        element.refreshAppointmentOrder(hmAppointmentInventTmpLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDefaultReferralService</Name>
				<Source><![CDATA[
    public void addDefaultReferralService()
    {
        HMAppointmentInventTmp hmAppointmentInventTmpLocal;
        InventTable inventTable;
        HMSpecialtyCode     hmSpecialtyCode;
    
        select firstonly Product,ItemId from inventTable
        join RecId from hmSpecialtyCode
        where hmSpecialtyCode.RecId == hmReferralsTmp.HMSpecialtyCode
        && inventTable.ItemId == hmSpecialtyCode.InventTable;
    
        if(inventTable.ItemId)
        {
            hmAppointmentInventTmpLocal.clear();
            hmAppointmentInventTmpLocal.initValue();
            hmAppointmentInventTmpLocal.EcoResProduct = inventTable.Product;
            hmAppointmentInventTmpLocal.ItemId = inventTable.ItemId;
            hmAppointmentInventTmpLocal.ItemName = inventTable.itemName();
            hmAppointmentInventTmpLocal.insert();
    
            element.refreshAppointmentOrder(hmAppointmentInventTmpLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProtocolServicesToDetailGrid</Name>
				<Source><![CDATA[
    public void addProtocolServicesToDetailGrid()
    {
        HMAppointmentInventTmp HHMAppointmentInventTmpLocal,HHMAppointmentInventTmpDetailsLocal ;
        InventTable inventTable;
        BOM         bomTable;
        BOMVersion  bomVersion;
        HHMAppointmentInventTmpLocal = HMAppointmentInventTmp_ds.getFirst();
    
        while(HHMAppointmentInventTmpLocal)
        {
            inventTable = inventTable::find(HHMAppointmentInventTmpLocal.ItemId);
            if(inventTable.PmfProductType == PmfProductType::BOM)
            {
                select firstonly bomVersion
                where bomVersion.ItemId == inventTable.ItemId
                && bomVersion.Active
                && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                if (bomVersion.RecId)
                {
                    While select bomTable
                        where bomTable.BOMId == bomVersion.BOMId
                        join inventTable
                        where bomTable.ItemId == inventTable.ItemId
                    {
                        HHMAppointmentInventTmpDetailsLocal.initValue();
                        HHMAppointmentInventTmpDetailsLocal.ItemId = bomTable.ItemId;
                        HHMAppointmentInventTmpDetailsLocal.ItemName = inventTable.itemName();
                        HHMAppointmentInventTmpDetailsLocal.HMServiceStatus = HHMAppointmentInventTmpLocal.HMServiceStatus;
                        HHMAppointmentInventTmpDetailsLocal.Instruction = this.getInstructionFromLanguage(HHMAppointmentInventTmpDetailsLocal.ItemId);
                        HHMAppointmentInventTmpDetailsLocal.insert();
                    }
                }
            }
            else
            {
                HHMAppointmentInventTmpDetailsLocal.initValue();
                HHMAppointmentInventTmpDetailsLocal.ItemId = inventTable.ItemId;
                HHMAppointmentInventTmpDetailsLocal.ItemName = inventTable.itemName();
                HHMAppointmentInventTmpDetailsLocal.HMServiceStatus = HHMAppointmentInventTmpLocal.HMServiceStatus;
                HHMAppointmentInventTmpDetailsLocal.Instruction = this.getInstructionFromLanguage(HHMAppointmentInventTmpDetailsLocal.ItemId);
                HHMAppointmentInventTmpDetailsLocal.insert();
            }
            HHMAppointmentInventTmpLocal = HMAppointmentInventTmp_ds.getNext();
        }
        HMAppointmentInventTmpDetails.setTmpData(HHMAppointmentInventTmpDetailsLocal);
        HMAppointmentInventTmpDetails_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToWaitList</Name>
				<Source><![CDATA[
    public void addToWaitList()
    {
        HMWaitingList   hmWaitingList;
        int             counter;
        container       chiefComplaints;
    
        for (counter = 1; counter <= conLen(element.getReasonFromMap()); counter++)
        {
           chiefComplaints += [conPeek(conPeek(element.getReasonFromMap(),counter),1)];
        }
    
        hmWaitingList.ChiefComplaint                        = chiefComplaints;
        hmWaitingList.ExpectedDate                          = AppointmentDate.dateValue();
        hmWaitingList.HMPatient                             = HMPatientRecId;
        hmWaitingList.HMResourceSchedulingPlanningObject    = hmResourceSchedulingPlanningObjectMain.RecId;
        hmWaitingList.OrderDate                             = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        hmWaitingList.ExpectedTime                          = AppointmentTime.value();
        hmWaitingList.PatientContact                        = HMResourceSchedulingAppointment_PatientContact.valueStr();
        hmWaitingList.Priority                              = HMPriority::Low;
        hmWaitingList.Status                                = HMWaitingListStatus::Open;
        hmWaitingList.UnregPatientName                      = HMResourceSchedulingAppointment_PatientName.valueStr();
        hmWaitingList.WaitNumber                            = HMParameters::getNewNumSeqForWaitingListOrder(HMOrganizationalUnit::getOperatingUnitRecid(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit));
    
        switch (hmResourceSchedulingPlanningObjectMain.CaseType)
        {
            case HMCaseType::OutPatient:
                hmWaitingList.WaitType  = HMWaitType::OP;
                break;
    
            case HMCaseType::Physiotherapy:
                hmWaitingList.WaitType  = HMWaitType::Physiotherapy;
                break;
    
        }
        if (hmWaitingList.validateWrite())
        {
            hmWaitingList.insert();
    
            if (hmWaitingList.RecId)
            {
                info("@MAZ8624");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bindConfirmationStatus</Name>
				<Source><![CDATA[
    private void bindConfirmationStatus()
    {
        SysFormEnumComboBox     sysFormEnumComboBox;
        Set enumSet = new Set(Types::Enum); // collection of selected values.
        enumSet.add(HMAppointmentConfirmationStatus::None);
        enumSet.add(HMAppointmentConfirmationStatus::Critical);
        enumSet.add(HMAppointmentConfirmationStatus::ForceBookedNotConfirmed);
        enumSet.add(HMAppointmentConfirmationStatus::ForceBookedConfirmed);
        enumSet.add(HMAppointmentConfirmationStatus::IncompleteInfo);
    
        SysFormEnumComboBox = SysFormEnumComboBox::newParameters(element,
        element.controlId(formControlStr(HMResourceSchedulingAppointmentDialog, ConfirmationStatus)),
        enumName2Id(enumStr(HMAppointmentConfirmationStatus)), enumSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowedOfflineAppointments</Name>
				<Source><![CDATA[
    public boolean checkAllowedOfflineAppointments()
    {
    
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObject;
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingTypeCode                    hmResourceSchedulingTypeCode;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
        HMBookingOrigin                                 hmBookingOriginlocal;
        DialogButton                                    dialogButton;
        int appointmentsAllowed, totalAppointmentsOnDay,availbaleTimeSlots,offlineAppointment;
        boolean ret = true;
        boolean check;
    
    
        select * from hmResourceSchedulingWeekPlan
            join * from hmResourceSchedulingWeekDayPlan
            join * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(AppointmentDate.dateValue())
            && hmResourceSchedulingWeekPlanToCalender.YearNo == year(AppointmentDate.dateValue())
            && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(AppointmentDate.dateValue());
    
        select * from hmResourceSchedulingDayPlanItem
            join * from hmResourceSchedulingDayPlan
            where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
            && (AppointmentTime.value() >= hmResourceSchedulingDayPlanItem.StartTime && AppointmentTime.value() <= hmResourceSchedulingDayPlanItem.EndTime);
    
        if (hmResourceSchedulingDayPlanItem.RecId)
        {
    
            appointmentsAllowed =  hmResourceSchedulingDayPlanItem.OfflineAppointments;//  4
            availbaleTimeSlots  =  hmResourceSchedulingDayPlanItem.NumberOfTimeSlots;  //  3
    
    
    
            offlineAppointment   = real2int(System.Math::Ceiling((availbaleTimeSlots / 100) *  hmResourceSchedulingDayPlanItem.PercentOfflineAppointment));
    
    
            select count(RecId) from hmResourceSchedulingAppointmentLocal
                join * from hmResourceSchedulingPlanningObject
                where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObject.RecId
                && hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingPlanningObjectMain.RecId
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == AppointmentDate.dateValue()
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.IsOnlineAppointment == NoYes::No
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Tentative
                join * from hmResourceSchedulingTypeCode
                where hmResourceSchedulingTypeCode.RecId == hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                join * from hmResourceSchedulingWeekPlan
                where hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject
                join * from hmResourceSchedulingWeekDayPlan
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(AppointmentDate.dateValue())
                join * from hmResourceSchedulingWeekPlanToCalender
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(AppointmentDate.dateValue())
                && hmResourceSchedulingWeekPlanToCalender.YearNo == year(AppointmentDate.dateValue())
                join * from hmResourceSchedulingDayPlan
                where hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                join * from hmResourceSchedulingDayPlanItem
                where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan
                && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                && (AppointmentTime.value() >= hmResourceSchedulingDayPlanItem.StartTime && AppointmentTime.value() <= hmResourceSchedulingDayPlanItem.EndTime)
                && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= hmResourceSchedulingDayPlanItem.StartTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= hmResourceSchedulingDayPlanItem.EndTime)
                join * from   hmBookingOriginlocal where  hmResourceSchedulingAppointmentLocal.HMBookingOrigin == hmBookingOriginlocal.RecId
                && hmBookingOriginlocal.IsAppointmentOnline == NoYes::No;
    
    
    
            totalAppointmentsOnDay = int642int(hmResourceSchedulingAppointmentLocal.RecId);
    
            if (totalAppointmentsOnDay + 1 > appointmentsAllowed)
            {
                ///  if we edit appointment and date is same then no check for offline ; in or condition if appointment not in edit mode than cjheck offline appointment
    
                if ((openMode == HMAppointmentFormOpen::Edit && hmResourceSchedulingAppointmentForDataFetch.AppointmentDate != AppointmentDate.dateValue()) || openMode != HMAppointmentFormOpen::Edit || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative)
                {
                  check = true;
                  ret = checkFailed(strFmt("@MAZ8279", HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectMain.HMBuildingUnit).Description));
                }
    
            }
            if (!check && hmResourceSchedulingPlanningObject::find(hmResourceSchedulingPlanningObjectMain.RecId).OverbookAllowed == NoYes::Yes && (totalAppointmentsOnDay + 1 > offlineAppointment))
            {
                if ((openMode == HMAppointmentFormOpen::Edit && hmResourceSchedulingAppointmentForDataFetch.AppointmentDate != AppointmentDate.dateValue()) || openMode != HMAppointmentFormOpen::Edit || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative)
                {
                    dialogButton = Box::yesNo("@MAZ9357", DialogButton::No, "@SYS301622");
                    if(dialogButton == DialogButton::No)
                    {
                        ret = false;
                    }
                }
            }
    
    
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowedOfflineAppointmentsParameter</Name>
				<Source><![CDATA[
    public boolean checkAllowedOfflineAppointmentsParameter(TransDate  _appDate,HMTime _time)
    {
    
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObject;
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingTypeCode                    hmResourceSchedulingTypeCode;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
        HMBookingOrigin                                 hmBookingOriginlocal;
        int appointmentsAllowed, totalAppointmentsOnDay,availbaleTimeSlots,offlineAppointment;
        boolean check;
        boolean ret = true;
        DialogButton  dialogButton;
    
        select * from hmResourceSchedulingWeekPlan
            join * from hmResourceSchedulingWeekDayPlan
            join * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(_appDate)
            && hmResourceSchedulingWeekPlanToCalender.YearNo == year(_appDate)
            && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(_appDate);
    
        select * from hmResourceSchedulingDayPlanItem
            join * from hmResourceSchedulingDayPlan
            where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
            && (_time >= hmResourceSchedulingDayPlanItem.StartTime && _time <= hmResourceSchedulingDayPlanItem.EndTime);
    
        if (hmResourceSchedulingDayPlanItem.RecId)
        {
            appointmentsAllowed =  hmResourceSchedulingDayPlanItem.OfflineAppointments;
            availbaleTimeSlots  =  hmResourceSchedulingDayPlanItem.NumberOfTimeSlots;  //  3
    
            offlineAppointment   = real2int(System.Math::Ceiling((availbaleTimeSlots / 100) *  hmResourceSchedulingDayPlanItem.PercentOfflineAppointment));
    
            select count(RecId) from hmResourceSchedulingAppointmentLocal
                join * from hmResourceSchedulingPlanningObject
                where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObject.RecId
                && hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingPlanningObjectMain.RecId
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == _appDate
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.IsOnlineAppointment == NoYes::No
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Tentative
                join * from hmResourceSchedulingTypeCode
                where hmResourceSchedulingTypeCode.RecId == hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                join * from hmResourceSchedulingWeekPlan
                where hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject
                join * from hmResourceSchedulingWeekDayPlan
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(_appDate)
                join * from hmResourceSchedulingWeekPlanToCalender
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(_appDate)
                && hmResourceSchedulingWeekPlanToCalender.YearNo == year(_appDate)
                join * from hmResourceSchedulingDayPlan
                where hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                join * from hmResourceSchedulingDayPlanItem
                where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan
                && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                && (_time >= hmResourceSchedulingDayPlanItem.StartTime && _time <= hmResourceSchedulingDayPlanItem.EndTime)
                && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= hmResourceSchedulingDayPlanItem.StartTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= hmResourceSchedulingDayPlanItem.EndTime)
                join * from   hmBookingOriginlocal where  hmResourceSchedulingAppointmentLocal.HMBookingOrigin == hmBookingOriginlocal.RecId
                && hmBookingOriginlocal.IsAppointmentOnline == NoYes::No;
    
    
    
            totalAppointmentsOnDay = int642int(hmResourceSchedulingAppointmentLocal.RecId);
    
            if (totalAppointmentsOnDay + 1 > appointmentsAllowed)
            {
                    ///  if we edit appointment and date is same then no check for offline ; in or condition if appointment not in edit mode than cjheck offline appointment
    
                check = true;
                  ret = false;
            }
            if (!check && hmResourceSchedulingPlanningObject::find(hmResourceSchedulingPlanningObjectMain.RecId).OverbookAllowed == NoYes::Yes && (totalAppointmentsOnDay + 1 > offlineAppointment))
            {
                if ((openMode == HMAppointmentFormOpen::Edit && hmResourceSchedulingAppointmentForDataFetch.AppointmentDate != AppointmentDate.dateValue()) || openMode != HMAppointmentFormOpen::Edit || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative)
                {
                    dialogButton = Box::yesNo("@MAZ9357", DialogButton::No, "@SYS301622");
                    if(dialogButton == DialogButton::No)
                    {
                        ret = false;
                    }
                }
            }
    
    
    
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAssetAlreadyBooked</Name>
				<Source><![CDATA[
    public boolean checkIfAssetAlreadyBooked()
    {
        HMResourceSchedulingAppointment hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingAppointmentAssetTbl hmResourceSchedulingAppointmentAssetTblLocal;
        DialogButton dialogButton;
        utcDateTime                             appointmentEnd;
        date                                    appEndDate;
        TimeOfDay                               appEndTime;
        boolean ret = true;
        AssetTable assetTableLocal;
        appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
        appEndDate = DateTimeUtil::date(appointmentEnd) ;
        appEndTime = DateTimeUtil::time(appointmentEnd);
        assetTableLocal = AssetTable_ds.getFirst(true);
        while(assetTableLocal )
        {
            select count(RecId) from hmResourceSchedulingAppointmentLocal
            where
            hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && ((AppointmentDate.dateValue() >= hmResourceSchedulingAppointmentLocal.AppointmentDate && AppointmentDate.dateValue() <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            && (AppointmentTime.value() >= hmResourceSchedulingAppointmentLocal.AppointmentTime && AppointmentTime.value() <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime))
            ||
            ((appEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate && appEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate)
            && (appEndTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime && appEndTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime ))
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            join * from hmResourceSchedulingAppointmentAssetTblLocal
            where hmResourceSchedulingAppointmentAssetTblLocal.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentLocal.RecId &&
            hmResourceSchedulingAppointmentAssetTblLocal.AssetTable == assetTableLocal.AssetId;
    
    
    
    
    
            //&& hmResourceSchedulingAppointmentLocal.AppointmentEndDate <=
            if(hmResourceSchedulingAppointmentLocal.RecId > 0)
            {
                dialogButton = Box::yesNo(strFmt("@MAZ8010",assetTableLocal.Name),DialogButton::No,'Confirmation');
                if(dialogButton == DialogButton::No)
                {
                    ret = false;
                    break;
                }
            }
            assetTableLocal = AssetTable_ds.getNext();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfAssetAlreadyRecurrBook</Name>
				<Source><![CDATA[
    public boolean checkIfAssetAlreadyRecurrBook(TransDate _appDate,HMTime _appTime)
    {
        HMResourceSchedulingAppointment hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingAppointmentAssetTbl hmResourceSchedulingAppointmentAssetTblLocal;
        utcDateTime                             appointmentEnd;
        date                                    appEndDate;
        TimeOfDay                               appEndTime;
        boolean ret = true;
        AssetTable assetTableLocal;
        appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appDate,_appTime),element.getApptDuration());
        appEndDate = DateTimeUtil::date(appointmentEnd);
        appEndTime = DateTimeUtil::time(appointmentEnd);
        assetTableLocal = AssetTable_ds.getFirst(true);
        while(assetTableLocal )
        {
            select count(RecId) from hmResourceSchedulingAppointmentLocal
            where
            hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && ((_appDate>= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            && (_appTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime && _appTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime))
            ||
            ((appEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate && appEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate)
            && (appEndTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime && appEndTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime ))
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            join * from hmResourceSchedulingAppointmentAssetTblLocal
            where hmResourceSchedulingAppointmentAssetTblLocal.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentLocal.RecId &&
            hmResourceSchedulingAppointmentAssetTblLocal.AssetTable == assetTableLocal.AssetId;
    
    
    
    
    
            //&& hmResourceSchedulingAppointmentLocal.AppointmentEndDate <=
            if(hmResourceSchedulingAppointmentLocal.RecId > 0)
            {
                ret = false;
                break;
    
            }
            assetTableLocal = AssetTable_ds.getNext();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIFRecurrenceExist</Name>
				<Source><![CDATA[
    public boolean checkIFRecurrenceExist(TransDate _appDate,HMTime _appTime)
    {
        boolean ret = true;
    
        select  count(RecId) from HMResourceSchedulingAppointmentTmpLocalChecking
        where HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentDate == _appDate
        && HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentTime == _appTime;
    
        if(HMResourceSchedulingAppointmentTmpLocalChecking.RecId > 0)
        {
            ret = false;
        }
    
        return ret;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfSelectedClinicStaffBusy</Name>
				<Source><![CDATA[
    public boolean checkIfSelectedClinicStaffBusy()
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingAppointmentStaffMemb        hmAppointmentClinicStaff;
        HMClinicStaff hmClinicStaffLocal;
        DialogButton dialogButton;
        utcDateTime                                     appointmentEnd;
        date                                            appEndDate;
        TimeOfDay                                       appEndTime;
        boolean                                         ret = true;
    
        appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
        appEndDate = DateTimeUtil::date(appointmentEnd) ;
        appEndTime = DateTimeUtil::time(appointmentEnd);
    
        hmClinicStaffLocal = HMClinicStaff2_ds.getFirst(true);
        while(hmClinicStaffLocal )
        {
            select count(RecId) from hmResourceSchedulingAppointmentLocal
            where
            hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && ((AppointmentDate.dateValue() >= hmResourceSchedulingAppointmentLocal.AppointmentDate && AppointmentDate.dateValue() <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            && (AppointmentTime.value() >= hmResourceSchedulingAppointmentLocal.AppointmentTime && AppointmentTime.value() <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime))
            ||
            ((appEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate && appEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate)
            && (appEndTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime && appEndTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime ))
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            join * from hmAppointmentClinicStaff
            where hmAppointmentClinicStaff.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentLocal.RecId
            && hmAppointmentClinicStaff.HMClinicStaff == hmClinicStaffLocal.RecId;
            if(hmResourceSchedulingAppointmentLocal.RecId > 0)
            {
                dialogButton = Box::yesNo(strFmt("@MAZ8009",HMClinicStaff::getPhysicianNameByRecId(hmClinicStaffLocal.RecId)),DialogButton::No,'Confirmation');
                if(dialogButton == DialogButton::No)
                {
                    ret = false;
                    break;
                }
            }
            hmClinicStaffLocal = HMClinicStaff2_ds.getNext();
        }
    
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfStaffRecBusy</Name>
				<Source><![CDATA[
    public boolean checkIfStaffRecBusy(TransDate _appDate,HMTime _appTime)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingAppointmentStaffMemb        hmAppointmentClinicStaff;
        HMClinicStaff hmClinicStaffLocal;
        utcDateTime                                     appointmentEnd;
        date                                            appEndDate;
        TimeOfDay                                       appEndTime;
        boolean                                         ret = true;
    
        appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appDate,_appTime),element.getApptDuration());
        appEndDate = DateTimeUtil::date(appointmentEnd) ;
        appEndTime = DateTimeUtil::time(appointmentEnd);
    
        hmClinicStaffLocal = HMClinicStaff2_ds.getFirst(true);
        while(hmClinicStaffLocal )
        {
            select count(RecId) from hmResourceSchedulingAppointmentLocal
            where
            hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && ((_appDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            && (_appTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime && _appTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime))
            ||
            ((appEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate && appEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate)
            && (appEndTime <= hmResourceSchedulingAppointmentLocal.AppointmentEndTime && appEndTime >= hmResourceSchedulingAppointmentLocal.AppointmentTime ))
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            join * from hmAppointmentClinicStaff
            where hmAppointmentClinicStaff.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentLocal.RecId
            && hmAppointmentClinicStaff.HMClinicStaff == hmClinicStaffLocal.RecId;
            if(hmResourceSchedulingAppointmentLocal.RecId > 0)
            {
    
                    ret = false;
                break;
    
            }
            hmClinicStaffLocal = HMClinicStaff2_ds.getNext();
        }
    
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientAdmissionAppointments</Name>
				<Source><![CDATA[
    public boolean checkPatientAdmissionAppointments()
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
    
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
                where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == AppointmentDate.dateValue()
                && hmResourceSchedulingAppointmentLocal.AppointmentTime == AppointmentTime.value()
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::InPatient
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                && hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId
        {
            if(hmResourceSchedulingPlanningObjectLocal.HMClinicStaff)
            {
                warning(strFmt("@MAZ4656",HMClinicStaff::getPhysicianNameByRecId(hmResourceSchedulingPlanningObjectLocal.HMClinicStaff), HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description));
            }
            else
            {
                warning(strFmt("@MAZ4658", HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description));
            }
            ret = false;
    
            break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientAdmissionRecAppointment</Name>
				<Source><![CDATA[
    private boolean checkPatientAdmissionRecAppointment(TransDate _appDate,HMTime _appTime)
    {
          HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
    
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
                where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == _appDate
                && hmResourceSchedulingAppointmentLocal.AppointmentTime == _appTime
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::InPatient
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                && hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId
        {
    
            ret = false;
    
            break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientAppointments</Name>
				<Source><![CDATA[
    public boolean checkPatientAppointments()
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
        DialogButton        dialogButton;
        if(HMPatientRecId != 0)
        {
            while select * from hmResourceSchedulingAppointmentLocal
                join * from hmResourceSchedulingPlanningObjectLocal
                    where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                    && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                    && hmResourceSchedulingAppointmentLocal.AppointmentDate == AppointmentDate.dateValue()
                    && hmResourceSchedulingAppointmentLocal.AppointmentTime == AppointmentTime.value()
                    && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative)
                    && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                    && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                    && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            {
                warning(strFmt("@MAZ4656",HMResourceMaster::getResourceNameByRecId(hmResourceSchedulingPlanningObjectLocal.HMResourceMaster), HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description));
                ret = false;
    
                /*if (hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId)
                {
    
                }
                else
                {
                    dialogButton = Box::yesNo(strFmt("@MAZ4657",HMClinicStaff::getPhysicianNameByRecId(hmResourceSchedulingPlanningObjectLocal.HMClinicStaff), HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description), DialogButton::No, "@SYS301622");
    
                    if (dialogButton == DialogButton::No)
                    {
                        ret = false;
                    }
                }
    
                if (!(ret))
                {
                    break;
                }*/
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientRecurrenceAppointment</Name>
				<Source><![CDATA[
    public boolean checkPatientRecurrenceAppointment(TransDate _appDate,HMTime _appTime)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
    
        if(HMPatientRecId != 0)
        {
            while select * from hmResourceSchedulingAppointmentLocal
                join * from hmResourceSchedulingPlanningObjectLocal
                    where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                    && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                    && hmResourceSchedulingAppointmentLocal.AppointmentDate == _appDate
                    && hmResourceSchedulingAppointmentLocal.AppointmentTime == _appTime
                    && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                    && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                    && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                    && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            {
                if (hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId)
                {
                    ret = false;
                }
                else
                {
    
    
                        ret = false;
    
                }
    
                if (!(ret))
                {
                    break;
                }
            }
    
        }
        return ret;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientTimeOverlapping</Name>
				<Source><![CDATA[
    public boolean checkPatientTimeOverlapping()
    {
        return HMResourceSchedulingHelper::checkPatientTimeOverlapping(AppointmentDate.dateValue(),AppointmentTime.value(),hmResourceSchedulingPlanningObjectMain.HMResourceMaster,HMScheduleTypeRecId,hmResourceSchedulingAppointmentForDataFetch.RecId, HMPatientRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientTimeRecurrenceOverlaping</Name>
				<Source><![CDATA[
    private boolean checkPatientTimeRecurrenceOverlaping(TransDate _appDate,HMTime _appTime)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean             ret = true;
        TimeOfDay           newAppointmentEndTime;
        date newAppointmentEndDate;
        utcDateTime newAppointmentEnd,oldAppointmentEnd,newAppointmentStart,oldAppointmentStart;
    
        newAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appDate,_appTime),element.getApptDuration());
    
        newAppointmentStart = DateTimeUtil::newDateTime(_appDate,_appTime);
    
        newAppointmentEndTime = DateTimeUtil::time(newAppointmentEnd);
        newAppointmentEndDate = DateTimeUtil::date(newAppointmentEnd);
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
            where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
            && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            && ((hmResourceSchedulingAppointmentLocal.AppointmentDate >= _appDate && hmResourceSchedulingAppointmentLocal.AppointmentDate <= newAppointmentEndDate)
            ||(hmResourceSchedulingAppointmentLocal.AppointmentEndDate >= _appDate && hmResourceSchedulingAppointmentLocal.AppointmentEndDate <= newAppointmentEndDate)
            || (_appDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            ||(newAppointmentEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && newAppointmentEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate))
        {
            oldAppointmentStart = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentDate,hmResourceSchedulingAppointmentLocal.AppointmentTime);
            oldAppointmentEnd = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentEndDate,hmResourceSchedulingAppointmentLocal.AppointmentEndTime);
    
            if(oldAppointmentStart == newAppointmentStart)
            {
                continue;
            }
    
            if((oldAppointmentStart > newAppointmentStart && oldAppointmentStart < newAppointmentEnd)
            ||(oldAppointmentEnd > newAppointmentStart && oldAppointmentEnd < newAppointmentEnd)
            || (newAppointmentStart > oldAppointmentStart && newAppointmentStart < oldAppointmentEnd)
            ||(newAppointmentEnd > oldAppointmentStart && newAppointmentEnd < oldAppointmentEnd))
            {
    
    
                    ret = false;
    
    
                if(!(ret))
                {
                    break;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicianAppointments</Name>
				<Source><![CDATA[
    public boolean checkPhysicianAppointments()
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
        DialogButton        dialogButton;
    
        select RecId from hmResourceSchedulingAppointmentLocal
            join hmResourceSchedulingPlanningObjectLocal
                where hmResourceSchedulingAppointmentLocal.AppointmentDate == AppointmentDate.dateValue()
                && hmResourceSchedulingAppointmentLocal.AppointmentTime == AppointmentTime.value()
                && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
                || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative)
                && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                && hmResourceSchedulingPlanningObjectLocal.HMResourceMaster == hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
        if(hmResourceSchedulingAppointmentLocal.recid)
        {
            warning(strFmt("@MAZ7076",HMPatient::find(hmResourceSchedulingAppointmentLocal.HMPatient).patientName(), HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description));
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicianTimeOverlapping</Name>
				<Source><![CDATA[
    public boolean checkPhysicianTimeOverlapping()
    {
        return HMResourceSchedulingHelper::checkPhysicianTimeOverlapping(AppointmentDate.dateValue(),AppointmentTime.value(),hmResourceSchedulingPlanningObjectMain.HMResourceMaster,HMScheduleTypeRecId,hmResourceSchedulingAppointmentForDataFetch.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicionrecurrenceAppointment</Name>
				<Source><![CDATA[
    private boolean checkPhysicionrecurrenceAppointment(TransDate _appDate,HMTime _appTime)
    {
          HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
        DialogButton        dialogButton;
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
                where hmResourceSchedulingAppointmentLocal.AppointmentDate == _appDate
                && hmResourceSchedulingAppointmentLocal.AppointmentTime == _appTime
                && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                && hmResourceSchedulingPlanningObjectLocal.HMClinicStaff == hmResourceSchedulingPlanningObjectMain.HMClinicStaff
        {
            dialogButton = Box::yesNo(strFmt("@MAZ4654",HMPatient::find(hmResourceSchedulingAppointmentLocal.HMPatient).patientName(), HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description, HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description), DialogButton::No, "@SYS301622");
            if(dialogButton == DialogButton::No)
            {
                ret = false;
            }
    
            if(!(ret))
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicionTimeRecurrenceOverLaping</Name>
				<Source><![CDATA[
    private boolean checkPhysicionTimeRecurrenceOverLaping(TransDate _appDate,HMTime _appTime)
    {
            HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean             ret = true;
    
        TimeOfDay           newAppointmentEndTime;
        date newAppointmentEndDate;
        utcDateTime newAppointmentEnd,oldAppointmentEnd,newAppointmentStart,oldAppointmentStart;
    
        newAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appDate,_appTime),element.getApptDuration());
    
        newAppointmentStart = DateTimeUtil::newDateTime(_appDate,_appTime);
    
        newAppointmentEndTime = DateTimeUtil::time(newAppointmentEnd);
        newAppointmentEndDate = DateTimeUtil::date(newAppointmentEnd);
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
            where hmResourceSchedulingPlanningObjectLocal.HMClinicStaff == hmResourceSchedulingPlanningObjectMain.HMClinicStaff
            && hmResourceSchedulingAppointmentLocal.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            && ((hmResourceSchedulingAppointmentLocal.AppointmentDate >= _appDate && hmResourceSchedulingAppointmentLocal.AppointmentDate <= newAppointmentEndDate)
            ||(hmResourceSchedulingAppointmentLocal.AppointmentEndDate >=_appDate && hmResourceSchedulingAppointmentLocal.AppointmentEndDate <= newAppointmentEndDate)
            || (_appDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            ||(newAppointmentEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && newAppointmentEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate))
        {
            oldAppointmentStart = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentDate,hmResourceSchedulingAppointmentLocal.AppointmentTime);
            oldAppointmentEnd = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentEndDate,hmResourceSchedulingAppointmentLocal.AppointmentEndTime);
    
            if(oldAppointmentStart == newAppointmentStart)
            {
                continue;
            }
    
            if((oldAppointmentStart > newAppointmentStart && oldAppointmentStart < newAppointmentEnd)
                ||(oldAppointmentEnd > newAppointmentStart && oldAppointmentEnd < newAppointmentEnd)
                || (newAppointmentStart > oldAppointmentStart && newAppointmentStart < oldAppointmentEnd)
                ||(newAppointmentEnd > oldAppointmentStart && newAppointmentEnd < oldAppointmentEnd))
            {
    
                    ret = false;
    
    
                if(!(ret))
                {
                    break;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRelatedAppointmentOverlapping</Name>
				<Source><![CDATA[
    public boolean checkRelatedAppointmentOverlapping()
    {
        HMResourceSchedulingOpenTimeSlotsTmp    hmResourceSchedulingOpenTimeSlotsTmpLocal;
        utcDateTime newAppointmentEnd,oldAppointmentEnd,newAppointmentStart,oldAppointmentStart;
    
        newAppointmentStart = DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value());
        newAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
    
        hmResourceSchedulingOpenTimeSlotsTmpLocal = HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_ds.getFirst();
    
        while(hmResourceSchedulingOpenTimeSlotsTmpLocal)
        {
            oldAppointmentStart = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmpLocal.Date,hmResourceSchedulingOpenTimeSlotsTmpLocal.Time);
            oldAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmpLocal.Date,hmResourceSchedulingOpenTimeSlotsTmpLocal.Time),HMResourceMasterHelper::getDurationInMinutes(hmResourceSchedulingOpenTimeSlotsTmpLocal.HMResourceMaster,hmResourceSchedulingOpenTimeSlotsTmpLocal.HMResourceSchedulingTypeCode));
    
            if(oldAppointmentStart == newAppointmentStart)
            {
                continue;
            }
    
            if((oldAppointmentStart > newAppointmentStart && oldAppointmentStart < newAppointmentEnd)
                ||(oldAppointmentEnd > newAppointmentStart && oldAppointmentEnd < newAppointmentEnd)
                || (newAppointmentStart > oldAppointmentStart && newAppointmentStart < oldAppointmentEnd)
                ||(newAppointmentEnd > oldAppointmentStart && newAppointmentEnd < oldAppointmentEnd))
            {
                error("@MAZ12011");
                return false;
            }
    
            hmResourceSchedulingOpenTimeSlotsTmpLocal = HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_ds.getNext();
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidityfromParamter</Name>
				<Source><![CDATA[
    public boolean checkValidityfromParamter()
    {
        boolean        ret = false;
        hmParameters      = element.getParameterRecords();
    
        if (HMBookingOrigin::find(hmParameters.HMBookingOrigin).IsAppointmentOnline == NoYes::Yes || hmParameters.HMBookingOrigin == 0)
        {
           ret = true;
        }
    
        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
    
        if(taskId == #taskEsc || (appointmentNumber && !hmResourceSchedulingAppointmentNew.RecId))
        {
            appointmentClass.deleteNewNumSeqForAppointmentNum();
        }
        super();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        appointmentClass.deleteNewNumSeqForAppointmentNum();
        super();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        #Task
        Object              formRunObject;
        FormRun             formRun;
        HcmWorker                               hcmWorker;
    
       // Thread              emailThread, emailThreadPhysician;
        ExecutePermission   perm;
        HMWaitingList       hmWaitingList;
        DocuRef                         docuref;
        int             recordsCount;
    
        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentEditHisto) && (AppointmentDate.dateValue() < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Cancelled || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Closed))
        {
            super();
        }
        else if(hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedIn)
        {
            HMResourceSchedulingHelper::updateApptCheckIn(hmResourceSchedulingAppointmentForDataFetch.RecId, clientBillingAddressRecId, clientReportAddressRecId);
            formRun = element.args().caller();
            formRun.task(#taskRefresh);
            super();
        }
        else
        {
            if(HMResourceSchedulingAppointment_ds.validateWrite())
            {
                HMResourceSchedulingAppointment_ds.write();
    
                if(isInserted)
                {
                    if(OpenMode == HMAppointmentFormOpen::Detail || OpenMode == HMAppointmentFormOpen::Search || OpenMode == HMAppointmentFormOpen::Edit || OpenMode == HMAppointmentFormOpen::Patient ||  OpenMode == HMAppointmentFormOpen::PatientSearch)
                    {
                        formRun = element.args().caller();
    
                        if(formHasMethod(formRun,identifierstr(refreshGrid)))
                        {
                            formRunObject = formRun;
                            //formRunObject.refreshGrid();
                        }
    
                        if(OpenMode != HMAppointmentFormOpen::Edit && formHasMethod(formRun,identifierstr(selectCreatedAppointment)))
                        {
                            formRunObject = formRun;
                            formRunObject.selectCreatedAppointment(hmResourceSchedulingAppointmentNew.RecId);
                        }
                    }
                    super();
    
                  //  if(hmResourceSchedulingPlanningObjectMain.HMClinicStaff && CompanyInfo::find().email() != '')
                        if(hmResourceSchedulingPlanningObjectMain.HMClinicStaff)
                    {
                        select * from hmClinicStaff
                        join * from hcmWorker
                        where hmClinicStaff.HcmWorker == hcmWorker.RecId && hmClinicStaff.RecId == hmResourceSchedulingPlanningObjectMain.HMClinicStaff;
    
                       // if(hcmWorker.email() !="")
                        {
                            perm=new ExecutePermission();
                            perm.assert();
    
                          //  emailThread = new Thread();
                            //todo: ax7 email
                            /*
                            if(openMode == HMAppointmentFormOpen::Edit)
                            {
    
    
                                // emailThread.setInputParm([hmResourceSchedulingAppointmentForEdit.AppointmentDate, hmResourceSchedulingAppointmentForEdit.AppointmentTime, HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentForEdit.HMResourceSchedulingTypeCode).Duration, hcmWorker.email(), hmResourceSchedulingAppointmentForEdit.HMResourceSchedulingTypeCode, hmResourceSchedulingAppointmentForEdit.HMPatient,CompanyInfo::find().email()]);
                                emailThread.setInputParm([hmResourceSchedulingAppointmentForEdit.AppointmentDate, hmResourceSchedulingAppointmentForEdit.AppointmentTime, hmResourceSchedulingAppointmentForEdit.HMPatient, hmResourceSchedulingAppointmentForEdit.RecId, hcmWorker.email(), FormOpenMode::ForEdit,HMParameters::find().AppointmentSysEmailTable]);
                                emailThread.run(classnum(HMResourceSchedulingHelper),staticMethodStr(HMResourceSchedulingHelper,sendAppointmentEmailNew));
                            }
                            else
                            {
                                if(hcmWorker.email() !="")
                                {
                                    emailThreadPhysician = new Thread();
    
                                    emailThreadPhysician.setInputParm([hcmWorker.email(),hmResourceSchedulingAppointmentNew.RecId,HMParameters::find().AppointmentSysEmailTable,hcmWorker.name()]);
                                    emailThreadPhysician.run(classnum(HMResourceSchedulingHelper),staticMethodStr(HMResourceSchedulingHelper,sendAppointmentMailPhysician));
                                }
    
                               // emailThread.setInputParm([hmResourceSchedulingAppointmentNew.AppointmentDate, hmResourceSchedulingAppointmentNew.AppointmentTime, HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode).Duration, hcmWorker.email(), hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode, hmResourceSchedulingAppointmentNew.HMPatient,CompanyInfo::find().email()]);
                                emailThread.setInputParm([hmResourceSchedulingAppointmentNew.AppointmentDate, hmResourceSchedulingAppointmentNew.AppointmentTime, hmResourceSchedulingAppointmentNew.HMPatient, hmResourceSchedulingAppointmentNew.RecId, hcmWorker.email(), FormOpenMode::ForNew,HMParameters::find().AppointmentSysEmailTable]);
                                emailThread.run(classnum(HMResourceSchedulingHelper),staticMethodStr(HMResourceSchedulingHelper,sendAppointmentEmailNew));
                            }
                            */
                        }
    
                        //HMResourceSchedulingHelper::sendAppointmentEmailTemp(emailThread);
                        //HMResourceSchedulingHelper::sendAppointmentMail(hmResourceSchedulingAppointmentNew.AppointmentDate, hmResourceSchedulingAppointmentNew.AppointmentTime, HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode).Duration, logisticsLocation.email(), hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode, hmResourceSchedulingAppointmentNew.HMPatient);
                    }
    
                    if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
                    {
                        try
                        {
                            ttsBegin;
                            hmWaitingList = HMWaitingList::find(callerCommonRecord.RecId,true);
                            hmWaitingList.Status = HMWaitingListStatus::Scheduled;
    
                            if (hmWaitType != HMWaitType::Admission && hmWaitType != HMWaitType::Transfer)
                            {
                                hmWaitingList.RefTableId    =  tableNum(HMResourceSchedulingAppointment);
                                hmWaitingList.RefRecId      =  hmResourceSchedulingAppointmentNew.RecId;
                            }
    
                            hmWaitingList.update();
    
                            if (hmWaitType == HMWaitType::Admission)
                            {
                                HMResourceSchedulingCancelAppointment::closeAppointment(hmWaitingList.RefRecId);
                            }
    
                            ttsCommit;
    
                            formRun = element.args().caller();
    
                            if(formHasMethod(formRun,identifierStr(refreshCaller)))
                            {
                                element.args().caller().refreshCaller();
                            }
                        }
                        catch
                        {
                            ttsAbort;
                        }
    
                    }
                    else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentOrder) || callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentReferral))
                    {
                        formRun = element.args().caller();
    
                        if(formHasMethod(formRun,identifierStr(refreshCaller)))
                        {
                            element.args().caller().refreshCaller();
                        }
                    }
                    else if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentAdmsnOrdr))
                    {
                        try
                        {
                            ttsBegin;
    
                            HMResourceSchedulingCancelAppointment::closeAppointment(element.args().record().RecId);
    
                            ttsCommit;
                            formRun = element.args().caller();
                            formRun.task(#taskRefresh);
                        }
                        catch
                        {
                            ttsAbort;
                        }
    
                    }
                    else if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentPhysio))
                    {
                        formRun = element.args().caller();
                        formRun.task(#taskRefresh);
                    }
                    else if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentEditHisto))
                    {
                        formRun = element.args().caller();
                        formRun.task(#taskRefresh);
                    }
                    element.close();
    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCaseTrans</Name>
				<Source><![CDATA[
    public void createCaseTrans(RecId _appt)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
        HMResourceSchedulingAppointment appt;
        HMCaseTrans                             hmCaseTransLocal;
        RecId                                   caseTransRecId;
        HMCaseService   hmCaseService;
    
        while select * from apptInvent
            join * from appt
            where appt.recid == apptInvent.HMResourceSchedulingAppointment
            && apptInvent.HMResourceSchedulingAppointment == _appt
        {
            select count(RecId) from hmCaseTransLocal
            where hmCaseTransLocal.HMResourceSchedulingAppointmentInvent == apptInvent.RecId;
            if(hmCaseTransLocal.recid == 0)
            {
                caseTransRecId = HMCaseTrans::createCaseTrans(apptInvent.InventTable,
                                                apptInvent.Protocol,
                                                HMServiceStatus::Ordered,
                                                apptInvent.PatientResponsibility,
                                                apptInvent.PreAuthorizationNumber,
                                                0,
                                                apptInvent.PreAuthValidityDate,
                                                appt.HMCase,
                                                appt.RecId,
                                                apptInvent.RecId);
    
                if(caseTransRecId && !HMInventTableClass::isConsultationItem(apptInvent.InventTable))
                {
                    hmCaseService = new HMCaseService();
    
                    hmCaseService.createProcedureOrder(caseTransRecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReasonString</Name>
				<Source><![CDATA[
    public String255 createReasonString()
    {
        str   dsc;
        str reasons;
        enumerReason = mapKeyValueReason.getEnumerator();
        reasons = "";
        while (enumerReason.moveNext())
        {
            dsc = enumerReason.currentValue();
            if(reasons=="")
            {
                reasons=dsc;
            }
            else
            {
                reasons=reasons + '; ' + dsc;
            }
    
        }
        return reasons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CurrentMonthlyAppointmentDate</Name>
				<Source><![CDATA[
    private Integer CurrentMonthlyAppointmentDate(TransDate appointmentDates,str theDaysName,str theDayCount)
    {
        CalculateDateTimeValue     dateTimeValue = new CalculateDateTimeValue();
        int daynum,monthnum,years,occuranceCounter;
        str datestr;
        TransDate newDate;
    
        monthnum = dateTimeValue.MonthNumber(dateTimeValue.MonthName(appointmentDates));
        years =  year(appointmentDates);
    
            daynum = dateTimeValue.DayNumber(dateTimeValue.MonthName(appointmentDates),theDaysName,theDayCount,int2str(year(appointmentDates)));
            datestr = int2str(daynum) + '/' +  int2str(monthnum) + '/' + int2str(years);
            newDate = str2DateDMY(datestr);
            if (newDate >= appointmentDates)
            {
                //element.WriteRecurrenceAppointment(newDate);
                appointmentList.addEnd(newDate);
                appointmentCounters++;
    
            }
        return occuranceCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CurrentMonthlyAppointmentDateDay</Name>
				<Source><![CDATA[
    private Integer CurrentMonthlyAppointmentDateDay(TransDate appointmentDates,int daynum)
    {
        CalculateDateTimeValue     dateTimeValue = new CalculateDateTimeValue();
        int monthnum,years,occuranceCounter,mthofDay;
        str datestr;
        TransDate newDate;
    
        monthnum = dateTimeValue.MonthNumber(dateTimeValue.MonthName(appointmentDates));
        years =  year(appointmentDates);
    
        datestr = int2str(daynum) + '/' +  int2str(monthnum) + '/' + int2str(years);
        newDate = str2DateDMY(datestr);
        mthofDay = dayOfMth(newDate);
    
        if (newDate >= appointmentDates)
        {
            //    element.WriteRecurrenceAppointment(newDate);
            appointmentList.addStart(newDate);
            appointmentCounters++;
        }
    
        return occuranceCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DefaultDate</Name>
				<Source><![CDATA[
    public TransDate DefaultDate(TransDate appointmentDates)
    {
        int  appointmentYear;
        str defualtdate;
        date newapptdefaultdate;
    
        appointmentYear = year(appointmentDates);
        defualtdate = '1/1'+ '/' + int2str(appointmentYear);
        newapptdefaultdate = str2DateDMY(defualtdate);
    
        return newapptdefaultdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DefaultScheduleType</Name>
				<Source><![CDATA[
    public void DefaultScheduleType(RecId _planningObjectRecId)
    {
          //HMResourceSchedulingDayPlan          HMResourceSchedulingDayPlanLocal;
          //HMResourceSchedulingDayPlanItem      HMResourceSchedulingDayPlanItemLocal;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
    
    
        //
          //select * from    HMResourceSchedulingDayPlanLocal where HMResourceSchedulingDayPlanLocal.HMResourceSchedulingPlanningObject == _planningObjectRecId
          //join * from HMResourceSchedulingDayPlanItemLocal where HMResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan == HMResourceSchedulingDayPlanLocal.RecId;
        //
           select * from hmResourceSchedulingWeekPlan
            join * from hmResourceSchedulingWeekDayPlan
            join * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject ==_planningObjectRecId
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(AppointmentDate.dateValue())
            && hmResourceSchedulingWeekPlanToCalender.YearNo == year(AppointmentDate.dateValue())
            && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(AppointmentDate.dateValue());
    
        select * from hmResourceSchedulingDayPlanItem
            join * from hmResourceSchedulingDayPlan
            where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
            //&& hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
            && (AppointmentTime.value() >= hmResourceSchedulingDayPlanItem.StartTime && AppointmentTime.value() <= hmResourceSchedulingDayPlanItem.EndTime);
    
    
          HMScheduleTypeRecId = hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode;
          ScheduleType.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>docCursor</Name>
				<Source><![CDATA[
    public Common docCursor()
    {
        Common doccursor;
        Common ret;
    
        doccursor = super();
    
        if(hmResourceSchedulingAppointmentForDataFetch)
        {
            doccursor=hmResourceSchedulingAppointmentForDataFetch;
        }
    
        return doccursor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateAppointment</Name>
				<Source><![CDATA[
    public boolean duplicateAppointment(
    date _date,recid _forEdit = 0)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean ret = true;
        if(HMPatientRecId != 0)
        {
    
            if (_forEdit == 0)
            {
                    while select * from hmResourceSchedulingAppointmentLocal
                        join * from hmResourceSchedulingPlanningObjectLocal
                            where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                           // && hmResourceSchedulingAppointmentLocal.RecId != _hmResourceSchedulingAppointment.RecId
                            && hmResourceSchedulingAppointmentLocal.AppointmentDate == _date
                           && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                           && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                            //&& hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                    {
                        if (hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId)
                        {
                            error(strFmt(SysLabel::labelId2String2('@MAZ11034'),
                            HMPatient::find(hmResourceSchedulingAppointmentLocal.HMPatient).patientName(),HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode).Description));
    
                            ret = false;
                        }
    
    
                        if (!(ret))
                        {
                            break;
                        }
    
                    }
            }
            else
            {
                        while select * from hmResourceSchedulingAppointmentLocal
                        join * from hmResourceSchedulingPlanningObjectLocal
                            where hmResourceSchedulingAppointmentLocal.HMPatient == HMPatientRecId
                            && hmResourceSchedulingAppointmentLocal.RecId != _forEdit
                            && hmResourceSchedulingAppointmentLocal.AppointmentDate == _date
                            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                            && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
                            //&& hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
                    {
                        if (hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingPlanningObjectMain.RecId)
                        {
                            error(strFmt(SysLabel::labelId2String2('@MAZ11034'),
                            HMPatient::find(hmResourceSchedulingAppointmentLocal.HMPatient).patientName(),HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode).Description));
    
                            ret = false;
                        }
    
    
                        if (!(ret))
                        {
                            break;
                        }
    
                    }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandProtocolServices</Name>
				<Source><![CDATA[
    public void expandProtocolServices()
    {
        RecId currentProtocolRecId = HMAppointmentInventTmp.RecId;
        RecId relatedAppointmentRecId = HMAppointmentInventTmp.AppointmentRecId;
        int   relatedAppointmentTableId = HMAppointmentInventTmp.AppointmentTableId;
        str   relatedAppointmentResource = HMAppointmentInventTmp.ResourceDescription;
        InventTable inventTable, inventTableProtocol;
        BOM         bomTable;
        BOMVersion  bomVersion;
        HMPatientPaymentResponsibility protocolResponsibility = HMAppointmentInventTmp.PatientResponsibility;
    
        if(currentProtocolRecId)
        {
            inventTableProtocol = inventTable::find(HMAppointmentInventTmp.ItemId);
            if(inventTableProtocol.PmfProductType == PmfProductType::BOM)
            {
                select firstonly bomVersion
                where bomVersion.ItemId == inventTableProtocol.ItemId
                && bomVersion.Active
                && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                if (bomVersion.RecId)
                {
                    While select bomTable
                        where bomTable.BOMId == bomVersion.BOMId
                        join inventTable
                        where bomTable.ItemId == inventTable.ItemId
                    {
                        HMAppointmentInventTmp.clear();
                        HMAppointmentInventTmp.initValue();
                        HMAppointmentInventTmp.EcoResProduct = inventTable.Product;
                        HMAppointmentInventTmp.PatientResponsibility = protocolResponsibility;
                        HMAppointmentInventTmp.ProtocolId = inventTableProtocol.ItemId;
                        HMAppointmentInventTmp.ProtocolName = HMAppointmentInventTmp.setProtocolDescription(ClientAccount.text());
                        HMAppointmentInventTmp.ItemId = bomTable.ItemId;
                        HMAppointmentInventTmp.ItemName = inventTable.itemName();
                        HMAppointmentInventTmp.HMServiceStatus = HMAppointmentInventTmp.HMServiceStatus;
                        HMAppointmentInventTmp.AppointmentRecId = relatedAppointmentRecId;
                        HMAppointmentInventTmp.AppointmentTableId = relatedAppointmentTableId;
                        HMAppointmentInventTmp.ResourceDescription = relatedAppointmentResource;
                        HMAppointmentInventTmp.Instruction = this.getInstructionFromLanguage(HMAppointmentInventTmp.ItemId);
                        HMAppointmentInventTmp.insert();
                    }
                }
    
                delete_from HMAppointmentInventTmp where HMAppointmentInventTmp.RecId == currentProtocolRecId;
            }
        }
    
        HMAppointmentInventTmp_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNameLookupFilename</Name>
				<Source><![CDATA[
    str fileNameLookupFilename()
    
    {
    
        return '';
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNameLookupFilter</Name>
				<Source><![CDATA[
    container fileNameLookupFilter()
    
    {
    
        return ['All files','*.*'];
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNameLookupInitialPath</Name>
				<Source><![CDATA[
    str fileNameLookupInitialPath()
    
    {
    
        return '';
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNameLookupTitle</Name>
				<Source><![CDATA[
    str fileNameLookupTitle()
    
    {
    
        return "@SYS53008";
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillfromParamters</Name>
				<Source><![CDATA[
    public void fillfromParamters()
    {
    
        if (openMode != HMAppointmentFormOpen::Edit)
        {
            HMResourceSchedulingAppointment_IsSpecificConsultant.value(hmParameters.IsSpecificConsultant == NoYes::No ? 0:1);
            HMResourceSchedulingAppointment_RescheduleWithoutConfirmation.value(hmParameters.RescheduleWithoutConfirmation == NoYes::No? 0:1);
        }
        else
        {
            if (hmResourceSchedulingAppointmentForDataFetch.IsSpecificConsultant == NoYes::Yes)
            {
                  Resource.allowEdit(false);
                  HMResourceSchedulingAppointment_IsSpecificConsultant.value(1);
    
            }
            if ((hmResourceSchedulingAppointmentForDataFetch.RescheduleWithoutConfirmation == NoYes::Yes))
            {
                HMResourceSchedulingAppointment_RescheduleWithoutConfirmation.value(1);
                RescheduleConfirmation = true;
            }
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFromSearch</Name>
				<Source><![CDATA[
    public void fillFromSearch()
    {
        HMOpenTimeSlotsSearchParameters         openTimeSlotsSearchParameters;
        FormRun                                 formRun;
        Object                                  objectFormRun;
        HMOrganizationalUnit                    hmOrganizationalUnit;
        InventTable                             inventTable;
        HMClientProtocol    hmClientProtocolLocal;
        boolean             cashSales = true;
        CustTable           custTable;
    
        formRun = element.args().caller();
    
        if(formHasMethod(formRun, identifierStr(parmHMOpenTimeSlotsSearchParameters)))
        {
            objectFormRun = formRun;
            openTimeSlotsSearchParameters = objectFormRun.parmHMOpenTimeSlotsSearchParameters();
    
            if(openTimeSlotsSearchParameters)
            {
                element.updateBillingAddress('', 0, 0);
    
                if(!ClientAccount.text())
                {
                    ClientAccount.text(openTimeSlotsSearchParameters.parmClientAccount());
                    this.updateClientDetails(ClientAccount.text());
                }
    
    
                inventTable = inventTable::find(openTimeSlotsSearchParameters.parmProtocolId());
    
                if(inventTable)
                {
                    HMAppointmentInventTmp.initValue();
    
                    HMAppointmentInventTmp.ItemId = inventTable.ItemId;
    
                    if(ClientAccount.text())
                    {
                        select * from hmClientProtocolLocal
                        where hmClientProtocolLocal.ClientAccount == ClientAccount.text()
                        && hmClientProtocolLocal.ItemId == inventTable.ItemId;
                    }
    
                    HMAppointmentInventTmp.EcoResProductName    = hmClientProtocolLocal.itemAlias() != '' ? hmClientProtocolLocal.itemAlias() : inventTable.productName(SystemParameters::getSystemLanguageId());
    
                    HMAppointmentInventTmp.ItemName = HMAppointmentInventTmp.EcoResProductName;
                    HMAppointmentInventTmp.EcoResProduct = inventTable.Product;
                    HMAppointmentInventTmp.DefaultOrder = false;
    
                    if(InventTable::find(HMAppointmentInventTmp.ItemId).PmfProductType == PmfProductType::BOM)
                    {
                        HMAppointmentInventTmp.IsProtcol = NoYes::Yes;
                    }
    
                    /*select cashSales from custTable where custTable.AccountNum == ClientAccount.text();
                        cashSales = custTable.CashSales;
    
                    HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Client;
                    if(HMInventTable::findByItemId(HMAppointmentInventTmp.ItemId).RAMQ == NoYes::Yes)
                    {
                        HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Government;
                    }
                    else if (cashSales && HMAppointmentInventTmp.PatientResponsibility != HMPatientPaymentResponsibility::Government)
                    {
                        HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
                    }*/
    
                    HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
    
                    HMAppointmentInventTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecurrenceDetail</Name>
				<Source><![CDATA[
    private void fillRecurrenceDetail(HMRecurrentApptDetail  _detail)
    {
       // Common    _common;
        //select _detail;
        //
        //recurrenceAppointmentDetail.DayName = _detail.DayName;
        //recurrenceAppointmentDetail.DayNumber = _detail.DayNumber;
        //recurrenceAppointmentDetail.DayNumberEnum = _detail.DayNumberEnum;
        //recurrenceAppointmentDetail.DayOfYear = _detail.DayOfYear;
        //recurrenceAppointmentDetail.EndAfterNOccur = _detail.EndAfterNOccur;
        //recurrenceAppointmentDetail.EndByDate = _detail.EndByDate;
        //recurrenceAppointmentDetail.EveryMonthOfYear =_detail.EveryMonthOfYear;
        //recurrenceAppointmentDetail.EveryNDays = _detail.EveryNDays;
        //recurrenceAppointmentDetail.EveryNMonth = _detail.EveryNMonth;
        //recurrenceAppointmentDetail.Friday = _detail.Friday;
        //recurrenceAppointmentDetail.Monday = _detail.
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentDate</Name>
				<Source><![CDATA[
    public date getAppointmentDate()
    {
        return AppointmentDate.dateValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentRecId</Name>
				<Source><![CDATA[
    public RecId getAppointmentRecId()
    {
        return hmResourceSchedulingAppointmentForDataFetch.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentTime</Name>
				<Source><![CDATA[
    public TimeOfDay getAppointmentTime()
    {
        return AppointmentTime.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getApptDuration</Name>
				<Source><![CDATA[
    public Integer getApptDuration()
    {
        return HMResourceMasterHelper::getDurationInMinutes(hmResourceSchedulingPlanningObjectMain.HMResourceMaster,HMScheduleTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClient</Name>
				<Source><![CDATA[
    public CustAccount getClient()
    {
        return ClientAccount.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatedByName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Name getCreatedByName()
    {
        UserInfo userInfo;
    
        select * from userInfo where userInfo.id == curUserId();
    
        return userInfo.name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDate</Name>
				<Source><![CDATA[
    public date getEndDate()
    {
        utcDateTime                             appointmentEnd;
    
        appointmentEnd = DateTimeUtil::addDays(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
    
        return DateTimeUtil::date(appointmentEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHMPatientRecId</Name>
				<Source><![CDATA[
    public RecId getHMPatientRecId()
    {
        return HMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstructionFromLanguage</Name>
				<Source><![CDATA[
    private HMComments getInstructionFromLanguage(ItemId _itemId)
    {
        HMInventTable   hmInventTable;
        HMComments      instruction;
        LanguageId      patientLanguage = HMPatient::find(HMPatientRecId).getPatientLanguage();
    
        select firstOnly LanguageId_1, Instruction, LanguageId_2, Instruction_2 from hmInventTable
            where hmInventTable.InventTable == _itemId;
    
        if(patientLanguage == hmInventTable.LanguageId_1)
        {
            instruction = hmInventTable.Instruction;
        }
        else if(patientLanguage == hmInventTable.LanguageId_2)
        {
            instruction = hmInventTable.Instruction_2;
        }
    
        return instruction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultiResourceApptBuffer</Name>
				<Source><![CDATA[
    public HMResourceSchedulingOpenTimeSlotsTmp getMultiResourceApptBuffer()
    {
        return HMResourceSchedulingOpenTimeSlotsTmpMultiResrc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterRecords</Name>
				<Source><![CDATA[
    private HMParameters getParameterRecords()
    {
        HMParameters        hmParametersLocal;
    
        select firstFast * from  hmParametersLocal;
    
        return hmParametersLocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatient</Name>
				<Source><![CDATA[
    public void getPatient(Common _record, boolean _updatePatientSpecificFieldsOnly = false)
    {
        boolean   ret  = false;
        HMPatient pat = _record;
        CustTable           custTable;
        HMPatientRecId =    _record.RecId;
        BOMVersionId = 0;
        Patient.text(pat.PatientName());
        if(HMPatientRecId)
        {
            if (openMode != HMAppointmentFormOpen::Edit)
            {
                if (hmParameters.IsRecurrence == NoYes::Yes)
                {
                    NewRecurr.enabled(true);
                }
                else
                {
                    element.resetForRecurrence();
                }
    
            }
    
            HMResourceSchedulingAppointment_PatientName.allowEdit(false);
            HMResourceSchedulingAppointment_PatientContact.allowEdit(false);
    
            patientChartExist = pat.PhysicalChartNumber != '';
        }
        else
        {
    
            ret = true;
            HMResourceSchedulingAppointment_PatientName.allowEdit(true);
            HMResourceSchedulingAppointment_PatientContact.allowEdit(true);
    
        }
        MRN.text(pat.getMRN());
        Gender.text(enum2str(pat.Gender));
        Age.text(pat.patientAgeNew());
        PhysicalFileNumber.text(pat.PhysicalChartNumber);
        PatientDOB.dateValue(pat.patientBirthDate());
        element.updatePatientEmail(pat.patientPrimaryEmail());
        if(!_updatePatientSpecificFieldsOnly)
        {
            this.updateClient();
        }
        this.updatePatientDetails(pat);
        //CriticalMedInfo.text(pat.CriticalMedicalInformation);
        EmployeeNum.text(pat.EmployeeNumber);
        IsVIP.value(pat.IsVIP);
        //commented because old medisys code
        //if(HMPatient::find(HMPatientRecId).ExecutiveProtocol != 0)
        //{
            //element.storeType(   HMPatient::find(HMPatientRecId).ExecutiveProtocol);
            //BomVersionLookUp.modified();
        //}
        //else if(HMPatient::find(HMPatientRecId).PreEmploymentProtocol != 0)
        //{
            //element.storeType(   HMPatient::find(HMPatientRecId).PreEmploymentProtocol);
            //BomVersionLookUp.modified();
        //}
        //else
        //{
            //element.storeType(0);
            //BomVersionLookUp.text("");
            //BomVersionLookUp.modified();
        //}
        element.newEnabled();
    
        if(ret)
        {
            element.resetForRecurrence();
        }
    
        insuranceCode.text('');
        insuranceName.text('');
        insurancePhone.text('');
        insuranceContract.text('');
        insuranceClass.text('');
        insuranceExpirationDate.dateValue(dateNull());
    
        HMAppointmentInventTmp_PatientResponsibility.enabled(false);
        patientInsuranceRecId = 0;
    
        update_recordSet HMAppointmentInventTmp
            Setting PatientResponsibility = HMPatientPaymentResponsibility::Patient;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonFromMap</Name>
				<Source><![CDATA[
    public container getReasonFromMap()
    {
        container tempContainer;
        int a =1;
        enumerReason = mapKeyValueReason.getEnumerator();
            while (enumerReason.moveNext())
            {
                tempContainer = conIns(tempContainer,a,[enumerReason.currentKey(),enumerReason.currentValue()]);
                a++;
            }
        return tempContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequiredDocs</Name>
				<Source><![CDATA[
    private void getRequiredDocs()
    {
        HMResourceSchedulingApptRequiredDocs apptReqDocs;
        while select * from apptReqDocs
        where apptReqDocs.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentForDataFetch.RecId
        {
            reqDocsMap.insert(apptReqDocs.HMRequiredDocuments,HMRequiredDocuments::find(apptReqDocs.HMRequiredDocuments));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRole</Name>
				<Source><![CDATA[
    public HMAdvanceStaffLookupParm getRole()
    {
        HMClinicStaff                               hmClinicStaffForRole;
        HMAdvanceStaffLookupParm                    HMAdvanceStaffLookupParmLocal;
    
        hmClinicStaffForRole = HMClinicStaff::findByWorker(HcmWorkerLookup::currentWorker());
        return HMAdvanceStaffLookupParmLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedSearchGroupRecId</Name>
				<Source><![CDATA[
    public Recid getSelectedSearchGroupRecId()
    {
        Object formRun;
        formRun = element.args().caller();
        if(formHasMethod(formRun,identifierStr(getSelectedSearchGroupRecId)))
        {
            return element.args().caller().getSelectedSearchGroupRecId();
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceLocationRecId</Name>
				<Source><![CDATA[
    public RecId getServiceLocationRecId()
    {
        return serviceLocationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        HMWaitingList       hmWaitingList;
        container           cheifcomplaintsRecId;
        int                 counter;
        Object              formRun;
        ContainerClass conClass;
    
        HMResourceSchedulingAppointment hmResourceSchedulingAppointmentLocalAdmissionOrder;
        hmResourceSchedulingOpenTimeSlotsSearchSchedule = new HMResourceSchedulingOpenTimeSlotsSearch();
    
        //billParameters = HMBillParameters::find();
    
        appointmentClass  =  new HMNumberSequenceGeneratorClass();
        openMode = element.args().parmEnum();
        this.bindConfirmationStatus();
        HMEventLogMaintian::createEventLog(tableNum(HMResourceSchedulingAppointment),HMEventType::AppointmentSchedule);
        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppoinNewReserveSlot))
        {
            formRun = element.args().caller();
    
            if(formHasMethod(formRun,identifierStr(getCallerMenuItem)))
            {
                callerMenuItemCaller = element.args().caller().getCallerMenuItem();
    
                if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
                {
                    if(formHasMethod(formRun,identifierStr(getCallerRecord)))
                    {
                        callerCommonRecord = element.args().caller().getCallerRecord();
    
                        hmWaitingList = element.args().caller().getCallerRecord();
    
                        hmWaitType      = hmWaitingList.WaitType;
                    }
                }
                else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentOrder))
                {
                    if(formHasMethod(formRun,identifierStr(getCallerObject)) && element.args().caller().getCallerObject() != null)
                    {
                        conClass = element.args().caller().getCallerObject();
                        caseTransContainer = conClass.value();
                    }
                    if(formHasMethod(formRun,identifierStr(getCallerRecord)))
                    {
                        hmCaseTrans = element.args().caller().getCallerRecord();
                    }
                }
                else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentReferral))
                {
                    if(formHasMethod(formRun,identifierStr(getCallerRecord)))
                    {
                        hmReferralsTmp = element.args().caller().getCallerRecord();
                    }
                }
            }
        }
    
        setPlanObj = new Set(Types::Int64);
    
        super();
    
        if(element.checkValidityfromParamter())
        {
             error("@MAZ9251");
             element.close();
        }
    
        appointmentList = new List(Types::Date);
        mapKeyValueReason=new Map(Types::Int64,Types::String);
    
    
        fromScheduleTypeLookup = false;
        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv))
        {
            this.updateInvAndPayControls();
        }
        else
        {
            if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
            {
               /* if(hmWaitType == HMWaitType::Admission)
                {
                    caseType = HMCaseType ::InPatient;
                }
                else
                {
                    caseType = HMCaseType ::OutPatient;
                }
                element.getPatient(HMPatient::find(hmWaitingList.HMPatient));
                HMResourceSchedulingAppointment_PatientName.text(hmWaitingList.UnregPatientName);
                HMResourceSchedulingAppointment_PatientContact.text(hmWaitingList.PatientContact);
                element.storePlanningObject(hmWaitingList.HMResourceSchedulingPlanningObject);
                element.storeResource(HMResourceSchedulingPlanningObject::find(hmWaitingList.HMResourceSchedulingPlanningObject).HMResourceMaster);
                Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                cheifcomplaintsRecId = hmWaitingList.ChiefComplaint;
                if (cheifcomplaintsRecId != conNull())
                {
                    for (counter = 1; counter <= conLen(cheifcomplaintsRecId); counter++)
                    {
                        element.storeReasons(HMClinicalObservation::find(conPeek(cheifcomplaintsRecId,counter)));
                    }
                }*/
    
    
    
            }
            else
            {
                switch (openMode)
                {
    
    
    
                    case HMAppointmentFormOpen::List:
                    case openMode==HMAppointmentFormOpen::Detail:
    
                         hmResourceSchedulingPlanningObjectMain = element.args().record();
                         Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                         PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
                         HMBookingOrigin.text(HMBookingOrigin::find(HMParameters::find().HMBookingOrigin).Description);
                         element.storeBookingOrigin(HMParameters::find().HMBookingOrigin);
                         searchform = true;
                         resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                         //Zain
                         if(HMBillParameters::find().ChangeOfResponsiblity)
                             HMAppointmentInventTmp_PatientResponsibility.allowEdit(true);
                         else
                             HMAppointmentInventTmp_PatientResponsibility.allowEdit(false);
                         //Zain
                       //  element.storePlanningObject(hmResourceSchedulingPlanningObjectMain.RecId);
    
                        break;
                    case HMAppointmentFormOpen::Edit:
                            hmResourceSchedulingAppointmentForDataFetch = element.args().record();
                            hmResourceSchedulingPlanningObjectMain = HMResourceSchedulingPlanningObject::find(hmResourceSchedulingAppointmentForDataFetch.HMResourceSchedulingPlanningObject);
                            HMResourceSchedulingAppointment_PatientName.text(hmResourceSchedulingAppointmentForDataFetch.PatientName);
                            HMResourceSchedulingAppointment_PatientContact.text(hmResourceSchedulingAppointmentForDataFetch.PatientContact);
                            HMScheduleTypeRecId = hmResourceSchedulingAppointmentForDataFetch.HMResourceSchedulingTypeCode;
                            RecurrenceTab.enabled(false);
                            SaveButton.visible(true);
                        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentEditInvPy))
                        {
                            this.updateInvAndPayControls();
                        }
                        //Zain
                        if(HMBillParameters::find().ChangeOfResponsiblity)
                             HMAppointmentInventTmp_PatientResponsibility.allowEdit(true);
                        else
                             HMAppointmentInventTmp_PatientResponsibility.allowEdit(false);
                        //Zain
    
                            break;
                    case HMAppointmentFormOpen::Search:
                            hmResourceSchedulingOpenTimeSlotsTmp = element.args().record();
                            hmResourceSchedulingPlanningObjectMain = HMResourceSchedulingPlanningObject::find(hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingPlanningObject);
                          //hmResourceSchedulingPlanningObjectMain = element.args().record();
                         Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                         PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
                         searchform = true;
                         resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                        // element.storePlanningObject(hmResourceSchedulingPlanningObjectMain.RecId);
                            break;
                    case HMAppointmentFormOpen::Patient:
                    case HMAppointmentFormOpen::PatientAppointment:
                          element.getPatient(element.args().record());
                          hmResourceSchedulingPlanningObjectMain=element.patientPlanningObject(element.args().record().RecId);
                         // hmResourceSchedulingPlanningObjectMain = element.args().record();
                        if(hmResourceSchedulingPlanningObjectMain.RecId != 0)
                        {
    
                          Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                          PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
    
                          searchform = true;
                          resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                        }
                        else
                        {
                           caseType = HMCaseType::OutPatient;
                        }
                        // element.storePlanningObject(hmResourceSchedulingPlanningObjectMain.RecId);
                            break;
                    case HMAppointmentFormOpen::PatientSearch:
                        hmResourceSchedulingOpenTimeSlotsTmp = element.args().record();
                        element.getPatient(HMPatient::find(str2int64(element.args().parm())));
                        hmResourceSchedulingPlanningObjectMain = HMResourceSchedulingPlanningObject::find(hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingPlanningObject);
                         hmResourceSchedulingPlanningObjectMain = element.args().record();
                         Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                         PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
    
                         searchform = true;
                         resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                         //element.storePlanningObject(hmResourceSchedulingPlanningObjectMain.RecId);
                            break;
                    case HMAppointmentFormOpen::AppointmentSearchListPage:
    
                        hmResourceSchedulingPlanningObjectMain = element.args().record();
                        if(hmResourceSchedulingPlanningObjectMain.RecId ==0)
                        {
                            caseType = HMCaseType::OutPatient;
                        }
                        else
                        {
                            HMResourceSchedulingAppointment_PatientName.visible(false);
                            HMResourceSchedulingAppointment_PatientContact.visible(false);
                            hmResourceSchedulingPlanningObjectMain = element.args().record();
                            Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                            PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
    
                            searchform = true;
                            resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                          //  element.storePlanningObject(hmResourceSchedulingPlanningObjectMain.RecId);
                        }
    
                                break;
    
                }
    
    
    
    
    
    
            }
        }
        if(this.isResourceExternal())
        {
            RelatedAppointments.visible(false);
            Documents.visible(false);
        }
        isInserted=false;
    /*
        if (referral.checked())
        {
            AttachCommandButton.enabled(true);
        }
        else
        {
            AttachCommandButton.enabled(false);
        }
    */
    }

]]></Source>
			</Method>
			<Method>
				<Name>initalizaAppointment</Name>
				<Source><![CDATA[
    public void initalizaAppointment()
    {
       /* switch (element.args().menuItemName())
        {
            case menuitemDisplayStr(HMResourceSchedulingOTAppointment):
            hmResourceSchedulingPlanningObjectMain = HMResourceSchedulingPlanningObject::find(HMPatientEncounterOTScheduling::find(element.args().record().RecId).HMResourceSchedulingPlanningObject);
                break;
    
            case menuitemDisplayStr(HMResourceSchedulingAppointmentWaiting):
            case menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP):
            element.getPatient(HMPatient::find(hmWaitingList.HMPatient));
            HMResourceSchedulingAppointment_PatientName.text(hmWaitingList.UnregPatientName);
            HMResourceSchedulingAppointment_PatientContact.text(hmWaitingList.PatientContact);
            element.storePlanningObject(hmWaitingList.HMResourceSchedulingPlanningObject);
            cheifcomplaintsRecId = hmWaitingList.ChiefComplaint;
    
            if (cheifcomplaintsRecId != conNull())
            {
                for (counter = 1; counter <= conLen(cheifcomplaintsRecId); counter++)
                {
                    element.storeReasons(HMClinicalObservation::find(conPeek(cheifcomplaintsRecId,counter)));
                }
            }
    
                break;
        }
        */
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeServiceTmp</Name>
				<Source><![CDATA[
    public void initializeServiceTmp(RecId _encounterID)
    {
        HMResourceSchedulingAppointmentInvent   hmResourceSchedulingAppointmentInvent;
        Map ItemIdMap = new Map(Types::String,Types::String);
        delete_from HMAppointmentInventTmp where HMAppointmentInventTmp.DefaultOrder == NoYes::Yes;
    
        while select * from hmResourceSchedulingAppointmentInvent
            where hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentForDataFetch.RecId
        {
            if(!ItemIdMap.exists(hmResourceSchedulingAppointmentInvent.InventTable))
            {
                HMAppointmentInventTmp.clear();
                HMAppointmentInventTmp.ItemId = hmResourceSchedulingAppointmentInvent.InventTable;
                HMAppointmentInventTmp.ItemName = HMInventTableClass::showDescription(hmResourceSchedulingAppointmentInvent.InventTable);
                HMAppointmentInventTmp.EcoResProduct = InventTable::find(hmResourceSchedulingAppointmentInvent.InventTable).Product;
                if(InventTable::find(hmResourceSchedulingAppointmentInvent.InventTable).PmfProductType == PmfProductType::BOM)
                {
                    HMAppointmentInventTmp.IsProtcol = NoYes::Yes;
                }
                HMAppointmentInventTmp.EcoResProductName = EcoResProduct::find(InventTable::find(hmResourceSchedulingAppointmentInvent.InventTable).Product).productName();
                HMAppointmentInventTmp.PatientResponsibility = hmResourceSchedulingAppointmentInvent.PatientResponsibility;
                HMAppointmentInventTmp.ProtocolId = hmResourceSchedulingAppointmentInvent.Protocol;
                HMAppointmentInventTmp.ServiceDeclinedReason = hmResourceSchedulingAppointmentInvent.ServiceSubStatus;
                HMAppointmentInventTmp.HMServiceStatus = hmResourceSchedulingAppointmentInvent.HMServiceStatus;
                HMAppointmentInventTmp.ProtocolName = hmResourceSchedulingAppointmentInvent.protocolItemDescription();
                HMAppointmentInventTmp.RefRecId = hmResourceSchedulingAppointmentInvent.RecId;
                HMAppointmentInventTmp.AppointmentRecId = hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId;
                HMAppointmentInventTmp.appointmentTableId = tableNum(hmResourceSchedulingAppointmentInvent);
                HMAppointmentInventTmp.ResourceDescription = HMResourceSchedulingAppointment::find(HMAppointmentInventTmp.AppointmentRecId).getAppointmentResource();
                HMAppointmentInventTmp.insert();
                ItemIdMap.insert(HMAppointmentInventTmp.ItemId,HMAppointmentInventTmp.ItemId);
            }
        }
        HMAppointmentInventTmp_ds.executeQuery();
        this.addProtocolServicesToDetailGrid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecurrenceRecordGen</Name>
				<Source><![CDATA[
    public void insertRecurrenceRecordGen(HMResourceSchedulingAppointmentTmp _HMResourceSchedulingAppointmentTmp,RecId _treat = 0)
    {
        HMResourceSchedulingAppointment         hmResourceSchedulingAppointmentCheck;
        int priorityNumber;
        utcDateTime appointmentEnd;
        container conReason;
           select count(recId) from hmResourceSchedulingAppointmentCheck
                    where hmResourceSchedulingAppointmentCheck.AppointmentDate == _HMResourceSchedulingAppointmentTmp.AppointmentDate
                    && hmResourceSchedulingAppointmentCheck.AppointmentTime == _HMResourceSchedulingAppointmentTmp.AppointmentTime
                    && hmResourceSchedulingAppointmentCheck.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                    && hmResourceSchedulingAppointmentCheck.HMAppointmentType != HMAppointmentType::Admission
                    && hmResourceSchedulingAppointmentCheck.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId;
    
                    priorityNumber = int642int(hmResourceSchedulingAppointmentCheck.RecId) + 1;
    
    
                if(openMode == HMAppointmentFormOpen::Search && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                {
                    hmResourceSchedulingAppointmentNew.IsOverBooked = hmResourceSchedulingOpenTimeSlotsTmp.IsOverBooked;
                }
                else
                {
                    hmResourceSchedulingAppointmentNew.IsOverBooked = NoYes::No;
                }
    
                hmResourceSchedulingAppointmentNew.HMPatient=HMPatientRecId;
                hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode = HMScheduleTypeRecId;
                hmResourceSchedulingAppointmentNew.HMResourceSchedulingPlanningObject = hmResourceSchedulingPlanningObjectMain.RecId;
                hmResourceSchedulingAppointmentNew.AppointmentDate = _HMResourceSchedulingAppointmentTmp.AppointmentDate;//AppointmentDate.dateValue();
                hmResourceSchedulingAppointmentNew.AppointmentTime = _HMResourceSchedulingAppointmentTmp.AppointmentTime;
                hmResourceSchedulingAppointmentNew.HMRecurrentApptDetail = recurrenceRecid;
                hmResourceSchedulingAppointmentNew.AppointmentNumber = appointmentClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(ouRecId));
    
                hmResourceSchedulingAppointmentNew.BOMVersion   = BomVersionId;
        // add for appoiontment channels
        hmResourceSchedulingAppointmentNew.HMBookingOrigin                 = hmParameters.HMBookingOrigin;
        if (HMResourceSchedulingAppointment_IsSpecificConsultant.checked())
        {
           hmResourceSchedulingAppointmentNew.IsSpecificConsultant                 = NoYes::Yes;
        }
        else
        {
            hmResourceSchedulingAppointmentNew.IsSpecificConsultant                 = NoYes::No;
        }
    
        if (HMResourceSchedulingAppointment_RescheduleWithoutConfirmation.checked())
        {
            hmResourceSchedulingAppointmentNew.RescheduleWithoutConfirmation = NoYes::Yes;
        }
        else
        {
            hmResourceSchedulingAppointmentNew.RescheduleWithoutConfirmation = NoYes::No;
        }
        if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                {
                    appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_HMResourceSchedulingAppointmentTmp.AppointmentDate,_HMResourceSchedulingAppointmentTmp.AppointmentTime),element.getApptDuration());
                    hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                    hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                    conReason = element.getReasonFromMap();
                    hmResourceSchedulingAppointmentNew.ChiefComplaint = conReason;
                }
                else if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                {
                    appointmentEnd = DateTimeUtil::addDays(DateTimeUtil::newDateTime(_HMResourceSchedulingAppointmentTmp.AppointmentDate,_HMResourceSchedulingAppointmentTmp.AppointmentTime),element.getApptDuration());
                    hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                    hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                    hmResourceSchedulingAppointmentNew.HMTreatmentClassification = _treat;
                }
    
                hmResourceSchedulingAppointmentNew.AppointmentStatus=HMResourceSchedulingAppointmentStatus::Open;
                hmResourceSchedulingAppointmentNew.PriorityNumber=priorityNumber;
                hmResourceSchedulingAppointmentNew.Notes = Notes.text();
    
                    hmResourceSchedulingAppointmentNew.insert();
                    appointmentClass.useNewNumSeqForAppointmentNum();
                    isInserted = true;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResourceExternal</Name>
				<Source><![CDATA[
    private boolean isResourceExternal()
    {
        HMResourceMaster hmResourceMasterLocal;
        if(hmResourceSchedulingPlanningObjectMain)
        {
            select VendorType from hmResourceMasterLocal
            where hmResourceMasterLocal.recid == hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
            if(hmResourceMasterLocal.VendorType  == HMVendorType::External)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidRecurrence</Name>
				<Source><![CDATA[
    public boolean isValidRecurrence(TransDate _appDate,HMTime _apptime)
    {
        boolean ret;
        HMResourceSchedulingPublicHoliday               hmResourceSchedulingPublicHoliday;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
        int     day;
        int     month;
    
    
        boolean     check=false;
        ret = true;
    
            if(_appDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = false;
            }
    
    
        if(ret && (hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient || hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Physiotherapy))
        {
            if (ret)
            {
                ret = element.checkPatientRecurrenceAppointment(_appDate,_apptime);
            }
    
            //to check appointment of the physician at same time
            if(ret)
            {
                ret = element.checkPhysicionrecurrenceAppointment(_appDate,_apptime);
            }
    
            //to check overlapping of physician
            if(ret)
            {
                ret = element.checkPatientTimeRecurrenceOverlaping(_appDate,_apptime);
            }
    
            //to check overlapping of the physician
            if(ret)
            {
                ret = element.checkPhysicionTimeRecurrenceOverLaping(_appDate,_apptime);
            }
        }
    
        if(ret && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
        {
            ret = element.checkPatientAdmissionRecAppointment(_appDate,_apptime); //to check appointment of the patient at same time
        }
        if(ret)
        {
           ret = element.checkAllowedOfflineAppointmentsParameter( _appDate,_apptime);
        }
        if(ret)
        {
            if(hmResourceSchedulingPlanningObjectMain.ScheduleOnPublicHoliday ==NoYes::No)
            {
                day = dayOfMth(_appDate);
                month = mthOfYr(_appDate);
    
                select count(recId) from hmResourceSchedulingPublicHoliday
                    where month==hmResourceSchedulingPublicHoliday.Month
                    && (day >= hmResourceSchedulingPublicHoliday.FromDay && day <= hmResourceSchedulingPublicHoliday.ToDay);
    
                if(hmResourceSchedulingPublicHoliday.RecId > 0)
                {
    
                        ret = false;
    
                }
            }
    
            if(ret)
            {
                select * from hmResourceSchedulingWeekPlan
                    join * from hmResourceSchedulingWeekDayPlan
                    join * from hmResourceSchedulingWeekPlanToCalender
                    where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject==hmResourceSchedulingPlanningObjectMain.RecId
                    && hmResourceSchedulingWeekPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
                    && hmResourceSchedulingWeekPlan.RecId==hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                    && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(_appDate)
                    && hmResourceSchedulingWeekPlanToCalender.YearNo == year(_appDate)
                    && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(_appDate);
    
    
                if(hmResourceSchedulingWeekPlan.RecId == 0)
                {
    
                    ret = false;
    
                }
                else
                {
                    check=true;
                }
            }
    
            if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
            {
                select count(recId) from hmResourceSchedulingDayPlanItem
                    join * from hmResourceSchedulingDayPlan
                    where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                    && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                    && (_apptime >= hmResourceSchedulingDayPlanItem.StartTime && _apptime <= hmResourceSchedulingDayPlanItem.EndTime);
    
                if(hmResourceSchedulingDayPlanItem.RecId < 1)
                {
                    // show confirmation for VIP patient
                    if (HMPatient::find(HMPatientRecId).IsVIP)
                    {
    
                            ret = true;
    
                    }
                    else
                    {
    
                        ret = false;
    
                    }
    
                }
            }
    
            if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
            {
                select count(recId) from hmResourceSchedulingDayPlan
                    where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                    && (_apptime >= hmResourceSchedulingDayPlan.DayStartTime && _apptime <= hmResourceSchedulingDayPlan.DayEndTime);
    
                if(hmResourceSchedulingDayPlan.RecId < 1)
                {
    
                        ret = false;
    
                }
            }
    
            if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
            {
                select count(recId) from hmResourceSchedulingDayPlanItem
                    join * from hmResourceSchedulingDayPlan
                    where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                    && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId;
    
    
                if(hmResourceSchedulingDayPlanItem.RecId < 1)
                {
                       ret = false;
    
                }
            }
        }
        if(ret)
        {
            ret = element.checkIfAssetAlreadyRecurrBook(_appDate,_apptime);
        }
        if(ret)
        {
            ret = element.checkIfStaffRecBusy(_appDate,_apptime);
        }
        if (ret && ismodified)
        {
            ret = element.checkIFRecurrenceExist(_appDate,_apptime);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInsuranceDetails</Name>
				<Source><![CDATA[
    public void loadInsuranceDetails()
    {
        str bookingNotesLocal;
    
        HMPatientInsurance                      hmPatientInsurance = HMPatientInsurance::find(hmResourceSchedulingAppointmentForDataFetch.HMPatientInsurance);
        HMInsuranceContractClassOrPlans         plan = HMInsuranceContractClassOrPlans::find(hmPatientInsurance.HMInsuranceContractClassOrPlans);
        HMInsuranceCarrier                      carrier;
        HMInsuranceContract                     contract;
        HMInsuranceContractCarrierCombination   combination;
    
        //BookingNotes.text('');
        InsuranceName.text('');
        InsurancePhone.text('');
        InsuranceContract.text('');
        InsuranceClass.text('');
        InsuranceExpirationDate.dateValue(dateNull());
    
        if (plan)
        {
            contract    = HMInsuranceContract::find(plan.HMInsuranceContract);
            combination = HMInsuranceContractCarrierCombination::find(contract.HMInsuranceContractCarrierCombination);
            carrier     = HMInsuranceCarrier::find(combination.HMInsuranceCarrier);
    
            InsuranceCode.text(carrier.Code);
            InsuranceName.text(carrier.name);
            InsurancePhone.text(carrier.phone());
            InsuranceContract.text(contract.HMContractName);
            InsuranceClass.text(plan.HMContractClassId);
            InsuranceExpirationDate.dateValue(hmPatientInsurance.getPatientIdentificationExpiryDate());
    
            //BookingNotes.text(bookingNotesLocal);
        }
        PreAuthValidDate.dateValue(hmResourceSchedulingAppointmentForDataFetch.PreAuthValidDate);
        PreAuthorizationStatus.selection(hmResourceSchedulingAppointmentForDataFetch.PreAuthorizationStatus);
        PreAuthorizationNumber.text(hmResourceSchedulingAppointmentForDataFetch.PreAuthorizationNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRelatedAppointments</Name>
				<Source><![CDATA[
    private void loadRelatedAppointments()
    {
        HMResourceSchedulingAppointment HMResourceSchedulingAppointmentForRelatedAppt;
    
        while select * from HMResourceSchedulingAppointmentForRelatedAppt
            where HMResourceSchedulingAppointmentForRelatedAppt.HMPatientVisit == hmResourceSchedulingAppointmentForDataFetch.HMPatientVisit
            && HMResourceSchedulingAppointmentForRelatedAppt.HMPatientVisit != 0
            && HMResourceSchedulingAppointmentForRelatedAppt.RecId != hmResourceSchedulingAppointmentForDataFetch.RecId
            && HMResourceSchedulingAppointmentForRelatedAppt.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
        {
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_ds.create();
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.Date = HMResourceSchedulingAppointmentForRelatedAppt.AppointmentDate;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.Time = HMResourceSchedulingAppointmentForRelatedAppt.AppointmentTime;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.HMResourceSchedulingPlanningObject = HMResourceSchedulingAppointmentForRelatedAppt.HMResourceSchedulingPlanningObject;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.HMResourceSchedulingTypeCode = HMResourceSchedulingAppointmentForRelatedAppt.HMResourceSchedulingTypeCode;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.AppointmentRecId = HMResourceSchedulingAppointmentForRelatedAppt.RecId;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.ArrivalTime = HMResourceSchedulingAppointmentForRelatedAppt.ArrivalTime;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.IsHotspot = HMResourceSchedulingAppointmentForRelatedAppt.IsHotspot;
            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.insert();
        }
    
        HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeBufferCopy</Name>
				<Source><![CDATA[
    public void makeBufferCopy(HMResourceSchedulingAppointmentTmp _local)
    {
    
            select forUpdate HMResourceSchedulingAppointmentTmpLocalChecking where _local.PriorityNumber == HMResourceSchedulingAppointmentTmpLocalChecking.PriorityNumber;
    
            HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentDate = _local.AppointmentDate;
    
            HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentTime = _local.AppointmentTime;
            HMResourceSchedulingAppointmentTmpLocalChecking.update();
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAssets</Name>
				<Source><![CDATA[
    public void markAssets()
    {
        HMResourceSchedulingAppointmentAssetTbl hmResourceSchedulingAppointmentAssetTbl ;
        AssetTable                              assetTableLocal;
    
        while select * from hmResourceSchedulingAppointmentAssetTbl
            where hmResourceSchedulingAppointmentAssetTbl.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentForDataFetch.RecId
        {
            assetTableLocal = AssetTable_ds.getFirst(false);
            while (assetTableLocal)
            {
                if(assetTableLocal.AssetId == hmResourceSchedulingAppointmentAssetTbl.AssetTable)
                {
                    AssetTable_ds.markRecord(assetTableLocal,true);
                }
                assetTableLocal = AssetTable_ds.getNext();
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>markClinicStaff</Name>
				<Source><![CDATA[
    public void markClinicStaff()
    {
        HMResourceSchedulingAppointmentStaffMemb hmResourceSchedulingAppointmentStaffMemb;
        HMClinicStaff                              hmStaffNursingUnitLocal;
    
        while select * from hmResourceSchedulingAppointmentStaffMemb
            where hmResourceSchedulingAppointmentStaffMemb.HMResourceSchedulingAppointment == hmResourceSchedulingAppointmentForDataFetch.RecId
        {
            hmStaffNursingUnitLocal = HMClinicStaff2_ds.getFirst(false);
            while (hmStaffNursingUnitLocal)
            {
                if(hmStaffNursingUnitLocal.RecId == hmResourceSchedulingAppointmentStaffMemb.HMClinicStaff)
                {
                    HMClinicStaff2_ds.markRecord(hmStaffNursingUnitLocal,true);
                }
                hmStaffNursingUnitLocal = HMClinicStaff2_ds.getNext();
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEnabled</Name>
				<Source><![CDATA[
    public void newEnabled()
    {
        boolean flag=true;
    
        if(Patient.valueStr() == "")
        {
            flag=true;
        }
    
        if(PlanningObject.valueStr() == "")
        {
            flag=false;
        }
    
        if(AppointmentDate.valueStr() == "")
        {
           flag=false;
        }
        if(element.args().menuItemName() != menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv)
        && element.args().menuItemName() != menuitemDisplayStr(HMResourceSchedulingAppointmentEditInvPy))
        {
            if(ScheduleType.valueStr() == "")
            {
                flag=false;
            }
            if(AppointmentTime.valueStr() == "")
            {
               flag=false;
            }
        }
    
        OKButton.enabled(flag);
        //TODO: Save.enabled(true);
        Save.enabled(false);
        SaveButton.enabled(flag);
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientPlanningObject</Name>
				<Source><![CDATA[
    public HMResourceSchedulingPlanningObject patientPlanningObject(recId _patientRecId)
    {
        HMResourceSchedulingPlanningObject       hmResourceSchedulingPlanningObject;
        HMPatient                                hmPatient;
    
        select * from hmPatient where hmPatient.recId==_patientRecId;
    
        if(hmPatient.HMClinicStaff)
        {
            select * from HMResourceSchedulingPlanningObject where
            HMResourceSchedulingPlanningObject.HMClinicStaff==hmPatient.HMClinicStaff
            && HMResourceSchedulingPlanningObject.PlanningObjectStatus == AllowanceStatus::Active
            && (HMResourceSchedulingPlanningObject.StartDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingPlanningObject.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }
    
        return HMResourceSchedulingPlanningObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurranceSchedulerWrite</Name>
				<Source><![CDATA[
    public void recurranceSchedulerWrite()
    {
    
            recurrenceAppointmentDetail.insert();
            recurrenceRecid = recurrenceAppointmentDetail.RecId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecurrenceAppointmentScheduling</Name>
				<Source><![CDATA[
    public void RecurrenceAppointmentScheduling(List _appointmentDateList)
    {
        HMResourceSchedulingOpenTimeSlotsSearch     hmResourceSchedulingOpenTimeSlotsSearch = new HMResourceSchedulingOpenTimeSlotsSearch();
        boolean isOverBooking;
        int appointNumber;
        HMTime  appointmentTimes;
        listEnum = _appointmentDateList.getEnumerator();
        appointmentTimes = AppointmentTime.value();
        appointNumber = 1;
    
        if (hmResourceSchedulingPlanningObjectMain.OverbookAllowed == false)
        {
           isOverBooking = hmResourceSchedulingOpenTimeSlotsSearch.checkOverBooked(_appointmentDateList,appointmentTimes,hmResourceSchedulingPlanningObjectMain.RecId);
        }
    
        if (!isOverBooking)
        {
            while(listEnum.moveNext())
            {
                if (hmResourceSchedulingPlanningObjectMain.ScheduleOnPublicHoliday == false)
                {
                    if (hmResourceSchedulingOpenTimeSlotsSearch.checkPublicHoliday(listEnum.current()))
                    {
                        element.WriteRecurrenceAppointmentsTmp(listEnum.current(),appointNumber,NoYes::No);
                        recurScheduleApptCounter++;
                        appointNumber++;
                        //warning("@MAZ7073" + " "+ date2StrUsr(listEnum.current(),0)  + " " + "@MAZ7074");
                    }
                    else
                    {
                        element.WriteRecurrenceAppointmentsTmp(listEnum.current(),appointNumber,NoYes::Yes);
                        recurScheduleApptCounter++;
                        appointNumber++;
                    }
                }
                else
                {
                    element.WriteRecurrenceAppointmentsTmp(listEnum.current(),appointNumber,NoYes::Yes);
                    recurScheduleApptCounter++;
                    appointNumber++;
                }
            }
        }
    
        else
        {
             element.WriteRecurrenceAppointmentsTmp(listEnum.current(),appointNumber,NoYes::No);
                    recurScheduleApptCounter++;
                    appointNumber++;
    
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecurrenceWeekchecking</Name>
				<Source><![CDATA[
    public Integer RecurrenceWeekchecking(int recurrenceDays)
    {
    
        if (recurrenceDays == 1)
        {
            recurrenceDays = 0;
        }
        else
        {
            recurrenceDays--;
        }
    
        return recurrenceDays;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAppointmentOrder</Name>
				<Source><![CDATA[
    public void refreshAppointmentOrder(HMAppointmentInventTmp _hmAppointmentInventTmp)
    {
        CustTable           custTable;
        boolean             cashSales = true;
        boolean             hasPatientResp = false;
        HMInsuranceContractClassOrPlans         HMInsuranceContractClassOrPlans;
        HMInsuranceContractClassDeductible      HMInsuranceContractClassDeductible;
    
        container                               pricecon,discCon;
        HMPatientInsurance                      HMPatientInsurance;
        real                                    amount,dsc1,dsc2,deductible;
        //boolean complementExtrasCovered = HMPatientComplement::extrasCoveredByClient(HMPatientRecId,ClientAccount.text());
        ttsBegin;
        delete_from HMAppointmentInventTmp;
        ttsCommit;
        select cashSales from custTable where custTable.AccountNum == ClientAccount.text();
        cashSales = custTable.CashSales;
        while select * from _hmAppointmentInventTmp
        {
            select * from  HMPatientInsurance where patientInsuranceRecId == HMPatientInsurance.RecId
            join PriceDiscAdmTable,RecId from HMInsuranceContractClassOrPlans
            where HMInsuranceContractClassOrPlans.RecId == HMPatientInsurance.HMInsuranceContractClassOrPlans
            && HMInsuranceContractClassOrPlans.HMContractClassStatus == HMContractClassStatus::Active;
    
            amount = 0;
            deductible=0;
            priceCon = HMPriceDiscAdmClass::findPriceByJournalNum(_hmAppointmentInventTmp.ItemId,
                                                                                HMInsuranceContractClassOrPlans.PriceDiscAdmTable);
            if(conPeek(priceCon,2) == '')
            {
                amount = conPeek(priceCon,1) * 1;
    
            }
            discCon = HMPriceDiscAdmClass::findDiscByJournalNum(_hmAppointmentInventTmp.ItemId,HMInsuranceContractClassOrPlans.PriceDiscAdmTable);
            if(conPeek(discCon,3) == '')
            {
                dsc1 = conPeek(discCon,1);
                dsc2 = conPeek(discCon,2);
                if(dsc1 > 0)
                {
                    amount = amount - (amount * dsc1/100);
                }
                if(dsc2 > 0)
                {
                    amount = amount - (amount * dsc2/100);
                }
                //hmCaseTrans.DiscPercent1 = dsc1;
                //hmCaseTrans.DiscPercent2 = dsc2;
            }
    
    
            select * from  HMPatientInsurance where patientInsuranceRecId == HMPatientInsurance.RecId
            join PriceDiscAdmTable,RecId from HMInsuranceContractClassOrPlans
            where HMInsuranceContractClassOrPlans.RecId == HMPatientInsurance.HMInsuranceContractClassOrPlans
            && HMInsuranceContractClassOrPlans.HMContractClassStatus == HMContractClassStatus::Active;
    
            select HMDeductibleMainMemberPercentage,HMDeductibleMainMemberAmount from HMInsuranceContractClassDeductible
            where HMInsuranceContractClassDeductible.HMInsuranceContractClassOrPlans == HMInsuranceContractClassOrPlans.RecId;
    
            if (HMInsuranceContractClassDeductible)
            {
                if (HMInsuranceContractClassDeductible.HMDeductibleMainMemberPercentage > 0)
                {
                    deductible = amount * (HMInsuranceContractClassDeductible.HMDeductibleMainMemberPercentage/100);
                }
                else if (HMInsuranceContractClassDeductible.HMDeductibleMainMemberAmount > 0)
                {
                    deductible = HMInsuranceContractClassDeductible.HMDeductibleMainMemberAmount;
                }
            }
    
            HMAppointmentInventTmp.clear();
            HMAppointmentInventTmp.ItemId = _hmAppointmentInventTmp.ItemId;
            HMAppointmentInventTmp.ItemName = _hmAppointmentInventTmp.ItemName;
            HMAppointmentInventTmp.EcoResProduct = _hmAppointmentInventTmp.EcoResProduct;
            HMAppointmentInventTmp.EcoResProductName = _hmAppointmentInventTmp.EcoResProductName;
            HMAppointmentInventTmp.DefaultOrder = _hmAppointmentInventTmp.DefaultOrder;
            HMAppointmentInventTmp.ProtocolId = _hmAppointmentInventTmp.ProtocolId;
            HMAppointmentInventTmp.ProtocolName = _hmAppointmentInventTmp.setProtocolDescription(ClientAccount.text());
            HMAppointmentInventTmp.CoPay = deductible;
            HMAppointmentInventTmp.Price = amount;
            if(InventTable::find(_hmAppointmentInventTmp.ItemId).PmfProductType == PmfProductType::BOM)
            {
                HMAppointmentInventTmp.IsProtcol = NoYes::Yes;
            }
    
            if(_hmAppointmentInventTmp.RefRecId)
            {
                HMAppointmentInventTmp.PatientResponsibility = _hmAppointmentInventTmp.PatientResponsibility;
                HMAppointmentInventTmp.ServiceDeclinedReason = _hmAppointmentInventTmp.ServiceDeclinedReason;
                HMAppointmentInventTmp.HMServiceStatus = _hmAppointmentInventTmp.HMServiceStatus;
            }
          /*  else
            {
                HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Client;
                if(HMInventTable::findByItemId(_hmAppointmentInventTmp.ItemId).RAMQ == NoYes::Yes)
                {
                    HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Government;
                }
                else if (cashSales && HMAppointmentInventTmp.PatientResponsibility != HMPatientPaymentResponsibility::Government)
                {
                    HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
                }
    
                HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
            }*/
    
            if (patientInsuranceRecId)
            {
                HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Client;
            }
            else
            {
                HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
            }
            if(HMAppointmentInventTmp.PatientResponsibility == HMPatientPaymentResponsibility::Patient)
            {
                HMAppointmentInventTmp.Price = InventTable::find(HMAppointmentInventTmp.ItemId).salesPcsPrice();
                HMAppointmentInventTmp.CoPay = 0;
            }
            HMAppointmentInventTmp.RefRecId = _hmAppointmentInventTmp.RefRecId;
            if(HMAppointmentInventTmp.PatientResponsibility == HMPatientPaymentResponsibility::Patient)
            {
                hasPatientResp = true;
            }
            HMAppointmentInventTmp.insert();
        }
        //if(!CreditCardTokenRequired.checked() && hasPatientResp)
        //{
            //info("@MAZ12302");
        //}
        HMAppointmentInventTmp_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshGrid</Name>
				<Source><![CDATA[
    public void refreshGrid()
    {
        HMResourceSchedulingAppointmentTmp_DS.executeQuery();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReplicateHMAppointmentInventTmp</Name>
				<Source><![CDATA[
    public void ReplicateHMAppointmentInventTmp()
    {
        HMAppointmentInventTmp hmAppointmentInventTmplocal;
        ttsBegin;
        delete_from hmAppointmentInventTmpReplica;
        ttsCommit;
        hmAppointmentInventTmplocal = HMAppointmentInventTmp_ds.getFirst(true);
    
        while select * from HMAppointmentInventTmp
        {
            hmAppointmentInventTmpReplica.ItemId            = HMAppointmentInventTmp.ItemId;
            hmAppointmentInventTmpReplica.ItemName          = HMInventTableClass::showDescription(HMAppointmentInventTmp.ItemId);
            hmAppointmentInventTmpReplica.EcoResProduct     = InventTable::find(HMAppointmentInventTmp.ItemId).Product;
            hmAppointmentInventTmpReplica.EcoResProductName = EcoResProduct::find(InventTable::find(HMAppointmentInventTmp.ItemId).Product).productName();
            hmAppointmentInventTmpReplica.DefaultOrder      = HMAppointmentInventTmp.DefaultOrder;
            hmAppointmentInventTmpReplica.RefRecId          = HMAppointmentInventTmp.RefRecId;
            hmAppointmentInventTmpReplica.PatientResponsibility = HMAppointmentInventTmp.PatientResponsibility;
            hmAppointmentInventTmpReplica.ProtocolId        = HMAppointmentInventTmp.ProtocolId;
            hmAppointmentInventTmpReplica.HMServiceStatus   = HMAppointmentInventTmp.HMServiceStatus;
            hmAppointmentInventTmpReplica.ServiceDeclinedReason = HMAppointmentInventTmp.ServiceDeclinedReason;
            hmAppointmentInventTmpReplica.insert();
    
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReplicateHMAppointmentRecurrence</Name>
				<Source><![CDATA[
    public HMResourceSchedulingAppointmentTmp ReplicateHMAppointmentRecurrence()
    {
        HMResourceSchedulingAppointmentTmp HMResourceSchedulingAppointmentTmplocal;
    
    
        if(AppointmentDate.dateValue() != dateNull() && AppointmentTime.value() != -1 )
        {
            HMResourceSchedulingAppointmentTmplocal.AppointmentDate = AppointmentDate.dateValue();
            HMResourceSchedulingAppointmentTmplocal.AppointmentTime = AppointmentTime.value();
    
            HMResourceSchedulingAppointmentTmplocal.insert();
        }
        return  HMResourceSchedulingAppointmentTmplocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>RescheduleWithoutValidation</Name>
				<Source><![CDATA[
    public boolean RescheduleWithoutValidation()
    {
        DialogButton  dialog;
        boolean       ret = true;
    
        if(openMode == HMAppointmentFormOpen::Edit)
        {
            if(RescheduleConfirmation)
            {
                ret = true;
            }
            else
            {
                dialog = Box::yesNo("@MAZ9252",DialogButton::Yes);
                if(DialogButton::Yes == dialog )
                {
                    ret = true;
                }
                else
                {
                    ret  =false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetForRecurrence</Name>
				<Source><![CDATA[
    public void resetForRecurrence(boolean ret = false)
    {
        IsRecurrence = false;
        recurrenceAppointmentDetail.clear();
        HMResourceSchedulingAppointmentTmp.clear();
        delete_from HMResourceSchedulingAppointmentTmp;
        RecurrDelete.enabled(false);
        Reset.enabled(false);
        NewRecurr.enabled(ret);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetIfEncounterNotFound</Name>
				<Source><![CDATA[
    public void resetIfEncounterNotFound()
    {
        encounterRecId = 0;
        hmPatientRecId = 0;
        Patient.text('');
        Patient.allowEdit(true);
        HMResourceSchedulingAppointment_PatientName.allowEdit(true);
        HMResourceSchedulingAppointment_PatientContact.allowEdit(true);
        OKButton.enabled(false);
        Save.enabled(false);
        element.initializeServiceTmp(encounterRecId);
        AssetTable_ds.executeQuery();
        HMStaffNursingUnit_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        str parmTemp;
        boolean isFromChart;
        String100                       schedule;
        HMResourceSchedulingTypeCode  HMResourceSchedulingTypeCodeLocal;
        List    list = new List(Types::String);
        ListEnumerator enumer;
        int counter = 0;
        int containerCount = 1;
        HMWaitingList hmWaitingList;
        HMPatient   hmPatientLocal;
        boolean openSlots = false;
        int64   scheduleRecId,patientRecId;
        HMPatient       hmPatient;
        object formRun;
        HMAppointmentReserveSLot    hmAppointmentReserveSLot;
        HMResourceSchedulingAppointment apptReserve;
    
    
        OKButton.enabled(false);
        Save.enabled(false);
        /* TODO: (Code Upgrade) [Action Pane Rule] Please consider moving all references to the form task override method and remove the control: AttachCommandButton */
        if(element.args().menuItemName() != menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv))
        {
    
            if(openMode==HMAppointmentFormOpen::List)
            {
                AppointmentDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
                OKButton.enabled(false);
                Save.enabled(false);
                element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
    
            }
            else if(openMode==HMAppointmentFormOpen::Detail)
            {
    
                HmResourceSchedulingAttachmentTmpTable_ds.allowCreate(false);
                //ButtonGroup_attachment.allowEdit(false);
                //AttachCommandButton.visible(false);
                Attachment.visible(true);
                parmTemp = element.args().parm();
                list =  strSplit(parmTemp,',');
    
                enumer = list.getEnumerator();
                while (enumer.moveNext())
                {
                    counter++;
                }
                enumer = list.getEnumerator();
                enumer.moveNext();
                AppointmentDate.dateValue(str2Date(enumer.current(),213));
                AppointmentDate.allowEdit(false);
                enumer.moveNext();
                AppointmentTime.value(str2time(enumer.current()));
                AppointmentTime.allowEdit(false);
                //SendEmailTo.selection(HMAppointmentSendEmailTo::Client);
                if(counter>2 && counter <= 4)
                {
                    isSchedule = true;
                    openSlots = true;
                    enumer.moveNext();
                    schedule   = enumer.current();
                    scheduleRecId = str2int64(schedule);
                    HMResourceSchedulingTypeCodeLocal = HMResourceSchedulingTypeCode::find(scheduleRecId);
                    if (HMResourceSchedulingTypeCodeLocal)
                    {
                        element.storeScheduleType(scheduleRecId);
                        ScheduleType.text(HMResourceSchedulingTypeCodeLocal.Description);
    
                        if(HMResourceSchedulingTypeCodeLocal.AppointmentSubType == HMAppointmentSubType::Pseudo)
                        {
                            scheduleTypePseudoRecId = scheduleRecId;
                            ScheduleType.allowEdit(true);
                        }
                        else
                        {
                            ScheduleType.allowEdit(false);
                        }
    
                        hmAppointmentReserveSLot = hmAppointmentReserveSLot::findByRange(AppointmentDAte.dateValue(), AppointmentDAte.dateValue(), AppointmentTime.value(), HMResourceSchedulingHelper::calculateApptEndTime(HMResourceSchedulingTypeCodeLocal.RecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster, AppointmentDAte.dateValue(), AppointmentTime.value()), hmResourceSchedulingPlanningObjectMain.HMResourceMaster, HMAppointmentSlotReserveBlock::Reserve);
    
                        ClientAccount.text(CustTable::findRecId(hmAppointmentReserveSLot.Client).AccountNum);
                        if(ClientAccount.text())
                        {
                            ClientAccount.allowEdit(false);
                            this.updateClientDetails(ClientAccount.text());
                        }
                        element.storeOrganizationalUnitRecId(HMResourceSchedulingHelper::getSlotReserveSubClinic(AppointmentDAte.dateValue(), AppointmentTime.value(), HMResourceSchedulingHelper::calculateApptEndTime(HMResourceSchedulingTypeCodeLocal.RecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster, AppointmentDAte.dateValue(), AppointmentTime.value()),hmResourceSchedulingPlanningObjectMain.HMResourceMaster));
    
                        if(hmAppointmentReserveSLot)
                        {
                            apptReserve = HMResourceSchedulingAppointment::findByReservedSlot(hmAppointmentReserveSLot.HMResourceSchedulingAppointment);
    
                            Requestor.text(apptReserve.RequestorContactPerson);
                            Requestor.modified();
                            Notes.text(apptReserve.Notes);
                        }
                    }
                    else
                    {
                        isSchedule = false;
                    }
                }
    
                formRun = element.args().caller();
                if(formHasMethod(formRun,identifierStr(getArrivalTime)))
                {
                    ArrivalTime.value(element.args().caller().getArrivalTime());
                }
    
                if (counter == 4)
                {
                    enumer.moveNext();
                    patientRecId = enumer.current();
                    HMPatientRecId  = patientRecId;
                    HMPatientLocal = HMPatient::find(patientRecId);
                    Patient.text(HMPatientLocal.patientName());
                    element.getPatient(HMPatientLocal);
    
                    element.fillFromSearch();
                }
    
                if(strContains(element.args().parm(),'FromInPatient'))
                {
                    MainInstruction.text("@MAZ3116");
                    element.design().caption("@MAZ3116");
    
    
                    OKButton.text('Create');
                    PlanningObject.visible(false);
                    AppointmentTime.label('Time');
                    ReasonGroup.visible(false);
                    TreatmentClassification.visible(true);
                    caseType = HMCaseType ::InPatient;
                }
                element.newEnabled();
                element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
                Resource.allowEdit(false);
                if(!openSlots)
                {
                 HMScheduleTypeRecId = hmResourceSchedulingPlanningObjectMain.DefaultScheduleType;
                ScheduleType.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
                }
            }
            else if(openMode==HMAppointmentFormOpen::Search)
            {
                AppointmentDate.dateValue(hmResourceSchedulingOpenTimeSlotsTmp.Date);
                AppointmentTime.value(hmResourceSchedulingOpenTimeSlotsTmp.Time);
                HMScheduleTypeRecId=hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode;
                ScheduleType.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
                OKButton.enabled(false);
                Save.enabled(false);
                element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
            }
            else if(openMode==HMAppointmentFormOpen::PatientSearch)
            {
                AppointmentDate.dateValue(hmResourceSchedulingOpenTimeSlotsTmp.Date);
                AppointmentTime.value(hmResourceSchedulingOpenTimeSlotsTmp.Time);
                HMScheduleTypeRecId=hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode;
                ScheduleType.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
                Patient.allowEdit(false);
                OKButton.enabled(true);
                //TODO: Save.enabled(true);
                Save.enabled(false);
                if(searchform)
                 element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
            }
            else if(openMode==HMAppointmentFormOpen::Edit)
            {
    
                /*AttachCommandButton.enabled(true);
                Attachment.enabled(false);
                Attachment.visible(false);
                */
                PlanningObject.allowEdit(true);
                AppointmentDate.dateValue(hmResourceSchedulingAppointmentForDataFetch.AppointmentDate);
                AppointmentTime.value(hmResourceSchedulingAppointmentForDataFetch.AppointmentTime);
                HMScheduleTypeRecId=hmResourceSchedulingAppointmentForDataFetch.HMResourceSchedulingTypeCode;
                ScheduleType.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
                ScheduleType.allowEdit(false);
    
    
                ArrivalTime.value(hmResourceSchedulingAppointmentForDataFetch.ArrivalTime);
    
                confirmationstatus.selection(hmResourceSchedulingAppointmentForDataFetch.HMConfirmationStatus);
                Notes.text(hmResourceSchedulingAppointmentForDataFetch.Notes);
                HMPatientRecId = hmResourceSchedulingAppointmentForDataFetch.HMPatient;
                hmPatient = HMPatient::find(HMPatientRecId);
    
                patientChartExist = hmPatient.PhysicalChartNumber != '';
    
    
                Patient.text(hmPatient.PatientName());
                MRN.text(hmPatient.getMRN());
                Gender.text(enum2str(hmPatient.Gender));
                Age.text(hmPatient.patientAgeNew());
                PhysicalFileNumber.text(hmPatient.PhysicalChartNumber);
                PatientDOB.dateValue(hmPatient.patientBirthDate());
                element.updatePatientEmail(hmPatient.patientPrimaryEmail());
                ClientAccount.text(hmResourceSchedulingAppointmentForDataFetch.Client);
                ClientAccount.allowEdit(false);
                //CriticalMedInfo.text(hmPatient.CriticalMedicalInformation);
                CriticalMedInfo.text(hmResourceSchedulingAppointmentForDataFetch.CriticalMedicalInformation);
                BookingNotes.text(hmResourceSchedulingAppointmentForDataFetch.BookingNotes);
                 //CriticalMedInfo.text(apptReserve.BookingNotes);
                this.updateClientDetails(ClientAccount.text());
                // changes for hiding textbox
                appointmentNumber  = hmResourceSchedulingAppointmentForDataFetch.AppointmentNumber;
                BomVersionId = hmResourceSchedulingAppointmentForDataFetch.BOMVersion;
                element.storeType(BomVersionId);
                HMResourceSchedulingAppointment_PatientName.allowEdit(false);
                HMResourceSchedulingAppointment_PatientContact.allowEdit(false);
               /// cheif compalitn fixed
                element.storeReasonFromContainer(hmResourceSchedulingAppointmentForDataFetch.ChiefComplaint);
             //   appointmentReason = hmResourceSchedulingAppointmentForDataFetch.AppointmentReason;
            //    Reason.text(ReasonTable::findByRecid (hmResourceSchedulingAppointmentForDataFetch.AppointmentReason).Reason);
                element.storePlanningObject(hmResourceSchedulingAppointmentForDataFetch.HMResourceSchedulingPlanningObject,true);
                element.initializeServiceTmp(0);
                resourceMasterRecId = hmResourceSchedulingPlanningObjectMain.HMResourceMaster;
                Resource.text(hmResourceSchedulingPlanningObjectMain.showResourceName());
                PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
                //ComplementType.selection(hmResourceSchedulingAppointmentForDataFetch.ComplimentType);
                this.updatePatientDetails(hmPatient);
                // change for edit appointment
                if(hmResourceSchedulingAppointmentForDataFetch.HMPatient == 0)
                {
                    Patient.allowEdit(true);
                }
                else
                {
                    Patient.allowEdit(false);
                }
                IncompleteInfoLog.text(hmResourceSchedulingAppointmentForDataFetch.IncompleteInfoLog);
                PONum.text(hmResourceSchedulingAppointmentForDataFetch.PONum);
                EmployeeNum.text(hmResourceSchedulingAppointmentForDataFetch.EmployeeNum);
                GOPNum.text(hmResourceSchedulingAppointmentForDataFetch.GOPNum);
                bookingOriginRecId = hmResourceSchedulingAppointmentForDataFetch.HMBookingOrigin;
                HMBookingOrigin.text(HMBookingOrigin::find(bookingOriginRecId).Description);
    
                Requestor.text(hmResourceSchedulingAppointmentForDataFetch.RequestorContactPerson);
                Requestor.modified();
                ReportSentTo.text(hmResourceSchedulingAppointmentForDataFetch.ReportSentContactPerson);
                ReportSentTo.modified();
    
                PatientRequestor.value(hmResourceSchedulingAppointmentForDataFetch.PatientRequestor);
                SendEmailTo.selection(hmResourceSchedulingAppointmentForDataFetch.SendEmailTo);
                Requestor.allowEdit(!PatientRequestor.value());
    
                clientBillingAddressRecId = hmResourceSchedulingAppointmentForDataFetch.ClientBillingLogisticsPostalAddress;
                BillingAddress.text(HMResourceSchedulingHelper::getAddressDescription(clientBillingAddressRecId));
    
                clientReportAddressRecId = hmResourceSchedulingAppointmentForDataFetch.ClientReportLogisticsPostalAddres;
                ReportAddress.text(HMResourceSchedulingHelper::getAddressDescription(clientReportAddressRecId));
    
                serviceLocationRecId = hmResourceSchedulingAppointmentForDataFetch.HMOrganizationalUnitServiceLocation;
    
                patientInsuranceRecId = hmResourceSchedulingAppointmentForDataFetch.HMPatientInsurance;
                //InsuranceAccount.text(HMPatientInsurance::find(patientInsuranceRecId).InsuranceCarrier);
                element.loadInsuranceDetails();
    
                Referral.value(hmResourceSchedulingAppointmentForDataFetch.Referral);
    
                CreditCardTokenRequired.value(hmResourceSchedulingAppointmentForDataFetch.CreditCardTokenRequired);
                CreditCardToken.text(hmResourceSchedulingAppointmentForDataFetch.CreditCardToken);
                element.updateCreditCardToken();
                RequestDate.dateValue(hmResourceSchedulingAppointmentForDataFetch.RequestDate);
    
    
    
                MainInstruction.text("@MAZ2317");
                element.design().caption("@MAZ2317");
    
                OKButton.enabled(true);
                //TODO: Save.enabled(OKButton.enabled());
                Save.enabled(false);
                if(hmResourceSchedulingAppointmentForDataFetch.HMConfirmationStatus != HMAppointmentConfirmationStatus::IncompleteInfo)
                {
                    ConfirmationStatus.allowEdit(false);
                }
    
                APpointmentDate.allowEdit(false);
                AppointmentTime.allowEdit(false);
    
                Resource.allowEdit(false);
                AddToWaitlList.visible(false);
            }
            else if(openMode==HMAppointmentFormOpen::Patient)
            {
                PlanningObject.allowEdit(true);
                parmTemp = element.args().parm();
                list =  strSplit(parmTemp,',');
                enumer = list.getEnumerator();
                enumer.moveNext();
                AppointmentDate.dateValue(str2Date(enumer.current(),213));
                enumer.moveNext();
                AppointmentTime.value(str2time(enumer.current()));
                Patient.allowEdit(false);
                if(hmResourceSchedulingPlanningObjectMain.RecId)
                {
                    OKButton.enabled(true);
                    //TODO: save.enabled(true);
                    save.enabled(false);
                }
                else
                {
                    OKButton.enabled(false);
                    save.enabled(false);
                }
                if(searchform)
                 element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
            }
            else if(openMode==HMAppointmentFormOpen::PatientAppointment)
            {
                PlanningObject.allowEdit(true);
                AppointmentDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
                Patient.allowEdit(false);
                if(hmResourceSchedulingPlanningObjectMain.RecId)
                {
                    OKButton.enabled(true);
                    //todo: save.enabled(FA);
                    save.enabled(true);
                }
                else
                {
                    OKButton.enabled(false);
                    save.enabled(false);
                }
                if(searchform)
                 element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
            }
            else if(openMode==HMAppointmentFormOpen::AppointmentSearchListPage)
            {
                PlanningObject.allowEdit(true);
                AppointmentDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
                Patient.allowEdit(true);
                OKButton.text("@MAZ2672");
                AppointmentTime.value(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
                if(searchform)
                element.setSchedule(hmResourceSchedulingPlanningObjectMain.RecId);
            }
    
            if(element.args().parm() == 'Edit In Patient Appointment')
            {
                AppointmentTime.label('Time');
                MainInstruction.text("@MAZ3115");
                 element.design().caption("@MAZ3115");
                OKButton.text('Edit');
                PlanningObject.visible(false);
                TreatmentClassification.visible(true);
                TreatmentClassification.value(hmResourceSchedulingAppointmentForDataFetch.HMTreatmentClassification);
               // edit fo appointment
                appointmentNumber  = hmResourceSchedulingAppointmentForDataFetch.AppointmentNumber;
                //HMResourceSchedulingAppointment_AppointmentNumber.text(hmResourceSchedulingAppointmentForDataFetch.AppointmentNumber);
    
    
                BomVersionId = hmResourceSchedulingAppointmentForDataFetch.BOMVersion;
                element.storeType(BomVersionId);
    
            }
            else if(element.args().parm() == 'New Appointment from admission')
            {
                AppointmentTime.label('Time');
                MainInstruction.text("@MAZ3116");
                element.design().caption("@MAZ3116");
                OKButton.text('Create');
                PlanningObject.visible(false);
                TreatmentClassification.visible(true);
                caseType = HMCaseType ::InPatient;
            }
            else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
            {
                //hmWaitingList = element.args().record();
    
                //AppointmentDate.dateValue(hmWaitingList.ExpectedDate);
                //AppointmentTime.value(hmWaitingList.ExpectedTime);
    
                Patient.allowEdit(false);
                //PlanningObject.allowEdit(true);
                //HMResourceSchedulingAppointment_PatientName.allowEdit(false);
                //HMResourceSchedulingAppointment_PatientContact.allowEdit(false);
    
                OKButton.enabled(false);
                save.enabled(false);
                //AddToWaitlList.visible(false);
            }
            else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentOrder))
            {
                Patient.allowEdit(false);
                InsuranceCode.allowEdit(false);
                InsuranceCode.text(HMPatientInsurance::find(HMResourceSchedulingAppointment::find(hmCaseTrans.HMResourceSchedulingAppointment).HMPatientInsurance).getCarrier().Code);
                if(InsuranceCode.text() != "")
                {
                    InsuranceCode.modified();
                }
    
                element.addDefaultOrderService();
    
                ActionPaneServices.enabled(false);
            }
            else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentReferral))
            {
                Patient.allowEdit(false);
    
                element.addDefaultReferralService();
    
                /*InsuranceCode.allowEdit(false);
                InsuranceCode.text(HMPatientInsurance::find(HMResourceSchedulingAppointment::find(hmCaseTrans.HMResourceSchedulingAppointment).HMPatientInsurance).getCarrier().Code);
                if(InsuranceCode.text() != "")
                {
                    InsuranceCode.modified();
                }
    
                element.addDefaultOrderService();
    
                ActionPaneServices.enabled(false);*/
            }
    
    
          //  element.storePhysician(hmResourceSchedulingPlanningObjectMain.HMClinicStaff);
             //PhysicionAdvance.text(hmResourceSchedulingPlanningObjectMain.showPhysician());
             //PlanningObject.text(hmResourceSchedulingPlanningObjectMain.Description);
             //OrgUnit.text(hmResourceSchedulingPlanningObjectMain.showOrganizationUnit());
             //BldUnit.text(hmResourceSchedulingPlanningObjectMain.showBuildingUnit());
        ////
        ////
            //PhySpecial.text(HMClinicStaff::find(hmResourceSchedulingPlanningObjectMain.HMClinicStaff).getPhysicianSpeciality());
            //ouRecId  = hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit;
            //if(openMode !=HMAppointmentFormOpen::Edit)
            //{
             //appointmentNumber = appointmentClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(ouRecId));
            //}
    
            element.fillfromParamters();
    
        }
        super();
    
        this.markClinicStaff();
    
        element.newEnabled();
    
        reqDocsMap = new Map(Types::Int64,Types::Record);
        this.getRequiredDocs();
        this.loadRelatedAppointments();
    
        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentEditHisto) && (AppointmentDate.dateValue() < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Cancelled || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Closed))
        {
            DialogContent.allowEdit(false);
            ActionPaneServices.enabled(false);
            ServicesGrid.allowEdit(false);
            ActionPaneMultiResource.enabled(false);
            GridRequiredDocs.allowEdit(false);
            Miscellaneous.allowEdit(false);
            PatientNewEmail.enabled(false);
            RequestorNewContact.enabled(false);
            RequestorNewEmail.enabled(false);
            ReportSentToNewContact.enabled(false);
            OKButton.text("@SYS301990");
        }
        if(hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedIn)
        {
            GroupLeftPatient.allowEdit(false);
            GroupPlanningObject.allowEdit(false);
            GroupDetails.allowEdit(false);
    
            ClientAccountGroup.allowEdit(false);
            RequestorGroup.allowEdit(false);
            Group4.allowEdit(false);
            ReportSentToGroup.allowEdit(false);
            GroupDetails.allowEdit(false);
    
            ActionPaneServices.enabled(false);
            ServicesGrid.allowEdit(false);
            ActionPaneMultiResource.enabled(false);
            GridRequiredDocs.allowEdit(false);
            Miscellaneous.allowEdit(false);
            PatientNewEmail.enabled(false);
            RequestorNewContact.enabled(false);
            RequestorNewEmail.enabled(false);
            ReportSentToNewContact.enabled(false);
            SaveButton.text("@SYS12229");
            SaveButton.visible(true);
            OkButton.visible(false);
        }
    
        if(hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Cancelled
        || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::NoShow
        || hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedOut)
        {
            Services.allowEdit(false);
            GroupPlanningObject.allowEdit(false);
            ActionPaneServices.enabled(false);
            ActionPaneMultiResource.enabled(false);
            SaveButton.visible(true);
            OkButton.visible(false);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAppointmentAssets</Name>
				<Source><![CDATA[
    public void saveAppointmentAssets(RecId _appRecId)
    {
        HMResourceSchedulingAppointmentAssetTbl hmResourceSchedulingAppointmentAssetTbl;
        RecordInsertList recordList =  new RecordInsertList(tableNum(HMResourceSchedulingAppointmentAssetTbl));
        AssetTable assetTableLocal;
        ttsBegin;
        delete_from hmResourceSchedulingAppointmentAssetTbl where hmResourceSchedulingAppointmentAssetTbl.HMResourceSchedulingAppointment == _appRecId;
        ttsCommit;
        assetTableLocal = AssetTable_ds.getFirst(true);
        while(assetTableLocal )
        {
            hmResourceSchedulingAppointmentAssetTbl.AssetTable = assetTableLocal.AssetId;
            hmResourceSchedulingAppointmentAssetTbl.HMResourceSchedulingAppointment = _appRecId;
            recordList.add(hmResourceSchedulingAppointmentAssetTbl);
            assetTableLocal = AssetTable_ds.getNext();
        }
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAppointmentClinicStaff</Name>
				<Source><![CDATA[
    public void saveAppointmentClinicStaff(RecId _appRecId)
    {
        HMResourceSchedulingAppointmentStaffMemb hmResourceSchedulingAppointmentStaffMemb;
        RecordInsertList    recordList = new RecordInsertList(tableNum(HMResourceSchedulingAppointmentStaffMemb));
        HMClinicStaff hmClinicStaffLocal;
        ttsbegin;
        delete_from hmResourceSchedulingAppointmentStaffMemb
            where hmResourceSchedulingAppointmentStaffMemb.HMResourceSchedulingAppointment == _appRecId;
        ttsCommit;
        hmClinicStaffLocal = HMClinicStaff2_ds.getFirst(true);
        while(hmClinicStaffLocal )
        {
            hmResourceSchedulingAppointmentStaffMemb.HMClinicStaff = hmClinicStaffLocal.RecId;
            hmResourceSchedulingAppointmentStaffMemb.HMResourceSchedulingAppointment = _appRecId;
            recordList.add(hmResourceSchedulingAppointmentStaffMemb);
            hmClinicStaffLocal = HMClinicStaff2_ds.getNext();
        }
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAppointmentServices</Name>
				<Source><![CDATA[
    public void saveAppointmentServices(RecId _appRecId)
    {
        HMResourceSchedulingAppointmentInvent   hmResourceSchedulingAppointmentInvent;
        HMInventTable                           hmInventTable;
        HMResourceSchedulingPlanningObject      planObject;
        HMResourceSchedulingAppointment         appt;
        HMResourceMaster                        resourceMaster;
        VendAccount                             vendAccount;
        RecId                                   workerRecId,resourceRecId;
        boolean                                 cashSales = false;
        CustTable                               custTable;
    
        HMInsuranceContractClassOrPlans         plan;
        HMInsuranceContractClassDeductible      planDeductible;
        HMPatientInsurance                      patientInsurance;
        HMInsuranceCarrier                      insuranceCarrier;
        HMResourceSchedulingAppointment         previousAppointment;
        HMResourceSchedulingPlanningObject      previousApptPlanning, apptPlanning;
    
        Amount      amount, deductible, dsc1, dsc2;
        Container   priceCon, discCon;
        boolean     isFreeFollowUpEligible;
        boolean     isFreeFollowUpAvailed;
        date        freeFollowUpDate;
        HMResourceSchedulingAppointment sourceAppointment;
    
        ttsBegin;
    
        select * from resourceMaster
        join planObject
        join appt
        where resourceMaster.recid == planObject.HMResourceMaster
        && appt.HMResourceSchedulingPlanningObject == planObject.RecId
        && appt.RecId == _appRecId;
    
        select cashSales from custTable where custTable.AccountNum == appt.Client;
        cashSales = custTable.CashSales;
    
        patientInsurance = HMPatientInsurance::find(patientInsuranceRecId);
    
        if (patientInsurance)
        {
            insuranceCarrier = patientInsurance.getCarrier();
    
            if (insuranceCarrier)
            {
                insuranceExists = true;
                freeFollowUpDays = insuranceCarrier.HMFreeFollowUpDays;
            }
        }
    
        if (!insuranceExists)
        {
            //freeFollowUpDays = billParameters.FreeFollowUpDays;
        }
    
        if (resourceMaster)
        {
            if(resourceMaster.type == HMResourceType::Vendor)
            {
                vendAccount = VendTable::findRecId(resourceMaster.RefRecId).AccountNum;
            }
            else if(resourceMaster.type == HMResourceType::Employee)
            {
                workerRecId = resourceMaster.RefRecId;
            }
        }
    
        //delete_from hmResourceSchedulingAppointmentInvent
            //where hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appRecId;
        //ttsCommit;
    
        while select forUpdate RecId from hmResourceSchedulingAppointmentInvent
            where hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appRecId
        {
            select RecId from HMAppointmentInventTmp
            where HMAppointmentInventTmp.RefRecId == hmResourceSchedulingAppointmentInvent.RecId;
    
            if(!HMAppointmentInventTmp.RecId)
            {
                hmResourceSchedulingAppointmentInvent.delete();
            }
        }
    
        while select * from HMAppointmentInventTmp
        {
            if(HMAppointmentInventTmp.RefRecId)
            {
                select forUpdate hmResourceSchedulingAppointmentInvent
                    where hmResourceSchedulingAppointmentInvent.RecId == HMAppointmentInventTmp.RefRecId;
    
                hmResourceSchedulingAppointmentInvent.PatientResponsibility = HMAppointmentInventTmp.PatientResponsibility;
                hmResourceSchedulingAppointmentInvent.ServiceSubStatus = HMAppointmentInventTmp.HMServiceStatus == HMServiceStatus::Decline ? HMAppointmentInventTmp.ServiceDeclinedReason : '';
                hmResourceSchedulingAppointmentInvent.HMServiceStatus = HMAppointmentInventTmp.HMServiceStatus;
                if(HMAppointmentInventTmp.AppointmentTableId == tableNum(HMResourceSchedulingAppointment))
                {
                    hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId = HMAppointmentInventTmp.AppointmentRecId;
                }
                hmResourceSchedulingAppointmentInvent.update();
            }
            else
            {
                if (isFollowUpEligible)
                {
                    isFreeFollowUpEligible = false;
    
                    while select previousAppointment
                        where previousAppointment.HMPatient == appt.HMPatient
                     //       && previousAppointment.AppointmentDate + freeFollowUpDays >= appt.AppointmentDate
                            && previousAppointment.AppointmentDate <= appt.AppointmentDate
                        join PreviousApptPlanning
                            where PreviousApptPlanning.RecId == previousAppointment.HMResourceSchedulingPlanningObject
                                && previousAppointment.RecId != appt.RecId
                                && !isFreeFollowUpEligible
                                && !previousAppointment.FreeFollowUpAvailed
                    {
                        if (previousAppointment.HMPatientInsurance == appt.HMPatientInsurance)
                        {
                            apptPlanning = HMResourceSchedulingPlanningObject::find(appt.HMResourceSchedulingPlanningObject);
    
                            if (HMOrganizationalUnit::find(apptPlanning.HMOrganizationalUnit).HMSpecialtyCode == HMOrganizationalUnit::find(previousApptPlanning.HMOrganizationalUnit).HMSpecialtyCode)
                            {
                                schedulingTypeCode = HMResourceSchedulingTypeCode::find(previousAppointment.HMResourceSchedulingTypeCode);
    
                                if (schedulingTypeCode.HMScheduleType == HMScheduleType::New)
                                {
                                    freeFollowUpDate = previousAppointment.AppointmentDate + freeFollowUpDays;
                                    if (freeFollowUpDate >= appt.AppointmentDate)
                                    {
                                        isFreeFollowUpEligible  = true;
                                        sourceAppointment = HMResourceSchedulingAppointment::find(previousAppointment.RecId, true);
                                    }
                                }
                            }
                        }
                    }
                }
    
                if (isFreeFollowUpEligible)
                {
    
                    {
                        //freeFollowUpInventTable         = InventTable::find(billParameters.FreeFollowUpService);
                        HMAppointmentInventTmp.ItemId   = freeFollowUpInventTable.ItemId;
                        HMAppointmentInventTmp.ItemName = freeFollowUpInventTable.itemName();
    
                        inventModule = InventTableModule::find(HMAppointmentInventTmp.ItemId, ModuleInventPurchSales::Sales);
    
                        select PriceDiscAdmTable,RecId from plan
                        where plan.RecId == patientInsurance.HMInsuranceContractClassOrPlans
                        && plan.HMContractClassStatus == HMContractClassStatus::Active;
    
                        amount      = inventModule.Price;
                        deductible  = 0;
                        priceCon = HMPriceDiscAdmClass::findPriceByJournalNum(HMAppointmentInventTmp.ItemId,
                                                            plan.PriceDiscAdmTable);
                        if(conPeek(priceCon,2) == '')
                        {
                            amount = conPeek(priceCon,1) * 1;
    
                        }
                        discCon = HMPriceDiscAdmClass::findDiscByJournalNum(HMAppointmentInventTmp.ItemId, plan.PriceDiscAdmTable);
                        if(conPeek(discCon,3) == '')
                        {
                            dsc1 = conPeek(discCon,1);
                            dsc2 = conPeek(discCon,2);
                            if(dsc1 > 0)
                            {
                                amount = amount - (amount * dsc1/100);
                            }
                            if(dsc2 > 0)
                            {
                                amount = amount - (amount * dsc2/100);
                            }
                            //hmCaseTrans.DiscPercent1 = dsc1;
                            //hmCaseTrans.DiscPercent2 = dsc2;
                        }
    
                        select HMDeductibleMainMemberPercentage,HMDeductibleMainMemberAmount from planDeductible
                        where planDeductible.HMInsuranceContractClassOrPlans == plan.RecId;
    
                        if (planDeductible)
                        {
                            if (planDeductible.HMDeductibleMainMemberPercentage > 0)
                            {
                                deductible = amount * (planDeductible.HMDeductibleMainMemberPercentage/100);
                            }
                            else if (planDeductible.HMDeductibleMainMemberAmount > 0)
                            {
                                deductible = planDeductible.HMDeductibleMainMemberAmount;
                            }
                        }
    
                        HMAppointmentInventTmp.CoPay    = deductible;
                        HMAppointmentInventTmp.Price    = amount;
    
                        sourceAppointment.FreeFollowUpAvailed = true;
                        sourceAppointment.update();
                    }
                }
    
                hmResourceSchedulingAppointmentInvent.clear();
                hmResourceSchedulingAppointmentInvent.initValue();
                hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment = _appRecId;
                hmResourceSchedulingAppointmentInvent.InventTable = HMAppointmentInventTmp.ItemId;
                hmResourceSchedulingAppointmentInvent.Price = HMAppointmentInventTmp.Price;
                hmResourceSchedulingAppointmentInvent.PatientResponsibility = HMAppointmentInventTmp.PatientResponsibility;
                hmResourceSchedulingAppointmentInvent.ServiceSubStatus = HMAppointmentInventTmp.HMServiceStatus == HMServiceStatus::Decline ? HMAppointmentInventTmp.ServiceDeclinedReason : '';
                hmResourceSchedulingAppointmentInvent.HMServiceStatus = HMAppointmentInventTmp.HMServiceStatus;
                hmResourceSchedulingAppointmentInvent.Protocol = HMAppointmentInventTmp.ProtocolId;
                if(HMAppointmentInventTmp.AppointmentTableId == tableNum(HMResourceSchedulingAppointment))
                {
                    hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId = HMAppointmentInventTmp.AppointmentRecId;
                }
                if(HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).MDactivity == NoYes::Yes)
                {
                    hmResourceSchedulingAppointmentInvent.VendTable = vendAccount;
                    hmResourceSchedulingAppointmentInvent.HcmWorker = workerRecId;
                    hmResourceSchedulingAppointmentInvent.HMResourceMaster = resourceMaster.RecId;
                }
                hmResourceSchedulingAppointmentInvent.PreAuthorizationNumber = HMAppointmentInventTmp.PreAuthorizationNumber;
                hmResourceSchedulingAppointmentInvent.PreAuthValidityDate = HMAppointmentInventTmp.PreAuthValidityDate;
                hmResourceSchedulingAppointmentInvent.insert();
            }
        }
    
        ttsCommit;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchOpenTimeSlot</Name>
				<Source><![CDATA[
    public HMResourceSchedulingOpenTimeSlotsTmp searchOpenTimeSlot()
    {
        container                               excludeDays;
        boolean                                 isAllScheduleType;
        //recId                                   scheduleTypeRecid;
        boolean                                 ret = true;
        HMResourceSchedulingOpenTimeSlotsTmp    hmResourceSchedulingOpenTimeSlotsTmpLocal;
    
        HMResourceSchedulingOpenTimeSlotsSearch hmResourceSchedulingOpenTimeSlotsSearch=new HMResourceSchedulingOpenTimeSlotsSearch();
    
        if (AppointmentDate.dateValue() == dateNull())
        {
            warning(strFmt("@SYS26332","@SYS24050"));
            return null;
        }
    
        if (AppointmentDate.dateValue() == dateNull() && !IsRecurrence)
        {
            warning(strFmt("@SYS26332","@SYS36680"));
            return null;
        }
        if (ret && AppointmentDate.dateValue() < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && !IsRecurrence)
        {
            warning("@MAZ3247");
            return null;
        }
    
        if (ScheduleType.text() == "" )
        {
            warning(strFmt("@SYS26332","@MAZ1703"));
            return null;
        }
        excludeDays=[false,false,false,false,false,false,false];
        isAllScheduleType=false;
        hmResourceSchedulingOpenTimeSlotsTmpLocal=hmResourceSchedulingOpenTimeSlotsSearch.searchOpenTimeSlot(hmResourceSchedulingPlanningObjectMain.RecId,AppointmentDate.dateValue(),AppointmentDate.dateValue(),isAllScheduleType,HMScheduleTypeRecId,true,excludeDays);
    
        return hmResourceSchedulingOpenTimeSlotsTmpLocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAppointmentInventResource</Name>
				<Source><![CDATA[
    public void setAppointmentInventResource(HMResourceSchedulingOpenTimeSlotsTmp _HMResourceSchedulingOpenTimeSlotsTmpLocal)
    {
        if(_HMResourceSchedulingOpenTimeSlotsTmpLocal.AppointmentRecId == 0)
        {
            HMAppointmentInventTmp.AppointmentRecId = _HMResourceSchedulingOpenTimeSlotsTmpLocal.RecId;
            HMAppointmentInventTmp.AppointmentTableId = tableNum(HMResourceSchedulingOpenTimeSlotsTmp);
        }
        else
        {
            HMAppointmentInventTmp.AppointmentRecId = _HMResourceSchedulingOpenTimeSlotsTmpLocal.appointmentRecId;
            HMAppointmentInventTmp.AppointmentTableId = tableNum(HMResourceSchedulingAppointment);
        }
        HMAppointmentInventTmp.ResourceDescription = _HMResourceSchedulingOpenTimeSlotsTmpLocal.resourceMasterDescription();
        HMAppointmentInventTmp_ds.research(true);
        HMAppointmentInventTmp_ds.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferRecurrence</Name>
				<Source><![CDATA[
    public void setBufferRecurrence(HMResourceSchedulingAppointmentTmp _temp,HMRecurrentApptDetail _detail )
    {
    
        delete_from HMResourceSchedulingAppointmentTmp ;
        delete_from HMResourceSchedulingAppointmentTmpLocalChecking;
        while select _temp
        {
           HMResourceSchedulingAppointmentTmp.PriorityNumber = _temp.PriorityNumber;
           HMResourceSchedulingAppointmentTmp.AppointmentDate = _temp.AppointmentDate;
           HMResourceSchedulingAppointmentTmp.AppointmentTime = _temp.AppointmentTime;
           HMResourceSchedulingAppointmentTmpLocalChecking.PriorityNumber = _temp.PriorityNumber;
           HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentDate = _temp.AppointmentDate;
           HMResourceSchedulingAppointmentTmpLocalChecking.AppointmentTime = _temp.AppointmentTime;
    
            if (!element.isValidRecurrence(_temp.AppointmentDate,_temp.AppointmentTime))
            {
                HMResourceSchedulingAppointmentTmp.IsDelayed = NoYes::No;
                HMResourceSchedulingAppointmentTmpLocalChecking.IsDelayed = NoYes::No;
            }
            else
            {
                HMResourceSchedulingAppointmentTmp.IsDelayed = NoYes::Yes;
                HMResourceSchedulingAppointmentTmpLocalChecking.IsDelayed = NoYes::Yes;
            }
    
            HMResourceSchedulingAppointmentTmpLocalChecking.insert();
            HMResourceSchedulingAppointmentTmp.insert();
            IsRecurrence = true;
    
        }
    
        recurrenceAppointmentDetail       =    _detail;
    
        HMResourceSchedulingAppointmentTmp_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanningObject</Name>
				<Source><![CDATA[
    public void setPlanningObject()
    {
        HMResourceSchedulingPlanningObject   HMResourceSchedulingPlanningObjectLocal;
    
    
        HMCaseType            caseTypeLocal;
        if ( hmResourceSchedulingPlanningObjectMain.CaseType != HMCaseType::None)
        {
            caseTypeLocal = hmResourceSchedulingPlanningObjectMain.CaseType;
        }
        else
        {
          caseTypeLocal= caseType;
        }
        if (resourceMasterRecId !=0 )
        {
         select  * from HMResourceSchedulingPlanningObjectLocal
         where HMResourceSchedulingPlanningObjectLocal.HMResourceMaster == resourceMasterRecId
         && HMResourceSchedulingPlanningObjectLocal.CaseType == caseTypeLocal
         && HMResourceSchedulingPlanningObjectLocal.PlanningObjectStatus == AllowanceStatus::Active
    
         && HMResourceSchedulingPlanningObjectLocal.StartDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingPlanningObjectLocal.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    
        }
    
    
    
    
        if(searchform)
        {
    
             element.DefaultScheduleType(HMResourceSchedulingPlanningObjectLocal.RecId);
             //HMResourceSchedulingTypeCode::find();
       //
            //
            //if(HMResourceSchedulingPlanningObjectLocal.CaseType != HMCaseType::InPatient)
            //{
                //hmResourceSchedulingOpenTimeSlotsTmp =  hmResourceSchedulingOpenTimeSlotsSearchSchedule.searchOpenTimeSlot(HMResourceSchedulingPlanningObjectLocal.RecId,AppointmentDate.dateValue(),AppointmentDate.dateValue(),true,0,true,[false,false,false,false,false,false,false]);
            //}
            //else
            //{
                //hmResourceSchedulingOpenTimeSlotsTmp =  hmResourceSchedulingOpenTimeSlotsSearchSchedule.searchOpenTimeSlotForInPatient(HMResourceSchedulingPlanningObjectLocal.RecId,AppointmentDate.dateValue(),AppointmentDate.dateValue(),true,0,true,[false,false,false,false,false,false,false]);
            //}
            //HMScheduleTypeRecId=hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode;
    
        }
    
         Resource.text(HMResourceMasterHelper::getResourceName(resourceMasterRecId));
         PlanningObject.text(HMResourceSchedulingPlanningObjectLocal.Description);
         OrgUnit.text(HMResourceSchedulingPlanningObjectLocal.showOrganizationUnit());
         BldUnit.text(HMResourceSchedulingPlanningObjectLocal.showBuildingUnit());
    
         PhySpecial.text(HMResourceMasterHelper::getResourceSpeciality(resourceMasterRecId));
         appointmentClass.deleteNewNumSeqForAppointmentNum();
         ouRecId  = HMResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit;
         element.updateNumberSeqFormHandler();
         hmResourceSchedulingPlanningObjectMain = HMResourceSchedulingPlanningObjectLocal;// = hmResourceSchedulingPlanningObjectMain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSchedule</Name>
				<Source><![CDATA[
    public void setSchedule(RecId  _planningObect )
    {
        element.storePlanningObject(_planningObect);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeBookingOrigin</Name>
				<Source><![CDATA[
    public void storeBookingOrigin(RecId _recId)
    {
        bookingOriginRecId = _RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeHMPatientInsurance</Name>
				<Source><![CDATA[
    public void storeHMPatientInsurance(RecId _patientInsuranceRecId)
    {
        patientInsuranceRecId = _patientInsuranceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeLogisticPostalAddress</Name>
				<Source><![CDATA[
    public void storeLogisticPostalAddress(RecId _recId)
    {
        clientBillingAddressRecId = _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeMultiResourceAppt</Name>
				<Source><![CDATA[
    private void storeMultiResourceAppt(HMResourceSchedulingOpenTimeSlotsTmp _HMResourceSchedulingOpenTimeSlotsTmp)
    {
        HMResourceSchedulingHelper::storeMultiResourceAppt(_HMResourceSchedulingOpenTimeSlotsTmp,HMResourceSchedulingOpenTimeSlotsTmpMultiResrc);
        HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeOrganizationalUnit</Name>
				<Source><![CDATA[
    public void storeOrganizationalUnit(RecId _locationRecId)
    {
        element.storePlanningObject(HMResourceSchedulingHelper::findOrCreatePlanningObjectForInvAndPay(_locationRecId));
        element.newEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeOrganizationalUnitRecId</Name>
				<Source><![CDATA[
    public void storeOrganizationalUnitRecId(RecId _recid)
    {
        serviceLocationRecId = _recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storePlanningObject</Name>
				<Source><![CDATA[
    public void storePlanningObject(recId _planningObject,boolean _edit = false,boolean is_OpenSlots = false)
    {
        hmResourceSchedulingPlanningObjectMain=HMResourceSchedulingPlanningObject::find(_planningObject);
        PlanningObject.text(hmResourceSchedulingPlanningObjectMain.Description);
        OrgUnit.text(hmResourceSchedulingPlanningObjectMain.showOrganizationUnit());
        BldUnit.text(hmResourceSchedulingPlanningObjectMain.showBuildingUnit());
        caseType = hmResourceSchedulingPlanningObjectMain.CaseType;
    
        if(searchform && !isSchedule)
        {
            element.DefaultScheduleType(hmResourceSchedulingPlanningObjectMain.RecId);
        }
        if(!_edit)
        {
        //appointmentClass.deleteNewNumSeqForAppointmentNum();
    
         ouRecId  = hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit;
    
        element.updateNumberSeqFormHandler();
        }
        else
        {
            ouRecId  = hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit;
        }
    
        if(HMResourceMasterHelper::getResourceType(hmResourceSchedulingPlanningObjectMain.HMResourceMaster) == HMResourceType::Device)
        {
            RelatedAppointments.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeReason</Name>
				<Source><![CDATA[
    public void storeReason(RecId _recId)
    {
        appointmentReason = _recId;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeReasonFromContainer</Name>
				<Source><![CDATA[
    public void storeReasonFromContainer(container _con)
    {
        int a;
        container temp;
        for (a=1 ; a <= conLen(_con) ; a++ )
        {
         temp = conPeek(_con,a);
            if(!mapKeyValueReason.exists(conPeek( temp,1)))
            {
                mapKeyValueReason.insert(conPeek(temp,1),conPeek(temp,2));
            }
    
    
        }
    
    
        HMPatientEncounter_Reason.text(element.createReasonString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeReasons</Name>
				<Source><![CDATA[
    public void storeReasons(Common _record)
    {
        if(!mapKeyValueReason.exists(_record.RecId))
        {
            mapKeyValueReason.insert(_record.RecId,HMClinicalObservation::find(_record.RecId).Description);
        }
    
        HMPatientEncounter_Reason.text(element.createReasonString());
    
        Clear.enabled(true);
    
        element.newEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeReportPostalAddress</Name>
				<Source><![CDATA[
    public void storeReportPostalAddress(RecId _recId)
    {
        clientReportAddressRecId = _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeRequiredDocs</Name>
				<Source><![CDATA[
    public void storeRequiredDocs(RecId _appointmentRecid)
    {
        MapEnumerator mapEnumerator;
    
        HMResourceSchedulingApptRequiredDocs apptReqDocs;
        RecordInsertList    recordList =  new RecordInsertList(tableNum(HMResourceSchedulingApptRequiredDocs));
        delete_from apptReqDocs
        where apptReqDocs.HMResourceSchedulingAppointment == _appointmentRecid;
        mapEnumerator = reqDocsMap.getEnumerator();
    
        while(mapEnumerator.moveNext())
        {
            apptReqDocs.clear();
            apptReqDocs.HMResourceSchedulingAppointment = _appointmentRecid;
            apptReqDocs.HMRequiredDocuments = mapEnumerator.currentKey();
            recordList.add(apptReqDocs);
        }
        recordList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeResource</Name>
				<Source><![CDATA[
    public void storeResource(RecId _recId)
    {
        resourceMasterRecId = _RecId;
        element.setPlanningObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeResourceGroup</Name>
				<Source><![CDATA[
    public void storeResourceGroup(recId _recId)
    {
        resourceGroupRecId = _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeScheduleType</Name>
				<Source><![CDATA[
    public void storeScheduleType(recId _recid)
    {
        HMResourceSchedulingTypeCode hmResourceSchedulingTypeCode;
        HMScheduleTypeRecId = _recid;
        hmResourceSchedulingTypeCode = HMResourceSchedulingTypeCode::find(_recid);
        //this.updateClient();
        fromScheduleTypeLookup = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeTime</Name>
				<Source><![CDATA[
    public void storeTime(int _time)
    {
        //AppointmentTime.value(_time);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeType</Name>
				<Source><![CDATA[
    public void storeType(RecId  id,description _parm ="")
    {
        BomVersionId = id;
        BomVersionLookUp.text(BOMVersion::findRecId(BomVersionId).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #task
    
        int ret;
    
             taskId  = _taskId;
                if(_taskId == #taskSave)
                {
                    return 1;
                }
            ret = super(_taskId);
    
    
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBillingAddress</Name>
				<Source><![CDATA[
    private void updateBillingAddress(CustAccount _client, RecId _partyrecId, RecId _custRecId)
    {
        if(!clientBillingAddressRecId && _client)
        {
            clientBillingAddressRecId = HMResourceSchedulingHelper::getPartyDefaultPostalAddressByType(_partyrecId, LogisticsLocationRoleType::Invoice);
    
            if(!clientBillingAddressRecId && HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit).BogusClient == _custRecId)
            {
                clientBillingAddressRecId  = HMResourceSchedulingHelper::getPartyDefaultPostalAddressByType(HMPatientClass::getpartyRecId(HMPatientRecId), LogisticsLocationRoleType::Invoice);
            }
        }
    
        if(clientBillingAddressRecId)
        {
            BillingAddress.text(HMResourceSchedulingHelper::getAddressDescription(clientBillingAddressRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaseTrans</Name>
				<Source><![CDATA[
    public void updateCaseTrans(RecId appRecId, date _apptDate)
    {
        HMResourceSchedulingAppointmentInvent   hmResourceSchedulingAppointmentInvent;
        HMCaseTrans                             hmCaseTransLocal;
        HMCaseService hmCaseService;
        Query qry = new Query();
        int i;
        QueryBuildDataSource qbdsParent;
        QueryRun qryRun;
    
        qbdsParent = qry.addDataSource(tableNum(HMCaseTrans));
    
        if(conLen(caseTransContainer) > 0)
        {
            for(i = 1;i<= conLen(caseTransContainer);i++)
            {
                qbdsParent.addRange(fieldNum(HMCaseTrans, RecId)).value(SysQuery::value(conPeek(caseTransContainer, i)));
            }
        }
        else
        {
            qbdsParent.addRange(fieldNum(HMCaseTrans, RecId)).value(SysQuery::value(hmCaseTrans.RecId));
        }
    
        qryRun = new QueryRun(qry);
    
        ttsBegin;
    
        while(qryRun.next())
        {
            hmCaseTransLocal = qryRun.get(tableNum(HMCaseTrans));
    
            select forUpdate hmResourceSchedulingAppointmentInvent where hmResourceSchedulingAppointmentInvent.RecId == hmCaseTransLocal.HMResourceSchedulingAppointmentInvent;
    
            hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId = appRecId;
    
            hmResourceSchedulingAppointmentInvent.update();
    
            hmCaseTransLocal.selectForUpdate(true);
    
            hmCaseTransLocal.RelatedAppointmentRecId = appRecId;
    
            hmCaseTransLocal.update();
    
            if(hmCaseTransLocal.CRMOrderId != emptyGuid())
            {
                hmCaseService = new HMCaseService();
                hmCaseService.updateAppointmentDetails(hmCaseTransLocal.CRMOrderId, _apptDate, appRecId);
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClient</Name>
				<Source><![CDATA[
    public void updateClient()
    {
        if(HMPatientRecId && clientAccount.allowEdit())
        {
            this.updateClientDetails(ClientAccount.text());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClientDetails</Name>
				<Source><![CDATA[
    public void updateClientDetails(AccountNum _accountNum)
    {
        str billingNotesLocal, bookingNotesLocal;
        CustTable custTableLocal = CustTable::find(_accountNum);
        Requestor.text('');
        //BookingNotes.text('');
        RequestorPhone.text('');
        element.updateRequestorEmail('');
        ReportSentTo.text('');
        ReportSentToPhone.text('');
        ReportSentToEmail.text('');
        BillingAddress.text('');
        clientBillingAddressRecId = 0;
        ReportAddress.text('');
        clientReportAddressRecId = 0;
        BillingNotes.text('');
        ClientName.text(custTableLocal.name());
        RequestorName.text('');
        ReportSentToName.text('');
        PONum.text('');
        if(custTableLocal)
        {
            if(custTableLocal.HMIsPrePaymentAllowedForCust == NoYes::Yes)
            {
                if(custTableLocal.openPaymentBalanceMST(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),dateMax()) > -custTableLocal.ThresholdAmount)
                {
                    warning("@MAZ12370");
                }
            }
            if(custTableLocal.HMCustOnHold)
            {
                warning("@MAZ12055");
            }
    
            PONum.text(custTableLocal.HMPONum);
    
            bookingNotesLocal = custTableLocal.ClientBookingNotes;
            //BookingNotes.text(bookingNotesLocal);
    
            billingNotesLocal = custTableLocal.ClientBillingNotes;
            BillingNotes.text(billingNotesLocal);
    
            element.updateBillingAddress(custTableLocal.AccountNum, custTableLocal.Party, custTableLocal.RecId);
    
            clientReportAddressRecId = HMResourceSchedulingHelper::getPartyDefaultPostalAddressByType(custTableLocal.Party, LogisticsLocationRoleType::Report);
            if(clientReportAddressRecId)
            {
                ReportAddress.text(HMResourceSchedulingHelper::getAddressDescription(clientReportAddressRecId));
            }
    
            chkCustOnHold.checked(CustTable::find(ClientAccount.text()).HMCustOnHold);
            chkCustBadCredit.checked(CustTable::find(ClientAccount.text()).HMCustBadCredit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditCardToken</Name>
				<Source><![CDATA[
    public void updateCreditCardToken()
    {
        if(CreditCardTokenRequired.value())
        {
            CreditCardToken.allowEdit(true);
        }
        else
        {
            CreditCardToken.allowEdit(false);
            CreditCardToken.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInsuranceDetailsForInsuranceCode</Name>
				<Source><![CDATA[
    public boolean updateInsuranceDetailsForInsuranceCode()
    {
        str bookingNotesLocal;
    
        HMPatientInsurance                      hmPatientInsurance ;
        HMInsuranceCarrier                      carrier;
        HMInsuranceContract                     contract;
        HMInsuranceContractClassOrPlans         plan;
        HMInsuranceContractCarrierCombination   combination;
        RefRecId                                recId = HMPatient::findByMRN(MRN.text()).RecId;
        RefRecId                                appointmentRecId = HMResourceSchedulingAppointment::findRecIdByAppointmentNum(appointmentNumber);
    
        select hmPatientInsurance
            join plan
            where hmPatientInsurance.HMInsuranceContractClassOrPlans == plan.RecId
                join contract
                where plan.HMInsuranceContract == contract.RecId
                    join combination
                    where contract.HMInsuranceContractCarrierCombination == combination.recId
                        join carrier
                            where combination.HMInsuranceCarrier == carrier.RecId
                                && carrier.Code == InsuranceCode.text()
                                && hmPatientInsurance.HMPatient == recId;//hmResourceSchedulingAppointmentForDataFetch.HMPatient;HMResourceSchedulingAppointment.HMPatient;//

        if(hmPatientInsurance.RecId == 0)
        {
            select hmPatientInsurance
                join carrier
                where carrier.Code == hmPatientInsurance.InsuranceCarrier
                   && hmPatientInsurance.HMPatient == recId
                   && hmPatientInsurance.Priority == 1;
        }
    
        //BookingNotes.text('');
        InsuranceName.text('');
        InsurancePhone.text('');
        InsuranceContract.text('');
        InsuranceClass.text('');
        InsuranceExpirationDate.dateValue(dateNull());
    
        if (hmPatientInsurance.RecId)
        {
            if(!HMPatientEligibilityLog::isPatientInsuranceEligible(hmPatientInsurance.RecId))
            {
                HMAppointmentInventTmp_PatientResponsibility.enabled(false);
    
                patientInsuranceRecId = 0;
    
                update_recordSet HMAppointmentInventTmp
                    Setting PatientResponsibility = HMPatientPaymentResponsibility::Patient;
    
                return false;
            }
            else
            {
                HMAppointmentInventTmp_PatientResponsibility.enabled(true);
    
                patientInsuranceRecId = hmPatientInsurance.RecId;
    
                update_recordSet HMAppointmentInventTmp
                    Setting PatientResponsibility = HMPatientPaymentResponsibility::Client;
                     //   where HMAppointmentInventTmp.AppointmentRecId == appointmentRecId;
            }
    
            if (carrier)
            {
                InsuranceName.text(carrier.name);
                InsurancePhone.text(carrier.phone());
                InsuranceContract.text(contract.HMContractName);
                InsuranceClass.text(plan.HMContractClassName);
                InsuranceExpirationDate.dateValue(hmPatientInsurance.EndDate);
    
               // BookingNotes.text(bookingNotesLocal);
            }
        }
        else if (insuranceCode.text())
        {
            HMAppointmentInventTmp_PatientResponsibility.enabled(false);
            patientInsuranceRecId = 0;
    
            error("The patient insurance doesn't have any contract information associated.");
            insuranceCode.text('');
    
            update_recordSet HMAppointmentInventTmp
                Setting PatientResponsibility = HMPatientPaymentResponsibility::Patient;
                  //  where HMAppointmentInventTmp.AppointmentRecId == appointmentRecId;
    
            return false;
        }
        else
        {
            HMAppointmentInventTmp_PatientResponsibility.enabled(false);
    
            patientInsuranceRecId = 0;
    
            update_recordSet HMAppointmentInventTmp
                Setting PatientResponsibility = HMPatientPaymentResponsibility::Patient;
                   // where HMAppointmentInventTmp.AppointmentRecId == appointmentRecId;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInsuranceDetailsForPlan</Name>
				<Source><![CDATA[
    public void updateInsuranceDetailsForPlan()
    {
          str bookingNotesLocal;
    
        HMPatientInsurance                      hmPatientInsurance = HMPatientInsurance::find(hmResourceSchedulingAppointmentForDataFetch.HMPatientInsurance);
        HMInsuranceContractClassOrPlans         plan = HMInsuranceContractClassOrPlans::find(hmPatientInsurance.HMInsuranceContractClassOrPlans);
        HMInsuranceCarrier                      carrier;
        HMInsuranceContract                     contract;
        HMInsuranceContractCarrierCombination   combination;
    
        //BookingNotes.text('');
        InsuranceName.text('');
        InsurancePhone.text('');
        InsuranceContract.text('');
        InsuranceClass.text('');
        InsuranceExpirationDate.dateValue(dateNull());
    
        if (plan)
        {
            contract    = HMInsuranceContract::find(plan.HMInsuranceContract);
            combination = HMInsuranceContractCarrierCombination::find(contract.HMInsuranceContractCarrierCombination);
            carrier     = HMInsuranceCarrier::find(combination.HMInsuranceCarrier);
    
            InsuranceCode.text(carrier.Code);
            InsuranceName.text(carrier.name);
            InsurancePhone.text(carrier.phone());
            InsuranceContract.text(contract.HMContractName);
            InsuranceClass.text(plan.HMContractClassId);
            InsuranceExpirationDate.dateValue(hmPatientInsurance.getPatientIdentificationExpiryDate());
    
            //BookingNotes.text(bookingNotesLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvAndPayControls</Name>
				<Source><![CDATA[
    private void updateInvAndPayControls()
    {
        ScheduleType.visible(false);
        Resource.visible(false);
        PlanningObject.visible(false);
        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv))
        {
            OrgUnit.allowEdit(true);
            AppointmentDate.allowEdit(true);
            AppointmentDate.dateValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        }
        ConfirmationStatus.visible(false);
        AppointmentDate.allowEdit(true);
        AppointmentTime.visible(false);
        OrgUnit.mandatory(true);
        ArrivalTime.visible(false);
        RelatedAppointments.visible(false);
        SaveButton.visible(true);
        OkButton.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberSeqFormHandler</Name>
				<Source><![CDATA[
    public void updateNumberSeqFormHandler()
    {
        appointmentClass.deleteNewNumSeqForAppointmentNum();
        appointmentNumber = appointmentClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(ouRecId));
        if(!appointmentNumber)
        {
            error(strFmt("@MAZ8513","@MAZ8923",HMOrganizationalUnit::find(ouRecId).Description));
        }
        //HMResourceSchedulingAppointment_AppointmentNumber.text(appointmentClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(ouRecId)));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOccuranceEndDate</Name>
				<Source><![CDATA[
    public void updateOccuranceEndDate(TransDate _date)
    {
        HMRecurrentApptDetail hmrecurrentApptDetailNew;
    
        ttsBegin;
            select forUpdate hmrecurrentApptDetailNew where hmrecurrentApptDetailNew.RecId  == recurrenceRecid;
            hmrecurrentApptDetailNew.OccuranceEndDate  = _date;
            hmrecurrentApptDetailNew.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePatientDetails</Name>
				<Source><![CDATA[
    private void updatePatientDetails(HMPatient _hmpatient)
    {
        CustTable custTAble;
        custTable = CustTable::findRecId(_hmpatient.CustTable);
        OutstandingBalance.realValue(custTable.openInvoiceBalanceMST());
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePatientEmail</Name>
				<Source><![CDATA[
    public void updatePatientEmail(Email _email)
    {
        PatientEmail.text(_email);
    
        PatientNewEmail.enabled(HMPatientRecId && PatientEmail.text() == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRecuurenceAppointmentTmp</Name>
				<Source><![CDATA[
    public void UpdateRecuurenceAppointmentTmp()
    {
    
        if(!element.isValidRecurrence(HMResourceSchedulingAppointmentTmp.AppointmentDate,HMResourceSchedulingAppointmentTmp.AppointmentTime))
        {
            HMResourceSchedulingAppointmentTmp.IsDelayed = NoYes::No;
        }
        else
        {
              HMResourceSchedulingAppointmentTmp.IsDelayed = NoYes::Yes;
        }
    
        element . makeBufferCopy(HMResourceSchedulingAppointmentTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestorEmail</Name>
				<Source><![CDATA[
    public void updateRequestorEmail(Email _email)
    {
        RequestorEmail.text(_email);
    
        RequestorNewEmail.enabled(Requestor.text() && RequestorEmail.text() == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequestorField</Name>
				<Source><![CDATA[
    public void updateRequestorField()
    {
        Requestor.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalAmount</Name>
				<Source><![CDATA[
    public void updateTotalAmount()
    {
        HMAppointmentInventTmp  hmAppointmentInventTmpLocal, hmAppointmentInventTmpLocalCopy;
    
        for (hmAppointmentInventTmpLocalCopy = HMAppointmentInventTmp_DS.getFirst(); hmAppointmentInventTmpLocalCopy; hmAppointmentInventTmpLocalCopy = HMAppointmentInventTmp_DS.getNext())
        {
            buf2Buf(hmAppointmentInventTmpLocalCopy, hmAppointmentInventTmpLocal);
            hmAppointmentInventTmpLocal.insert();
        }
    
        //TotalAmount.realValue(HMResourceSchedulingHelper::getTotalAmount(hmAppointmentInventTmpLocal, ClientAccount.text(), HMPatientRecId, serviceLocationRecId ? serviceLocationRecId : hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVerbalReportField</Name>
				<Source><![CDATA[
    public void updateVerbalReportField()
    {
        ReportSentTo.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAppointmentProtocol</Name>
				<Source><![CDATA[
    public boolean validateAppointmentProtocol(ItemId _protocolId)
    {
        boolean ret = true;
        HMResourceSchedulingAppointmentInvent       hmResourceSchedulingAppointmentInvent;
        HMAppointmentInventTmp                      hmAppointmentInventTmpLocal;
    
        try
        {
            hmAppointmentInventTmpLocal = HMAppointmentInventTmp_DS.getFirst();
    
            while(hmAppointmentInventTmpLocal)
            {
                if(hmAppointmentInventTmpLocal.ProtocolId == _protocolId )
                {
                    if(hmAppointmentInventTmpLocal.RefRecId)
                    {
                        select Invoiced, POPosted from hmResourceSchedulingAppointmentInvent
                            where hmResourceSchedulingAppointmentInvent.RecId == hmAppointmentInventTmpLocal.RefRecId;
    
                        if(hmResourceSchedulingAppointmentInvent.Invoiced)
                        {
                            throw error("@MAZ12319");
                        }
    
                        if(hmResourceSchedulingAppointmentInvent.POPosted)
                        {
                            throw error("@MAZ12320");
                        }
                    }
    
                }
    
                hmAppointmentInventTmpLocal = HMAppointmentInventTmp_DS.getNext();
            }
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClientFields</Name>
				<Source><![CDATA[
    public boolean validateClientFields(CustAccount _client)
    {
        CustTable custTableClient;
        HMComments message;
        boolean ret = true;
    
        select firstOnly * from custTableClient
            where custTableClient.AccountNum == _client;
    
        incompleteInfo = false;
        incomleteInfoMessage = '';
        if(custTableClient)
        {
            if(custTableClient.HMEmployeeNumberRequired && EmployeeNum.text() == '')
            {
                incompleteInfo = true;
                incomleteInfoMessage += (strFmt("@SYS84753","@MAZ11597")) + '; ';
                message += (strFmt("@SYS84753","@MAZ11597"));
                message += @"\n";
            }
    
            if(custTableClient.HMPONumberRequired && custTableClient.HMPOValidUntil == dateNull() && PONum.text() == '')
            {
                incompleteInfo = true;
                incomleteInfoMessage += (strFmt("@SYS84753","@MAZ11596")) +'; ';
                message += (strFmt("@SYS84753","@MAZ11596"));
                message += @"\n";
            }
            else if(custTableClient.HMPONumberRequired && custTableClient.HMPOValidUntil < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && PONum.text() == '')
            {
                incompleteInfo = true;
                incomleteInfoMessage += (strFmt("@SYS84753","@MAZ11596")) + '; ';
                message += (strFmt("@SYS84753","@MAZ11596"));
                message += @"\n";
            }
    
            if(custTableClient.HMGOPRequired && GOPNum.text() == '')
            {
                incompleteInfo = true;
                incomleteInfoMessage += (strFmt("@SYS84753","@MAZ11598")) +'; ';
                message += (strFmt("@SYS84753","@MAZ11598"));
                message += @"\n";
            }
        }
        if(incompleteInfo)
        {
    
            if(Box::yesNo(strFmtLB("@MAZ12057" + @"\n" + message + "@MAZ12058"), dialogButton::No,"@MAZ7757") == DialogButton::No)
            {
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvAndPay</Name>
				<Source><![CDATA[
    public boolean validateInvAndPay()
    {
        boolean ret = true;
        CustTable custTable;
        HMPatient                                       HMPatientLocal = HMPatient::find(HMPatientRecId);
        if(HMPatientRecId == 0 && HMResourceSchedulingAppointment_PatientName.text() == '')
        {
            warning("@MAZ1654");
            ret = false;
        }
        if(hmResourceSchedulingPlanningObjectMain.RecId == 0)
        {
            warning("@MAZ2662");
            ret = false;
        }
        if(AppointmentDate.valueStr() == "")
        {
            warning("@MAZ1974");
            ret = false;
        }
    
        if (appointmentNumber  == '')
        {
            error(strFmt("@MAZ8512","@MAZ8923","@MAZ6803"));
            ret = false;
        }
        if(CreditCardTokenRequired.value() == NoYes::Yes && CreditCardToken.text() == '')
        {
            warning(strFmt("@SYS84753","@SYS4000166"));
            ret = false;
        }
    
        //Zain -- Medisys fields
        //if(ClientAccount.text() =='')
        //{
        //    warning(strFmt("@SYS84753","@MAZ11182"));
        //    ret = false;
        //}

        //if(!PatientRequestor.value() && Requestor.text() =='')
        //{
        //    warning(strFmt("@SYS84753","@MAZ11601"));
        //    ret = false;
        //}

        //if(!clientBillingAddressRecId)
        //{
        //    warning(strFmt("@SYS84753","@SYS327092"));
        //    ret = false;
        //}

        //if(!clientReportAddressRecId)
        //{
        //    warning(strFmt("@SYS84753","@MAZ12143"));
        //    ret = false;
        //}
        //Zain
    
        if(!bookingOriginRecId)
        {
            warning(strFmt("@SYS84753","@MAZ11595"));
            ret = false;
        }
    
        //Zain -- Medisys fields
        //if(!serviceLocationRecId)
        //{
        //    warning(strFmt("@SYS84753","@MAZ11675"));
        //    ret = false;
        //}
        //Zain

        if(ret && ClientAccount.text())
        {
            ret = element.validateClientFields(ClientAccount.text());
        }
    
        // On hold customer field
        if(ret && CustTable::find(ClientAccount.text()).HMCustOnHold)
        {
            error("@MAZ12052");
            ret = false;
        }
    
    
        if(ret)
        {
            ret = element.validateServices();
        }
        if(ret)
        {
            custTable = CustTable::findRecId(HMPatientLocal.CustTable);
            if(custTable.openInvoiceBalanceMST() > 0)
            {
                if(Box::yesNo("@MAZ11771", dialogButton::No,"@MAZ7757") == DialogButton::No)
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProtocol</Name>
				<Source><![CDATA[
    public boolean validateProtocol(date _appDate, int _appTime, RecId _apptRecId)
    {
        HMPatient hmPatient;
        HMCustomerServiceContractHeader serviceContractHEader;
        HMCustomerServiceContractLines  serviceContractLines;
        HMProtocolServiceAppointmentLog protocolAppLog;
        RecId clientAccountLocal;
        utcDateTime lastDateTime;
        Bom Bom;
    
        if(HMPatientRecId)
        {
            hmPatient = hmPatient::find(HMPatientRecId);
            clientAccountLocal = hmPatient.Client;
            select * from serviceContractHEader
            where serviceContractHEader.CustAccount == CustTable::findRecId(clientAccountLocal).AccountNum;
            if(serviceContractHEader)
            {
                select * from serviceContractLines
                where serviceContractLines.HMCustomerServiceContractHeader == serviceContractHEader.RecId
                && serviceContractLines.BOMTable == BOMVersion::findRecId(BomVersionId).BOMId;
    
                if(serviceContractLines)
                {
                    switch(serviceContractLines.HMServiceContractRecurrence)
                    {
                        case HMServiceContractRecurrence::Every2Months:
                            lastDateTime = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-2);
                            break;
                        case HMServiceContractRecurrence::Every2Weeks:
                            lastDateTime = DateTimeUtil::addDays(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-14);
                            break;
                        case HMServiceContractRecurrence::Every3Months:
                            lastDateTime = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-3);
                            break;
                        case HMServiceContractRecurrence::Every3Weeks:
                            lastDateTime = DateTimeUtil::addDays(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-21);
                            break;
                        case HMServiceContractRecurrence::Every4Months:
                            lastDateTime = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-4);
                            break;
                        case HMServiceContractRecurrence::HalfYearly:
                            lastDateTime = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-6);
                            break;
                        case HMServiceContractRecurrence::Monthly:
                            lastDateTime = DateTimeUtil::addMonths(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-1);
                            break;
                        case HMServiceContractRecurrence::Weekly:
                            lastDateTime = DateTimeUtil::addDays(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-7);
                            break;
                        case HMServiceContractRecurrence::Yearly:
                            lastDateTime = DateTimeUtil::addYears(DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone()),-1);
                            break;
                    }
                    select count(RecId) from protocolAppLog
                    where protocolAppLog.HMResourceSchedulingAppointment != _apptRecId
                    && protocolAppLog.AppointmentDateTime >= lastDateTime
                    && protocolAppLog.AppointmentDateTime <= DateTimeUtil::newDateTime(_appDate,_appTime,DateTimeUtil::getClientMachineTimeZone())
                    && protocolAppLog.HMPatient == HMPatientRecId
                    && protocolAppLog.BOMVersion == BomVersionId;
    
                    if( protocolAppLog.RecId > 0)
                    {
    
                        warning(SysLabel::labelId2String2('@MAZ11032'));
                        return false;
                    }
    
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServices</Name>
				<Source><![CDATA[
    public boolean validateServices()
    {
        boolean                                 ret = true;
        HMResourceSchedulingAppointmentInvent   hmResourceSchedulingAppointmentInvent;
        HMInventTable                           hmInventTable;
        while select * from HMAppointmentInventTmp
        {
            hmResourceSchedulingAppointmentInvent.InventTable = HMAppointmentInventTmp.ItemId;
            hmResourceSchedulingAppointmentInvent.PatientResponsibility = HMAppointmentInventTmp.PatientResponsibility;
            /*if(HMAppointmentInventTmp.PatientResponsibility == HMPatientPaymentResponsibility::Client)
            {
                if(ClientAccount.text() == '')
                {
                    ret = checkfailed(strFmt("@MAZ11762", HMAppointmentInventTmp.ItemId));
                }
            }
            else if(HMAppointmentInventTmp.PatientResponsibility == HMPatientPaymentResponsibility::Government)
            {
                select RAMQ,RamqClient from hmInventTable
                where hmInventTable.InventTable == HMAppointmentInventTmp.ItemId;
                if(hmInventTable.RAMQ == NoYes::No || hmInventTable.RamqClient == '')
                {
                    ret = checkFailed(strFmt("@MAZ11763",HMAppointmentInventTmp.ItemId));
                }
            }*/
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidReasons</Name>
				<Source><![CDATA[
    private boolean ValidReasons()
    {
        List            reasonsList = new List(Types::String);
        ListEnumerator  listEnumerator;
        boolean         ret;
    
        reasonsList     = strSplit(HMPatientEncounter_Reason.valueStr(),';');
        listEnumerator  = reasonsList.getEnumerator();
    
        while (listEnumerator.moveNext())
        {
            ret = false;
            enumerReason    = mapKeyValueReason.getEnumerator();
            while (enumerReason.moveNext())
            {
                if (enumerReason.currentValue() == strLRTrim(listEnumerator.current()))
                {
                    ret = true;
                    break;
                }
            }
            if (!ret)
            {
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WeeklySchedulsdsdeWrite</Name>
				<Source><![CDATA[
    public void WeeklySchedulsdsdeWrite()
    {
    
            recurrenceRecid = HMRecurrentApptDetail.RecId;
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeHMAppointmentWithoutValidation</Name>
				<Source><![CDATA[
    public void writeHMAppointmentWithoutValidation()
    {
        HMResourceSchedulingAppointmentTmp     HMResourceSchedulingAppointmentTmpLocal,HMResourceSchedulingAppointmentTmpLoad;
    
        int cointer;
        RecId total;
        RecId          treatmentId;
        TransDate  maxdateLocal;
        TransDate  startDateLocal;
        int counter = 0;
        boolean ret = false;
        int getCount =0;
        boolean     check = true;
        cointer= 0;
        treatmentId = TreatmentClassification.value();
    
    //
       //// HMResourceSchedulingAppointmentTmpLoad =  HMResourceSchedulingAppointmentTmp_DS.getFirst(true);
    //
        //while (HMResourceSchedulingAppointmentTmpLoad)
        //{
            //ret = true;
            //if(check)
            //{
                //element.recurranceSchedulerWrite();
                //startDateLocal = HMResourceSchedulingAppointmentTmpLoad.AppointmentDate;
                //check = false;
            //}
            //element.insertRecurrenceRecordGen(HMResourceSchedulingAppointmentTmpLoad,treatmentId);
            //maxdateLocal  = HMResourceSchedulingAppointmentTmpLoad.AppointmentDate;
            //HMResourceSchedulingAppointmentTmpLoad =  HMResourceSchedulingAppointmentTmp_ds.getNext();
            //getCount++;
    //
        //}
        //if(ret)
        //{
            //total = getCount;
        //}
        //else
        //{
    
            while select *  from   HMResourceSchedulingAppointmentTmp
            {
                if(HMResourceSchedulingAppointmentTmp.IsDelayed == NoYes::No)
               cointer++;
            }
           // select  count(RecId) from   HMResourceSchedulingAppointmentTmp where HMResourceSchedulingAppointmentTmp.IsDelayed == NoYes::No;
            if(cointer == 0) //HMResourceSchedulingAppointmentTmp.RecId == 0)
            {
    
    
                    while select * from HMResourceSchedulingAppointmentTmp where HMResourceSchedulingAppointmentTmp.IsDelayed == NoYes::Yes
                    {
                        if(check)
                        {
                            element.recurranceSchedulerWrite();
                            startDateLocal = HMResourceSchedulingAppointmentTmpLoad.AppointmentDate;
                            check = false;
                        }
                         HMResourceSchedulingAppointmentTmpLocal = HMResourceSchedulingAppointmentTmp;
                         element.insertRecurrenceRecordGen(HMResourceSchedulingAppointmentTmpLocal,treatmentId);
    
                    }
                      select count(RecId)  from HMResourceSchedulingAppointmentTmp where HMResourceSchedulingAppointmentTmp.IsDelayed == NoYes::Yes;
                      total = HMResourceSchedulingAppointmentTmp.RecId;
                      select maxOf(AppointmentDate)  from HMResourceSchedulingAppointmentTmp where HMResourceSchedulingAppointmentTmp.IsDelayed == NoYes::Yes;
                      maxdateLocal = HMResourceSchedulingAppointmentTmp.AppointmentDate;
    
    
                if (total != 0)
                {
                        info(int642str(total) +' ' +"@MAZ9117" +' ' +date2StrUsr(startDateLocal,0)+' ' + "@MAZ9118" + ' '+date2StrUsr(maxdateLocal,0));
                        element.updateOccuranceEndDate(maxdateLocal);
                        element.close();
                }
                else
                {
    
                    element.resetForRecurrence(true);
                    // warning("@MAZ9205");
                }
            }
            else
            {
    
               error("@MAZ9351");
            }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>WriteRecurrenceAppointments</Name>
				<Source><![CDATA[
    public void WriteRecurrenceAppointments(TransDate _appointmentdate)
    {
        HMResourceSchedulingAppointment         hmResourceSchedulingAppointmentCheck;
        utcDateTime appointmentEnd;
        int priorityNumber;
    
    
    
        select count(recId) from hmResourceSchedulingAppointmentCheck
                    where hmResourceSchedulingAppointmentCheck.AppointmentDate == _appointmentdate//AppointmentDate.dateValue()
                    && hmResourceSchedulingAppointmentCheck.AppointmentTime == AppointmentTime.value()
                    && hmResourceSchedulingAppointmentCheck.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                    && hmResourceSchedulingAppointmentCheck.HMAppointmentType != HMAppointmentType::Admission
                    && hmResourceSchedulingAppointmentCheck.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId;
    
                    priorityNumber = int642int(hmResourceSchedulingAppointmentCheck.RecId) + 1;
    
    
                if(openMode == HMAppointmentFormOpen::Search && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                {
                    hmResourceSchedulingAppointmentNew.IsOverBooked = hmResourceSchedulingOpenTimeSlotsTmp.IsOverBooked;
                }
                else
                {
                    hmResourceSchedulingAppointmentNew.IsOverBooked = NoYes::No;
                }
    
                hmResourceSchedulingAppointmentNew.HMPatient=HMPatientRecId;
                hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode = HMScheduleTypeRecId;
                hmResourceSchedulingAppointmentNew.HMResourceSchedulingPlanningObject = hmResourceSchedulingPlanningObjectMain.RecId;
                hmResourceSchedulingAppointmentNew.AppointmentDate = _appointmentdate;//AppointmentDate.dateValue();
                hmResourceSchedulingAppointmentNew.AppointmentTime = AppointmentTime.value();
                hmResourceSchedulingAppointmentNew.HMRecurrentApptDetail = recurrenceRecid;
    
                if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                {
                    appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appointmentdate,AppointmentTime.value()),element.getApptDuration());
                    hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                    hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                }
                else if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                {
                    appointmentEnd = DateTimeUtil::addDays(DateTimeUtil::newDateTime(_appointmentdate,AppointmentTime.value()),element.getApptDuration());
                    hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                    hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                }
    
                hmResourceSchedulingAppointmentNew.AppointmentStatus=HMResourceSchedulingAppointmentStatus::Open;
                hmResourceSchedulingAppointmentNew.PriorityNumber=priorityNumber;
                hmResourceSchedulingAppointmentNew.Notes = Notes.text();
    
                if(hmResourceSchedulingAppointmentNew.validateWrite())
                {
                    hmResourceSchedulingAppointmentNew.insert();
                    isInserted = true;
    
                }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WriteRecurrenceAppointmentsTmp</Name>
				<Source><![CDATA[
    public void WriteRecurrenceAppointmentsTmp(TransDate _appointmentdate,int priorityNumber,NoYes isAvail = NoYes::Yes)
    {
        HMResourceSchedulingAppointmentTmp.AppointmentDate = _appointmentdate;
        HMResourceSchedulingAppointmentTmp.AppointmentTime = AppointmentTime.value();
        HMResourceSchedulingAppointmentTmp.PriorityNumber=priorityNumber;
        HMResourceSchedulingAppointmentTmp.IsDelayed = isAvail;
    
        if(!element.isValidRecurrence(_appointmentdate,AppointmentTime.value()))
        {
            HMResourceSchedulingAppointmentTmp.IsDelayed = NoYes::No;
        }
        if(HMResourceSchedulingAppointmentTmp.validateWrite())
        {
            HMResourceSchedulingAppointmentTmp.insert();
    
        }
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttachmentDoc</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public HmResourceSchedulingAttachmentTmpTable getAttachmentDoc()
    {
        return HmResourceSchedulingAttachmentTmpTable;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMResourceSchedulingAppointment</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            boolean                         isActualArrivalTimeSet;
            HMResourceSchedulingAppointment hmResourceSchedulingAppointmentCheck;
            HMAppoinmentLog                 hmAppoinmentLog;
            utcDateTime                     appointmentEnd;
            boolean                         email= false;
            int priorityNumber;
            container conReason;
            Object formRun;
            RecId                           appRecId;
            HMPatient                       appointmentPatient;
            DocuRef                         docuref;
            
            DocuValue                       docuvalue;
            DocuActionArchive archive;
            int             recordsCount;
            Filename filepath;
            Filename filename;
            Filename fileType;
            str fileNameString;
            boolean validate = true;
            HMCaseService hmCaseService;
        
            HMResourceSchedulingAppointment         sourceAppointment;
            HMResourceSchedulingAppointment         previousAppointment;
            HMResourceSchedulingPlanningObject      previousApptPlanning, apptPlanning;
        
           // super();
            if (openMode == HMAppointmentFormOpen::Edit)
            {
                try
                {
                    
                    
                    select forupdate * from hmResourceSchedulingAppointmentForEdit
                        where hmResourceSchedulingAppointmentForEdit.RecId == hmResourceSchedulingAppointmentForDataFetch.RecId;

                    isActualArrivalTimeSet = hmResourceSchedulingAppointmentForEdit.ActualArrivalTime != -1 ? true : false;
                    ttsBegin;
                    
                    hmResourceSchedulingAppointmentForEdit.HMPatient            = HMPatientRecId;
                    hmResourceSchedulingAppointmentForEdit.PatientName          = HMResourceSchedulingAppointment_PatientName.text();
                    hmResourceSchedulingAppointmentForEdit.AppointmentDate      = AppointmentDate.dateValue();
                    hmResourceSchedulingAppointmentForEdit.AppointmentTime      = AppointmentTime.value();
                    hmResourceSchedulingAppointmentForEdit.Notes                = Notes.valueStr();  // added by yasir
                    hmResourceSchedulingAppointmentForEdit.PatientContact       = HMResourceSchedulingAppointment_PatientContact.text();
                    hmResourceSchedulingAppointmentForEdit.BOMVersion           = BOMVersionId;
                    hmResourceSchedulingAppointmentForEdit.Client               = ClientAccount.text();
                    hmResourceSchedulingAppointmentForEdit.HMConfirmationStatus = ConfirmationStatus.selection();
        
                    hmResourceSchedulingAppointmentForEdit.PONum = PONum.text();
                    hmResourceSchedulingAppointmentForEdit.EmployeeNum = EmployeeNum.text();
                    hmResourceSchedulingAppointmentForEdit.GOPNum = GOPNum.text();
                    hmResourceSchedulingAppointmentForEdit.HMBookingOrigin = bookingOriginRecId;
                    hmResourceSchedulingAppointmentForEdit.ClientBillingLogisticsPostalAddress = clientBillingAddressRecId;
                    hmResourceSchedulingAppointmentForEdit.ClientReportLogisticsPostalAddres = clientReportAddressRecId;
                    hmResourceSchedulingAppointmentForEdit.RequestorContactPerson = Requestor.text();
                    hmResourceSchedulingAppointmentForEdit.ReportSentContactPerson = ReportSentTo.text();
                    hmResourceSchedulingAppointmentForEdit.PatientRequestor = PatientRequestor.value();
                    hmResourceSchedulingAppointmentForEdit.SendEmailTo = SendEmailTo.selection();
                    hmResourceSchedulingAppointmentForEdit.Referral = Referral.value();
                    hmResourceSchedulingAppointmentForEdit.HMPatientInsurance = patientInsuranceRecId;
                    hmResourceSchedulingAppointmentForEdit.PreAuthorizationNumber = PreAuthorizationNumber.text();
                    hmResourceSchedulingAppointmentForEdit.PreAuthorizationStatus = PreAuthorizationStatus.selection();
                    hmResourceSchedulingAppointmentForEdit.PreAuthValidDate = preAuthValidDate.dateValue();
        
                    hmResourceSchedulingAppointmentForEdit.HMOrganizationalUnitServiceLocation = serviceLocationRecId;
        
                    hmResourceSchedulingAppointmentForEdit.CreditCardTokenRequired = CreditCardTokenRequired.value();
                    hmResourceSchedulingAppointmentForEdit.CreditCardToken = CreditCardToken.text();
                    hmResourceSchedulingAppointmentForEdit.RequestDate = RequestDate.dateValue();
                    hmResourceSchedulingAppointmentForEdit.CriticalMedicalInformation = CriticalMedInfo.valueStr();
                    hmResourceSchedulingAppointmentForEdit.BookingNotes = bookingnotes.valueStr();
        
        
                    if (HMResourceSchedulingAppointment_IsSpecificConsultant.checked())
                    {
                       hmResourceSchedulingAppointmentForEdit.IsSpecificConsultant                 = NoYes::Yes;
                    }
                    else
                    {
                        hmResourceSchedulingAppointmentForEdit.IsSpecificConsultant                 = NoYes::No;
                    }
        
                    if (HMResourceSchedulingAppointment_RescheduleWithoutConfirmation.checked())
                    {
                        hmResourceSchedulingAppointmentForEdit.RescheduleWithoutConfirmation = NoYes::Yes;
        
                    }
                    else
                    {
                        hmResourceSchedulingAppointmentForEdit.RescheduleWithoutConfirmation = NoYes::No;
                    }
        
                    hmResourceSchedulingAppointmentForEdit.bed = bedRecId;
        
                    if (hmResourceSchedulingAppointmentForEdit.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Tentative && HMPatient::find(HMPatientRecId).CustTable != 0)
                    {
                        hmResourceSchedulingAppointmentForEdit.AppointmentStatus = HMResourceSchedulingAppointmentStatus::Open;
                    }
        
                    if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient || hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Physiotherapy || hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Surgery)
                    {
                        //appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointmentForDataFetch.HMResourceSchedulingTypeCode).Duration);
                        appointmentEnd = HMResourceSchedulingHelper::calculateApptDateEndTime(HMScheduleTypeRecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster, AppointmentDate.dateValue(), AppointmentTime.value());
        
                        hmResourceSchedulingAppointmentForEdit.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                        hmResourceSchedulingAppointmentForEdit.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                        conReason = element.getReasonFromMap();
                        hmResourceSchedulingAppointmentForEdit.ChiefComplaint = conReason;
                    }
                    else if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                    {
                        appointmentEnd = DateTimeUtil::addDays(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
                        hmResourceSchedulingAppointmentForEdit.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                        hmResourceSchedulingAppointmentForEdit.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                        hmResourceSchedulingAppointmentForEdit.HMTreatmentClassification = TreatmentClassification.value();
                        hmResourceSchedulingAppointmentForEdit.AppointmentNumber  = appointmentNumber;
                    }
        
                    if (!isActualArrivalTimeSet)
                    {
                        hmResourceSchedulingAppointmentForEdit.ActualArrivalTime = 0;
                    }
                     
                    if(hmResourceSchedulingAppointmentForEdit.validateWrite())
                    {
                        if (!isActualArrivalTimeSet)
                        {
                            hmResourceSchedulingAppointmentForEdit.ActualArrivalTime = -1;
                        }
                        
                        hmResourceSchedulingAppointmentForEdit.AppointmentReason = appointmentReason;
                        if(incompleteInfo)
                        {
                            hmResourceSchedulingAppointmentForEdit.HMConfirmationStatus = HMAppointmentConfirmationStatus::IncompleteInfo;
                        }
                        else if(hmResourceSchedulingAppointmentForDataFetch.HMConfirmationStatus == HMAppointmentConfirmationStatus::IncompleteInfo && ConfirmationStatus.selection() == HMAppointmentConfirmationStatus::IncompleteInfo)
                        {
                            hmResourceSchedulingAppointmentForEdit.HMConfirmationStatus = HMAppointmentConfirmationStatus::None;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentForEdit.HMConfirmationStatus = ConfirmationStatus.selection();
                        }
        
                        hmResourceSchedulingAppointmentForEdit.IncompleteInfoLog = incomleteInfoMessage;
                        if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv))
                        {
                            hmResourceSchedulingAppointmentForEdit.AppointmentStatus = HMResourceSchedulingAppointmentStatus::InvoiceAndPay;
                        }
                        if(hmResourceSchedulingAppointmentForEdit.PrimaryAppointment == YesNo::Yes)
                        {
                            HMCaseManagement::updateCaseInsurance(hmResourceSchedulingAppointmentForEdit.HMCase,hmResourceSchedulingAppointmentForEdit.HMPatientInsurance,hmResourceSchedulingAppointmentForEdit.PreAuthValidDate, hmResourceSchedulingAppointmentForEdit.PreAuthorizationStatus, hmResourceSchedulingAppointmentForEdit.PreAuthorizationNumber);
                        }
        
                        
                        hmResourceSchedulingAppointmentForEdit.update();
                        email = true;
                        if(incompleteInfo)
                        {
                            info("@MAZ11973");
                        }
        
                        element.storeRequiredDocs(hmResourceSchedulingAppointmentForEdit.RecId);
                        HMResourceSchedulingHelper::createRelatedAppointment(hmResourceSchedulingAppointmentForEdit, hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit,
                                            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc, HMAppointmentInventTmp);
                        //info(strFmt('@MAZ9199',appointmentNumber));
                        isInserted = true;
        
                        // added by yasir
        
                        select forUpdate hmAppoinmentLog
                        where hmAppoinmentLog.HMResScheduleAppointment == hmResourceSchedulingAppointmentForEdit.RecId
                        && hmAppoinmentLog.HMAppointLogStatus == HMResourceSchedulingAppointmentStatus::Confirmed;
        
                        if(hmAppoinmentLog)
                        {
                            hmAppoinmentLog.HMResScheduleAppointment    = hmResourceSchedulingAppointmentForEdit.RecId;
                            hmAppoinmentLog.HMAppointLogStatus          = HMResourceSchedulingAppointmentStatus::Confirmed;
                            hmAppoinmentLog.HMAppointLogDate            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogNote            = Notes.valueStr();
                            hmAppoinmentLog.update();
                        }
        
                        ttsCommit;
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                    appRecId = hmResourceSchedulingAppointmentForEdit.RecId;
                }
                catch
                {
                    validate = false;
                    ttsAbort;
                    error('An error occurred, the appointment could not be saved.');
                }
            }
            //New mode
            else
            {
                //when recurrence appointment schedule
                if (IsRecurrence)
                {
                     element.writeHMAppointmentWithoutValidation();
                }
                //when no recurrence appointment schedule
                else
                {
                    try
                    {
                        select count(recId) from hmResourceSchedulingAppointmentCheck
                            where hmResourceSchedulingAppointmentCheck.AppointmentDate == AppointmentDate.dateValue()
                            && hmResourceSchedulingAppointmentCheck.AppointmentTime == AppointmentTime.value()
                            && hmResourceSchedulingAppointmentCheck.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                            && hmResourceSchedulingAppointmentCheck.HMAppointmentType != HMAppointmentType::Admission
                            && hmResourceSchedulingAppointmentCheck.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId;
        
                        priorityNumber = int642int(hmResourceSchedulingAppointmentCheck.RecId) + 1;
        
                        if (openMode == HMAppointmentFormOpen::Search && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                        {
                            hmResourceSchedulingAppointmentNew.IsOverBooked = hmResourceSchedulingOpenTimeSlotsTmp.IsOverBooked;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.IsOverBooked = NoYes::No;
                        }
        
                        insuranceExists     = false;
                        isFollowUpEligible  = false;
        
                        schedulingTypeCode = HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId);
        
                        if (schedulingTypeCode.HMScheduleType == HMScheduleType::FollowUp)
                        {
                             /*patientInsurance = HMPatientInsurance::find(patientInsuranceRecId);
        
                            if (patientInsurance)
                            {
                                insuranceCarrier = patientInsurance.getCarrier();
        
                                if (insuranceCarrier)
                                {
                                    insuranceExists = true;
                                    freeFollowUpDays = insuranceCarrier.HMFreeFollowUpDays;
                                }
                            }
        
                            if (!insuranceExists)
                            {
                                freeFollowUpDays = billParameters.FreeFollowUpDays;
                            }*/
        
                            while select previousAppointment
                                where previousAppointment.HMPatient == HMPatientRecId
                               // && previousAppointment.AppointmentDate > today() - freeFollowUpDays
                                && previousAppointment.AppointmentDate <= AppointmentDate.dateValue()
                                    join PreviousApptPlanning
                                        where PreviousApptPlanning.RecId == previousAppointment.HMResourceSchedulingPlanningObject
                                            //&& previousAppointment.RecId != HMPatientRecId
                                            && !isFollowUpEligible
                            {
                                if (previousAppointment.HMPatientInsurance == patientInsuranceRecId)
                                {
                                    apptPlanning = HMResourceSchedulingPlanningObject::find(hmResourceSchedulingPlanningObjectMain.RecId);
        
                                    if (HMOrganizationalUnit::find(apptPlanning.HMOrganizationalUnit).HMSpecialtyCode == HMOrganizationalUnit::find(previousApptPlanning.HMOrganizationalUnit).HMSpecialtyCode)
                                    {
                                        schedulingTypeCode = HMResourceSchedulingTypeCode::find(previousAppointment.HMResourceSchedulingTypeCode);
        
                                        if (schedulingTypeCode.HMScheduleType == HMScheduleType::New)
                                        {
                                            isFollowUpEligible = true;
                                            sourceAppointment = previousAppointment;
                                        }
                                    }
                                }
                            }
        
                            if (!isFollowUpEligible)
                            {
                                error("@MAZ13371");
                                throw Exception::Error;
                            }
                        }
        
                        ttsBegin;
        
                        hmResourceSchedulingAppointmentNew.HMPatient                            = HMPatientRecId;
                        hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode         = HMScheduleTypeRecId;
                        hmResourceSchedulingAppointmentNew.HMResourceSchedulingPlanningObject   = hmResourceSchedulingPlanningObjectMain.RecId;
                        hmResourceSchedulingAppointmentNew.AppointmentDate                      = AppointmentDate.dateValue();
                        hmResourceSchedulingAppointmentNew.AppointmentTime                      = AppointmentTime.value();
                        //hmResourceSchedulingAppointmentNew.AppointmentDateTime                = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentNew.AppointmentDate, hmResourceSchedulingAppointmentNew.AppointmentTime, HMParameters::getAppointmentTimeZone());
                        hmResourceSchedulingAppointmentNew.HMBookingOrigin                      = hmParameters.HMBookingOrigin;
                        hmResourceSchedulingAppointmentNew.BOMVersion                           = BomVersionId;
                        hmResourceSchedulingAppointmentNew.Client                               = ClientAccount.text();
        
                        if(incompleteInfo)
                        {
                            hmResourceSchedulingAppointmentNew.HMConfirmationStatus = HMAppointmentConfirmationStatus::IncompleteInfo;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.HMConfirmationStatus = ConfirmationStatus.selection();
                        }
        
                        if (HMResourceSchedulingAppointment_IsSpecificConsultant.checked())
                        {
                          hmResourceSchedulingAppointmentNew.IsSpecificConsultant   = NoYes::Yes;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.IsSpecificConsultant = NoYes::No;
                        }
        
                        if (HMResourceSchedulingAppointment_RescheduleWithoutConfirmation.checked())
                        {
                            hmResourceSchedulingAppointmentNew.RescheduleWithoutConfirmation = NoYes::Yes;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.RescheduleWithoutConfirmation = NoYes::No;
                        }
                        // appointment number generate when going to write into database
        
                        // appointmentNumber          = appointmentClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(ouRecId)); //HMResourceSchedulingAppointment_AppointmentNumber.text();
                         hmResourceSchedulingAppointmentNew.AppointmentNumber   = appointmentNumber;
        
                        if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient || hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Physiotherapy ||hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Surgery)
                        {
                            appointmentEnd = HMResourceSchedulingHelper::calculateApptDateEndTime(HMScheduleTypeRecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster, AppointmentDate.dateValue(), AppointmentTime.value());
        
                            hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                            hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                            conReason = element.getReasonFromMap();
                            hmResourceSchedulingAppointmentNew.ChiefComplaint = conReason;
                        }
                        else if(hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                        {
                            appointmentEnd = DateTimeUtil::addDays(DateTimeUtil::newDateTime(AppointmentDate.dateValue(),AppointmentTime.value()),element.getApptDuration());
                            hmResourceSchedulingAppointmentNew.AppointmentEndTime = DateTimeUtil::time(appointmentEnd);
                            hmResourceSchedulingAppointmentNew.AppointmentEndDate = DateTimeUtil::date(appointmentEnd);
                            hmResourceSchedulingAppointmentNew.HMTreatmentClassification = TreatmentClassification.value();
                        }
        
                        if ( HMPatient::find(HMPatientRecId).CustTable == 0) //For unregistered patient
                        {
                            hmResourceSchedulingAppointmentNew.AppointmentStatus    = HMResourceSchedulingAppointmentStatus::Tentative;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.AppointmentStatus    = HMResourceSchedulingAppointmentStatus::Confirmed;
                        }
                        hmResourceSchedulingAppointmentNew.PriorityNumber       = priorityNumber;
                        hmResourceSchedulingAppointmentNew.Notes                = Notes.text();
                        hmResourceSchedulingAppointmentNew.PatientName          = HMResourceSchedulingAppointment_PatientName.text();
                        //hmResourceSchedulingAppointmentNew.PatientContact       = HMResourceSchedulingAppointment_PatientContact.text();
                        hmResourceSchedulingAppointmentNew.PatientContact       = HMResourceSchedulingAppointment_PatientContact.valueStr();
                        hmResourceSchedulingAppointmentNew.bed                  = bedRecId;
        
                        hmResourceSchedulingAppointmentNew.PONum = PONum.text();
                        hmResourceSchedulingAppointmentNew.EmployeeNum = EmployeeNum.text();
                        hmResourceSchedulingAppointmentNew.GOPNum = GOPNum.text();
                        hmResourceSchedulingAppointmentNew.HMBookingOrigin = bookingOriginRecId;
                        hmResourceSchedulingAppointmentNew.RequestorContactPerson = Requestor.text();
                        hmResourceSchedulingAppointmentNew.ReportSentContactPerson = ReportSentTo.text();
                        hmResourceSchedulingAppointmentNew.ClientBillingLogisticsPostalAddress = clientBillingAddressRecId;
                        hmResourceSchedulingAppointmentNew.ClientReportLogisticsPostalAddres = clientReportAddressRecId;
                        hmResourceSchedulingAppointmentNew.PatientRequestor = PatientRequestor.value();
                        hmResourceSchedulingAppointmentNew.SendEmailTo = SendEmailTo.selection();
                        hmResourceSchedulingAppointmentNew.Referral = Referral.value();
                        hmResourceSchedulingAppointmentNew.HMPatientInsurance = patientInsuranceRecId;
                        hmResourceSchedulingAppointmentNew.PreAuthorizationNumber = PreAuthorizationNumber.text();
                        hmResourceSchedulingAppointmentNew.PreAuthorizationStatus = PreAuthorizationStatus.selection();
                        hmResourceSchedulingAppointmentNew.PreAuthValidDate = preAuthValidDate.dateValue();
        
                        hmResourceSchedulingAppointmentNew.HMOrganizationalUnitServiceLocation = serviceLocationRecId;
        
                        hmResourceSchedulingAppointmentNew.CreditCardTokenRequired = CreditCardTokenRequired.value();
                        hmResourceSchedulingAppointmentNew.CreditCardToken = CreditCardToken.text();
                        hmResourceSchedulingAppointmentNew.RequestDate = RequestDate.dateValue();
        
        
                        hmResourceSchedulingAppointmentNew.BookingNotes = bookingnotes.valueStr();
                        hmResourceSchedulingAppointmentNew.CriticalMedicalInformation= CriticalMedInfo.valueStr();
        
                        //Attachment Work DOne on 20July 2016;
                        if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
                        {
                            hmResourceSchedulingAppointmentNew.HMWaitingList = callerCommonRecord.RecId;
                        }
        
                        if(openMode == HMAppointmentFormOpen::AppointmentSearchListPage && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient)
                        {
                            hmResourceSchedulingAppointmentNew.AppointmentStatus = HMResourceSchedulingAppointmentStatus::CheckedIn;
                            hmResourceSchedulingAppointmentNew.HMAppointmentType = HMAppointmentType::WalkIn;
                        }
        
                        if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentOrder))
                        {
                            hmResourceSchedulingAppointmentNew.HMPatientVisit = HMResourceSchedulingAppointment::find(hmCaseTrans.HMResourceSchedulingAppointment).HMPatientVisit;
                            hmResourceSchedulingAppointmentNew.HMCase = hmCaseTrans.HMCase;
                            hmResourceSchedulingAppointmentNew.PrimaryAppointment = YesNo::No;
                        }
                        else
                        {
                            hmResourceSchedulingAppointmentNew.HMPatientVisit = HMResourceSchedulingHelper::createAppointmentVisit(hmResourceSchedulingAppointmentNew.AppointmentDate,
                                                                                        hmResourceSchedulingAppointmentNew.AppointmentTime, hmResourceSchedulingAppointmentNew.HMPatient,
                                                                                        hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit);
        
                            if(!hmResourceSchedulingAppointmentNew.HMPatientVisit)
                            {
                                checkFailed("@MAZ11211");
                                appointmentClass.deleteNewNumSeqForAppointmentNum();
                               
                            }
        
                            if (hmResourceSchedulingAppointmentNew.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                            {
                                if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentReferral))
                                {
                                    if(hmReferralsTmp.ReferralType == HMReferralType::ConsultationAndTreatment)
                                    {
                                        hmResourceSchedulingAppointmentNew.HMCase = hmReferralsTmp.HMCase;
                                    }
                                    else
                                    {
                                        hmResourceSchedulingAppointmentNew.HMCase = HMCaseManagement::createCase(hmResourceSchedulingAppointmentNew.HMPatient, hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit, hmResourceSchedulingPlanningObjectMain.CaseType, patientInsuranceRecId,hmResourceSchedulingAppointmentNew.PreAuthValidDate,hmResourceSchedulingAppointmentNew.PreAuthorizationStatus, hmResourceSchedulingAppointmentNew.PreAuthorizationNumber);
                                    }
                                }
                                else
                                {
                                    if (isFollowUpEligible)
                                    {
                                        hmResourceSchedulingAppointmentNew.HMCase = sourceAppointment.HMCase;
                                    }
                                    else
                                    {
                                        hmResourceSchedulingAppointmentNew.HMCase = HMCaseManagement::createCase(hmResourceSchedulingAppointmentNew.HMPatient, hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit, hmResourceSchedulingPlanningObjectMain.CaseType, patientInsuranceRecId,hmResourceSchedulingAppointmentNew.PreAuthValidDate,hmResourceSchedulingAppointmentNew.PreAuthorizationStatus, hmResourceSchedulingAppointmentNew.PreAuthorizationNumber);
                                    }
                                }
        
                                if(!hmResourceSchedulingAppointmentNew.HMCase)
                                {
                                    checkFailed("@MAZ13195");
                                    appointmentClass.deleteNewNumSeqForAppointmentNum();
                                }
                            }
                        }
        
                        if(hmResourceSchedulingAppointmentNew.validateWrite() && hmResourceSchedulingAppointmentNew.HMPatientVisit)
                        {
                            formRun = element.args().caller();
                            if(formHasMethod(formRun,identifierStr(getHotSpot)))
                            {
                                hmResourceSchedulingAppointmentNew.IsHotspot =  element.args().caller().getHotSpot();
                            }
        
                            hmResourceSchedulingAppointmentNew.BOMVersion = BOMVersionId;
                            hmResourceSchedulingAppointmentNew.ArrivalTime = ArrivalTime.value();
                            hmResourceSchedulingAppointmentNew.IncompleteInfoLog = incomleteInfoMessage;
                            if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv))
                            {
                                hmResourceSchedulingAppointmentNew.AppointmentStatus = HMResourceSchedulingAppointmentStatus::InvoiceAndPay;
                            }
                            hmResourceSchedulingAppointmentNew.ActualArrivalTime = -1;
                            hmResourceSchedulingAppointmentNew.insert();
        
        
                            _HmResourceSchedulingAttachmentTmpTable = HmResourceSchedulingAttachmentTmpTable_ds.getFirst();
                            
                            RecordInsertList recordList = new RecordInsertList(tableNum(DocuRef));
                            while (_HmResourceSchedulingAttachmentTmpTable)
                            {
                                docuref.clear();
                                
                                /*[filepath, filename, fileType] = fileNameSplit(_HmResourceSchedulingAttachmentTmpTable.HMPath);
                                fileNameString                 = filename + fileType;
                                docuref.RefCompanyId           = curext();
                                // docuref.ValueRecId             = docuvalue.RecId;
                                docuref.RefRecId               = hmResourceSchedulingAppointmentNew.RecId;
                                docuref.RefTableId             = tableNum(HMResourceSchedulingAppointment);
                                docuref.HMAttachmentType       = _HmResourceSchedulingAttachmentTmpTable.HMAttachmentType;
                                docuref.TypeId                 = _HmResourceSchedulingAttachmentTmpTable.TypeId;//_HmResourceSchedulingAttachmentTmpTable.TypeId;
                                docuref.Name                   =  filename;
                                docuref.Notes                  = _HmResourceSchedulingAttachmentTmpTable.Notes;
                                recordList.add(docuref);
                                archive = new DocuActionArchive();
                                archive.setDocuType(_HmResourceSchedulingAttachmentTmpTable.TypeId);
                                archive.add(docuRef,_HmResourceSchedulingAttachmentTmpTable.HMPath);*/

                                System.IO.MemoryStream stream = Binary::constructFromContainer(_HmResourceSchedulingAttachmentTmpTable.ImageStreamContainer).getMemoryStream();
                                
                                docuRef = DocumentManagement::attachFile(tableNum(HmResourceSchedulingAttachmentTmpTable),
                                                                        hmResourceSchedulingAppointmentNew.RecId,
                                                                        curExt(),
                                                                        _HmResourceSchedulingAttachmentTmpTable.TypeId,
                                                                        stream,
                                                                        _HmResourceSchedulingAttachmentTmpTable.Name,
                                                                        _HmResourceSchedulingAttachmentTmpTable.FileExtension,
                                                                        _HmResourceSchedulingAttachmentTmpTable.Name,
                                                                        _HmResourceSchedulingAttachmentTmpTable.Notes);
                                
        
                                _HmResourceSchedulingAttachmentTmpTable = HmResourceSchedulingAttachmentTmpTable_ds.getNext();
                            }
                            //recordList.insertDatabase();
                            if (hmResourceSchedulingAppointmentNew.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                            {
                                hmResourceSchedulingAppointmentNew.DocuRef = HMResourceSchedulingHelper::generateQRCode(hmResourceSchedulingAppointmentNew.AppointmentNumber, hmResourceSchedulingAppointmentNew.getPatientChartNum(), hmResourceSchedulingAppointmentNew.RecId);
                                hmResourceSchedulingAppointmentNew.update();
                            }
        
                            HMResourceSchedulingHelper::updateReserveSlotOnAppointment(hmResourceSchedulingAppointmentNew.AppointmentDate, hmResourceSchedulingAppointmentNew.AppointmentEndDate,
                            hmResourceSchedulingAppointmentNew.AppointmentTime, hmResourceSchedulingAppointmentNew.AppointmentEndTime, hmResourceSchedulingPlanningObjectMain.HMResourceMaster);
        
                            hmAppoinmentLog.HMResScheduleAppointment    = hmResourceSchedulingAppointmentNew.RecId;
                            hmAppoinmentLog.HMAppointLogStatus          = hmResourceSchedulingAppointmentNew.AppointmentStatus;
                            hmAppoinmentLog.HMAppointLogDate            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogNote            = Notes.valueStr();
                            hmAppoinmentLog.insert();
        
                            appRecId = hmResourceSchedulingAppointmentNew.RecId;
        
                            email = true;
        
                            element.storeRequiredDocs(hmResourceSchedulingAppointmentNew.RecId);
        
        
                            HMResourceSchedulingHelper::createRelatedAppointment(hmResourceSchedulingAppointmentNew, hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit,
                                            HMResourceSchedulingOpenTimeSlotsTmpMultiResrc, HMAppointmentInventTmp);
        
                            if(incompleteInfo)
                            {
                                info("@MAZ11973");
                            }
                            else
                            {
                                info(strFmt("@MAZ9199",appointmentNumber));
                            }
                            appointmentClass.useNewNumSeqForAppointmentNum();
                            isInserted = true;
        
                            ttsCommit;
                        }
                        else
                        {
                            throw Exception::Error;
                        }
                    }
                    catch
                    {
                        validate = false;
                        ttsAbort;
                        error('An error occurred, the appointment could not be saved.');
                    }
                }
            }
            if (validate)
            {
                element.saveAppointmentServices(appRecId);
                element.saveAppointmentAssets(appRecId);
                element.saveAppointmentClinicStaff(appRecId);
        
                if(openMode != HMAppointmentFormOpen::Edit)
                {
                    if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentOrder))
                    {
                        element.updateCaseTrans(appRecId, hmResourceSchedulingAppointmentNew.AppointmentDate);
                    }
                    else if(callerMenuItemCaller == menuitemDisplayStr(HMResourceSchedulingAppointmentReferral))
                    {
                        hmCaseService = new HMCaseService();
                        hmCaseService.updateAppointmentDetails(str2guid(hmReferralsTmp.ReferralOrderId), hmResourceSchedulingAppointmentNew.AppointmentDate, appRecId);
                    }
                    else
                    {
                        if (hmResourceSchedulingAppointmentNew.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                        {
                            element.createCaseTrans(appRecId);
                        }
                    }
                }
        
                if(EmployeeNum.text())
                {
                    HMPatientClass::updateEmployeeNum(HMPatientRecId, EmployeeNum.text());
                }
        
                if(email && sendEmail)
                {
                    //todo: ax7 email 
                    HMResourceSchedulingHelper::emailBookingDetails(appRecId);
                }
            }
        
            HMEventLogMaintian::updateEventLog(tableNum(HMResourceSchedulingAppointment),HMEventType::AppointmentSchedule,hmResourceSchedulingAppointmentNew.RecId);
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret = true;
            HMResourceSchedulingPublicHoliday               hmResourceSchedulingPublicHoliday;
            HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
            HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
            HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
            HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
            HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
            CustTable                                       custTable;
            boolean                                         formOpenForInvAndPay = element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv);
            hmResourceSchedulingTypeCode                    hmResourceSchedulingTypeCode;
            int     day;
            int     month;
            DialogButton        dialogButton;
            HMAppointmentReserveSlot        hmAppointmentReserveSlotValidate;
            HMPatient                                       HMPatientLocal = HMPatient::find(HMPatientRecId);
        
        
            boolean     check=false;
        
            if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentDetailInv)
            || element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentEditInvPy))
            {
                ret = element.validateInvAndPay();
            }
            else
            {
        
                //ret = super();
                //ret = element.appointmentNumberSeqFormHandler().formMethodDataSourceValidateWrite(ret) && ret;
                if(HMPatientRecId == 0 && HMResourceSchedulingAppointment_PatientName.text() == '')
                {
                    warning("@MAZ1654");
                    ret = false;
                }
                if(hmResourceSchedulingPlanningObjectMain.RecId == 0)
                {
                    warning("@MAZ2662");
                    ret = false;
                }
        
                if(HMScheduleTypeRecId == 0 )
                {
                    warning("@MAZ1971");
                    ret = false;
                }
                else if(scheduleTypePseudoRecId && scheduleTypePseudoRecId == HMScheduleTypeRecId)
                {
                    warning("@MAZ11955");
                    ret = false;
                }
        
                if(AppointmentDate.valueStr() == "")
                {
                    warning("@MAZ1974");
                    ret = false;
                }
                if(AppointmentTime.valueStr() == "" )//|| str2time(AppointmentTime.valueStr()) == -1)
                {
                    warning("@MAZ1976");
                    ret = false;
                }
        
                if (appointmentNumber  == '')
                {
                    error(strFmt("@MAZ8512","@MAZ8923",HMOrganizationalUnit::find(ouRecId).Description));
                    ret = false;
                }
        
                if(CreditCardTokenRequired.value() == NoYes::Yes && CreditCardToken.text() == '')
                {
                    warning(strFmt("@SYS84753","@SYS4000166"));
                    ret = false;
                }
        
                //if(ClientAccount.text() =='')
                //{
                    //warning(strFmt("@SYS84753","@MAZ11182"));
                    //ret = false;
                //}
        //
                //if(!PatientRequestor.value() && Requestor.text() =='')
                //{
                    //warning(strFmt("@SYS84753","@MAZ11601"));
                    //ret = false;
                //}
        //
                //if(!clientBillingAddressRecId)
                //{
                    //warning(strFmt("@SYS84753","@SYS327092"));
                    //ret = false;
                //}
        
                //if(!clientReportAddressRecId)
                //{
                    //warning(strFmt("@SYS84753","@MAZ12143"));
                    //ret = false;
                //}
        
                if(!bookingOriginRecId)
                {
                    warning(strFmt("@SYS84753","@MAZ13055"));
                    ret = false;
                }
        
                //if(!serviceLocationRecId)
                //{
                    //warning(strFmt("@SYS84753","@MAZ11675"));
                    //ret = false;
                //}
        
                //if(HMResourceMasterHelper::isResourceExternal(hmResourceSchedulingPlanningObjectMain.HMResourceMaster) && RequestDate.dateValue() == dateNull())
                //{
                    //warning(strFmt("@SYS84753","@MAZ2992"));
                    //ret = false;
                //}
        
                if(ret && sendEmail)
                {
                    /*switch(SendEmailTo.selection())
                    {
                        case HMAppointmentSendEmailTo::Client:
                            if(!RequestorEmail.text())
                            {
                                dialogButton = Box::yesNo("@MAZ12172",DialogButton::Yes);
                                if(dialogButton  == dialogButton::No)
                                {
                                    ret = false;
                                }
                            }
                            break;
                        case HMAppointmentSendEmailTo::Patient:
                            if(!PatientEmail.text())
                            {
                                dialogButton = Box::yesNo("@MAZ12173",DialogButton::Yes);
                                if(dialogButton  == dialogButton::No)
                                {
                                    ret = false;
                                }
                            }
                            break;
                        case HMAppointmentSendEmailTo::Both:
                            if(!RequestorEmail.text())
                            {
                                dialogButton = Box::yesNo("@MAZ12172",DialogButton::Yes);
                                if(dialogButton  == dialogButton::No)
                                {
                                    ret = false;
                                }
                            }
                            if(ret && !PatientEmail.text())
                            {
                                dialogButton = Box::yesNo("@MAZ12173",DialogButton::Yes);
                                if(dialogButton  == dialogButton::No)
                                {
                                    ret = false;
                                }
                            }
        
                            break;
                    }*/
        
                    if(!PatientEmail.text())
                    {
                        dialogButton = Box::yesNo("@MAZ12173",DialogButton::Yes);
                        if(dialogButton  == dialogButton::No)
                        {
                            ret = false;
                        }
                    }
                }
        
                if(ret && !HMAppointmentInventTmp.RecId)
                {
                    if(openMode == HMAppointmentFormOpen::Edit)
                    {
                        if(hmResourceSchedulingAppointmentForDataFetch.PrimaryAppointment == YesNo::Yes)
                        {
                            warning("@MAZ11890");
                            ret = false;
                        }
                    }
                    else
                    {
                        warning("@MAZ11890");
                        //ret = false;
                    }
                }
        
                if(ret && ClientAccount.text())
                {
                    ret = element.validateClientFields(ClientAccount.text());
                }
        
                // On hold customer field
                if(ret && CustTable::find(ClientAccount.text()).HMCustOnHold)
                {
                    error("@MAZ12052");
                    ret = false;
                }
        
                // medisys demo
             /*   if (BomVersionId != 0 && BomVersionLookUp.text() != "" && openMode != HMAppointmentFormOpen::Edit)
                {
                    if ((HMPatientLocal.Executive && BomVersionId == HMPatientLocal.ExecutiveProtocol) || (HMPatientLocal.PreEmployment && BomVersionId == HMPatientLocal.PreEmploymentProtocol))
                    {
                        ret = true;
                    }
                    else
                    {
                        dialogButton = Box::yesNo("@MAZ11030",DialogButton::Yes);
                        if(dialogButton  == dialogButton::Yes)
                        {
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                    }
                }*/
                if(hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                && hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus != HMResourceSchedulingAppointmentStatus::NoShow
                && hmResourceSchedulingAppointmentForDataFetch.AppointmentStatus != HMResourceSchedulingAppointmentStatus::CheckedOut)
                {
                    if(ret)
                    {
                        if((AppointmentDate.dateValue() < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) || (AppointmentDate.dateValue() == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && AppointmentTime.value() < DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))) && !IsRecurrence)
                        {
                            warning("@MAZ11902");
                            ret = false;
                        }
                    }
                }
        
                if(ret && (hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient || hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::Physiotherapy))
                {
        
                    // to check allowed offline appointments
                    if(!IsRecurrence)
                    {
                        //ret = element.checkAllowedOfflineAppointments();
                    }
                    //to check appointment of the patient at same time
                    if (ret)
                    {
                        ret = element.checkPatientAppointments();
                    }
        
                    //to check appointment of the physician at same time
                    if(ret)
                    {
                        ret = element.checkPhysicianAppointments();
                    }
        
                    //to check overlapping of physician
                    if(ret)
                    {
                        ret = element.checkPatientTimeOverlapping();
                    }
        
                    //to check overlapping of the physician
                    if(ret)
                    {
                        ret = element.checkPhysicianTimeOverlapping();
                    }
        
                    if(ret)
                    {
                        ret = element.checkRelatedAppointmentOverlapping();
                    }
                }
        
                if(ret && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                {
                    ret = element.checkPatientAdmissionAppointments(); //to check appointment of the patient at same time
                }
        
                if (ret)
                {
                    //validation removed due to client requirement
                    /*if (hmResourceSchedulingAppointmentNew)
                    {
                        ret = element.duplicateAppointment(hmResourceSchedulingAppointmentNew.AppointmentDate);
                    }
                    else
                    if (hmResourceSchedulingAppointmentForDataFetch)
                    {
                        ret = element.duplicateAppointment(hmResourceSchedulingAppointmentForDataFetch.AppointmentDate,hmResourceSchedulingAppointmentForDataFetch.RecId);
                    }
                    else
                       {
                            ret = element.duplicateAppointment(AppointmentDate.dateValue());
                    }*/
                }
                if(ret && !IsRecurrence)
                {
                    if(hmResourceSchedulingPlanningObjectMain.ScheduleOnPublicHoliday ==NoYes::No)
                    {
                        day = dayOfMth(AppointmentDate.dateValue());
                        month = mthOfYr(AppointmentDate.dateValue());
        
                        select count(recId) from hmResourceSchedulingPublicHoliday
                            where month==hmResourceSchedulingPublicHoliday.Month
                            && (day >= hmResourceSchedulingPublicHoliday.FromDay && day <= hmResourceSchedulingPublicHoliday.ToDay);
        
                        if(hmResourceSchedulingPublicHoliday.RecId > 0)
                        {
                            dialogButton = Box::yesNo("@MAZ1981", DialogButton::No, "@SYS301622");
                            if(dialogButton == DialogButton::No)
                            {
                                ret = false;
                            }
                        }
                    }
        
                    if(ret && !IsRecurrence)
                    {
                        select * from hmResourceSchedulingWeekPlan
                            join * from hmResourceSchedulingWeekDayPlan
                            join * from hmResourceSchedulingWeekPlanToCalender
                            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject==hmResourceSchedulingPlanningObjectMain.RecId
                            && hmResourceSchedulingWeekPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
                            && hmResourceSchedulingWeekPlan.RecId==hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                            && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(AppointmentDate.dateValue())
                            && hmResourceSchedulingWeekPlanToCalender.YearNo == year(AppointmentDate.dateValue())
                            && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(AppointmentDate.dateValue());
        
        
                        if(hmResourceSchedulingWeekPlan.RecId == 0)
                        {
                           /* dialogButton = Box::yesNo("@MAZ1982", DialogButton::No, "@SYS301622");
                            if(dialogButton == DialogButton::No)
                            {
                                ret = false;
                            }
                           */
                           // error("@MAZ7080");
        
                            select RecId from hmAppointmentReserveSlotValidate
                                    where hmAppointmentReserveSlotValidate.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId
                                    && hmAppointmentReserveSlotValidate.Date == AppointmentDate.dateValue()
                                    && hmAppointmentReserveSlotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Added;
        
                            if(!hmAppointmentReserveSlotValidate.RecId)
                            {
                                error("@MAZ8515");
                                ret = false;
                            }
                        }
                        else
                        {
                            check=true;
                        }
                    }
        
                    if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::OutPatient && HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).AppointmentSubType == HMAppointmentSubType::Searchable)
                    {
                        select count(recId) from hmResourceSchedulingDayPlanItem
                            join * from hmResourceSchedulingDayPlan
                            where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId
                            && (AppointmentTime.value() >= hmResourceSchedulingDayPlanItem.StartTime && AppointmentTime.value() <= hmResourceSchedulingDayPlanItem.EndTime);
        
                        if(hmResourceSchedulingDayPlanItem.RecId < 1)
                        {
                            // show confirmation for VIP patient
                            if (HMPatient::find(HMPatientRecId).IsVIP)
                            {
                                dialogButton = Box::yesNo("@MAZ1983", DialogButton::No, "@SYS301622");
                                if(dialogButton == DialogButton::No)
                                {
                                    ret = false;
                                }
                            }
                            else
                            {
                                 select RecId from hmAppointmentReserveSlotValidate
                                    where hmAppointmentReserveSlotValidate.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectMain.RecId
                                    && hmAppointmentReserveSlotValidate.Date == AppointmentDate.dateValue()
                                    && hmAppointmentReserveSlotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Added
                                    && (hmAppointmentReserveSlotValidate.StartTime <= AppointmentTime.value()
                                    && hmAppointmentReserveSlotValidate.EndTime >= AppointmentTime.value());
        
                                if(!hmAppointmentReserveSlotValidate.RecId)
                                {
        
                                    error("@MAZ7081");
                                    ret = false;
                                    // if no time slot is available and chekbox is checed then add pateint to waitlist
                                    if (AddToWaitlList.checked())
                                    {
                                        element.addToWaitList();
                                        element.close();
                                    }
                                }
                            }
        
                        }
        
                    }
        
                    if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                    {
                        select count(recId) from hmResourceSchedulingDayPlan
                            where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                            && (AppointmentTime.value() >= hmResourceSchedulingDayPlan.DayStartTime && AppointmentTime.value() <= hmResourceSchedulingDayPlan.DayEndTime);
        
                        if(hmResourceSchedulingDayPlan.RecId < 1)
                        {
                            dialogButton = Box::yesNo("@MAZ3400", DialogButton::No, "@SYS301622");
                            if(dialogButton == DialogButton::No)
                            {
                                ret = false;
                            }
                        }
                    }
        
                    if(ret && check && hmResourceSchedulingPlanningObjectMain.CaseType == HMCaseType::InPatient)
                    {
                        select count(recId) from hmResourceSchedulingDayPlanItem
                            join * from hmResourceSchedulingDayPlan
                            where hmResourceSchedulingDayPlan.RecId==hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
                            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == HMScheduleTypeRecId;
        
        
                        if(hmResourceSchedulingDayPlanItem.RecId < 1)
                        {
                            dialogButton = Box::yesNo("@MAZ3396", DialogButton::No, "@SYS301622");
                            if(dialogButton == DialogButton::No)
                            {
                                ret = false;
                            }
                        }
                    }
                }
                if(ret)
                {
                    ret = element.checkIfAssetAlreadyBooked();
                }
                if(ret)
                {
                    ret = element.checkIfSelectedClinicStaffBusy();
                }
        
                if(ret)
                {
                    ret = element.validateServices();
                }
        
        
                if(ret)
                {
                    custTable = CustTable::findRecId(HMPatientLocal.CustTable);
                    if(custTable.openInvoiceBalanceMST() > 0)
                    {
                        if(Box::yesNo("@MAZ11771", dialogButton::No,"@MAZ7757") == DialogButton::No)
                        {
                            ret = false;
                        }
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMClinicStaff2</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            QueryBuildDataSource qbd ;
        
            super();
                this.queryBuildDataSource().clearDynalinks();
            qbd =this.queryBuildDataSource().addDataSource(tableNum(HMClinicStaffRole));
            qbd.addRange(fieldNum(HMClinicStaffRole,Role)).value(SysQuery::value(HMStaffMemberType::Administration));
            qbd.addRange(fieldNum(HMClinicStaffRole,Role)).value(SysQuery::value(HMStaffMemberType::Staff));
            qbd.relations(true);
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            element.markClinicStaff();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>AssetTable</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            ////this.query().dataSourceTable(tableNum(AssetTable)).clearDynalinks();
            //if(hmResourceSchedulingPlanningObjectMain.HMBuildingUnit != 0)
            //{
                //qbrAssetTableRange.value(SysQuery::value(hmResourceSchedulingPlanningObjectMain.HMBuildingUnit));
                //qbrAssetTableRecIdRange.enabled(false);
            //}
            //else
            //{
                //qbrAssetTableRecIdRange.enabled(true);
            //}
        
            super();
            element.markAssets();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
          //  qbrAssetTableRange = this.query().dataSourceTable(tableNum(AssetTable)).addRange(fieldNum(AssetTable,HMBuildingUnit));
            //qbrAssetTableRecIdRange = this.query().dataSourceTable(tableNum(AssetTable)).addRange(fieldNum(AssetTable,RecId));
           // qbrAssetTableRecIdRange.value(SysQuery::value(0));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMAppointmentInventTmp</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
        
            HMAppointmentInventTmp_DS.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;
            ItemId  protocolId;
            if(HMAppointmentInventTmp.ProtocolId != '')
            {
                if(Box::yesNo("@MAZ12321", DialogButton::No, "@SYS4006395") == DialogButton::Yes)
                {
                    ret = element.validateAppointmentProtocol(HMAppointmentInventTmp.ProtocolId);
        
                    if(ret)
                    {
                        protocolId = HMAppointmentInventTmp.ProtocolId;
                        delete_from HMAppointmentInventTmp where HMAppointmentInventTmp.ProtocolId == protocolId;
        
                    }
                }
                else
                {
                    ret = false;
                }
            }
            else
            {
                ret = super();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
        
            DeclineService.enabled(!HMAppointmentInventTmp.IsProtcol && HMAppointmentInventTmp.HMServiceStatus == HMServiceStatus::NotStarted);
            UndeclineService.enabled(HMAppointmentInventTmp.HMServiceStatus == HMServiceStatus::Decline);
        
            HMProtocolClientNotes.enabled(HMAppointmentInventTmp.IsProtcol || HMAppointmentInventTmp.ProtocolId);
        
            if(HMAppointmentInventTmp.HMServiceStatus == HMServiceStatus::NotStarted && HMAppointmentInventTmp.IsProtcol)
            {
                ExpandProtocol.enabled(true);
            }
            else
            {
                ExpandProtocol.enabled(false);
            }
        
            DeAssignRelatedAppointmentResource.enabled(HMAppointmentInventTmp.AppointmentRecId != 0);
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            element.updateTotalAmount();
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>itemDescriptionDetails</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        [SysClientCacheDataMethodAttribute(true)]
        public display Description itemDescriptionDetails(HMAppointmentInventTmp _record)
        {
            HMClientProtocol hmClientProtocol;
        
            select * from hmClientProtocol
            where hmClientProtocol.ClientAccount == ClientAccount.text()
            && hmClientProtocol.ItemId == _record.ItemId;
            if(hmClientProtocol)
            {
                return hmClientProtocol.itemAlias();
            }
            return _record.itemDescription();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>PatientResponsibility</DataField>
						<Methods>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
                element.updateTotalAmount();
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>HMStaffNursingUnit</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            //if(hmResourceSchedulingPlanningObjectMain.RecId != 0)
            //{
                ////qbrClinicStaffRange.value(SysQuery::value(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit));
              ////  qbrClinicStaffRecIdRange.enabled(false);
            //}
            //else
            //{
               //// qbrClinicStaffRecIdRange.enabled(true);
            //}
            super();
            element.markClinicStaff();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            //qbrClinicStaffRecIdRange = this.query().dataSourceTable(tableNum(HMStaffNursingUnit)).addRange(fieldNum(HMStaffNursingUnit,RecId));
            //qbrClinicStaffRange = this.query().dataSourceTable(tableNum(HMStaffNursingUnit)).addRange(fieldNum(HMStaffNursingUnit,HMOrganizationalUnit));
            //qbrClinicStaffRecIdRange.value(SysQuery::value(0));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMResourceSchedulingAppointmentTmp</Name>
				<Methods>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
        
            if(HMResourceSchedulingAppointmentTmp.RecId)
            {
                RecurrDelete.enabled(true);
                Reset.enabled(true);
            }
            else
            {
                RecurrDelete.enabled(false);
                Reset.enabled(false);
            }
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.queryBuildDataSource().addSortField(fieldNum(HMResourceSchedulingAppointmentTmp,PriorityNumber));
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public int active()
        {
            int ret;
        
            ret = super();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMResourceSchedulingPlanningObjectRelatedAppt</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
        
            this.queryBuildDataSource().clearDynalinks();
        
            qbrResourceOrgUnit = this.queryBuildDataSource().addRange(fieldNum(HMResourceSchedulingPlanningObject, HMOrganizationalUnit));
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            qbrResourceOrgUnit.value(SysQuery::value(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit));
        
            super();
        
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            HMResourceSchedulingOpenTimeSlotsSearch openSlotSearch = new HMResourceSchedulingOpenTimeSlotsSearch();
            HMResourceSchedulingOpenTimeSlotsTmp hmResourceSchedulingOpenTimeSlotsTmpLocal;
        
            int ret;
        
            ret = super();
        
            if(!setPlanObj.in(HMResourceSchedulingPlanningObjectRelatedAppt.RecId))
            {
                hmResourceSchedulingOpenTimeSlotsTmpLocal = openSlotSearch.searchOpenTimeSlot(HMResourceSchedulingPlanningObjectRelatedAppt.RecId,
                                        AppointmentDate.dateValue(), AppointmentDate.dateValue(), true, 0, false, [false,false,false,false,false,false,false],
                                        false, 0, 0, HMIncludeExclude::Exclude);
        
                while select hmResourceSchedulingOpenTimeSlotsTmpLocal
                {
                    HMResourceSchedulingOpenTimeSlotsTmpResource.data(hmResourceSchedulingOpenTimeSlotsTmpLocal);
                    HMResourceSchedulingOpenTimeSlotsTmpResource.insert();
                }
        
                setPlanObj.add(HMResourceSchedulingPlanningObjectRelatedAppt.RecId);
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMRequiredDocuments</Name>
				<Methods>
					<Method>
						<Name>editIsMarked</Name>
						<Source><![CDATA[
        public edit boolean editIsMarked(
            boolean _set,
            HMRequiredDocuments _hmRequiredDocuments,
            boolean _isMarked)
        {
            boolean isMarked;
            if(_set)
            {
                if(_isMarked)
                {
                    if(!reqDocsMap.exists(_hmRequiredDocuments.RecId))
                    {
                        reqDocsMap.insert(_hmRequiredDocuments.RecId,_hmRequiredDocuments);
                    }
                }
                else
                {
                    if(reqDocsMap.exists(_hmRequiredDocuments.RecId))
                    {
                        reqDocsMap.remove(_hmRequiredDocuments.RecId);
                    }
                }
            }
        
            isMarked = reqDocsMap.exists(_hmRequiredDocuments.RecId);
            return isMarked;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</Name>
				<Methods>
					<Method>
						<Name>validateDelete</Name>
						<Source><![CDATA[
        public boolean validateDelete()
        {
            boolean ret;
        
            ret = super();
            if(ret)
            {
                if(HMResourceSchedulingOpenTimeSlotsTmpMultiResrc.AppointmentRecId != 0)
                {
                    warning("@MAZ11501");
                    ret = false;
                }
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.queryBuildDataSource().clearDynalinks();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HmResourceSchedulingAttachmentTmpTable</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public int active()
        {
            int ret;
    
            ret = super();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {   
            sendEmail = true;
            if(Referral.checked()==true)
            {
               if(!HmResourceSchedulingAttachmentTmpTable)
                {
                    throw error ('@MAZ13226');
                }
                else
                {
                    super();
                }
        
            }
            else
            {
                super();
            }
            //super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SaveButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            sendEmail = false;
            super();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PatientChart</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            CustTable cust;
            Args args;
            if(HMPatientRecId)
            {
                args = new Args();
                cust = CustTable::findRecId(HMPatient::find(HMPatientRecId).CustTable);
                args.caller(element);
                args.record(cust);
                args.parm('Appointment');
                new MenuFunction(menuitemDisplayStr(HMPatientChartRegistrationEdit),MenuItemType::Display).run(args);
            }
            else
            {
                warning("@MAZ12362");
            }
            //super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Save</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            incompleteInfo = true;
            element.closeOk();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PatientRequestor</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if(ret)
            {
                Requestor.allowEdit(!this.value());
                Requestor.text('');
                if(this.value())
                {
                    Requestor.mandatory(false);
                    SendEmailTo.selection(HMAppointmentSendEmailTo::Patient);
                }
                else
                {
                    SendEmailTo.selection(HMAppointmentSendEmailTo::Client);
                    Requestor.mandatory(true);
                }
                Requestor.modified();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Patient</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args args = new Args();
        
            args.record(CustTable::findRecId(HMPatient::find(HMPatientRecId).CustTable));
        
            new MenuFunction(menuitemDisplayStr(HMPatientEdit),MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMPatientAdvanceLookup));
            args.caller(element);
            //if(clientAccount.text() && clientAccount.allowEdit() == false)
            //{
                //args.parm('SelectClient');
                //args.record(CustTable::find(clientAccount.text()));
            //}
            //if (HMClinicStaff::find(PhysicionRecId).NoWomen == NoYes::Yes)
            //{
                //args.parmEnum(NoYes::Yes);
            //}
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMPatient           hmPatientLocal;
            DirPartyTable       dirPartyTableLocal;
            CustTable           custTableLocal;
            ret = super();
        
            if (ret)
            {
                element.newEnabled();
                if (this.valueStr() != "")
                {
                    select * from hmPatientLocal
                        join * from custTableLocal
                        join * from dirPartyTableLocal
                        where hmPatientLocal.CustTable == custTableLocal.RecId
                        && custTableLocal.Party == dirPartyTableLocal.RecId
                        && dirPartyTableLocal.Name == this.valueStr();
        
                    if (hmPatientLocal.RecId)
                    {
                        //flag = true;
                        element.getPatient(hmPatientLocal);
                        HMResourceSchedulingAppointment_PatientName.text('');
                        HMResourceSchedulingAppointment_PatientName.allowEdit(false);
                        HMResourceSchedulingAppointment_PatientContact.text('');
                        HMResourceSchedulingAppointment_PatientContact.allowEdit(false);
                    }
        
                    else
                    {
                        warning(strFmt("@SYS316757",this.label()));
                        this.text(HMPatient::find(HMPatientRecId).PatientName());
                        if(HMPatientRecId == 0)
                        {
                            HMResourceSchedulingAppointment_PatientName.allowEdit(true);
                            HMResourceSchedulingAppointment_PatientContact.allowEdit(true);
                        }
        
                        element.newEnabled();
                    }

                    //Zain
                    if(HMParameters::find().DefaultPrimaryIns)
                    {
                        InsuranceCode.text(HMPatientInsurance::getPrimaryInsuranceName(hmPatientLocal.RecId));
                        InsuranceCode.modified();
                    }
                    //Zain
                }
                else
                {
                    element.getPatient(hmPatientLocal);
                }

               
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PatientNewEmail</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
          
            Args args = new Args();
            HMPatient patientLocal = HMPatient::find(HMPatientRecId);
        
            args.record(patientLocal);
            args.caller(element);
        
            new MenuFunction(menuitemDisplayStr(HMPatientEmailPrimaryNew),MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Referral</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
        /*
            if (referral.checked())
            {
                if(OpenMode==HMAppointmentFormOpen::Detail)
                {
                    Attachment.allowEdit(true);
                    ButtonGroup_attachment.allowEdit(true);
                    AttachCommandButton.visible(false);
                    ButtonGroup_attachment.allowEdit(true);
                    HmResourceSchedulingAttachmentTmpTable_ds.allowCreate(true);
                    HmResourceSchedulingAttachmentTmpTable_ds.allowDelete(true);
        
        
                }
                else
                {
                    ButtonGroup_attachment.allowEdit(false);
                    AttachCommandButton.enabled(true);
                    Attachment.allowEdit(false);
                    HmResourceSchedulingAttachmentTmpTable_ds.allowCreate(false);
        
                }
        
            }
            else
            {
                AttachmentActionPane.allowEdit(false);
                AttachCommandButton.enabled(false);
                attachment.allowEdit(false);
                while select *from HmResourceSchedulingAttachmentTmpTable
                {
                    HmResourceSchedulingAttachmentTmpTable.delete();
                }
                HmResourceSchedulingAttachmentTmpTable_ds.allowCreate(false);
                HmResourceSchedulingAttachmentTmpTable_ds.allowDelete(false);
                HmResourceSchedulingAttachmentTmpTable_ds.research();
            }*/
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointment_PatientName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            if(ret)
            {
        
                    element.newEnabled();
        
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClientAccount</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            if(ret)
            {
                element.updateClientDetails(this.text());
                HMAppointmentInventTmp_ds.executeQuery();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Requestor</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args            args;
            MenuFunction    menuFunction;
            ;
            args = new Args();
            menuFunction = new MenuFunction(menuitemDisplayStr(ContactPerson), MenuItemType::Display);
            args = new Args(menuFunction.object());
            args.caller(element);
            args.record(ContactPerson::find(this.text())); // to be a datasource which added in the current form
            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ContactPerson::lookupCustContactPersonHM(this,
                                                   ClientAccount.text(),
                                                   null,
                                                   this.text(),
                                                   LogisticsLocationRoleType::Requestor);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ContactPerson contactPerson;
        
            contactPerson = contactPerson::find(this.text());
            RequestorName.text(contactPerson.personName());
            element.updateRequestorEmail(contactPerson.email());
            RequestorPhone.text(contactPerson.phone());
        
            if(this.text() != "" && !RequestorEmail.text())
            {
                warning(strFmt("@MAZ12168"));
            }
        
            ret = super();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequestorNewContact</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            CustTable custClient = CustTable::find(ClientAccount.text());
            DirPartyTable party = DirPartytable::findRec(custClient.Party);
        
            args.record(party);
            args.caller(element);
        
            new MenuFunction(menuitemDisplayStr(ContactPersonNew),MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RequestorNewEmail</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            ContactPerson contactPerson = contactPerson::find(Requestor.text());
        
            args.record(contactPerson);
            args.caller(element);
        
            new MenuFunction(menuitemDisplayStr(HMRequestorEmailPrimaryNew),MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportSentTo</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            Args            args;
            MenuFunction    menuFunction;
            ;
            args = new Args();
            menuFunction = new MenuFunction(menuitemDisplayStr(ContactPerson), MenuItemType::Display);
            args = new Args(menuFunction.object());
            args.caller(element);
            args.record(ContactPerson::find(this.text()));
            menuFunction.run(args);
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            ContactPerson::lookupCustContactPersonHM(this,
                                                   ClientAccount.text(),
                                                   null,
                                                   this.text(),
                                                   LogisticsLocationRoleType::Report);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            ContactPerson contactPerson;
        
            contactPerson = contactPerson::find(this.text());
            ReportSentToName.text(ContactPerson.personName());
            ReportSentToEmail.text(contactPerson.email());
            ReportSentToPhone.text(contactPerson.phone());
        
            ret = super();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportSentToNewContact</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
            CustTable custClient = CustTable::find(ClientAccount.text());
            DirPartyTable party = DirPartytable::findRec(custClient.Party);
        
            args.record(party);
            args.caller(element);
        
            new MenuFunction(menuitemDisplayStr(ContactPersonNew),MenuItemType::Display).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BillingAddress</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Common common;
            CustTable custTableLocal;
            Common                  selectedRecord;
            Args                    args;
            FormRun                 formRun;
            container               roleTypes = [LogisticsLocationRoleType::Invoice];
            Form                    addressLookupForm = new Form(formStr(LogisticsPostalAddressLookup));
            str                     context = strFmt("%1;%2;%3;%4", con2StrUnlimited(roleTypes),  false, con2StrUnlimited(conNull()),'storeLogisticPostalAddress');
        
            custTableLocal = CustTable::find(ClientAccount.text());
            common = custTableLocal.data();
        
            args = new Args();
            args.name(formStr(HMLogisticsPostalAddressLookup));
            args.caller(element);
        
            args.record(common);
            args.parm(context);
        
            // perform form lookup on the caller form control
            formRun = ClassFactory::formRunClassOnClient(args);
            this.performFormLookup(formRun);
        
            selectedRecord = formRun.selectRecordModeSelectedRecord();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ReportAddress</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Common common;
            CustTable custTableLocal;
            Common                  selectedRecord;
            Args                    args;
            FormRun                 formRun;
            container               roleTypes = [LogisticsLocationRoleType::Report];
            Form                    addressLookupForm = new Form(formStr(LogisticsPostalAddressLookup));
            str                     context = strFmt("%1;%2;%3;%4", con2StrUnlimited(roleTypes),  false, con2StrUnlimited(conNull()),'storeReportPostalAddress');
        
            custTableLocal = CustTable::find(ClientAccount.text());
            common = custTableLocal.data();
        
            args = new Args();
            args.name(formStr(HMLogisticsPostalAddressLookup));
            args.caller(element);
        
            args.record(common);
            args.parm(context);
        
            // perform form lookup on the caller form control
            formRun = ClassFactory::formRunClassOnClient(args);
            this.performFormLookup(formRun);
        
            selectedRecord = formRun.selectRecordModeSelectedRecord();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AppointmentDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            if(element.RescheduleWithoutValidation())
            {
               super();
        
            }
        
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            if(element.RescheduleWithoutValidation())
            {
                ret = super();
            }
        
            if(ret)
            {
                element.newEnabled();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AppointmentTime</Name>
				<Type>Time</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args;
            FormRun itemLookUp;
        
            if(!strContains(element.args().parm(),'FromInPatient'))
            {
                if(ScheduleType.text() != '')
                {
                    if(element.RescheduleWithoutValidation())
                    {
                        args = new Args();
                        args.name(formstr(HMResourceSchedulingOpenTimeSlotLookup));
                        args.caller(element);
                        args.record(element.searchOpenTimeSlot());
                        itemLookUp = ClassFactory.formRunClass(args);
                        itemLookUp.init();
                        this.performFormLookup(itemLookUp);
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            if(element.RescheduleWithoutValidation())
            {
                ret = super();
            }
        
            if(ret)
            {
                element.newEnabled();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ScheduleType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
        
            new MenuFunction(MenuItemDisplayStr(HMResourceSchedulingTypeCode),MenuItemType::Display).run();
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
            ContainerClass conClass;
        
            args.name(formstr(HMScheduleTypeLookupFilter));
            args.caller(element);
        
            conClass = new ContainerClass([scheduleTypePseudoRecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster]);
        
            args.parmObject(conClass);
        
            if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingOTAppointment))
            {
                args.parmEnum(HMCaseType::Surgery);
            }
            else
            {
                args.parmEnum(hmResourceSchedulingPlanningObjectMain.CaseType);
            }
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMResourceSchedulingTypeCode    hmResourceSchedulingTypeCodeLocal;
            HMResourceMasterScheduleType    hmResourceMasterScheduleTypeLocal;
        
            ret = super();
        
            if(ret)
            {
                if(this.valueStr() != "")
                {
                    if(fromScheduleTypeLookup)
                    {
                        fromScheduleTypeLookup = false;
                    }
                    else
                    {
                        select * from hmResourceSchedulingTypeCodeLocal
                            join RecId from hmResourceMasterScheduleTypeLocal
                            where hmResourceSchedulingTypeCodeLocal.Description == this.valueStr()
                            && hmResourceSchedulingTypeCodeLocal.ParentAppointmentType == scheduleTypePseudoRecId
                            && hmResourceMasterScheduleTypeLocal.HMResourceSchedulingTypeCode ==hmResourceSchedulingTypeCodeLocal.RecId
                            && hmResourceMasterScheduleTypeLocal.HMResourceMaster == HMResourceSchedulingPlanningObjectMain.HMResourceMaster;
        
                        if(hmResourceSchedulingTypeCodeLocal.RecId)
                        {
                            HMScheduleTypeRecId = hmResourceSchedulingTypeCodeLocal.RecId;
                        }
                        else
                        {
                            warning(strFmt("@SYS316757","@MAZ1703"));
                        }
        
                        this.text(HMResourceSchedulingTypeCode::find(HMScheduleTypeRecId).Description);
                    }
                }
                else
                {
                    HMScheduleTypeRecId = 0;
                }
        
                element.newEnabled();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Resource</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
            container   con;
        
            args.name(formstr(HMResourceMasterLookup));
            args.caller(element);
            args.parmEnumType(enumNum(HMResourceType));
            args.parmEnum(HMResourceType::Vendor);
        
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
            if(openMode != HMAppointmentFormOpen::Edit)
                searchform = true;
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMResourceMaster        hmResourceMasterLocal;
            HMlookupClass           HMlookupClassObj =new HMlookupClass();
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != "")
                {
                    hmResourceMasterLocal = HMlookupClassObj.checkValidResourceName(this.text(), HMResourceType::Vendor);
        
                    if (hmResourceMasterLocal.RecId)
                    {
                        if(openMode != HMAppointmentFormOpen::Edit)
                        {
                            searchform = true;
                        }
                        else
                        {
                            element.newEnabled();
                        }
        
                        element.storeResource(hmResourceMasterLocal.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757","@SYS89158"));
                        this.text(hmResourceMaster::find(resourceMasterRecId).Description);
                    }
                }
                else
                {
                    if(openMode != HMAppointmentFormOpen::Edit)
                    {
                        searchform = true;
                    }
                    else
                    {
                        element.newEnabled();
                    }
                    element.storeResource(0);
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PlanningObject</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
            ContainerClass conClass_Sending;
            args.name(formstr(HMPlanningObjectLookup));
            args.caller(element);
        
            if(element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingOTAppointment) || element.args().menuItemName() == menuitemDisplayStr(HMResourceSchedulingAppointmentWaitingOP))
            {
                args.parm('Appointment');
        
                conClass_Sending = new ContainerClass(element.getReasonFromMap());
                args.parmEnum(HMCaseType::OutPatient);
                args.parmObject(conClass_Sending);
            }
            else if(openMode == HMAppointmentFormOpen::Physiotherapy || strContains(element.args().parm(),'physio'))
            {
                conClass_Sending = new ContainerClass(element.getReasonFromMap());
                args.parmEnum(HMCaseType::Physiotherapy);
                args.parmObject(conClass_Sending);
            }
            else
            {
                conClass_Sending = new ContainerClass(element.getReasonFromMap());
                args.parmEnum(HMCaseType::OutPatient);
                args.parmObject(conClass_Sending);
            }
        
            //if(PhysicionRecId)
            //{
                //args.record(HMClinicStaff::find(PhysicionRecId));
            //}
            //else
            //{
                //PhysicionRecId = 0;
                //args.record(HMClinicStaff::find(PhysicionRecId));
        //
            //}
        
            itemLookUp = ClassFactory.formRunClass(args);
        
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMlookupClass           HMlookupClassObj =new HMlookupClass();
            ret = super();
        
            if(ret)
            {
                element.newEnabled();
                if(this.text() == '')
                {
                    element.storePlanningObject(0);
                }
        
                element.initializeServiceTmp(encounterRecId);
                AssetTable_ds.executeQuery();
                HMStaffNursingUnit_ds.executeQuery();
            }
            if(openMode != HMAppointmentFormOpen::Edit)
            searchform = true;
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OrgUnit</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args argsLocal;
            FormRun itemLookUp;
        
            argsLocal = new Args();
            argsLocal.name(formstr(HMMedisyClinicLookup));
            argsLocal.parm('SubClinic');
            argsLocal.caller(element);
            itemLookUp = ClassFactory.formRunClass(argsLocal);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            RecId locationRecId;
        
            ret = super();
            if(ret)
            {
                if(this.text() == '')
                {
                    element.storeOrganizationalUnit(0);
                }
                else
                {
                    locationRecId = HMResourceSchedulingHelper::getLocationRecId(this.text());
                    if(!locationRecId)
                    {
                        warning("@MAZ12654");
                        this.text('');
                    }
                    element.storeOrganizationalUnit(locationRecId);
                }
        
                element.storeOrganizationalUnitRecId(0);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMBookingOrigin</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args argsLocal;
            FormRun itemLookUp;
        
            argsLocal = new Args();
            argsLocal.name(formstr(HMBookingOriginLookup));
            argsLocal.caller(element);
        
            itemLookUp = ClassFactory.formRunClass(argsLocal);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMBookingOrigin hmBookingOriginLocal;
        
            ret = super();
        
            if(ret)
            {
                if(this.valueStr() != "")
                {
                    hmBookingOriginLocal = HMlookupClass::checkValidBookingOrigin(this.valueStr());
        
                    if(hmBookingOriginLocal.RecId)
                    {
                        element.storeBookingOrigin(hmBookingOriginLocal.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757",this.label()));
                        this.text(HMBookingOrigin::find(bookingOriginRecId).Description);
                    }
                }
                else
                {
                    element.storeBookingOrigin(0);
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reason</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            super();
            new MenuFunction(MenuItemDisplayStr(HMAppointmentsReason),MenuItemType::Display).run();
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMAppointmentResonsLookup));
            args.caller(element);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ReasonTable     reasonTable;
            HMlookupClass   HMlookupClassObj = new HMlookupClass();
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != "")
                {
                    reasonTable = HMlookupClassObj.checkValidAppointmentReason(this.text());
        
                    if (reasonTable.RecId)
                    {
                        element.storeReason(reasonTable.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757","@SYS86426"));
                        this.text("");
                    }
                }
                else
                {
                    element.storeReason(0);
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BomVersionLookUp</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMProtocolLookup));
            args.caller(element);
            args.record(HMPatient::find(HMPatientRecId));
            args.parm('AppointmentMedisys');
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            BOM     BOM;
            InventTable     InventTable;
            ret = super();
            if (ret)
            {
                if (this.valueStr() == '')
                {
                    element.refreshAppointmentOrder(null);
                    BOMVersionId = 0;
                }
                else
                {
                   ttsBegin;
                   delete_from HMAppointmentInventTmp;
                   ttsCommit;
                   while select * from  BOM
                            where BOM.BOMId == BOMVersion::findRecId(BOMVersionId).BOMId
                    {
                    InventTable = BOM.inventTable();
        
                    HMAppointmentInventTmp.ItemId = InventTable.ItemId;
                    HMAppointmentInventTmp.ItemName = InventTable.ItemName();
                    HMAppointmentInventTmp.EcoResProduct =   InventTable.Product;
                    HMAppointmentInventTmp.EcoResProductName = HMInventTableClass::showItemName(InventTable.ItemId);
                    HMAppointmentInventTmp.Price = BOM.Price;
                    HMAppointmentInventTmp.PatientResponsibility = HMPatientPaymentResponsibility::Client;
                    HMAppointmentInventTmp.insert();
        
                    }
                    HMAppointmentInventTmp_DS.executeQuery();
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>InsuranceCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args argsLocal;
            FormRun itemLookUp;
        
            argsLocal = new Args();
            argsLocal.name(formstr(HMPatientInsuranceLookup));
            argsLocal.caller(element);
            argsLocal.parm(int642str(HMPatientRecId));
        
            itemLookUp = ClassFactory.formRunClass(argsLocal);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = element.updateInsuranceDetailsForInsuranceCode();
        
            if(ret)
            {
                ret = super();
                //HMAppointmentInventTmp_ds.executeQuery();
            }
            else
            {
                this.text('');
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientEncounter_Reason</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>jumpRef</Name>
						<Source><![CDATA[
        public void jumpRef()
        {
            HMClinicalObservation            hmClinicalObservation;
            Args                             args;
            MenuFunction                     menuFunction;
        
        
            args = new Args();
            args.caller(element);
        
            args.record(hmClinicalObservation);
            menuFunction = new MenuFunction(menuitemdisplaystr(HMClinicalObservation),MenuItemType::Display);
            menuFunction.run(args);
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMClinicalObservationLookup));
            args.caller(element);
            args.parm(this.text());
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            //HMClinicalObservation       hmClinicalObservationLocal;
            ret = super();
        
            if(ret)
            {
                if(HMPatientEncounter_Reason.valueStr() == "")
                {
                    mapKeyValueReason=new Map(Types::Int64,Types::String);
        
                    Clear.enabled(false);
                }
                //else
                //{
                    //select * from hmClinicalObservationLocal
                    //where  hmClinicalObservationLocal.Description == HMPatientEncounter_Reason.valueStr() ;
                    //
                    //if (!hmClinicalObservationLocal.RecId)
                    //{
                     //warning(strFmt("@SYS316757",'Chief Complaint'));
                     //HMPatientEncounter_Reason.text("");
                     //mapKeyValueReason=new Map(Types::Int64,Types::String);
                     //Clear.enabled(false);
                    //}
                       //
                //}
        
                element.newEnabled();
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>toolTip</Name>
						<Source><![CDATA[
        public str toolTip()
        {
            str ret;
        
            //ret = super();
            ret = this.text();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Clear</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HMPatientEncounter_Reason.text("");
        
            mapKeyValueReason=new Map(Types::Int64,Types::String);
        
            Clear.enabled(false);
        
            element.newEnabled();
        
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Tab</Name>
				<Type>Tab</Type>
				<Methods>
					<Method>
						<Name>tabChanged</Name>
						<Source><![CDATA[
        public void tabChanged(int _FromTab, int _ToTab)
        {
            super(_FromTab, _ToTab);
        
            switch (_ToTab)
            {
                case 1:
                    SubInstruction.text("@MAZ8667");
                    break;
        
                case 2:
                    SubInstruction.text("@MAZ9202");
                    break;
        
                case 3:
                    SubInstruction.text("@MAZ10583");
                    break;
                case 4:
                   SubInstruction.text("@MAZ11210");
                    break;
                case 5:
                   SubInstruction.text("@MAZ11028");
                    break;
                case 6:
                    SubINstruction.text("@MAZ11302");
        
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AddMultiResourceAppt</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            FormRun         formRun;
            hmResourceSchedulingOpenTimeSlotsTmp hmResourceSchedulingOpenTimeSlotsTmpLocal;
            Args args = new Args();
            ContainerClass conCLass;
        
            //super();
            formRun = element.args().caller();
            if(formHasMethod(formRun,identifierStr(getSearchTimeSlotBuffer)))
            {
                hmResourceSchedulingOpenTimeSlotsTmpLocal = element.args().caller().getSearchTimeSlotBuffer();
                select firstOnly RecId from hmResourceSchedulingOpenTimeSlotsTmpLocal;
            }
        
            if(hmResourceSchedulingOpenTimeSlotsTmpLocal.recid)
            {
                formRun = element.args().caller();
                if(formHasMethod(formRun,identifierStr(getSearchTimeSlotBuffer)))
                {
                    args.parm('Search');
                }
            }
            args.record(HMResourceSchedulingPlanningObjectMain);
            args.caller(element);
        
            conCLass = new ContainerClass([Patient.text(), PhysicalFileNumber.text(), Resource.text(), AppointmentDate.dateValue(),AppointmentTime.value(), serviceLocationRecId, hmResourceSchedulingPlanningObjectMain.HMResourceMaster,HMScheduleTypeRecId, HMPatientRecId,ArrivalTime.value()]);
            args.parmObject(conCLass);
        
            new MenuFunction(menuitemDisplayStr(HMResourceSchedulingAppointmentMultiRsrc),MenuItemType::Display).run(args);
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceGroup</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args argsLocal;
            FormRun itemLookUp;
        
            argsLocal = new Args();
            argsLocal.name(formstr(HMResourceGroupLookup));
            argsLocal.caller(element);
        
            itemLookUp = ClassFactory.formRunClass(argsLocal);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewService</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;
            ContainerClass conCLass;
        
            element.ReplicateHMAppointmentInventTmp();
            args = new Args();
            args.caller(element);
            args.record(hmAppointmentInventTmpReplica);
            // args.parm(int642str(HMResourceSchedulingPlanningObject::find(HMResourceSchedulingAppointment::find(element.args().record().RecId).HMResourceSchedulingPlanningObject).HMOrganizationalUnit));
            // add for service category
            args.parm(int642str(ouRecId));
        
            args.parmEnumType(enumNum(HMOrderType));
            args.parmEnum(HMOrderType::Appointment);
           // args.parm(int642str(HMResourceSchedulingPlanningObject::find (ou).HMResourceSchedulingPlanningObject).HMOrganizationalUnit));
           // args.parm(int642str(ouRecId));
        
            conCLass = new ContainerClass([hmResourceSchedulingPlanningObjectMain.HMResourceMaster, patientInsuranceRecId]);
            args.parmObject(conCLass);
        
            new MenuFunction(MenuItemDisplayStr(HMPatientOrderAppointment),MenuItemType::Display).run(Args);
            //super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExpandProtocol</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.expandProtocolServices();
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeclineService</Name>
				<Type>DropDialogButton</Type>
				<Methods>
					<Method>
						<Name>dialogClosed</Name>
						<Source><![CDATA[
        public void dialogClosed(xFormRun _formRun)
        {
            Object formRunObject;
        
            super(_formRun);
        
            if(_formRun.closedOk())
            {
                if(formHasMethod(_formRun,identifierstr(parmDeclineReason)))
                {
                    formRunObject = _formRun;
                    HMAppointmentInventTmp.ServiceDeclinedReason  = formRunObject.parmDeclineReason();
                    HMAppointmentInventTmp.HMServiceStatus = HMServiceStatus::Decline;
                    HMAppointmentInventTmp.update();
                    HMAppointmentInventTmp_ds.executeQuery();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UndeclineService</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            DialogButton                            dialogButton;
            super();
        
            dialogButton = Box::yesNo("@MAZ12272", DialogButton::Yes, "@SYS301622");
            if (dialogButton == DialogButton::Yes)
            {
                HMAppointmentInventTmp.HMServiceStatus = HMServiceStatus::NotStarted;
                HMAppointmentInventTmp.ServiceDeclinedReason = '';
                HMAppointmentInventTmp.update();
                HMAppointmentInventTmp_ds.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMProtocolClientNotes</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            this.parameters(ClientAccount.text());
        
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DeAssignRelatedAppointmentResource</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            if(Box::yesNo("@MAZ12693",DialogButton::No,"@MAZ7757") == DialogButton::Yes)
            {
                HMAppointmentInventTmp.AppointmentRecId = 0;
                HMAppointmentInventTmp.AppointmentTableId = 0;
                HMAppointmentInventTmp.ResourceDescription = '';
                HMAppointmentInventTmp_ds.research(true);
                HMAppointmentInventTmp_ds.write();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Detail</Name>
				<Type>TabPage</Type>
				<Methods>
					<Method>
						<Name>pageActivated</Name>
						<Source><![CDATA[
        public void pageActivated()
        {
            super();
            element.addProtocolServicesToDetailGrid();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>NewRecurr</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args;
            HMResourceSchedulingAppointmentTmp HMResourceSchedulingAppointmentTmpLocal;
        
            if (hmParameters.IsRecurrence == NoYes::Yes)
            {
        
                    HMResourceSchedulingAppointmentTmpLocal = element.ReplicateHMAppointmentRecurrence();
        
                    if (HMResourceSchedulingAppointmentTmpLocal)
                    {
                    IsRecurrence = false;
                    recurrenceAppointmentDetail.clear();
                    delete_from HMResourceSchedulingAppointmentTmp ;
                    args = new Args();
                    args.caller(element);
                    args.record(HMResourceSchedulingAppointmentTmpLocal);
                    args.parm(int642str(ouRecId));
        
                    new MenuFunction(MenuItemDisplayStr(HMPatientRecurrenceAppointment),MenuItemType::Display).run(Args);
                    }
                    else
                    {
                        NewRecurr.enabled(false);
                    }
            }
            else
            {
                NewRecurr.enabled(false);
            }
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>RecurrDelete</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            DialogButton  dialog;
            int Priority;
            super();
        
            ttsBegin;
            if (HMResourceSchedulingAppointmentTmp)
            {
                    dialog = Box::yesNo("@maz9343",DialogButton::Yes);
                    if(DialogButton::Yes == dialog )
                    {
                       Priority = HMResourceSchedulingAppointmentTmp.PriorityNumber;
                       HMResourceSchedulingAppointmentTmp.delete();
                    while select PriorityNumber from  HMResourceSchedulingAppointmentTmp
                           where HMResourceSchedulingAppointmentTmp.PriorityNumber > Priority
                        {
                            HMResourceSchedulingAppointmentTmp.PriorityNumber = HMResourceSchedulingAppointmentTmp.PriorityNumber - 1 ;
                            HMResourceSchedulingAppointmentTmp.update();
                        }
                    }
        
            }
            ttsCommit;
            element.refreshGrid();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Reset</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            element.resetForRecurrence(true);
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointmentTmp_AppointmentDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            if (ret)
            {
                ismodified = true;
                element.UpdateRecuurenceAppointmentTmp();
                ismodified = false;
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointmentTmp_AppointmentTime</Name>
				<Type>Time</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args;
            FormRun itemLookUp;
        
            if(!strContains(element.args().parm(),'FromInPatient'))
            {
                if(ScheduleType.text() != '')
                {
                    args = new Args();
                    args.name(formstr(HMResourceSchedulingOpenTimeSlotLookup));
                    args.caller(element);
                    args.record(element.searchOpenTimeSlot());
                    itemLookUp = ClassFactory.formRunClass(args);
                    itemLookUp.init();
                    this.performFormLookup(itemLookUp);
                }
                else
                {
                    info("@MAZ9204");
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if(ret)
            {
                element.newEnabled();
            }
            if (ret)
            {
                ismodified = true;
                element.UpdateRecuurenceAppointmentTmp();
                ismodified = false;
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointment_IsSpecificConsultant</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (openMode == HMAppointmentFormOpen::Edit)
                {
                    if(this.value() == 1)
                    {
                       Resource.allowEdit(false);
                    }
                    else
                    {
                       Resource.allowEdit(true);
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointment_RescheduleWithoutConfirmation</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (openMode == HMAppointmentFormOpen::Edit)
                {
                    if(this.value() == 1)
                    {
                       RescheduleConfirmation = true;
                    }
                    else
                    {
                      RescheduleConfirmation = false;
                    }
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CreditCardTokenRequired</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            element.updateCreditCardToken();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HmResourceSchedulingAttachmentTmpTable_Notes</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            Filename filepath;
            Filename filename;
            Filename fileType;
            str fileNameString;
            boolean ret;
        
        
            ret = super();
             [filepath, filename, fileType] = fileNameSplit(this.valueStr());
        
            HmResourceSchedulingAttachmentTmpTable_Name.text(filename);
        
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
        
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingAppointment</Name>
			<Table>HMResourceSchedulingAppointment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdmissionOrderSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentConfirmationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Bed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookingNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChartPrepared</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChiefComplaint</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClientBillingLogisticsPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClientReportLogisticsPostalAddres</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CopyOfEmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardToken</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTokenRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CriticalMedicalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DispositionComments</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DispositionFollowUp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmployeeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EODProcessed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinanceBillingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinanceBillingStatus_Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForceBookingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreeFollowUpAvailed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GOPNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAppointmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBookingOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCancellationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMConfirmationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceContractClassOrPlans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitAdmissionWard</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitServiceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientInsurance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientVisit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMRecurrentApptDetail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingPlanningObject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMScheduleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMTreatmentClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMWaitingList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclinicNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncompleteInfoLog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncompleteReserveAppointmentTaskGeneratd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDelayed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHotspot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOnlineAppointment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverBooked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReconfirmEmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSpecificConsultant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTable_AdvancePayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientContact</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientRequestor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalChartRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PONum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryAppointment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriorityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Referral</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportSentContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestorContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RescheduleWithoutConfirmation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResultExpectedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResultVisitStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SendEmailTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmsSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysOutgoingEmailTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WalkinPatient</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>HMRecurrentApptDetail</Name>
					<Table>HMRecurrentApptDetail</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>dataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DayName</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DayNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DayNumberEnum</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DayOfYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EndAfterNOccur</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EndByDate</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EveryMonthOfYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EveryNDays</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>EveryNMonth</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Friday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Monday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MonthNameForYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MonthNumber</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>MonthTypeOption</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NoOfDays</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>NoOfWeeks</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>OccuranceEndDate</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecurEveryNYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecurrenceRangeType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecurrenceType</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Saturday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>StartDate</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>StartTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Sunday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Thursday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Tuesday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Wednesday</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>WeekDayNameForYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>WeekNumberEnumForYear</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>YearTypeOption</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>HMResourceSchedulingAppointment</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<JoinRelation>HMRecurrent</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMClinicStaff2</Name>
			<Table>HMClinicStaff</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AdditionalQualification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BasicDegree</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CLIA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DEA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DNBFellow</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmploymentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EvaluatPilots</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExecutiveHealthAssesment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FederalId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Gender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmWorker</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaffRole</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMNurseQualification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMSpecialtyCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicenceNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCIRegdNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MCIRegdValidity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NoWomen</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NPI</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PaymSched</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostGraduate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreEmployment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RAMQ</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefProvider</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Salutation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateMCIRegdNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateMCIRegdValidity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Taxonomy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UPIN</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>AssetTable</Name>
			<Table>AssetTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AcquisitionDate_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcquisitionPrice_W</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AcquisitionValueNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AllowSale_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessmentNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessmentTaxNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetActivityCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetClassification_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetDeferredType_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetProductionYear_PL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetPropertyGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetReplaceCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetSourceType_CN</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssetType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Barcode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CategoryId_LV</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>COFINSTaxationCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Condition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Department</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisposalRestriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Documents</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExceptionTaxationCode_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExceptionTaxationRate_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExceptionTaxationRateDenominator_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FiscalEstablishment_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GISReferenceNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GoodsType_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GuaranteeDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ICMSCreditInstallments_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceAgent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceDate1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceDate2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsurancePolicyNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceVendor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuredAtMarketValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuredValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsMissing</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsRented_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSecondHand_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastFactorUpdateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastMaintenance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Lease</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LenderName_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocationMemo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MainAssetId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaintenanceInfo1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaintenanceInfo2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaintenanceInfo3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MajorType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Make</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Model</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModelYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NextMaintenance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParcelId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalAssetNumber_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalInventory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISCOFINSAppropriationMethod_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISCOFINSCreditGroup_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISCOFINSCreditInstallments_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISCOFINSCreditPurpose_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISCOFINSReceivableLongTerm_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PISTaxationCode_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyExpiration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PropertyType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PurchLineRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Quantity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Reference</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReturnOnInvestmentsNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RoomNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SerialNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortingId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortingId2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SortingId3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubventionNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubventionTaxFreeNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxCountyNO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TaxICMSOutgoing_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TechInfo1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TechInfo2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TechInfo3</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TitleHolder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TransferredFromInventory_BR</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitCost</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>UnitOfMeasure</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueAt19840101NO</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerContactName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WorkerResponsible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WrkCtrId_JP</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMAppointmentInventTmp</Name>
			<Table>HMAppointmentInventTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CoPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DurationPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProductName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FrequencyPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FrequencyTimes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCondition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingAppointmentInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMServiceStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Instruction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsProtcol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackageValidityDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientResponsibility</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysioDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysioFrequency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidityDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProtocolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProtocolName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceDeclinedReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMStaffNursingUnit</Name>
			<Table>HMStaffNursingUnit</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingAppointmentTmp</Name>
			<Table>HMResourceSchedulingAppointmentTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDelayed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriorityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMAppointmentInventTmpDetails</Name>
			<Table>HMAppointmentInventTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CoPay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultOrder</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DurationPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProduct</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EcoResProductName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FrequencyPeriod</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FrequencyTimes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCondition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingAppointmentInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMServiceStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Instruction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsProtcol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PackageValidityDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientResponsibility</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysioDuration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysioFrequency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidityDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProtocolId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProtocolName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResourceDescription</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ServiceDeclinedReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceMaster</Name>
			<Table>HMResourceMaster</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentTaking</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CancellationPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Confirmation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentSending</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Highlight</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaffRole</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicenseExpirationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicenseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OpeningHours</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferralNeeded</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>VendorType</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMResourceSchedulingPlanningObjectRelatedAppt</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingOpenTimeSlotsTmpResource</Name>
			<Table>HMResourceSchedulingOpenTimeSlotsTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Date</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DayEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DayName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Duration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitSubClinic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMParentSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingDayPlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingDayPlanItem</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingPlanningObject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingWeekPlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHotspot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNoWoman</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverBooked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SlotEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Time</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMResourceSchedulingPlanningObjectRelatedAppt</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingPlanningObjectRelatedAppt</Name>
			<Table>HMResourceSchedulingPlanningObject</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AvailabilityStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CaseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultScheduleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HotSpotType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HotSpotValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverbookAllowed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlanningObjectStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScheduleOnPublicHoliday</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMRequiredDocuments</Name>
			<Table>HMRequiredDocuments</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</Name>
			<Table>HMResourceSchedulingOpenTimeSlotsTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AppointmentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Date</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DayEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DayName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Duration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitSubClinic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMParentSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingDayPlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingDayPlanItem</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingPlanningObject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingWeekPlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>isClosed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHotspot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsNoWoman</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverBooked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SlotEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Time</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HmResourceSchedulingAttachmentTmpTable</Name>
			<Table>HmResourceSchedulingAttachmentTmpTable</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAttachmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPath</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMResourceSchedulingAppointment</JoinSource>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@SYS114626</Caption>
		<HeightMode xmlns="">Column</HeightMode>
		<ShowDeleteButton xmlns="">No</ShowDeleteButton>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<TitleDataSource xmlns="">HMResourceSchedulingAppointment</TitleDataSource>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<WidthMode xmlns="">Column</WidthMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>MainInstruction</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>613566756</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColorRGB>
					<Red>15</Red>
					<Green>0</Green>
					<Blue>0</Blue>
				</BackgroundColorRGB>
				<ColorScheme>RGB</ColorScheme>
				<FontSize>13</FontSize>
				<ForegroundColorRGB>
					<Red>0</Red>
					<Green>51</Green>
					<Blue>153</Blue>
				</ForegroundColorRGB>
				<Style>MainInstruction</Style>
				<Text>Schedule new appointment</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>766958445</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab1</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCommandButtonControl">
										<Name>OKButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>894784852</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CommandButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<ButtonDisplay>TextOnly</ButtonDisplay>
										<Command>OK</Command>
										<DefaultButton>Yes</DefaultButton>
										<ImageLocation>AOTResource</ImageLocation>
										<NormalImage>HM_Schedule</NormalImage>
										<SaveRecord>No</SaveRecord>
										<Text>@SYS6793</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCommandButtonControl">
										<Name>SaveButton</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177278</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CommandButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<Command>OK</Command>
										<DefaultButton>Yes</DefaultButton>
										<SaveRecord>No</SaveRecord>
										<Text>@SYS12229</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>PatientChart</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Big>Yes</Big>
										<FormViewOption>Details</FormViewOption>
										<MenuItemName>HMPatientChartRegistrationView</MenuItemName>
										<NeedsRecord>Yes</NeedsRecord>
										<Text>@MAZ9222</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<BottomMargin>6</BottomMargin>
								<BottomMarginMode>Fixed</BottomMarginMode>
								<Caption>@MAZ137</Caption>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>@MAZ3701</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>CopyOfButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<Enabled>No</Enabled>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Save</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>954437176</ElementPosition>
								<Enabled>No</Enabled>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@MAZ11582</HelpText>
								<Skip>Yes</Skip>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Text>@MAZ5208</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<BottomMargin>6</BottomMargin>
						<BottomMarginMode>Fixed</BottomMarginMode>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>920350134</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupLeftPatient</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>874900744</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GrgLeft</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>PatientRequestor</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>129246700</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ12023</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Patient</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>193870050</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1881</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ9</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>MRN</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>278377508</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ2609</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PhysicalFileNumber</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>362884966</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ12139</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Gender</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>447392425</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS9284</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PatientDOB</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS81356</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Age</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>626349395</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ4250</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group_</Name>
										<ElementPosition>1133394145</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PatientEmail</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Width>160</Width>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@MAZ2648</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>PatientNewEmail</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ12171</HelpText>
												<Skip>Yes</Skip>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>New</NormalImage>
											</AxFormControl>
										</Controls>
										<ArrangeMethod>HorizontalLeft</ArrangeMethod>
										<Columns>2</Columns>
										<Columnspace>5</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormRealControl">
										<Name>OutstandingBalance</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1893961270</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Real</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS53076</Label>
										<NoOfDecimals>-1</NoOfDecimals>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Referral</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2020722458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ13048</Label>
									</AxFormControl>
								</Controls>
								<Caption>@MAZ9</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>UnregisterPat</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMResourceSchedulingAppointment_PatientName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1881</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ367</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMResourceSchedulingAppointment_PatientContact</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ8250</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ8244</Label>
									</AxFormControl>
								</Controls>
								<Caption>@MAZ9471</Caption>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>ClientGroup</Name>
						<ElementPosition>1232814685</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ClientAccountGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>429496728</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ClientAccount</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>100</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>HMClientAccount</ExtendedDataType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ClientName</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ10881</Label>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Columnspace>0</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RequestorGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>644245092</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Requestor</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>100</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11601</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestorName</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>150</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RequestorNewContact</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ12024</HelpText>
										<Skip>Yes</Skip>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>New</NormalImage>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Columnspace>5</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>RequestorPhone</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993456</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ11602</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group4</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>RequestorEmail</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>255</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11603</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>RequestorNewEmail</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ12171</HelpText>
										<Skip>Yes</Skip>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>New</NormalImage>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Columnspace>5</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ReportSentToGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490184</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ReportSentTo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437174</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>100</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ12140</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ReportSentToName</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655763</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>150</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ShowLabel>No</ShowLabel>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>ReportSentToNewContact</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569704</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ12024</HelpText>
										<Skip>Yes</Skip>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>ImageOnly</ButtonDisplay>
										<NormalImage>New</NormalImage>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Columnspace>5</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReportSentToPhone</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1503238549</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ12141</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReportSentToEmail</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1717986914</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ12142</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>BillingAddress</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1932735280</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DisplayHeight>3</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
								<Label>@SYS327092</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>ReportAddress</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>2040109463</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DisplayHeight>3</DisplayHeight>
								<DisplayHeightMode>Fixed</DisplayHeightMode>
								<Label>@MAZ12143</Label>
								<Mandatory>Yes</Mandatory>
							</AxFormControl>
						</Controls>
						<Caption>@SYS14787</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GroupPlanningObject</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1590728626</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GrpRight</Name>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DateTime</Name>
										<ElementPosition>286331152</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>AppointmentDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@SYS100104</HelpText>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>TransDate</ExtendedDataType>
												<Label>@MAZ795</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormTimeControl">
												<Name>AppointmentTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ2007</HelpText>
												<Type>Time</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>TimeOfDay</ExtendedDataType>
												<Label>@RET3626</Label>
												<TimeSeconds>No</TimeSeconds>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTimeControl">
										<Name>ArrivalTime</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>357913940</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ11148</HelpText>
										<Type>Time</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TimeOfDay</ExtendedDataType>
										<Label>@MAZ11147</Label>
										<TimeSeconds>No</TimeSeconds>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ScheduleType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>572662304</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>Appointment type of appointment</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Appointment type</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>TreatmentClassification</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>644245092</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<ExtendedDataType>HMTreatmentClassficationLookup</ExtendedDataType>
										<ReplacementFieldGroup>Description</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Resource</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827880</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS89158</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PlanningObject</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993456</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1994</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ5981</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>OrgUnit</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1002159032</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>Name of the clinic</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Clinic</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BldUnit</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1145324608</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>Name of the room</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Room</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Phy</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490184</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1907</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ65</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PhySpecial</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655760</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Skip>Yes</Skip>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ1706</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ConfirmationStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986912</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>HMAppointmentConfirmationStatus</EnumType>
										<Label>@MAZ11405</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMBookingOrigin</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1797523344</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ13055</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BookedBy</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1877059776</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>getCreatedByName</DataMethod>
										<Label>@MAZ13056</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>SendEmailTo</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1956596208</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>HMAppointmentSendEmailTo</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ClientDetails</Name>
										<ElementPosition>2020225354</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>IsVIP</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>805306366</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS81354</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>chkCustBadCredit</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1207959549</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>Bad credit</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>chkCustOnHold</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@SYS103075</Label>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
								</Controls>
								<Caption>@SYS80090</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>EditReasonGroup</Name>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Reason</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS86426</Label>
										<LookupButton>Always</LookupButton>
									</AxFormControl>
								</Controls>
								<Caption>@MAZ9352</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group2</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>BomVersionLookUp</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>Select protocol for patient</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Protocol</Label>
										<LookupButton>Always</LookupButton>
									</AxFormControl>
								</Controls>
								<Caption>Protocol</Caption>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>InsuranceGroup</Name>
						<ElementPosition>1869106136</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>InsuranceAccountGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>536870910</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InsuranceCode</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>100</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DisplayLength>4</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@MAZ13054</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>InsuranceName</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<DisplayLength>10</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
										<Label>@MAZ13045</Label>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Columnspace>0</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InsurancePhone</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>805306365</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ13049</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InsuranceContract</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741820</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ13053</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>InsuranceClass</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1342177275</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ13052</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612730</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>ExtrasCovered</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>NoYes</EnumType>
										<Label>@MAZ10901</Label>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ReasonGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientEncounter_Reason</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ1924</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@MAZ8391</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormButtonControl">
												<Name>Clear</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ1910</HelpText>
												<LeftMode>RightEdge</LeftMode>
												<Skip>Yes</Skip>
												<Type>Button</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<BackgroundColor>DynBackgroundWhite</BackgroundColor>
												<Border>None</Border>
												<ButtonDisplay>ImageOnly</ButtonDisplay>
												<NormalImage>Delete</NormalImage>
												<SaveRecord>No</SaveRecord>
												<ShowShortCut>No</ShowShortCut>
												<Text>@SYS60541</Text>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Columnspace>0</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
										<FrameType>None</FrameType>
									</AxFormControl>
								</Controls>
								<Caption>@SYS342058</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormDateControl">
								<Name>InsuranceExpirationDate</Name>
								<AllowEdit>No</AllowEdit>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048185</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Date</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ13050</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PreAuthorization</Name>
								<ElementPosition>2013265915</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>PreAuthValidDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ13233</HelpText>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@MAZ13233</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>PreAuthorizationStatus</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<EnumType>HMPreAuthorizationStatus</EnumType>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PreAuthorizationNumber</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ13234</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>String30</ExtendedDataType>
										<Label>@MAZ13234</Label>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Caption>Insurance</Caption>
					</AxFormControl>
				</Controls>
				<Columns>3</Columns>
				<FramePosition>Inside</FramePosition>
				<FrameType>None</FrameType>
				<Style>TOCTitleContainer</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>SubInstruction</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1227133512</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<BackgroundColorRGB>
					<Red>15</Red>
					<Green>0</Green>
					<Blue>0</Blue>
				</BackgroundColorRGB>
				<ColorScheme>RGB</ColorScheme>
				<FontSize>13</FontSize>
				<ForegroundColorRGB>
					<Red>0</Red>
					<Green>51</Green>
					<Blue>153</Blue>
				</ForegroundColorRGB>
				<Style>MainInstruction</Style>
				<Text>Select options</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1533916890</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RelatedAppointments</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>841097760</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>ActionPaneMultiResource</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionPaneTabMultiResource</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroupMultiResource</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AddMultiResourceAppt</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>MenuFunctionButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@SYS321054</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteButton</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>CommandButton</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>DeleteRecord</Command>
														<NeedsRecord>Yes</NeedsRecord>
														<NormalImage>Delete</NormalImage>
														<Text>@SYS14425</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>MultiRrscApptGrid</Name>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_Date</Name>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Date</DataField>
										<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTimeControl">
										<Name>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_Time</Name>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Time</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Time</DataField>
										<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ResourceMaster</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>resourceMasterDescription</DataMethod>
										<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
										<Label>@SYS89158</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc_HMResourceSchedulingTypeCode</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
										<ReferenceField>HMResourceSchedulingTypeCode</ReferenceField>
										<ReplacementFieldGroup>Description</ReplacementFieldGroup>
									</AxFormControl>
								</Controls>
								<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
								<VisibleRows>7</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HMResourceGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS89158</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group3</Name>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Resources</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>GridResources</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Grid</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMResourceMaster_Code</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Code</DataField>
														<DataSource>HMResourceMaster</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMResourceMaster_Description</Name>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Description</DataField>
														<DataSource>HMResourceMaster</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>HMResourceMaster_Type</Name>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Type</DataField>
														<DataSource>HMResourceMaster</DataSource>
														<Items />
													</AxFormControl>
												</Controls>
												<DataSource>HMResourceSchedulingPlanningObjectRelatedAppt</DataSource>
												<VisibleRows>7</VisibleRows>
												<VisibleRowsMode>Fixed</VisibleRowsMode>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ10621</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>VSplitterRelatedAppointments</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<FramePosition>Inside</FramePosition>
										<Style>SplitterVerticalContainer</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Timeslots</Name>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>TimeslotsGrid</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Grid</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>HMResourceSchedulingOpenTimeSlotsTmp_Date</Name>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Date</DataField>
														<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormTimeControl">
														<Name>HMResourceSchedulingOpenTimeSlotsTmp_Time</Name>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Time</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Time</DataField>
														<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
														<TimeSeconds>No</TimeSeconds>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormTimeControl">
														<Name>HMResourceSchedulingOpenTimeSlotsTmp_ArrivalTime</Name>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Time</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>ArrivalTime</DataField>
														<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
														<TimeSeconds>No</TimeSeconds>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormReferenceGroupControl">
														<Name>HMResourceSchedulingOpenTimeSlotsTmp_HMResourceSchedulingTypeCode</Name>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ReferenceGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls />
														<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
														<ReferenceField>HMResourceSchedulingTypeCode</ReferenceField>
														<ReplacementFieldGroup>Description</ReplacementFieldGroup>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>HMResourceSchedulingOpenTimeSlotsTmp_IsHotspot</Name>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>IsHotspot</DataField>
														<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
														<Items />
													</AxFormControl>
												</Controls>
												<DataSource>HMResourceSchedulingOpenTimeSlotsTmpResource</DataSource>
												<VisibleRows>7</VisibleRows>
												<VisibleRowsMode>Fixed</VisibleRowsMode>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ2928</Caption>
									</AxFormControl>
								</Controls>
								<Columns>3</Columns>
								<Columnspace>0</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
						</Controls>
						<Caption>@MAZ11209</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Services</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>981280720</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabControl">
								<Name>TabSummaryDetailService</Name>
								<AlignControl>No</AlignControl>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Tab</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>TabPageSummary</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>TabPage</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>CopyOfGroup2</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneControl">
														<Name>ActionPaneServices</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>939524094</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ActionPane</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormActionPaneTabControl">
																<Name>CopyOfActionPaneTab1</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>ActionPaneTab</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonGroupControl">
																		<Name>CopyOfButtonGroup1</Name>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ButtonGroup</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>NewService</Name>
																				<ElementPosition>1073741822</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<HelpText>Maintain exam codes</HelpText>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<MenuItemName>HMPatientOrderAppointment</MenuItemName>
																				<Text>@SYS321054</Text>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormCommandButtonControl">
																				<Name>DeletePhysio</Name>
																				<ElementPosition>1610612733</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<HelpText>@MAZ7820</HelpText>
																				<Type>CommandButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<Command>DeleteRecord</Command>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>Delete</NormalImage>
																				<SaveRecord>No</SaveRecord>
																				<Text>@SYS109268</Text>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonControl">
																				<Name>ExpandProtocol</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1789569704</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>Button</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<Visible>No</Visible>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<ImageLocation>AOTResource</ImageLocation>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>HM_Expand_16x16</NormalImage>
																				<Text>@SYS22914</Text>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDropDialogButtonControl">
																				<Name>DeclineService</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1968526675</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>DropDialogButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMAppointmentInventTmp</DataSource>
																				<MenuItemName>HMAppointmentServiceDeclinedDropDlg</MenuItemName>
																				<NeedsRecord>Yes</NeedsRecord>
																				<Parameters>AppointmentTemp</Parameters>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonControl">
																				<Name>UndeclineService</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>2013265917</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<HelpText>@MAZ12270</HelpText>
																				<Type>Button</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<ImageLocation>AOTResource</ImageLocation>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>HMUndo_png</NormalImage>
																				<Text>@MAZ12271</Text>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>HMProtocolClientNotes</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>2058005160</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMAppointmentInventTmp</DataSource>
																				<MenuItemName>HMProtocolClientNotes</MenuItemName>
																				<NeedsRecord>Yes</NeedsRecord>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDropDialogButtonControl">
																				<Name>HMRelatedAppointmentResourceLookup</Name>
																				<ElementPosition>2087831322</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>DropDialogButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMResourceSchedulingOpenTimeSlotsTmpMultiResrc</DataSource>
																				<MenuItemName>HMRelatedAppointmentResourceLookup</MenuItemName>
																				<NeedsRecord>Yes</NeedsRecord>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormButtonControl">
																				<Name>DeAssignRelatedAppointmentResource</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ConfigurationKey>MZKTemp</ConfigurationKey>
																				<ElementPosition>2117657484</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>Button</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<NeedsRecord>Yes</NeedsRecord>
																				<NormalImage>Delete</NormalImage>
																				<Text>@MAZ12692</Text>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>Vertical</ArrangeMethod>
																		<DataSource>HMAppointmentInventTmp</DataSource>
																	</AxFormControl>
																</Controls>
																<AlignChild>No</AlignChild>
																<AlignChildren>No</AlignChildren>
																<ArrangeMethod>Vertical</ArrangeMethod>
															</AxFormControl>
														</Controls>
														<AlignChild>No</AlignChild>
														<AlignChildren>No</AlignChildren>
														<ArrangeMethod>Vertical</ArrangeMethod>
														<Style>Strip</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>ServicesGrid</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1409286142</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Grid</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>Code</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>286331152</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ItemId</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>@MAZ13057</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>Shortname</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>429496728</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>Description of the exam code</HelpText>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataMethod>itemDescriptionDetails</DataMethod>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>Description</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>HMAppointmentInventTmp_IsProtcol</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>572662304</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>CheckBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Visible>No</Visible>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataField>IsProtcol</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>HMAppointmentInventTmp_ProtocolName</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>858993456</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ProtocolName</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>@MAZ13059</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>HMAppointmentInventTmp_ProtocolId</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>954437173</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ProtocolId</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>@MAZ6974</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>HMAppointmentInventTmp_PatientResponsibility</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1049880890</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>ComboBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>PatientResponsibility</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormComboBoxControl">
																<Name>HMAppointmentInventTmp_HMServiceStatus</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>1145324608</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>ComboBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>HMServiceStatus</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Items />
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>HMAppointmentInventTmp_ResourceDescription</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>1288490184</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>ResourceDescription</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormDateControl">
																<Name>HMAppointmentInventTmp_PackageValidityDate</Name>
																<ElementPosition>1431655760</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Date</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>PackageValidityDate</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>HMAppointmentInventTmp_CoPay</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>1574821336</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>CoPay</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>@MAZ4692</Label>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>HMAppointmentInventTmp_Price</Name>
																<AllowEdit>No</AllowEdit>
																<ElementPosition>1717986912</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>Price</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
																<Label>@SYS62867</Label>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormStringControl">
																<Name>HMAppointmentInventTmp_PreAuthorizationNumber</Name>
																<ElementPosition>1861152490</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>String</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Visible>No</Visible>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>PreAuthorizationNumber</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormDateControl">
																<Name>HMAppointmentInventTmp_PreAuthValidityDate</Name>
																<ElementPosition>2004318068</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Date</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<Visible>No</Visible>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>PreAuthValidityDate</DataField>
																<DataSource>HMAppointmentInventTmp</DataSource>
															</AxFormControl>
														</Controls>
														<DataSource>HMAppointmentInventTmp</DataSource>
														<MultiSelect>No</MultiSelect>
														<ShowRowLabels>No</ShowRowLabels>
														<VisibleRows>7</VisibleRows>
														<VisibleRowsMode>Fixed</VisibleRowsMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>Group1</Name>
														<ElementPosition>1879048190</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>TotalAmount</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<LeftMode>RightEdge</LeftMode>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ExtendedDataType>Amount</ExtendedDataType>
																<Label>@MAZ10028</Label>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
												<Caption>@MAZ10582</Caption>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
										<Caption>@RUP1032</Caption>
										<Scrollbars>Auto</Scrollbars>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormTabPageControl">
										<Name>Detail</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>TabPage</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>ServiceDetailGrid</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Grid</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMAppointmentInventTmpDetails_ItemId</Name>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemId</DataField>
														<DataSource>HMAppointmentInventTmpDetails</DataSource>
														<Label>@MAZ10859</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMAppointmentInventTmpDetails_ItemName</Name>
														<ElementPosition>1610612733</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemName</DataField>
														<DataSource>HMAppointmentInventTmpDetails</DataSource>
														<Label>@MAZ5207</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMAppointmentInventTmpDetails_Instruction</Name>
														<ElementPosition>1879048189</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Instruction</DataField>
														<DataSource>HMAppointmentInventTmpDetails</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>HMAppointmentInventTmpDetails_HMServiceStatus</Name>
														<ElementPosition>2013265917</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>HMServiceStatus</DataField>
														<DataSource>HMAppointmentInventTmpDetails</DataSource>
														<Items />
													</AxFormControl>
												</Controls>
												<DataSource>HMAppointmentInventTmpDetails</DataSource>
												<ShowRowLabels>No</ShowRowLabels>
												<VisibleRows>7</VisibleRows>
												<VisibleRowsMode>Fixed</VisibleRowsMode>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ8587</Caption>
										<Scrollbars>Auto</Scrollbars>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Auto</Style>
							</AxFormControl>
						</Controls>
						<Caption>@MAZ13057</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Documents</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1191555160</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridRequiredDocs</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>IsMarked</Name>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColor>WindowBackground</BackgroundColor>
										<DataMethod>editIsMarked</DataMethod>
										<DataSource>HMRequiredDocuments</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMRequiredDocuments_Code</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Code</DataField>
										<DataSource>HMRequiredDocuments</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMRequiredDocuments_Description</Name>
										<AllowEdit>No</AllowEdit>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>HMRequiredDocuments</DataSource>
									</AxFormControl>
								</Controls>
								<DataSource>HMRequiredDocuments</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
								<VisibleRows>7</VisibleRows>
								<VisibleRowsMode>Fixed</VisibleRowsMode>
							</AxFormControl>
						</Controls>
						<Caption>@MAZ9614</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>RecurrenceTab</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1401829601</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RecurrenceGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneControl">
										<Name>RecurrenceActionPane</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPane</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormActionPaneTabControl">
												<Name>ActionPaneTab</Name>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ActionPaneTab</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormButtonGroupControl">
														<Name>NewRecurrence</Name>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ButtonGroup</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormMenuFunctionButtonControl">
																<Name>NewRecurr</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>858993458</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>MenuFunctionButton</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<MenuItemName>HMPatientRecurrenceAppointment</MenuItemName>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>RecurrDelete</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1288490187</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<NormalImage>Delete</NormalImage>
																<Text>@MAZ5190</Text>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormButtonControl">
																<Name>Reset</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1717986916</ElementPosition>
																<Enabled>No</Enabled>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Button</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																<ImageLocation>AOTResource</ImageLocation>
																<NormalImage>HM_Reset_32x32_png</NormalImage>
																<Text>@MAZ7065</Text>
															</AxFormControl>
														</Controls>
														<ArrangeMethod>Vertical</ArrangeMethod>
													</AxFormControl>
												</Controls>
												<AlignChild>No</AlignChild>
												<AlignChildren>No</AlignChildren>
												<ArrangeMethod>Vertical</ArrangeMethod>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
										<Style>Strip</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>TempGrid</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormIntegerControl">
												<Name>HMResourceSchedulingAppointmentTmp_PriorityNumber</Name>
												<AllowEdit>No</AllowEdit>
												<ElementPosition>715827880</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Integer</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PriorityNumber</DataField>
												<DataSource>HMResourceSchedulingAppointmentTmp</DataSource>
												<Label>@MAZ9201</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMResourceSchedulingAppointmentTmp_AppointmentDate</Name>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AppointmentDate</DataField>
												<DataSource>HMResourceSchedulingAppointmentTmp</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormTimeControl">
												<Name>HMResourceSchedulingAppointmentTmp_AppointmentTime</Name>
												<ElementPosition>1431655760</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Time</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AppointmentTime</DataField>
												<DataSource>HMResourceSchedulingAppointmentTmp</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>cmbAvail</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569703</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>IsDelayed</DataField>
												<DataSource>HMResourceSchedulingAppointmentTmp</DataSource>
												<Label>@SYS342857</Label>
												<Items />
											</AxFormControl>
										</Controls>
										<DataSource>HMResourceSchedulingAppointmentTmp</DataSource>
										<MultiSelect>No</MultiSelect>
										<ShowRowLabels>No</ShowRowLabels>
										<VisibleRows>7</VisibleRows>
										<VisibleRowsMode>Fixed</VisibleRowsMode>
									</AxFormControl>
								</Controls>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Caption>@SYS70583</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Options</Name>
						<ElementPosition>1655351976</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>HMResourceSchedulingAppointment_IsSpecificConsultant</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ8402</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>HMResourceSchedulingAppointment_RescheduleWithoutConfirmation</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@MAZ8401</HelpText>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>@MAZ8358</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>WaitList</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>AddToWaitlList</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ8623</Label>
										<Value>1</Value>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@MAZ5443</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>ClinicStaffTab</Name>
						<ElementPosition>1908874352</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Facilities</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>858993458</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Grid</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AssetTable_AssetId</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>Device code</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AssetId</DataField>
												<DataSource>AssetTable</DataSource>
												<FastTabSummary>No</FastTabSummary>
												<Label>Code</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>AssetTable_Name</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>Device name</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>Name</DataField>
												<DataSource>AssetTable</DataSource>
												<FastTabSummary>No</FastTabSummary>
												<Label>Name</Label>
											</AxFormControl>
										</Controls>
										<DataSource>AssetTable</DataSource>
										<VisibleRows>7</VisibleRows>
										<VisibleRowsMode>Fixed</VisibleRowsMode>
									</AxFormControl>
								</Controls>
								<Caption>Devices</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>VSplitter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1288490187</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<FramePosition>Inside</FramePosition>
								<Style>SplitterVerticalContainer</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ClinicStaff</Name>
								<ElementPosition>1717986916</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGridControl">
										<Name>Main</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Grid</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PhysicianName</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>Resource name</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>physicianName</DataMethod>
												<DataSource>HMClinicStaff2</DataSource>
												<Label>Name</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>EmployeeNumber</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataMethod>getEmployeePersonnelNumber</DataMethod>
												<DataSource>HMClinicStaff2</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>HMClinicStaff2_HMClinicStaffRole</Name>
												<ElementPosition>1879048189</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>HMClinicStaff2</DataSource>
												<ReferenceField>HMClinicStaffRole</ReferenceField>
												<ReplacementFieldGroup>Description</ReplacementFieldGroup>
											</AxFormControl>
										</Controls>
										<DataSource>HMClinicStaff2</DataSource>
										<VisibleRows>7</VisibleRows>
										<VisibleRowsMode>Fixed</VisibleRowsMode>
									</AxFormControl>
								</Controls>
								<Columns>4</Columns>
								<Caption>Resources</Caption>
							</AxFormControl>
						</Controls>
						<Columns>3</Columns>
						<Columnspace>0</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
						<Caption>Devices and resources</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Miscellaneous</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1988410783</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>LeftGroup</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>CreditCardTokenRequired</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11825</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>CreditCardToken</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>String50</ExtendedDataType>
										<Label>@SYS4000166</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormDateControl">
										<Name>RequestDate</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>954437176</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Date</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>TransDate</ExtendedDataType>
										<Label>@MAZ2992</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PONum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1193046470</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11596</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>EmployeeNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11597</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>GOPNum</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1670265058</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@MAZ11598</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>IncompleteInfoLog</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DisplayHeight>3</DisplayHeight>
										<DisplayHeightMode>Fixed</DisplayHeightMode>
										<ExtendedDataType>HMNotes</ExtendedDataType>
										<Label>@MAZ12245</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>Notes</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1968526675</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DisplayHeight>3</DisplayHeight>
										<DisplayHeightMode>Fixed</DisplayHeightMode>
										<ExtendedDataType>HMAppointmentNotes</ExtendedDataType>
										<Label>@MAZ12315</Label>
										<LookupButton>Never</LookupButton>
									</AxFormControl>
								</Controls>
								<Caption>@SYS80069</Caption>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>RightGroup</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupPatientInfo</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CriticalMedInfo</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DisplayHeight>3</DisplayHeight>
												<DisplayHeightMode>Fixed</DisplayHeightMode>
												<ExtendedDataType>HMNotes</ExtendedDataType>
												<Label>@MAZ11813</Label>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ8913</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupClientInfo</Name>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BookingNotes</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1193046470</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DisplayHeight>3</DisplayHeight>
												<DisplayHeightMode>Fixed</DisplayHeightMode>
												<ExtendedDataType>HMNotes</ExtendedDataType>
												<Label>@MAZ11331</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>BillingNotes</Name>
												<AllowEdit>No</AllowEdit>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1789569705</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DisplayHeight>3</DisplayHeight>
												<DisplayHeightMode>Fixed</DisplayHeightMode>
												<ExtendedDataType>HMNotes</ExtendedDataType>
												<Label>@MAZ11334</Label>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ13058</Caption>
									</AxFormControl>
								</Controls>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
						<Caption>@MAZ12069</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>PatientInfo</Name>
						<ElementPosition>2067947214</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<ColumnsMode>Fill</ColumnsMode>
						<Caption>@MAZ8913</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>Attachment</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>2107715430</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormActionPaneControl">
								<Name>AttachmentActionPane</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ActionPane</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormActionPaneTabControl">
										<Name>ActionTab_Attachment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ActionPaneTab</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormButtonGroupControl">
												<Name>ButtonGroup_attachment</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ButtonGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormMenuFunctionButtonControl">
														<Name>AddMenuFunctionButtonControl</Name>
														<Type>MenuFunctionButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
														<MenuItemName>HMUploadFileDialog</MenuItemName>
														<NormalImage>New</NormalImage>
														<Text>New</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormCommandButtonControl">
														<Name>DeleteAttachment</Name>
														<Type>CommandButton</Type>
														<FormControlExtension
															i:nil="true" />
														<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
														<Command>DeleteRecord</Command>
														<NormalImage>Delete</NormalImage>
														<Text>Delete</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>Vertical</ArrangeMethod>
												<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
											</AxFormControl>
										</Controls>
										<AlignChild>No</AlignChild>
										<AlignChildren>No</AlignChildren>
										<ArrangeMethod>Vertical</ArrangeMethod>
									</AxFormControl>
								</Controls>
								<AlignChild>No</AlignChild>
								<AlignChildren>No</AlignChildren>
								<ArrangeMethod>Vertical</ArrangeMethod>
								<Style>Strip</Style>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>GridAttachment</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HmResourceSchedulingAttachmentTmpTable_TypeId</Name>
										<ElementPosition>477218588</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>TypeId</DataField>
										<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HmResourceSchedulingAttachmentTmpTable_Name</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>914668960</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Name</DataField>
										<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
										<DisplayLength>50</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HmResourceSchedulingAttachmentTmpTable_Notes</Name>
										<ElementPosition>1352119332</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Notes</DataField>
										<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
										<DisplayLength>50</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HmResourceSchedulingAttachmentTmpTable_HMPath</Name>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>HMPath</DataField>
										<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
										<DisplayLength>50</DisplayLength>
										<DisplayLengthMode>Fixed</DisplayLengthMode>
									</AxFormControl>
								</Controls>
								<DataSource>HmResourceSchedulingAttachmentTmpTable</DataSource>
							</AxFormControl>
						</Controls>
						<Caption>@SYS93335</Caption>
						<FastTabExpanded>No</FastTabExpanded>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>FastTabs</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogCommit</Name>
				<ElementPosition>1840700268</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls />
				<AlignChild>No</AlignChild>
				<BackStyle>Opaque</BackStyle>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>