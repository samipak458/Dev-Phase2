<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMClaimCMSTemplateImportDoc</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMClaimCMSTemplateImportDoc extends FormRun
{
    FileUploadTemporaryStorageResult result;
    System.IO.MemoryStream           stream;
    str                              availableTypes = ".pdf";
    str                              fileTypeId, fileName, fileExtension, fileURL;
    boolean                          docTypeCheck;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        Code.mandatory(true);
        TemplateName.mandatory(true);
        FormCommandButtonControlOk.enabled(false);
        FileUpload.commonFileTypesAccepted(availableTypes);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DocType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            HMParametersDocumentAttachmentType hmParametersDocAttachmentType;
            DocuType                           docuType;

            boolean ret;
    
            ret = super();

            select HMAttachmentDocType
                from hmParametersDocAttachmentType
                where hmParametersDocAttachmentType.HMAttachmentDocType == DocType.selection();

            if(hmParametersDocAttachmentType)
            {
                if(hmParametersDocAttachmentType.DocuType != 0)
                {
                    docTypeCheck = true;
                    
                    select TypeId
                        from docuType
                        where docuType.RecId == hmParametersDocAttachmentType.DocuType;

                    fileTypeId = docuType.TypeId;
                }
                else
                {
                    docTypeCheck = false;
                    error("No association provided for selected document type in patient management parameters!");
                }
            }
            else
            {
                docTypeCheck = false;
                error("Document type does not exist in patient management parameters!");
            }
    
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FileUpload</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>OnUploadCompleted</Name>
						<Source><![CDATA[
        public void OnUploadCompleted()
        {   
            if(docTypeCheck)
            {
                super();
            
                stream  = new System.IO.MemoryStream();
            
                result = this.getFileUploadResult() as FileUploadTemporaryStorageResult;

                stream        = this.getUploadedFile();
                fileName      = this.fileName();
                fileURl       = result.getDownloadUrl();
                fileExtension = System.IO.Path::GetExtension(fileName);
                
                if(result)
                {
                    FormCommandButtonControlOk.enabled(true);
                }
                else
                {
                    error("File not uploaded successfully!");
                }
            }
            else
            {
                error("Document type must be specified first!");
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>OnUploadAttemptStarted</Name>
						<Source><![CDATA[
        public void OnUploadAttemptStarted()
        {
            if(docTypeCheck)
            {
                super();

                FormCommandButtonControlOK.enabled(false);
            }
            else
            {
                error("Document type must be specified first!");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FormCommandButtonControlOK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        public void clicked()
        {
            if(DocType.selection() == 0)
            {
                error("Document type must be filled in!");
            }
            else if(result)
            {
                if(Code.valueStr() == "")
                {
                    error("Code must be filled in!");
                }
                else
                {
                    if(TemplateName.valueStr() == "")
                    {
                        error("Name must be filled in!");
                    }
                    else
                    {
                        HMClaims hmClaims           = new HMClaims();
                        Recid    claimTemplateRecId = hmClaims.importClaimDocument(fileURL,
                            DocType.selection(),
                            TemplateName.text(),
                            Code.text(),
                            HMClaimTemplateType::CMS1500,
                            result.getUploadStatus(),
                            fileName,
                            fileExtension,
                            fileTypeId,
                            stream);

                        if(claimTemplateRecid > 0)
                        {
                            super();
                            element.args().record().dataSource().research(true);
                            element.args().record().dataSource().refresh();
                        }
                        else if(claimTemplateRecId == -1)
                        {
                            error("@MAZ7066");
                        }
                    }
                }
            }
            else
                error("Error importing document!");
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">Import CMS Templates</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<ShowNewButton xmlns="">No</ShowNewButton>
		<Style xmlns="">Dialog</Style>
		<WindowType xmlns="">Slider</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DetailsGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>DocType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>ComboBox</Type>
						<FormControlExtension
							i:nil="true" />
						<EnumType>HMAttachmentDocType</EnumType>
						<Label>Document Type</Label>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Code</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1380525201</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>HMClaimTemplateCode</ExtendedDataType>
						<Label>Code</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>TemplateName</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1533916890</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>HMClaimTemplateName</ExtendedDataType>
						<Label>Name</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl>
				<Name>FileUpload</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HelpText>File name</HelpText>
				<FormControlExtension>
					<Name>FileUpload</Name>
					<ExtensionComponents />
					<ExtensionProperties>
						<AxFormControlExtensionProperty>
							<Name>fileTypesAccepted</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>fileNameLabel</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>browseText</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>style</Name>
							<Type>Enum</Type>
							<TypeName>FileUploadStyle</TypeName>
						</AxFormControlExtensionProperty>
						<AxFormControlExtensionProperty>
							<Name>baseFileUploadStrategyClassName</Name>
							<Type>String</Type>
						</AxFormControlExtensionProperty>
					</ExtensionProperties>
				</FormControlExtension>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FormNavigationGroup</Name>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>FormCommandButtonControlOK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>OK</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>FormCommandButtonControlCANCEL</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>