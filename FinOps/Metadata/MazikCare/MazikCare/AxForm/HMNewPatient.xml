<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMNewPatient</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMNewPatient extends FormRun
{
    HMPatient                                   newHMPatient, callerPatient;
    RecId                                       newPatientRecId, selectedPatientRecId,newEmergencyCaseRecId;
    Object                                      callerForm;
    HcmPersonnelNumberId                        hcmPersonnelNumberId;
    NumberSequenceReference                     numberSeqReferencePatientNum;
    NumberSequenceTable                         numberSeqTablePatientNum;
    NumberSeq                                   numberSeqPatientNum;
    Num                                         lastNumber;
    HMFinClassRefRecId                          financialClassRecId;
    List                                        visibleFields;
    //LogisticsAddressCountryRegionId             prevCountryRegionId;
    LogisticsEntityPostalAddressFormHandler     postalAddressForm;
    boolean                                     addRelationship, createNewRelative;
    FormRun                                     callerFormRun;
    SysLookupMultiSelectCtrl                    rolesCtrl;
    // Emeregncy patient work
    RecId                                       requestedOURecId;
    RecId                                       roomRecId;
    RecId                                       bedRecId;

    // medisys demo
    #define.Preemployment("Pre-employment")
    #define.Executive("Executive")
    RecId                                       executiveProtocolRecId,preemploymentProtocolRecId,clientRecId,clinicRecId;
    HcmLanguageCodeId                           languageCodeId;
    int                                         taskId;

    /// <summary>
    /// Adds the relationship record in the HMPatientRelationships table
    /// </summary>
    
    
}
]]></Source>
			</Method>
			<Method>
				<Name>addNewRelationshipRecord</Name>
				<Source><![CDATA[
    public void addNewRelationshipRecord()
    {
        //HMPatientRelationship       hmPatientRelationshipLocal;
        str msg;
        //select forUpdate hmPatientRelationshipLocal;
        if (callerPatient.RecId && newHMPatient.RecId > 0)
        {
    
            element.updateNewPatientBirthTime();
            ttsBegin;
    
    
            //hmPatientRelationshipLocal.initValue();
            ////if (_hmPatientRelationships == HMPatientRelationships::Parent)
            ////{
                ////hmPatientRelationshipLocal.Patient = newHMPatient.RecId;
                ////hmPatientRelationshipLocal.Relative = callerPatient.RecId;
                ////hmPatientRelationshipLocal.Relationship = HMPatientRelationships::Child;
            ////}
            ////else
            ////{
            //hmPatientRelationshipLocal.Patient = callerPatient.RecId;
            //hmPatientRelationshipLocal.Relative = newHMPatient.RecId;
            //hmPatientRelationshipLocal.Relationship = _hmPatientRelationships;
            //}
    
    
            //if (HMPatientTransition::addRelationship(CustTable::findRecId(newHMPatient.CustTable).Party,CustTable::findRecId(callerPatient.CustTable).Party,DirRelationshipTypeId.valueStr()))
            if (HMPatientTransition::addRelationship((newHMPatient.DirPartyTable),CustTable::findRecId(callerPatient.CustTable).Party,DirRelationshipTypeId.valueStr()))
            {
    
    
                if (CreateNewPatient.checked())
                {
                   msg = strFmt("@MAZ6694", callerPatient.patientName());
                }
                else
                {
                   newHMPatient = HMPatient::find(selectedPatientRecId);
                        msg = strFmt('Patient %1 associated as with patient %2', newHMPatient.patientName(), callerPatient.patientName());
    
                }
    
                info(msg);
            }
            else
            {
                error("@MAZ6695");
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllowedOfflineAppointments</Name>
				<Source><![CDATA[
    public boolean checkAllowedOfflineAppointments(HMResourceSchedulingAppointment  _hmResourceSchedulingAppointment)
    {
     
         
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObject;
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingTypeCode                    hmResourceSchedulingTypeCode;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalender;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItem;
        HMBookingOrigin                                 HMBookingOrigin;
        int appointmentsAllowed, totalAppointmentsOnDay;
        boolean ret = true;
    
    
        select * from hmResourceSchedulingWeekPlan
            join * from hmResourceSchedulingWeekDayPlan
            join * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject == _hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(_hmResourceSchedulingAppointment.AppointmentDate)
            && hmResourceSchedulingWeekPlanToCalender.YearNo == year(_hmResourceSchedulingAppointment.AppointmentDate)
            && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(_hmResourceSchedulingAppointment.AppointmentDate);
    
        select * from hmResourceSchedulingDayPlanItem
            join * from hmResourceSchedulingDayPlan
            where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
            && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode ==_hmResourceSchedulingAppointment.HMResourceSchedulingTypeCode
            && (_hmResourceSchedulingAppointment.AppointmentTime >= hmResourceSchedulingDayPlanItem.StartTime && _hmResourceSchedulingAppointment.AppointmentTime <= hmResourceSchedulingDayPlanItem.EndTime);
    
        if (hmResourceSchedulingDayPlanItem.RecId)
        {
            appointmentsAllowed =  hmResourceSchedulingDayPlanItem.OfflineAppointments;
    
            select count(RecId) from hmResourceSchedulingAppointmentLocal
                join * from hmResourceSchedulingPlanningObject
                where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObject.RecId
                && hmResourceSchedulingPlanningObject.RecId == _hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == _hmResourceSchedulingAppointment.AppointmentDate
                && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
                && hmResourceSchedulingAppointmentLocal.IsOnlineAppointment == NoYes::No
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Cancelled
                && hmResourceSchedulingAppointmentLocal.AppointmentStatus != HMResourceSchedulingAppointmentStatus::Tentative
                join * from hmResourceSchedulingTypeCode
                where hmResourceSchedulingTypeCode.RecId == hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode
                && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingTypeCode == _hmResourceSchedulingAppointment.HMResourceSchedulingTypeCode
                join * from hmResourceSchedulingWeekPlan
                where hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject
                join * from hmResourceSchedulingWeekDayPlan
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(_hmResourceSchedulingAppointment.AppointmentDate)
                join * from hmResourceSchedulingWeekPlanToCalender
                where hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                && hmResourceSchedulingWeekPlanToCalender.WeekNo == weekOfYear(_hmResourceSchedulingAppointment.AppointmentDate)
                && hmResourceSchedulingWeekPlanToCalender.YearNo == year(_hmResourceSchedulingAppointment.AppointmentDate)
                join * from hmResourceSchedulingDayPlan
                where hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlan.RecId
                join * from hmResourceSchedulingDayPlanItem
                where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan
                && hmResourceSchedulingDayPlanItem.HMResourceSchedulingTypeCode == _hmResourceSchedulingAppointment.HMResourceSchedulingTypeCode
                && (_hmResourceSchedulingAppointment.AppointmentTime >= hmResourceSchedulingDayPlanItem.StartTime && _hmResourceSchedulingAppointment.AppointmentTime <= hmResourceSchedulingDayPlanItem.EndTime)
                && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= hmResourceSchedulingDayPlanItem.StartTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= hmResourceSchedulingDayPlanItem.EndTime)
                join * from   HMBookingOrigin where  hmResourceSchedulingAppointmentLocal.HMBookingOrigin == HMBookingOrigin.RecId
                && HMBookingOrigin.IsAppointmentOnline == NoYes::No;
    
    
    
            totalAppointmentsOnDay = int642int(hmResourceSchedulingAppointmentLocal.RecId);
    
            if (totalAppointmentsOnDay + 1 > appointmentsAllowed)
            {
                  ret = checkFailed(strFmt("@MAZ8279", HMOrganizationalUnit::find(HMResourceSchedulingPlanningObject::find(_hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject).HMOrganizationalUnit).Description, HMBuildingUnit::find(HMResourceSchedulingPlanningObject::find(_hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject).HMBuildingUnit).Description));
    
            }
    
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicate</Name>
				<Source><![CDATA[
    public boolean checkDuplicate(String100 _Firstname = '',String100 _Midname = '',String100 _Lastname = '',date _birthday = dateNull(),HMSocialSecurity _govId = '',HcmPersonGender _gender = HcmPersonGender::None)
    {
        boolean          ret;
        HMPatient        hmPatientLocal;
        DirPartyTable    dirPartyTableLocal;
           DirPersonName    dirPersonNameLocal;
        DirPersonName    dirPersonNameLocalSelected;
        DirPerson       dirPersonLocal;
        DialogButton diagBut;
        str strMessage = "@MAZ13484";
        str strTitle = "@SYS6998";
    
        ret = true;
    
        if (_govId != '')
        {
            select count(RecId) from hmPatientLocal where hmPatientLocal.SocialSecurityNumber == _govId;
    
            if (hmPatientLocal.RecId == 0)
            {
                if (_Firstname != '' && _birthday != dateNull() && _govId != '')
                {
                   select count(RecId) from hmPatientLocal where hmPatientLocal.SocialSecurityNumber==_govId && hmPatientLocal.Gender == _gender
                   join * from dirPartyTableLocal where hmPatientLocal.DirPartyTable == dirPartyTableLocal.RecId
                   join * from dirPersonLocal      where dirPartyTableLocal.RecId == dirPersonLocal.RecId && (dirPersonLocal.BirthDay == dayofmth(_birthday) && dirPersonLocal.BirthMonth == mthofyr(_birthday) && dirPersonLocal.BirthYear ==year(_birthday) )
                   join * from dirPersonNameLocal  where dirPersonNameLocal.Person == dirPersonLocal.RecId && dirPersonNameLocal.FirstName == strLRTrim(_Firstname) && dirPersonNameLocal.MiddleName == strLRTrim(_Midname) && dirPersonNameLocal.LastName == strLRTrim(_Lastname);
                   //join * from hmPatientLocal where hmPatientLocal.CustTable == hmPatientLocal.RecId && hmPatientLocal.SocialSecurityNumber == _govId;
                }
            }
            else
            {
                select * from hmPatientLocal where hmPatientLocal.SocialSecurityNumber == _govId  && hmPatientLocal.Gender==_gender
                join * from dirPartyTableLocal where hmPatientLocal.DirPartyTable == dirPartyTableLocal.RecId
                join * from dirPersonLocal      where dirPartyTableLocal.RecId == dirPersonLocal.RecId  && (dirPersonLocal.BirthDay == dayofmth(_birthday) && dirPersonLocal.BirthMonth == mthofyr(_birthday) && dirPersonLocal.BirthYear ==year(_birthday))
                join * from dirPersonNameLocal  where dirPersonNameLocal.Person == dirPersonLocal.RecId;
                //join * from hmPatientLocal where hmPatientLocal.CustTable == custTableLocal.RecId && hmPatientLocal.SocialSecurityNumber == _govId;
                dirPersonNameLocalSelected.FirstName = dirPersonNameLocal.FirstName ;
                dirPersonNameLocalSelected.MiddleName = dirPersonNameLocal.MiddleName  ;
                dirPersonNameLocalSelected.LastName = dirPersonNameLocal.LastName;
                if(hmPatientLocal.RecId && isConfigurationKeyEnabled(configurationKeyNum(MzkBupa)))
                {
                    diagBut = Box::yesNo (
                    strMessage,
                    DialogButton::No, // Initial focus is on the No button.
                    strTitle);
                    if (diagBut == DialogButton::No)
                         {
                                ret = false;
                         }
                    else
                        {
                                ret = true;
                        }
                }
                else
                {
                    
                    ret = DirUtility::checkDuplicate(dirPersonNameLocalSelected, DirPartyType::Person, tablestr(DirPerson));
                    
                }
                return ret;
            }
        }
        else
            if(_govId == '')
            {
               select count(RecId) from hmPatientLocal where hmPatientLocal.Gender==_gender
               join * from dirPartyTableLocal where hmPatientLocal.DirPartyTable == dirPartyTableLocal.RecId
               join * from dirPersonLocal      where dirPartyTableLocal.RecId == dirPersonLocal.RecId &&  (dirPersonLocal.BirthDay == dayofmth(_birthday) && dirPersonLocal.BirthMonth == mthofyr(_birthday) && dirPersonLocal.BirthYear ==year(_birthday))
               join * from dirPersonNameLocal  where dirPersonNameLocal.Person == dirPersonLocal.RecId && dirPersonNameLocal.FirstName == strLRTrim(_Firstname) && dirPersonNameLocal.MiddleName == strLRTrim(_Midname) && dirPersonNameLocal.LastName ==  strLRTrim(_Lastname);
                 if(hmPatientLocal.RecId && isConfigurationKeyEnabled(configurationKeyNum(MzkBupa)))
                {
                    diagBut = Box::yesNo (
                    strMessage,
                    DialogButton::No, // Initial focus is on the No button.
                    strTitle);
                    if (diagBut == DialogButton::No)
                         {
                                ret = false;
                         }
                    else
                        {
                                ret= true;
                        }
                   // warning("Patient Already Exist");
                }
    
            }
        /*
        if(hmPatientLocal.CustTable > 0)
        {
            dirPersonNameLocal.FirstName = strLRTrim(_Firstname) ;
            dirPersonNameLocal.MiddleName = strLRTrim(_Midname)  ;
            dirPersonNameLocal.LastName = strLRTrim(_Lastname);
    
             if(isConfigurationKeyEnabled(configurationKeyNum(MzkBupa)))
                {
                    warning("Patient Already Exist");
                }
            else
                {
                ret = DirUtility::checkDuplicate(dirPersonNameLocalSelected, DirPartyType::Person, tablestr(DirPerson));
                }
    
    
          //  ret =  true;
        }
        */
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Checkmandatory</Name>
				<Source><![CDATA[
    Public boolean Checkmandatory( String100 LanguageId ='',HcmPersonGender _gender = HcmPersonGender::None ,HRMSalutation _salutaion = HRMSalutation::None,date _date = dateNull())
    {
         boolean          ret;
        ret = true ;
    
    
        if(LanguageId == '')
        {
            info("Language id missing");
            ret = false;
    
        }
        if(_gender == HcmPersonGender::None)
        {
            info("Gender Missing");
            ret = false;
        }
        if(_salutaion == HRMSalutation::None)
        {
            //info("Salutation Missing");
            //ret =false;
        }
        if(_date == dateNull())
        {
            Info("Birthdate Missing");
            ret = false;
        }
    
         return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPatientFields</Name>
				<Source><![CDATA[
    public void clearPatientFields()
    {
        DirPersonName.FirstName = '';
        DirPersonName.MiddleName = '';
        DirPersonName.LastName = '';
    
        Salutation.selectText('');
        NameSuffix.selectText('');
        Gender.selectText('');
    
        selectedPatientRecId = 0;
        SelectRecord.text('');
    
        //how to empty birth date value
        BirthDate.dateValue(1\1\1900);
        BirthTime.value(0);
    
        //sync with DS
        firstName.text(DirPersonName.FirstName);
        middleName.text(DirPersonName.MiddleName);
        lastName.text(DirPersonName.LastName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        if (!newHMPatient.RecId && numberSeqPatientNum && numberSeqTablePatientNum.RecId)
        {
            numberSeqPatientNum.abort();
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    public void closeCancel()
    {
        if( lastNumber && numberSeqTablePatientNum.RecId && numberSeqPatientNum)
        {
            numberSeqPatientNum.abort();
            lastNumber = '';
        }
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    {
        #task
        Args            args;
        MenuFunction    menuFunction;
        FormRun         formRun;
        Object          formRunObject;
        FormRun         callerRecord;
    
        //RecId           custTableRecId;
        super();
        callerRecord = element.args().caller();
    
        if (element.args().menuItemName() == menuitemDisplayStr(HMNewPatientRelationChart))
        {
            formRun = element.args().caller();
    
            if(formHasMethod(formRun, identifierStr(refreshRelationGrid)))
            {
                formRunObject = formRun;
                formRunObject.refreshRelationGrid();
            }
        }
       /* else if(callerRecord && callerRecord.name() == 'HMPatientChart')
        {
            element.args().caller().newPatient(HMPatient::find(newHMPatient.RecId));
        }*/
        else if(element.args().parm() == 'Subscriber')
        {
            if(Box::yesNo("@MAZ6176",DialogButton::Yes) == DialogButton::Yes)
            {
                element.args().caller().getSubscriber(newHMPatient);
            }
    
            this.close();
        }
       /* else if (element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient))
        {
            formRun = element.args().caller();
    
            if(formHasMethod(formRun, identifierStr(refreshUnRegGrid)))
            {
            formRunObject = formRun;
            formRunObject.refreshUnRegGrid();
            }
    
            this.close();
    
        }*/
    
        else if(element.args().menuItemName() == menuitemDisplayStr(HMRegisterPatientRegistrationRequest))
        {
            breakpoint;
            formRun = element.args().caller();
    
            formRun.task(#taskRefresh);
    
        }
    
        else if (element.args().menuItemName() == menuitemDisplayStr(HMQuickPatientRegistration))
        {
          element.args().caller().getPatient(newHMPatient);
        }
        else
        {
            //if (element.args().caller() != null || element.args().menuItemName() == menuitemDisplayStr(HMRegisterPatientRegistrationRequest))
            //{

            args = new Args();
            args.record(HMPatient::find(newHMPatient.RecId));
            args.caller(element);
    
            menuFunction = new MenuFunction(menuitemdisplaystr(HMPatientChartRegistrationEdit), MenuItemType::Display);
            formRun = menuFunction.create(args);
            formRun.run();
               
            //}
        }
        LogisticsPostalAddress_CountryRegionId.text('');
        HMEventLogMaintian::updateEventLog(tableNum(HMPatient),HMEventType::PatientRegister,newHMPatient.RecId);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyAddressPostalValue</Name>
				<Source><![CDATA[
    public void emptyAddressPostalValue()
    {
        LogisticsPostalAddress.State = '';
        LogisticsPostalAddress.County = '';
        LogisticsPostalAddress.ZipCode = '';
        LogisticsPostalAddress.BuildingCompliment = '';
        LogisticsPostalAddress.Street = '';
        LogisticsPostalAddress.StreetNumber ='';
        LogisticsPostalAddress.PostBox ='';
        LogisticsPostalAddress.DistrictName ='';
        LogisticsPostalAddress.City = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatient</Name>
				<Source><![CDATA[
    public void getPatient(Common _record)
    {
        if (_record.RecId > 0)
        {
            selectedPatientRecId = _record.RecId;
            SelectRecord.text(HMPatient::find(_record.RecId).PatientName());
    
            //load patient record values in controls
            element.loadSelectedPatientData();
            element.isValidCreate();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SysLastValue    nextNumSeq;
        CustTable       custTableLocal;
        
        HMResourceSchedulingAppointment  hmResourceSchedulingAppointmentLocal;
        HMRegistrationRequest hmRegistrationRequestLocal;
        Map locationMap;
    
        super();
        callerForm = element.args().caller();
        callerFormRun = element.args().caller();
        this.parmAddRelationship(false);
        HMEventLogMaintian::createEventLog(tableNum(HMPatient),HMEventType::PatientRegister);
        //gender.selection(HcmPersonGender::Male);
        if(element.args().parm() == 'Subscriber')
        {
            MainInstruction.text("@MAZ6162");
            element.design().caption("@MAZ6162");
        }
    
        //Patient relationship UI load
        this.parmAddRelationship(false);
        createNewRelative = false;
        if   (element.RelationForm())
        {
            element.design().caption("@MAZ6693");
            callerPatient = element.args().record();
    
            element.updateRelationshipFormDesign();
            this.parmAddRelationship(true);
        }
        // modify bu daniyall aslam
        if (!element.RelationForm())
        {
            if (element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient))
            {
                
                if (HMResourceSchedulingAppointment::find(element.args().record().RecId).HMPatient == 0)
                {
                    hmResourceSchedulingAppointmentLocal = HMResourceSchedulingAppointment::find(element.args().record().RecId);
                    if (hmResourceSchedulingAppointmentLocal.HMPatient == 0)
                    {
                        if(hmResourceSchedulingAppointmentLocal)
                        {
                            this.setName(hmResourceSchedulingAppointmentLocal.PatientName,hmResourceSchedulingAppointmentLocal.PatientContact);
                        }
                    }
                }
                
            }
        }
    
        if (element.args().menuItemName() == menuitemDisplayStr(HMRegisterPatientRegistrationRequest))
        {
            hmRegistrationRequestLocal = element.args().record();
            if (hmRegistrationRequestLocal.RecId)
            {
                this.setName(hmRegistrationRequestLocal.Name, hmRegistrationRequestLocal.Contact);
                HMPatient_HMAgeValue.value(hmRegistrationRequestLocal.Age);
                BirthDate.dateValue(hmRegistrationRequestLocal.BirthDate);
                Gender.selection(hmRegistrationRequestLocal.Gender);
                NationID.text(hmRegistrationRequestLocal.NationalId);
    
                element.isValidCreate();
            }
        }
    
        rolesCtrl = SysLookupMultiSelectCtrl::construct(element, roles, queryStr(LogisticsLocationRolePostalLookup), false, [tableNum(LogisticsLocationRoleTranslation), fieldNum(LogisticsLocationRoleTranslation, Description)]);
        locationMap = LogisticsLocationEntity::getDefaultLocationRoleFromEntity(tableNum(HMPatient));
        if(locationMap != null)
        {
            rolesCtrl.set(map2Con(locationMap));
        }
    
        lastName.mandatory(true);
    
        language.text('en-us');
    
        // medisys - demo
        PreemploymentProtocol.enabled(false);
        ExecutiveProtocol.enabled(false);
        PatientCategory.visible(false);
        NationID.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidCreate</Name>
				<Source><![CDATA[
    public void isValidCreate()
    {
    
        boolean     isValid = true;
    
        if (firstName.text() == '' || lastName.text() == '')
        {
            isValid = false;
        }
        else
        {
            firstName.mandatory(true);
            lastName.mandatory(true);
        }
    
    
        //The following condition
        /*
        condition patientNumber.text() == '' evaluates if no new number sequence is generated
        CustTable find evaluates a record already exists:
        This line evaluates a num seq of already existing patient generated while creating new patient
        Its following expression evaluates its a new relative form, we have selected a relative from drop down and no record exist for loaded numseq (hence error)
        Last expression evaluates that patient exist for the generated numseq while form opened normally that is not a relative orm
    
        if (isValid &&
           (patientNumber.text() == '' ||
                (
                    (CustTable::find(patientNumber.text()).RecId != 0 && this.parmCreateNewRelative() )
                    || (CustTable::find(patientNumber.text()).RecId == 0  && this.parmAddRelationship() && !this.parmCreateNewRelative())
                    || (CustTable::find(patientNumber.text()).RecId != 0  && !this.parmAddRelationship()))
       //             )
                )
        {
            isValid = false;
        }
        if (isValid && gender.selection() < 1)
        {
            isValid = false;
        }*/
    
    
        //if (isValid && birthDate.dateValue() == dateNull())
        //{
            //isValid = false;
        //}
    
        if (isValid && birthDate.dateValue() > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            isValid = false;
        }
    
      /*  if (isValid && !clinicRecId)
        {
            isValid = false;
        }*/
    
        ok.enabled(isValid);
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCreateNewPatientDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the UI for new patient creation, triggered when CreateNewPaitnet checkbox is checked
    /// </summary>
    /// <param name="_checked">
    /// The state of the design
    /// </param>
    /// <remarks>
    /// 26th September, 2012
    /// </remarks>
    
    public void loadCreateNewPatientDesign(boolean _checked = true)
    {
        createNewRelative = _checked;
        PatientDetail.enabled(_checked);
        postalAddress.enabled(_checked);
        ElectronicAddress.enabled(_checked);
        SelectRecord.visible(!_checked);
        if (_checked)
        {
            element.design().caption("@MAZ6693");
            MainInstruction.text("@MAZ6693");
            OK.text("@SYS112171");
            element.clearPatientFields();
            PatientNumber.text(lastNumber);
            Group2.enabled(true);
            Group1.enabled(true);
            Gender.enabled(true);
            BirthDate.enabled(true);
            AgeGroup.enabled(true);
            BirthTime.value(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            PatientNumber.text('');
            Gender.selectText('');
            MainInstruction.text("@MAZ7391");
            element.design().caption("@MAZ7391");
            OK.text("@SYS7444");
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSelectedPatientData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the selected patient data in controls
    /// </summary>
    
    public void loadSelectedPatientData()
    {
        HMPatient           hmPatientLocal;
        LogisticsLocation   logisticsLocationLocal;
    
        hmPatientLocal = HMPatient::find(selectedPatientRecId);
        if (hmPatientLocal.RecId)
        {
            PatientDetail.enabled(true);
            Group2.enabled(false);
            Group1.enabled(true);
            Gender.enabled(false);
            BirthDate.enabled(false);
            AgeGroup.enabled(false);
    
            FirstName.text(hmPatientLocal.getPatientFirstName());
            MiddleName.text(hmPatientLocal.getPatientMiddleName());
            LastName.text(hmPatientLocal.getPatientLastName());
    
            HMArabicFirstName.text(hmPatientLocal.getPatientArabicFirstName());
            HMArabicMiddleName.text(hmPatientLocal.getPatientArabicMiddleName());
            HMArabicLastName.text(hmPatientLocal.getPatientArabicLastName());
    
            salutation.selectText(enum2str(hmPatientLocal.Salutation));
            Gender.selectText(enum2str(hmPatientLocal.Gender));
            BirthDate.dateValue(hmPatientLocal.patientBirthDate());
            BirthTime.value(hmPatientLocal.BirthTime);
            PatientNumber.text(CustTable::findRecId(hmPatientLocal.CustTable).AccountNum);
    
            DirPersonName.FirstName     = FirstName.text();
            DirPersonName.MiddleName    = MiddleName.text();
            DirPersonName.LastName      = lastName.text();
    
            DirPersonName.HMArabicFirstName     = FirstName.text();
            DirPersonName.HMArabicMiddleName    = MiddleName.text();
            DirPersonName.HMArabicLastName      = lastName.text();
    
            //load address
            logisticsLocationLocal = LogisticsLocation::find(hmPatientLocal.EmploymentLogisticsLocation);
            LogisticsLocation_DS.executeQuery();
            LogisticsLocation_DS.positionToRecord(logisticsLocationLocal);
    
            Ok.enabled(true);
        }
        else
        {
            PatientDetail.enabled(false);
            Group2.enabled(true);
            Group1.enabled(true);
            Gender.enabled(true);
            BirthDate.enabled(true);
            AgeGroup.enabled(true);
    
            element.clearPatientFields();
            PatientNumber.text('');
            element.emptyAddressPostalValue();
    
            Ok.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageFields</Name>
				<Source><![CDATA[
    public void manageFields(boolean _switch = false)
    {
        SysDictEnum enum = new SysDictEnum(enumNum(HideShowFields));
        if (!HideShowComboBox ||  !_switch)
            return;
        if (_switch)
        {
            HideShowComboBox.selection(!HideShowComboBox.selection());
            HideShowButton.text(enum.index2Label(!HideShowComboBox.selection()));
            HideShowButton.imageLocation(SysImageLocation::EmbeddedResource);
            HideShowButton.normalImage(HideShowComboBox.selection() == HideShowFields::Hide ? int2str(7886) : int2str(7882));
            HideShowButton.helpText(HideShowComboBox.selection() == HideShowFields::Hide ? "@MAZ7888" : "@MAZ7889");
           // HideShowButton.border(FormButtonBorder::None);
    
        }
        if (HideShowComboBox.selection() == HideShowFields::Hide)
        {
            AddressBook.visible(false);
        }
        else
        {
            AddressBook.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    /// This param method wrappes a boolean showing if the user opened the form from new relative menu item
    /// </summary>
    /// <param name="_addRelationship">
    /// Setter value for the boolean
    /// </param>
    /// <returns>
    /// boolean, the new or existing value of the boolean
    /// </returns>
    
    public boolean parmAddRelationship(boolean _addRelationship = addRelationship)
    {
        addRelationship = _addRelationship;
    
        return addRelationship;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateNewRelative</Name>
				<Source><![CDATA[
    /// <summary>
    /// boolean variable,
    /// toglles on create new relative checkbox,
    /// represents if user is CREATING new relative by checking the checkbox
    /// </summary>
    /// <param name="_createNewRelative">
    /// new value to set for the variable
    /// </param>
    /// <returns>
    /// new / existing value for the variable
    /// </returns>
    
    public boolean parmCreateNewRelative(boolean _createNewRelative = createNewRelative)
    {
        createNewRelative = _createNewRelative;
    
        return createNewRelative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshNameFields</Name>
				<Source><![CDATA[
    public void refreshNameFields()
    {
        firstName.text(DirPersonName.FirstName);
        middleName.text(DirPersonName.MiddleName);
        lastName.text(DirPersonName.LastName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RelationForm</Name>
				<Source><![CDATA[
    public boolean RelationForm()
    {
        if (element.args().menuItemName() == menuitemDisplayStr(HMNewPatientRelation) ||
            element.args().menuItemName() == menuitemDisplayStr(HMNewPatientRelationChart)
            )
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormRun   calledFrom;
        //LogisticsPostalAddress logisticsPostalAddressFirstRecord;
    
        super();
        calledFrom =  element.args().caller();
    
    
        //select firstOnly CountryRegionId from logisticsPostalAddressFirstRecord;
    
        //LogisticsPostalAddress.CountryRegionId = logisticsPostalAddressFirstRecord.CountryRegionId;
        LogisticsAddressCountryRegionId.text(LogisticsAddressCountryRegion::findByISOCode(SysCountryRegionCode::countryInfo(curext())).CountryRegionId);
        element.emptyAddressPostalValue();
        element.updateControlBasedOnCountry();
        if(element.args().menuItemName()==  menuitemDisplayStr(HMQuickPatientRegistration))
        {
            OK.visible(true);
        }
        else
        {
            if(isConfigurationKeyEnabled(configurationKeyNum(MzkTemp)))
            {
                OK.visible(true);
            }
            else
            {
                OK.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    public void setName(str _name, str _contact)
    {
        str      NameLocal ;
        str      temp ;
        int      a;
        List     listName;
        str      concat;
        boolean  IsfirstName;
        boolean  IsSecondName;
        ListEnumerator enumorator;
    
        IsSecondName = true;
        IsfirstName= true;
    
    
        temp     =  _name;
        listName =  strSplit(temp,' ');
        a        =  listName.elements();
    
        enumorator =   listName.getEnumerator();
    
        while (enumorator.moveNext())
        {
    
            NameLocal =  enumorator.current();
            if (IsfirstName)
            {
            FirstName.text(NameLocal);
            DirPersonName.FirstName = NameLocal;
            IsfirstName  = false;
            }
            else
            {
                if (a == 2)
                {
                    LastName.text(NameLocal);
                    DirPersonName.LastName = NameLocal;
                }
                else
                {
                    if(IsSecondName)
                    {
                        MiddleName.text (NameLocal);
                        DirPersonName.MiddleName = NameLocal;
                        IsSecondName = false;
                    }
                    else
                    {
                        concat += ' ' + NameLocal;
                    }
    
                }
    
            }
    
    
    
    
        }
        if (!IsSecondName)
            {
                LastName.text(concat);
                DirPersonName.LastName = concat;
            }
        AddressPhone.text(_contact);
        // LogisticsElectronicAddress.
        // DirPerson.PrimaryContactPhone = ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrganizationUnitID</Name>
				<Source><![CDATA[
    public void setOrganizationUnitID(RecId  _clinicRecId)
    {
        clinicRecId = _clinicRecId;
        Clinic.text(HMOrganizationalUnit::find(clinicRecId).Description);
    
        element.isValidCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPolicyTypes</Name>
				<Source><![CDATA[
    public void setPolicyTypes()
    {
            
        if(HMPatientInsurance.PolicyType == PolicyType::CoInsurance)
        {
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).allowEdit(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).allowEdit(true);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).mandatory(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).mandatory(true);
    
        }
        else if(HMPatientInsurance.PolicyType == PolicyType::CoPay)
        {
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).allowEdit(true);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).allowEdit(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).mandatory(true);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).mandatory(false);
    
        }
        else if(HMPatientInsurance.PolicyType == PolicyType::None)
        {
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).mandatory(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoPayAmount)).allowEdit(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).mandatory(false);
            HMPatientInsurance_ds.object(fieldNum(HMPatientInsurance, CoInsurance)).allowEdit(false);
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeClient</Name>
				<Source><![CDATA[
    public void storeClient(RecId _clientlRecId)
    {
        clientRecId =  _clientlRecId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeType</Name>
				<Source><![CDATA[
    public void storeType(RecId _protocolRecId, description _parm)
    {
        if (_parm == #Executive)
        {
            executiveProtocolRecId =  _protocolRecId;
        }
    
        else
        {
             preemploymentProtocolRecId =  _protocolRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>task</Name>
				<Source><![CDATA[
    public int task(int _taskId)
    {
        #task
        int ret;
    
        ret = super(_taskId);
    
        if(_taskId == #taskEsc)
        {
            if(numberSeqPatientNum)
            {
                numberSeqPatientNum.abort();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAppointmentLog</Name>
				<Source><![CDATA[
    public boolean updateAppointmentLog()
    {
       
       
        boolean ret ;
        
        HMParameters         hmParametersLocal;
        HMAppoinmentLog      hmAppoinmentLog;
    
        select firstOnly DefaultPatientRegisterReason from hmParametersLocal;
        if (hmParametersLocal.DefaultPatientRegisterReason != 0)
        {
            ret = true;
        hmAppoinmentLog.HMResScheduleAppointment    = HMResourceSchedulingAppointment::find(element.args().record().RecId).RecId;
        hmAppoinmentLog.HMAppointLogStatus          = HMResourceSchedulingAppointmentStatus::Edited;
        hmAppoinmentLog.AppointmentReason           = hmParametersLocal.DefaultPatientRegisterReason;
        hmAppoinmentLog.HMAppointLogDate            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        hmAppoinmentLog.HMAppointLogTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
        hmAppoinmentLog.insert();
        }
        
        return ret;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlBasedOnCountry</Name>
				<Source><![CDATA[
    public void updateControlBasedOnCountry()
    {
        //todo: ax7 new patient managecontrols method not found new to reimplement
        //visibleFields = DirPartyPostalAddressFormHandler::manageControls(LogisticsAddressCountryRegionId.valueStr(), logisticsPostalAddress_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNewPatientBirthTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updats the birth time value in the New patient's record, Table HMPatient
    /// </summary>
    
    public void updateNewPatientBirthTime()
    {
        HMPatient hmPatientLocal;
        if (element.parmAddRelationship() && newHMPatient.RecId > 0)
        {
            select forUpdate hmPatientLocal where hmPatientLocal.RecId == newHMPatient.RecId;
            if (hmPatientLocal.RecId > 0)
            {
                ttsBegin;
                hmPatientLocal.BirthTime = BirthTime.value();
                hmPatientLocal.update();
                ttsCommit;
            }
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the name as per gender
    /// </summary>
    /// <remarks>
    /// obsolete, remove it
    /// </remarks>
    
    public void updateRelationName()
    {
    
        if (Gender.valueStr() == enum2str(HcmPersonGender::Male))
            FirstName.text("@MAZ6696");
        else
            FirstName.text("@MAZ6697");
        LastName.text(callerPatient.getPatientFirstName());
        dirPersonName.FirstName = FirstName.text();
        dirPersonName.LastName = LastName.text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelationshipFormDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method loads the UI required to load the form as a relationship form disabling name fields, and enabling a time field
    /// </summary>
    /// <remarks>
    /// Requirement provided by Hammad Saleem on 19th September, 2012, Wednesday
    /// </remarks>
    
    public void updateRelationshipFormDesign()
    {
        CreateNewPatient.visible(true);
        this.loadCreateNewPatientDesign(false);
        DirRelationshipTypeId.visible(true);
    
        //if (element.mandatoryFieldsProvided())
            //Ok.enabled(true);
        //else
            //Ok.enabled(false);
        //info(strFmt("check box : %1", CreateNewPatient.value()));
        //info(strFmt("check box : %1", CreateNewPatient.checked()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUnRegPatient</Name>
				<Source><![CDATA[
    public void updateUnRegPatient()
    {
        HMResourceSchedulingAppointment HMResourceSchedulingAppointmentLocal;
        HMResourceSchedulingAppointment appointment = HMResourceSchedulingAppointment::find(element.args().record().RecId);
        if (element.checkAllowedOfflineAppointments(appointment))
        {
            ttsBegin;
                    select forUpdate HMResourceSchedulingAppointmentLocal  where HMResourceSchedulingAppointmentLocal.RecId ==appointment.RecId;
    
                     HMResourceSchedulingAppointmentLocal.HMPatient = newHMPatient.RecId ;
                     HMResourceSchedulingAppointmentLocal.AppointmentStatus = HMResourceSchedulingAppointmentStatus::Open;
                     HMResourceSchedulingAppointmentLocal.update();
            ttsCommit;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCorporatePatient</Name>
				<Source><![CDATA[
    public boolean validateCorporatePatient()
    {
        boolean ret = true;
    
    
        ret = HMPatientTransition::validateCorporatePatient(dirPersonName.FirstName, dirPersonName.LastName,BirthDate.dateValue(), gender.selection(), financialClassRecId,
                HMPatientInsurance.InsuranceCarrier,HMPatientInsurance.EmployeeID,HMPatientInsurance.EmployeeGrade,DirRelationshipTypeIdCorporate.valueStr(),
                HMPatientInsurance.HMEligibleClass, HMPatientInsurance.HMCorporatePlan);
    
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInsurancePatient</Name>
				<Source><![CDATA[
    public boolean validateInsurancePatient()
    {
        boolean ret = true;
       
        if(!HMPatientInsurance.InsuranceCarrier)
        {
            warning(strFmt("@SYS84753","@SYS67403"));
            ret = false;
        }
        
    
        if(!DirRelationshipTypeIdInsurance.valueStr())
        {
            warning(strFmt("@SYS84753","@SYS135665"));
            ret = false;
        }
    
        if(!HMPatientInsurance.PolicyNumber)
        {
            warning(strFmt("@SYS84753","@SYS67470"));
            ret = false;
        }
    
        if(HMPatientInsurance.EndDate == dateNull())
        {
            warning(strFmt("@SYS84753","@SYS35164"));
            ret = false;
        }
    
        //if(!HMPatientInsurance.CoPayAmount)
        //{
            //warning(strFmt("@SYS84753","@MAZ2617"));
            //ret = false;
        //}
    
        if(!HMPatientInsurance.AuthorizationLimit)
        {
            warning(strFmt("@SYS84753","@MAZ8707"));
            ret = false;
        }
    
        if(HMPatientInsurance.AuthorizationDate == dateNull())
        {
            warning(strFmt("@SYS84753","@MAZ8699"));
            ret = false;
        }
    
        if(ret)
        {
            if(HMPatientInsurance.EndDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                warning("@MAZ8708");
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProtocols</Name>
				<Source><![CDATA[
    public boolean validateProtocols()
    {
        boolean ret = true;
    
        if (Preemployment.checked() && PreemploymentProtocol.text() == "")
        {
            warning(SysLabel::labelId2String2('@MAZ11057'));
            ret = false;
        }
        if (Executive.checked() && ExecutiveProtocol.text() == "")
        {
            warning(SysLabel::labelId2String2('@MAZ11058'));
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>LogisticsLocation</Name>
				<Methods>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
        
            ret = true;
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.queryBuildDataSource().clearDynalinks();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>LogisticsPostalAddress</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields>
					<Field>
						<DataField>CountryRegionId</DataField>
						<Methods>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                Query               query;
                SysTableLookup      sysTableLookup;
            
                query = new Query();
                sysTableLookup = SysTableLookup::newParameters(tableNum(LogisticsAddressCountryRegionNameView), _formControl);
                query.addDataSource(tableNum(LogisticsAddressCountryRegionNameView));
            
                sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegionNameView, CountryRegionId));
                sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegionNameView, ShortName));
                sysTableLookup.setLabel("@SYS7576");
                sysTableLookup.addLookupfield(fieldNum(LogisticsAddressCountryRegionNameView, AddrFormat));
            
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            }

]]></Source>
							</Method>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
                List fieldList;
            
                ret = super();
            
                if (ret)
                {
                    fieldList = LogisticsAddressFormatLines::getFieldsByCountry(this.getValue());
                }
            
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>modified</Name>
								<Source><![CDATA[
            public void modified()
            {
                super();
            
                if (logisticsPostalAddress.CountryRegionId)
                {
                    element.updateControlBasedOnCountry();
                    //prevCountryRegionId = logisticsPostalAddress.CountryRegionId;
                    element.emptyAddressPostalValue();
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
					<Field>
						<DataField>State</DataField>
						<Methods>
							<Method>
								<Name>validate</Name>
								<Source><![CDATA[
            public boolean validate()
            {
                boolean ret;
            
                ret = super();
            
                return ret;
            }

]]></Source>
							</Method>
							<Method>
								<Name>lookup</Name>
								<Source><![CDATA[
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (LogisticsAddressCountryRegionId.valueStr())
                {
                    LogisticsAddressState::lookupStateId(_formControl, LogisticsAddressCountryRegionId.valueStr());
                }
                else
                {
                    super(_formControl, _filterStr);
                }
            }

]]></Source>
							</Method>
						</Methods>
					</Field>
				</Fields>
			</DataSource>
			<DataSource>
				<Name>HMPatientInsurance</Name>
				<Methods>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>CreateNewPatient</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            element.loadCreateNewPatientDesign(this.checked());
            element.isValidCreate();
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>SelectRecord</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
            ContainerClass conClass_Obj;
            Container conSend;
            //super();
        
            conSend = conins(conSend, 1, callerPatient.RecId);
        
            createNewRelative = false;
            args.name(formstr(HMPatientAdvanceLookup));
        
            args.parm('FromRelationShip');
            conClass_Obj = new ContainerClass(conSend);
            args.parmObject(conClass_Obj);
        
            args.caller(element);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMPatient           hmPatientLocal;
            HMlookupClass lookupObj = new HMlookupClass();
        
            ret = super();
        
            if (this.valueStr() != "")
            {
                hmPatientLocal = lookupObj.checkValidPatientName(this.valueStr());
        
                if (hmPatientLocal.RecId)
                {
                    element.getPatient(hmPatientLocal);
                }
        
                else
                {
                    warning(strFmt("@SYS316757",this.label()));
                    this.text(HMPatient::find(selectedPatientRecId).PatientName());
                }
            }
            else
            {
                selectedPatientRecId = 0;
        
                //load patient record values in controls
                element.loadSelectedPatientData();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DirRelationshipTypeId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DirRelationshipTypeTable),this);
            Query query = New Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(DirRelationshipTypeTable));
        
        
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, RelationshipTypeId));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, Description));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ChildParentName));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ParentChildName));
        
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::Person));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::None));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::Person));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::None));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PatientCategory</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            switch(this.selection())
            {
                case HMPatientCategory::Cash:
                    CorporateDetails.visible(false);
                    InsuranceDetails.visible(false);
                    HMPatientInsurance_ds.delete();
        
                    AddressTabPage.expand();
        
                    CorporateDetails.collapse();
                    InsuranceDetails.collapse();
                    break;
                case HMPatientCategory::Insurance:
                    InsuranceDetails.visible(true);
                    CorporateDetails.visible(false);
                    HMPatientInsurance_ds.delete();
                    HMPatientInsurance_ds.create();
                    HMPatientInsurance.InsuranceCarrier = '';
                    InsuranceDetails.expand();
                    AddressTabPage.collapse();
                    CorporateDetails.collapse();
                    HMPatientInsurance.PolicyType = PolicyType::CoPay;
                    element.setPolicyTypes();
                    break;
                case HMPatientCategory::Corporate:
                    CorporateDetails.visible(true);
                    InsuranceDetails.visible(false);
                    HMPatientInsurance_ds.delete();
                    HMPatientInsurance_ds.create();
                    HMPatientInsurance.InsuranceCarrier = '';
                    CorporateDetails.expand();
                    AddressTabPage.collapse();
                    InsuranceDetails.collapse();
                    break;
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Salutation</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMSalutation hmSalutation;
        
            ret = super();
        
            if (ret)
            {
                hmSalutation = HMSalutation::findBySalutation(this.selection());
                if(hmSalutation && conLen(hmSalutation.Gender) == 1)
                {
                    Gender.selectText(conPeek(hmSalutation.Gender,1));
                }
                else
                {
                    Gender.selection(0);
                }
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FirstName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != '')
                {
                    firstName.mandatory(false);
                    middleName.mandatory(false);
                    lastName.mandatory(false);
                }
        
                dirPersonName.FirstName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>MiddleName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != '')
                {
                    firstName.mandatory(false);
                    middleName.mandatory(false);
                    lastName.mandatory(false);
                }
        
                dirPersonName.MiddleName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LastName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != '')
                {
                    firstName.mandatory(false);
                    middleName.mandatory(false);
                    lastName.mandatory(false);
                }
        
                dirPersonName.LastName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Client_</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMClientLookup));
            args.caller(element);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMClinicStaff           hmClinicStafflocal;
            boolean                 ret;
            HMlookupClass           HMlookupClassObj = new HMlookupClass();
        
            ret = super();
        
          /*  if (ret)
            {
                if (OrderBy.valueStr() != "")
                {
                        hmClinicStafflocal = HMlookupClassObj.checkValidEmployeeName(OrderBy.valueStr(), hmOrganizationalUnitMain.RecId);
        
                        if (hmClinicStafflocal.RecId)
                        {
                            element.storeEmployee(hmClinicStafflocal.RecId);
                        }
                        else
                        {
                            warning(strFmt("@SYS316757",'Clinic Staff'));
                            OrderBy.text(HMClinicStaff::getPhysicianNameByRecId(HMMovementRequest.RequestingStaff));
                        }
                }
                else
                {
                    element.storeEmployee(0);
                }
        
            }
          */
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMArabicLastName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                dirPersonName.HMArabicLastName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            this.text(strkeep(this.text(), "ي    و    ه    ن    م    ل    ك    ق    ف    غ    ع    ظ    ط    ض    ص    ش    س    ز    ر    ذ    د    خ    ح    ج    ث    ت    ب    ا"));
        
            super();
        
            dirPersonName.HMArabicLastName = strLRTrim(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMArabicMiddleName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                dirPersonName.HMArabicMiddleName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            this.text(strkeep(this.text(), "ي    و    ه    ن    م    ل    ك    ق    ف    غ    ع    ظ    ط    ض    ص    ش    س    ز    ر    ذ    د    خ    ح    ج    ث    ت    ب    ا"));
        
            super();
        
            dirPersonName.HMArabicMiddleName = strLRTrim(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMArabicFirstName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                dirPersonName.HMArabicFirstName = strLRTrim(this.text());
                element.refreshNameFields();
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            this.text(strkeep(this.text(), "ي    و    ه    ن    م    ل    ك    ق    ف    غ    ع    ظ    ط    ض    ص    ش    س    ز    ر    ذ    د    خ    ح    ج    ث    ت    ب    ا"));
        
            super();
        
            dirPersonName.HMArabicFirstName = strLRTrim(this.text());
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMHijriDOB</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            str abcd;
            boolean ret;
        
        
            if(HMHijriDateHelper::convertHijriToGeorgian(this.text())<= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = super();
                BirthDate.dateValue(HMHijriDateHelper::convertHijriToGeorgian(this.text()));
            }
            else
            {
                throw error ('@MAZ13190');
        
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>textChange</Name>
						<Source><![CDATA[
        public void textChange()
        {
            this.text(strkeep(this.text(), "٠    ١    ٢    ٣    ٤    ٥    ٦    ٧    ٨    ٩ /"));
        
            super();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Clinic</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMOrganizationalUnitTreeLookup));
            args.caller(element);
            args.parm(this.text());
            args.parmEnum(HMCaseType::OutPatient);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMOrganizationalUnit    hmOrganizationalUnitLocal;
        
            ret = super();
        
            if(ret)
            {
                if(this.valueStr() != "")
                {
                    hmOrganizationalUnitLocal = HMlookupClass::checkValidOrganizationalUnit(this.valueStr(), HMFileLocationType::Clinic);
        
                    if(hmOrganizationalUnitLocal.RecId)
                    {
                        element.setOrganizationUnitID(hmOrganizationalUnitLocal.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757",this.label()));
                        this.text(HMOrganizationalUnit::find(clinicRecId).Description);
                    }
                }
                else
                {
                    element.setOrganizationUnitID(0);
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>BirthDate</Name>
				<Type>Date</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMAgeHelper         hmAgeHelper = new HMAgeHelper();
            boolean ret;
            container con;
        
        
        
            if(this.dateValue() <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                ret = super();
            if (ret)
            {
                con = hmAgeHelper.getYearsMonthsDaysFromDate(this.dateValue());
                HMPatient_HMAgeValue.value(conPeek(con,1));
                HMPatient_AgeInMonths.value(conPeek(con,2));
                HMPatient_AgeInDays.value(conPeek(con,3));
                element.isValidCreate();
        
                HMHijriDOB.text(HMHijriDateHelper::convertGeorgianToHijri(this.dateValue()));
            }
            }
            else
            {
                throw error ('@MAZ13190');
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Gender</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                element.isValidCreate();
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatient_HMAgeValue</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMAgeHelper         hmAgeHelper = new HMAgeHelper();
        
            ret = super();
            if (ret)
            {
                BirthDate.dateValue(hmAgeHelper.getDateFromAgeInDMY(HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),HMPatient_HMAgeValue.value()));
                element.isValidCreate();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatient_AgeInMonths</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMAgeHelper         hmAgeHelper = new HMAgeHelper();
        
            ret = super();
            if (ret)
            {
                BirthDate.dateValue(hmAgeHelper.getDateFromAgeInDMY(HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),HMPatient_HMAgeValue.value()));
                element.isValidCreate();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatient_AgeInDays</Name>
				<Type>Integer</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMAgeHelper         hmAgeHelper = new HMAgeHelper();
        
            ret = super();
            if (ret)
            {
                BirthDate.dateValue(hmAgeHelper.getDateFromAgeInDMY(HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),HMPatient_HMAgeValue.value()));
                element.isValidCreate();
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Preemployment</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.checked())
                {
                    PreemploymentProtocol.enabled(true);
                    PreemploymentProtocol.mandatory(true);
                }
                else
                {
                    PreemploymentProtocol.enabled(false);
                    PreemploymentProtocol.mandatory(false);
                    preemploymentProtocolRecId = 0;
                    PreemploymentProtocol.text("");
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>PreemploymentProtocol</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMProtocolLookup));
            args.parm(#Preemployment);
            args.caller(element);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMClinicStaff           hmClinicStafflocal;
            boolean                 ret;
            HMlookupClass           HMlookupClassObj = new HMlookupClass();
        
            ret = super();
        
          /*  if (ret)
            {
                if (OrderBy.valueStr() != "")
                {
                        hmClinicStafflocal = HMlookupClassObj.checkValidEmployeeName(OrderBy.valueStr(), hmOrganizationalUnitMain.RecId);
        
                        if (hmClinicStafflocal.RecId)
                        {
                            element.storeEmployee(hmClinicStafflocal.RecId);
                        }
                        else
                        {
                            warning(strFmt("@SYS316757",'Clinic Staff'));
                            OrderBy.text(HMClinicStaff::getPhysicianNameByRecId(HMMovementRequest.RequestingStaff));
                        }
                }
                else
                {
                    element.storeEmployee(0);
                }
        
            }
          */
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Executive</Name>
				<Type>CheckBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.checked())
                {
                    ExecutiveProtocol.enabled(true);
                    ExecutiveProtocol.mandatory(true);
                }
                else
                {
                    ExecutiveProtocol.enabled(false);
                    ExecutiveProtocol.mandatory(false);
                    executiveProtocolRecId = 0;
                    ExecutiveProtocol.text("");
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ExecutiveProtocol</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMProtocolLookup));
            args.parm(#Executive);
            args.caller(element);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMClinicStaff           hmClinicStafflocal;
            boolean                 ret;
            HMlookupClass           HMlookupClassObj = new HMlookupClass();
        
            ret = super();
        
          /*  if (ret)
            {
                if (OrderBy.valueStr() != "")
                {
                        hmClinicStafflocal = HMlookupClassObj.checkValidEmployeeName(OrderBy.valueStr(), hmOrganizationalUnitMain.RecId);
        
                        if (hmClinicStafflocal.RecId)
                        {
                            element.storeEmployee(hmClinicStafflocal.RecId);
                        }
                        else
                        {
                            warning(strFmt("@SYS316757",'Clinic Staff'));
                            OrderBy.text(HMClinicStaff::getPhysicianNameByRecId(HMMovementRequest.RequestingStaff));
                        }
                }
                else
                {
                    element.storeEmployee(0);
                }
        
            }
          */
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientInsurance_InsuranceCarrier</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable),this);
            Query query = New Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(CustTable));
        
            QueryBuildRange queryBuildRange;
        
        
            sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum));
            sysTableLookup.addLookupMethod('name');
        
            queryBuildRange = queryBuildDataSource.addRange(fieldNum(CustTable, CustType));
            queryBuildRange.value(queryValue(CustType::Insurance));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DirRelationshipTypeIdInsurance</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DirRelationshipTypeTable),this);
            Query query = New Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(DirRelationshipTypeTable));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, RelationshipTypeId));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, Description));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ChildParentName));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ParentChildName));
        
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::Organization));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::None));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::Person));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::None));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientInsurance_PolicyType</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            element.setPolicyTypes();
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>CorporateCarrier</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustTable),this);
            Query query = New Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(CustTable));
            QueryBuildRange queryBuildRangeCorporate;
        
        
            sysTableLookup.addLookupfield(fieldNum(CustTable, AccountNum));
            sysTableLookup.addLookupMethod('name');
        
            queryBuildRangeCorporate = queryBuildDataSource.addRange(fieldNum(CustTable, CustType));
            queryBuildRangeCorporate.value(queryValue(CustType::Corporate));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>DirRelationshipTypeIdCorporate</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(DirRelationshipTypeTable),this);
            Query query = New Query();
            QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(DirRelationshipTypeTable));
        
        
        
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, RelationshipTypeId));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, Description));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ChildParentName));
            sysTableLookup.addLookupfield(fieldNum(DirRelationshipTypeTable, ParentChildName));
        
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::Organization));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ParentPartyType)).value(queryValue(DirPartyType::None));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::Person));
            queryBuildDataSource.addRange(fieldNum(DirRelationshipTypeTable, ChildPartyType)).value(queryValue(DirPartyType::None));
        
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>LogisticsAddressCountryRegionId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            super();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            LogisticsPostalAddress.CountryRegionId = this.valueStr();
            element.updateControlBasedOnCountry();
            //prevCountryRegionId = logisticsPostalAddress.CountryRegionId;
            element.emptyAddressPostalValue();
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>validate</Name>
						<Source><![CDATA[
        public boolean validate()
        {
            boolean ret;
            List fieldList;
        
            ret = super();
        
            if (ret)
            {
                fieldList = LogisticsAddressFormatLines::getFieldsByCountry(this.valueStr());
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HideShowButton</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
        
            super();
            element.manageFields(true);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>Save</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean             ret = true;
            HcmPersonBirthDate  birthDateLocal;
            HcmPersonGender     genderLocal;
            HRMSalutation       salutationLocal;
            HRMNameSuffix       nameSuffixLocal;
            LogisticsAddressCountryRegionId         LogisticsPostalAddressCountryRegionId;
            LogisticsAddressZipCodeId               LogisticsPostalAddressZipCode;
            LogisticsAddressCityName                LogisticsPostalAddressCity;
            LogisticsAddressStateId                 LogisticsPostalAddressState;
            LogisticsAddressCountyId                LogisticsPostalAddressCounty;
            LogisticsElectronicAddressLocator       logisticsAddressphone,logisticsAddressEmail,logisticsAddressFax;
            PhoneLocal                              logisticsAddressphoneExt;
            LogisticsElectronicAddressMethodType    logisticsAddressphoneType,logisticsAddressEmailType,logisticsAddressFaxtype;
            LogisticsAddressBuildingCompliment      logisticsAddressBuildingCompliment;
            LogisticsAddressStreet                  logisticsAddressStreet;
            LogisticsAddressStreetNumber            logisticsAddressStreetNumber;
            LogisticsAddressPostBox                 logisticsAddressPostBox;
            LogisticsAddressDistrictName            logisticsAddressDistrictName;
        
            HMRegistrationRequest hmRegistrationRequestLocal;
        
            FormRun         formRun;
            Object          formRunObject;
        
            logisticsAddressphone       = AddressPhone.text();
            logisticsAddressphoneExt    = AddressPhoneExt.text();
            logisticsAddressEmail       = AddressEmail.text();
            logisticsAddressFax         = AddressFax.text();
            languageCodeId = Language.text();

            ///NS: Bug 3593:System is allowing to register a patient without entering Phone number & contact details by Ammar.Ali
            //if (!PhoneMobile.text() && !AddressEmail.text() && !AddressFax.text() && !AddressPhone.text() && !AddressPhoneExt.text())
            if (!AddressPhone.text())
            {
                throw warning("Please fill atleast one contact field");
            }
            ///NE: Bug 3593:System is allowing to register a patient without entering Phone number & contact details by Ammar.Ali
        
            if(!HMPatientTransition::validateSalutationRules(salutation.selection(),gender.selection(),0,HMPatient_HMAgeValue.value(),true))
            {
                return;
            }
        
            if (PatientCategory.selection() == HMPatientCategory::Insurance)
            {
                if(!element.validateInsurancePatient())
                {
                    return;
                }
            }
            else if (PatientCategory.selection() == HMPatientCategory::Corporate)
            {
                if(!element.validateCorporatePatient())
                {
                    return;
                }
            }
        
            if(!element.Checkmandatory(languageCodeId,str2enum(genderLocal,Gender.valueStr()), str2enum(salutationLocal,Salutation.valueStr()),BirthDate.dateValue()))
            {
                return;
            }
        
        
            if(languageCodeId =='')
            {
                warning("@MAZ11507");
                return;
            }
          
            if(HMParameters::find().smmBusRelTypeId =='')
            {
                warning("There is no default prospect id assigend in the HM parameters.");
                return;
            }
       
        
            if ((element.parmAddRelationship() == true && CreateNewPatient.checked() == true) || element.parmAddRelationship() == false )
            {
        
                if(!element.checkDuplicate(dirPersonName.FirstName, dirPersonName.MiddleName, dirPersonName.LastName,BirthDate.dateValue(),NationID.valueStr(),str2enum(genderLocal,Gender.valueStr()) ))
                {
                      ret = false;
                      //element.close();
                      return;
                }
        
                if (ret &&
                    (element.parmAddRelationship() == true && CreateNewPatient.checked() == true) ||
                    element.parmAddRelationship() == false )
                {
                    birthDateLocal                        = BirthDate.dateValue();
                    salutationLocal                       = str2enum(salutationLocal, salutation.valueStr());
                    nameSuffixLocal                       = str2enum(nameSuffixLocal, nameSuffix.valueStr());
                    genderLocal                           = str2enum(genderLocal, gender.valueStr());
                    LogisticsPostalAddressCountryRegionId = LogisticsAddressCountryRegionId.text();
                    LogisticsPostalAddressZipCode         = LogisticsPostalAddress_ZipCode.text();
                    LogisticsPostalAddressCity            = LogisticsPostalAddress_City.text();
                    LogisticsPostalAddressState           = LogisticsPostalAddress_State.text();
                    LogisticsPostalAddressCounty          = LogisticsPostalAddress_County.text();
                    logisticsAddressBuildingCompliment    = LogisticsPostalAddress_BuildingCompliment.text();
                    logisticsAddressStreet                = LogisticsPostalAddress_Street.text();
                    logisticsAddressStreetNumber          = LogisticsPostalAddress_StreetNumber.text();
                    logisticsAddressPostBox               = LogisticsPostalAddress_PostBox.text();
                    logisticsAddressDistrictName          = LogisticsPostalAddress_DistrictName.text();
        
                    if (logisticsAddressphone !='')
                    {
                        logisticsAddressphoneType = LogisticsElectronicAddressMethodType::Phone;
                    }
                    if (logisticsAddressEmail !='')
                    {
                         logisticsAddressEmailType = LogisticsElectronicAddressMethodType::Email;
                    }
                    if(logisticsAddressFax !='')
                    {
                        logisticsAddressFaxtype = LogisticsElectronicAddressMethodType::Fax;
                    }
        
                    //CREATE NEW PATIENT WITH ADDRESS AND CONTACTS
                       // create by me
                    
                    if ((element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient)) &&  HMResourceSchedulingAppointment::find(element.args().record().RecId).HMPatient == 0 && element.args().record().RecId && element.args().record().RecId != 0)
                    {
                        if (Box::yesNo("@MAZ8232",DialogButton::Yes) == DialogButton::Yes)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createHMPatientForProspect(PatientCategory.selection(),dirPersonName, birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,HMPatient_HMAgeValue.value(),
                            LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                             logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value()));
                            
                            if (element.args().record().RecId && element.args().record().RecId != 0 &&  HMResourceSchedulingAppointment::find(element.args().record().RecId).HMPatient == 0 )
                            {
                                if(!element.updateAppointmentLog())
                                {
                                    warning("@MAZ8236");
                                    element.close();
                                    return;
                                }
        
                                element.updateUnRegPatient();
                            }
                           
                           
                        }
                        else
                        {
                            element.close();
                            return;
                        }
                    }
                    else
                    {
                        if (PatientCategory.selection() == HMPatientCategory::Insurance)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createInsurancePatient(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,
                            HMPatientInsurance.InsuranceCarrier, HMPatientInsurance.PolicyNumber, HMPatientInsurance.EndDate, HMPatientInsurance.CoPayAmount,HMPatientInsurance.AuthorizationLimit, HMPatientInsurance.AuthorizationDate,DirRelationshipTypeIdInsurance.valueStr(),
                            HMPatientInsurance.PolicyType,HMPatientInsurance.CoInsurance,HMPatientInsurance.HMEligibleClass,HMPatientInsurance.PriorAuthorizationNumber,
                            HMPatientInsurance.DeductibleAmount,HMPatientInsurance.CurrentDeductibleAmount,
                            HMPatient_HMAgeValue.value(), LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, clinicRecId));
                        }
                        else if (PatientCategory.selection() == HMPatientCategory::Corporate)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createCorporatePatient(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,
                            HMPatientInsurance.InsuranceCarrier,HMPatientInsurance.EmployeeID, HMPatientInsurance.EmployeeGrade, DirRelationshipTypeIdCorporate.valueStr(),HMPatientInsurance.HMEligibleClass, HMPatientInsurance.HMCorporatePlan,
                            HMPatient_HMAgeValue.value(), LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            HMPatientInsurance.HcmTitle,HMPatientInsurance.EndDate,HMPatientInsurance.CoPayAmount,HMPatientInsurance.EligibilityAmount,HMPatientInsurance.BalanceAmount,
                            HMPatientInsurance.PriorAuthorizationNumber,HMPatientInsurance.AuthorizationDate,
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, clinicRecId));
                        }
                        else
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createHMPatientForProspect(PatientCategory.selection(),dirPersonName, birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,HMPatient_HMAgeValue.value(),
                            LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, clinicRecId,ContactFirst.value()));
                        }
                    }
                    if (newHMPatient.RecId != 0)
                    {
                        element.addNewRelationshipRecord();
                        if (numberSeqPatientNum)
                        {
                            numberSeqPatientNum.used();
                            info(strFmt("@MAZ8976",patientNumber.text()));
                        }
        
                        if (element.args().menuItemName() == menuitemDisplayStr(HMRegisterPatientRegistrationRequest))
                        {
                            ttsBegin;
                            hmRegistrationRequestLocal = HMRegistrationRequest::find(element.args().record().RecId, true);
                            if (hmRegistrationRequestLocal.RecId)
                            {
                                hmRegistrationRequestLocal.Status = HMRegistrationRequestStatus::Registered;
                                hmRegistrationRequestLocal.update();
                            }
                            ttsCommit;
        
                        }
        
                        super();
                    }
                    else
                    {
                        if(numberSeqPatientNum)
                        {
                            numberSeqPatientNum.abort();
                        }
        
                        dirPerson.clear();
                        dirPersonName.Person = 0;
                        element.refreshNameFields();
                       // super();
                       // element.close();
                    }
                }
            }
            else if (element.parmAddRelationship() == true && CreateNewPatient.checked() == false)
            {
                // only associate relationship
                newHMPatient = HMPatient::find(selectedPatientRecId);
                element.addNewRelationshipRecord();
        
                if (element.args().menuItemName() == menuitemDisplayStr(HMNewPatientRelationChart))
                {
                    formRun = element.args().caller();
        
                    if(formHasMethod(formRun, identifierStr(refreshRelationGrid)))
                    {
                        formRunObject = formRun;
                        formRunObject.refreshRelationGrid();
                    }
                }
        
                element.close();
            }
            // Musab
            if (element.args().caller() != null
				&& element.args().callerName() == formStr(HMPatientListPage))
            {
                FormRun  fr = element.args().caller() as formRun;
                fr.dataSource(formDataSourceStr(HMPatientListPage, HMPatient_1)).research();
            }  
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OK</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            boolean             ret = true;
            HcmPersonBirthDate  birthDateLocal;
            HcmPersonGender     genderLocal;
            HRMSalutation       salutationLocal;
            HRMNameSuffix       nameSuffixLocal;
            LogisticsAddressCountryRegionId         LogisticsPostalAddressCountryRegionId;
            LogisticsAddressZipCodeId               LogisticsPostalAddressZipCode;
            LogisticsAddressCityName                    LogisticsPostalAddressCity;
            LogisticsAddressStateId                 LogisticsPostalAddressState;
            LogisticsAddressCountyId                LogisticsPostalAddressCounty;
            LogisticsElectronicAddressLocator       logisticsAddressphone,logisticsAddressEmail,logisticsAddressFax;
            PhoneLocal                              logisticsAddressphoneExt;
            LogisticsElectronicAddressMethodType    logisticsAddressphoneType,logisticsAddressEmailType,logisticsAddressFaxtype;
            LogisticsAddressBuildingCompliment      logisticsAddressBuildingCompliment;
            LogisticsAddressStreet                  logisticsAddressStreet;
            LogisticsAddressStreetNumber            logisticsAddressStreetNumber;
            LogisticsAddressPostBox                 logisticsAddressPostBox;
            LogisticsAddressDistrictName            logisticsAddressDistrictName;
        
            HMRegistrationRequest hmRegistrationRequestLocal;
        
            FormRun         formRun;
            Object          formRunObject;
        
            logisticsAddressphone       = AddressPhone.text();
            logisticsAddressphoneExt    = AddressPhoneExt.text();
            logisticsAddressEmail       = AddressEmail.text();
            logisticsAddressFax         = AddressFax.text();
            languageCodeId = Language.text();

            ///NS: Bug 3593:System is allowing to register a patient without entering Phone number & contact details by Ammar.Ali
            //if (!PhoneMobile.text() && !AddressEmail.text() && !AddressFax.text() && !AddressPhone.text() && !AddressPhoneExt.text())
            if (!AddressPhone.text())
            {
                throw warning("Please fill atleast one contact field");
            }
            ///NE: Bug 3593:System is allowing to register a patient without entering Phone number & contact details by Ammar.Ali
        
            // Number Sequence
            numberSeqReferencePatientNum  = NumberSeqReference::findReference(extendedtypenum(HMPatientId));
            numberSeqTablePatientNum      = NumberSequenceTable::find(numberSeqReferencePatientNum.NumberSequenceId);
        
            if(numberSeqTablePatientNum)
            {
                // generate patient number if number sequence code is created.
                //numberSeqPatientNum = NumberSeq::newGetNumFromId(numberSeqTablePatientNum.RecId,true,true,nextNumSeq,true);
        
        
               /* while(true)
                {
                    numberSeqPatientNum = NumberSeq::newGetNumFromId(numberSeqTablePatientNum.RecId,
                                                                   true,
                                                                   true,
                                                                   nextNumSeq,
                                                                   true);
                    [lastNumber] = nextNumSeq.value;
                    custTableLocal = CustTable::find(lastNumber);
        
                    if(!custTableLocal)
                    {
                    break;
                    }
                    else
                    {
                    continue;
                    }
                }
               */
                numberSeqPatientNum = NumberSeq::newGetNumFromId(numberSeqTablePatientNum.RecId,
                                                                   true);
                if(numberSeqPatientNum)
                {
                    lastNumber = numberSeqPatientNum.num();
        
                    if (lastNumber)
                    {
                        PatientNumber.text(lastNumber);
                    }
                    else
                    {
                        error("Number sequence for MRN doesn't exist.");
                        return;
                    }
                }
        
                PatientNumber.allowEdit(numberSeqTablePatientNum.numAllowEdit());
            }
            else
            {
                throw error ("Number sequence for MRN doesn't exist.");
            }
        
            // medisys-demo
            if (!element.validateProtocols())
            {
                return;
            }
        
            if(!HMPatientTransition::validateSalutationRules(salutation.selection(),gender.selection(),0,HMPatient_HMAgeValue.value(),true))
            {
                return;
            }
        
            if (PatientCategory.selection() == HMPatientCategory::Insurance)
            {
                if(!element.validateInsurancePatient())
                {
                    return;
                }
            }
            else if (PatientCategory.selection() == HMPatientCategory::Corporate)
            {
                if(!element.validateCorporatePatient())
                {
                    return;
                }
            }
            if(!element.Checkmandatory(languageCodeId,str2enum(genderLocal,Gender.valueStr()), str2enum(salutationLocal,Salutation.valueStr()),BirthDate.dateValue()))
            {
                return;
            }
            if(languageCodeId =='')
            {
                warning("@MAZ11507");
                return;
            }
        
        /*    if(HMParameters::find().smmBusRelTypeId =='')
            {
                   warning("There is no default prospect id assigend in the HM parameters.");
                   return;
            }*/
        
        
        
            if ((element.parmAddRelationship() == true && CreateNewPatient.checked() == true) || element.parmAddRelationship() == false )
            {
                // <MaziKCare>
                // update by daniyal aslam
               // if (DirPersonName::nameLikeCount(dirPersonName.FirstName, dirPersonName.MiddleName, dirPersonName.LastName) > 0)
               // {
                     if(!element.checkDuplicate(dirPersonName.FirstName, dirPersonName.MiddleName, dirPersonName.LastName,BirthDate.dateValue(),NationID.valueStr(),str2enum(genderLocal,Gender.valueStr()) ))
                    {
                    //  ret = DirUtility::checkDuplicate(dirPersonName, DirPartyType::Person, tablestr(DirPerson));
                       // if (!ret)
                       // {
                            ret = false;
                           // element.close();
                            return;
                       // }
                    }
                //}
                // </MaziKCare>
        
                if (ret &&
                    (element.parmAddRelationship() == true && CreateNewPatient.checked() == true) ||
                    element.parmAddRelationship() == false )
                {
                    birthDateLocal                        = BirthDate.dateValue();
                    salutationLocal                       = str2enum(salutationLocal, salutation.valueStr());
                    nameSuffixLocal                       = str2enum(nameSuffixLocal, nameSuffix.valueStr());
                    genderLocal                           = str2enum(genderLocal, gender.valueStr());
                    LogisticsPostalAddressCountryRegionId = LogisticsAddressCountryRegionId.text();
                    LogisticsPostalAddressZipCode         = LogisticsPostalAddress_ZipCode.text();
                    LogisticsPostalAddressCity            = LogisticsPostalAddress_City.text();
                    LogisticsPostalAddressState           = LogisticsPostalAddress_State.text();
                    LogisticsPostalAddressCounty          = LogisticsPostalAddress_County.text();
                    logisticsAddressBuildingCompliment    = LogisticsPostalAddress_BuildingCompliment.text();
                    logisticsAddressStreet                = LogisticsPostalAddress_Street.text();
                    logisticsAddressStreetNumber          = LogisticsPostalAddress_StreetNumber.text();
                    logisticsAddressPostBox               = LogisticsPostalAddress_PostBox.text();
                    logisticsAddressDistrictName          = LogisticsPostalAddress_DistrictName.text();
        
        
                    if (logisticsAddressphone !='')
                    {
                        logisticsAddressphoneType = LogisticsElectronicAddressMethodType::Phone;
                    }
                    if (logisticsAddressEmail !='')
                    {
                         logisticsAddressEmailType = LogisticsElectronicAddressMethodType::Email;
                    }
                    if(logisticsAddressFax !='')
                    {
                        logisticsAddressFaxtype = LogisticsElectronicAddressMethodType::Fax;
                    }
        
                    //CREATE NEW PATIENT WITH ADDRESS AND CONTACTS
                       // create by me
                       //todo: ax7 new patient  uncomment follwoing code after HMResourceSchedulingAppointment
                   // if ((element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient)) &&  HMResourceSchedulingAppointment::find(element.args().record().RecId).HMPatient == 0 && element.args().record().RecId && element.args().record().RecId != 0)
                   //todo: ax7 delete following  line  if ((element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient)) && element.args().record().RecId && element.args().record().RecId != 0) after uncommneting above if condition 
                   if ((element.args().menuItemName() == menuitemDisplayStr(HMRegisterUnRegisteredPatient)) && element.args().record().RecId && element.args().record().RecId != 0)
                   {
                        if (Box::yesNo("@MAZ8232",DialogButton::Yes) == DialogButton::Yes)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createHMPatientLogisticsAddress(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,HMPatient_HMAgeValue.value(),
                            LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                             logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value()));
                            
                            if (element.args().record().RecId && element.args().record().RecId != 0 &&  HMResourceSchedulingAppointment::find(element.args().record().RecId).HMPatient == 0 )
                            {
                                if(!element.updateAppointmentLog())
                                {
                                    warning("@MAZ8236");
                                    element.close();
                                    return;
                                }
        
                                element.updateUnRegPatient();
                            }
                            

                        }
                        else
                        {
                            element.close();
                            return;
                        }
                    }
                    else
                    {
                        if (PatientCategory.selection() == HMPatientCategory::Insurance)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createInsurancePatient(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,
                            HMPatientInsurance.InsuranceCarrier, HMPatientInsurance.PolicyNumber, HMPatientInsurance.EndDate, HMPatientInsurance.CoPayAmount,HMPatientInsurance.AuthorizationLimit, HMPatientInsurance.AuthorizationDate,DirRelationshipTypeIdInsurance.valueStr(),
                            HMPatientInsurance.PolicyType,HMPatientInsurance.CoInsurance,HMPatientInsurance.HMEligibleClass,HMPatientInsurance.PriorAuthorizationNumber,
                            HMPatientInsurance.DeductibleAmount,HMPatientInsurance.CurrentDeductibleAmount,
                            HMPatient_HMAgeValue.value(), LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, clinicRecId));
                        }
                        else if (PatientCategory.selection() == HMPatientCategory::Corporate)
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createCorporatePatient(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,
                            HMPatientInsurance.InsuranceCarrier,HMPatientInsurance.EmployeeID, HMPatientInsurance.EmployeeGrade, DirRelationshipTypeIdCorporate.valueStr(),HMPatientInsurance.HMEligibleClass, HMPatientInsurance.HMCorporatePlan,
                            HMPatient_HMAgeValue.value(), LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            HMPatientInsurance.HcmTitle,HMPatientInsurance.EndDate,HMPatientInsurance.CoPayAmount,HMPatientInsurance.EligibilityAmount,HMPatientInsurance.BalanceAmount,
                            HMPatientInsurance.PriorAuthorizationNumber,HMPatientInsurance.AuthorizationDate,
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, clinicRecId));
                        }
                        else
                        {
                            newHMPatient = HMPatient::find(HMPatientTransition::createHMPatientLogisticsAddress(PatientCategory.selection(),dirPersonName, patientNumber.text(), birthDateLocal, genderLocal, salutationLocal, nameSuffixLocal, financialClassRecId,HMPatient_HMAgeValue.value(),
                            LogisticsPostalAddressCountryRegionId,LogisticsPostalAddressZipCode,LogisticsPostalAddressCity,LogisticsPostalAddressState,LogisticsPostalAddressCounty,logisticsAddressphone,
                            logisticsAddressEmail,logisticsAddressFax,logisticsAddressphoneExt,logisticsAddressBuildingCompliment,logisticsAddressStreet,logisticsAddressStreetNumber,logisticsAddressPostBox,logisticsAddressDistrictName,NationID.valueStr(),true,PhoneMobile.valueStr(),rolesCtrl.get(),HMPatient_AgeInDays.value(),HMPatient_AgeInMonths.value(),
                            RAMQ.value(), pilot.value(), preEmployment.value(), Executive.value(), executiveProtocolRecId, preemploymentProtocolRecId, clientRecId, languageCodeId, "",clinicRecId,ContactFirst.value()));
                        }
                    }
                    if (newHMPatient.RecId != 0)
                    {
                        element.addNewRelationshipRecord();
                        if (numberSeqPatientNum)
                        {
                            // mark number sequence based ID consumed
                            numberSeqPatientNum.used();
                            info(strFmt("@MAZ8976",patientNumber.text()));
                        }
        
                        if (element.args().menuItemName() == menuitemDisplayStr(HMRegisterPatientRegistrationRequest))
                        {
                            ttsBegin;
                            hmRegistrationRequestLocal = HMRegistrationRequest::find(element.args().record().RecId, true);
                            if (hmRegistrationRequestLocal.RecId)
                            {
                                hmRegistrationRequestLocal.Status = HMRegistrationRequestStatus::Registered;
                                hmRegistrationRequestLocal.update();
                            }
        
                            ttsCommit;
        
                        }
        
                        super();
                    }
                    else
                    {
                        if(numberSeqPatientNum)
                        {
                            numberSeqPatientNum.abort();
                        }
        
                        dirPerson.clear();
                        dirPersonName.Person = 0;
                        element.refreshNameFields();
                       // super();
                       // element.close();
                    }
                }
            }
            else if (element.parmAddRelationship() == true && CreateNewPatient.checked() == false)
            {
                // only associate relationship
                newHMPatient = HMPatient::find(selectedPatientRecId);
                element.addNewRelationshipRecord();
        
                if (element.args().menuItemName() == menuitemDisplayStr(HMNewPatientRelationChart))
                {
                    formRun = element.args().caller();
        
                    if(formHasMethod(formRun, identifierStr(refreshRelationGrid)))
                    {
                        formRunObject = formRun;
                        formRunObject.refreshRelationGrid();
                    }
                }
        
                element.close();
            }

            // Musab
            if (element.args().caller() != null
                && element.args().callerName() == formStr(HMPatientListPage))
            {
                FormRun  fr = element.args().caller() as formRun;
                fr.dataSource(formDataSourceStr(HMPatientListPage, HMPatient_1)).research();
            }
           
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DirPersonName</Name>
			<Table>DirPersonName</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMArabicFamilyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMArabicFirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMArabicLastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMArabicMiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMFamilyName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Person</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>DirPerson</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>DirPerson</Name>
			<Table>DirPerson</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AnniversaryDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnniversaryMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AnniversaryYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthDay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthMonth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthYear</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChildrenNames</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CommunicatorSignIn</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Gender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Hobbies</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Initials</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InstanceRelationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>KnownAs</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LanguageId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaritalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameAlias</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameSequence</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PartyNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PersonalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PersonalTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticFirstName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticLastName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhoneticMiddleName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryAddressLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactTelex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryContactURL</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProfessionalSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProfessionalTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>relationType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoSearch>No</AutoSearch>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LogisticsLocation</Name>
			<Table>LogisticsLocation</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DunsNumberRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>LogisticsPostalAddress</Name>
			<Table>LogisticsPostalAddress</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Address</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Apartment_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Building_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BuildingCompliment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>City</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CityRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CountryRegionId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>County</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>District</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DistrictName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FlatId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HouseId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPrivate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Latitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Location</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Longitude</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PostBox</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrivateForParty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>State</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Street</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetKana_JP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StreetNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TimeZone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidFrom</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValidTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ZipCodeRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>LogisticsLocation</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMPatientInsurance</Name>
			<Table>HMPatientInsurance</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AuthorizationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AuthorizationExpiryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AuthorizationLimit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AuthorizationNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AuthorizationRequest</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BalanceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CoInsurance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CoPayAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CurrentDeductibleAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductibleAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductibleUpdateDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EffectiveDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EligibilityAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EligibilityComments</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EligibilityLastChecked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmployeeGrade</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmployeeID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GroupNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCardIssueNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClassOrPlanId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClassOrPlanId1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCorporatePlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMEligibleClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceCarrier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceContract</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceContractClassOrPlans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceCoveragePlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceEligibilityStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientInsuranceMembershipId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientSubscriber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPayerType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceCarrier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceEligibilityStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyPlan</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PolicyType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreauthorizationReqd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriorAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Priority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelationShip</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SelfPolicy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubscriberID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SubscriberRelation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<BottomMargin xmlns="">0</BottomMargin>
		<BottomMarginMode xmlns="">Fixed</BottomMarginMode>
		<Caption xmlns="">@MAZ8200</Caption>
		<DialogSize xmlns="">Large</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<LeftMargin xmlns="">0</LeftMargin>
		<LeftMarginMode xmlns="">Fixed</LeftMarginMode>
		<Pattern xmlns="">Dialog</Pattern>
		<PatternVersion xmlns="">1.2</PatternVersion>
		<RightMargin xmlns="">0</RightMargin>
		<RightMarginMode xmlns="">Fixed</RightMarginMode>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">Dialog</Style>
		<TitleDataSource xmlns="">DirPerson</TitleDataSource>
		<TopMargin xmlns="">0</TopMargin>
		<TopMarginMode xmlns="">Fixed</TopMarginMode>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TopGroup</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>MainInstruction</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>390451572</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColorRGB>
							<Red>15</Red>
							<Green>0</Green>
							<Blue>0</Blue>
						</BackgroundColorRGB>
						<ColorScheme>RGB</ColorScheme>
						<FontSize>13</FontSize>
						<ForegroundColorRGB>
							<Red>0</Red>
							<Green>51</Green>
							<Blue>153</Blue>
						</ForegroundColorRGB>
						<Style>MainInstruction</Style>
						<Text>@MAZ8200</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCheckBoxControl">
						<Name>CreateNewPatient</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>585677358</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>CheckBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Label>@MAZ1923</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>SelectRecord</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>780903144</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Label>@MAZ883</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DirRelationshipTypeId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>951725706</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DirRelationshipTypeId</ExtendedDataType>
						<Label>@SYS135665</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>NewBornStatus</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1122548269</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<EnumType>HMNewBornStatus</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>PatientDetail</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1232362773</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormComboBoxControl">
								<Name>PatientCategory</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ComboBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<EnumType>HMPatientCategory</EnumType>
								<Items />
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group10</Name>
								<ElementPosition>1610612734</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group2</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>PatientNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>536870910</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ12997</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<ExtendedDataType>HMPatientId</ExtendedDataType>
												<Label>@MAZ2609</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PersonNameGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>805306365</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>Salutation</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<EnumType>HRMSalutation</EnumType>
														<Items />
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>FirstName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<BackStyle>Transparent</BackStyle>
														<ExtendedDataType>FirstName</ExtendedDataType>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>MiddleName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<BackStyle>Transparent</BackStyle>
														<ExtendedDataType>MiddleName</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LastName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<BackStyle>Transparent</BackStyle>
														<ExtendedDataType>LastName</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormComboBoxControl">
														<Name>NameSuffix</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ComboBox</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<EnumType>HRMNameSuffix</EnumType>
														<Items />
													</AxFormControl>
												</Controls>
												<FrameType>None</FrameType>
											</AxFormControl>
										</Controls>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group1</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612734</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Language</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1859874228</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>LanguageId</ExtendedDataType>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>NationID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1917396111</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<HelpText>@MAZ2581</HelpText>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMSocialSecurityNumber</ExtendedDataType>
												<Label>@MAZ9179</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Client_</Name>
												<ElementPosition>1974917993</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>Client</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormCheckBoxControl">
												<Name>ContactFirst</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2003678934</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>CheckBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>Contact first</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMArabicLastName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2029563781</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMArabicLastName</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMArabicMiddleName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2055448628</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMArabicMiddleName</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMArabicFirstName</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2081333475</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMArabicFirstName</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMHijriDOB</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2107218322</ElementPosition>
												<Enabled>No</Enabled>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMHijriDateOfBirth</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>Clinic</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>2133103172</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Label>@MAZ1154</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormTimeControl">
												<Name>BirthTime</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612730</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Time</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>HMPatientBirthTime</ExtendedDataType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>Group_</Name>
												<ElementPosition>1677721593</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>BirthDate</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>HcmPersonBirthDate</ExtendedDataType>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>CopyOfStaticText</Name>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Left>210</Left>
														<LeftMode>Manual</LeftMode>
														<Top>5</Top>
														<TopMode>Manual</TopMode>
														<Type>StaticText</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ForegroundColor>DynLabelForegroundGray</ForegroundColor>
														<Text>@MAZ11913</Text>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>Gender</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1811939322</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<BackStyle>Transparent</BackStyle>
												<ComboType>List</ComboType>
												<EnumType>HcmPersonGender</EnumType>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AgeGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1946157051</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>HMPatient_HMAgeValue</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>715827882</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7726</HelpText>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<AllowNegative>No</AllowNegative>
														<DisplayLength>3</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<ExtendedDataType>HMAgeValue</ExtendedDataType>
														<Label>@MAZ9184</Label>
														<ShowZero>No</ShowZero>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>HMPatient_AgeInMonths</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7726</HelpText>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<AllowNegative>No</AllowNegative>
														<DisplayLength>3</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<ExtendedDataType>HMAgeValue</ExtendedDataType>
														<ShowLabel>No</ShowLabel>
														<ShowZero>No</ShowZero>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>HMPatient_AgeInDays</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7726</HelpText>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<AllowNegative>No</AllowNegative>
														<DisplayLength>3</DisplayLength>
														<DisplayLengthMode>Fixed</DisplayLengthMode>
														<ExtendedDataType>HMAgeValue</ExtendedDataType>
														<ShowLabel>No</ShowLabel>
														<ShowZero>No</ShowZero>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStaticTextControl">
														<Name>StaticText</Name>
														<ElementPosition>1789569705</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Left>210</Left>
														<LeftMode>Manual</LeftMode>
														<Top>5</Top>
														<TopMode>Manual</TopMode>
														<Type>StaticText</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ForegroundColor>DynLabelForegroundGray</ForegroundColor>
														<Text>@MAZ9333</Text>
													</AxFormControl>
												</Controls>
												<Columns>4</Columns>
											</AxFormControl>
										</Controls>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
								<Caption>@MAZ8587</Caption>
							</AxFormControl>
						</Controls>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Medisys</Name>
						<ElementPosition>1342177277</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>RAMQ</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>RAMQ</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormCheckBoxControl">
								<Name>Pilot</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>920350134</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>CheckBox</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Label>Pilot</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PreemploymentGroup</Name>
								<ElementPosition>1227133512</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Preemployment</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Pre employment</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PreemploymentProtocol</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Protocol</Label>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>ExecutiveGroup</Name>
								<ElementPosition>1533916890</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormCheckBoxControl">
										<Name>Executive</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>CheckBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Executive</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ExecutiveProtocol</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>Protocol</Label>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
						</Controls>
						<Caption>@MAZ940</Caption>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormTabControl">
						<Name>Tab</Name>
						<AlignControl>No</AlignControl>
						<ElementPosition>1415386947</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Tab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>InsuranceDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>715827882</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMPatientInsurance_InsuranceCarrier</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>613566756</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>InsuranceCarrier</DataField>
										<DataSource>HMPatientInsurance</DataSource>
										<Label>@SYS67403</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>DirRelationshipTypeIdInsurance</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ExtendedDataType>DirRelationshipTypeId</ExtendedDataType>
										<Label>@SYS135665</Label>
										<Mandatory>Yes</Mandatory>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group6</Name>
										<ElementPosition>1533916890</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_PolicyNumber</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>330382098</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PolicyNumber</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMPatientInsurance_EndDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>495573147</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EndDate</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Label>@SYS35164</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>HMPatientInsurance_PolicyType</Name>
												<ElementPosition>660764196</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PolicyType</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_CoInsurance</Name>
												<ElementPosition>825955245</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CoInsurance</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_CoPayAmount</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>991146294</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CoPayAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>HMPatientInsurance_HMEligibleClass1</Name>
												<ElementPosition>1156337343</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>HMPatientInsurance</DataSource>
												<ReferenceField>HMEligibleClass</ReferenceField>
												<ReplacementFieldGroup>Description</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_PriorAuthorizationNumber</Name>
												<ElementPosition>1321528392</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PriorAuthorizationNumber</DataField>
												<DataSource>HMPatientInsurance</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_AuthorizationLimit</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1486719441</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AuthorizationLimit</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Label>@MAZ8707</Label>
												<Mandatory>Yes</Mandatory>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMPatientInsurance_AuthorizationDate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1651910490</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AuthorizationDate</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_DeductibleAmount</Name>
												<ElementPosition>1817101539</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>DeductibleAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_CurrentDeductibleAmount</Name>
												<ElementPosition>1982292588</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CurrentDeductibleAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Caption>@MAZ9186</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@MAZ8810</Caption>
								<FastTabExpanded>No</FastTabExpanded>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>CorporateDetails</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1073741823</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group5</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>CorporateCarrier</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>429496728</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>InsuranceCarrier</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Label>@MAZ6619</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>DirRelationshipTypeIdCorporate</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>644245092</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<ExtendedDataType>DirRelationshipTypeId</ExtendedDataType>
												<Label>@SYS135665</Label>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_EmployeeID</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EmployeeID</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>HMPatientInsurance_HcmTitle</Name>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>HMPatientInsurance</DataSource>
												<ReferenceField>HcmTitle</ReferenceField>
												<ReplacementFieldGroup>Identification</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_EmployeeGrade</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EmployeeGrade</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>Group11</Name>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_HMCorporatePlan</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>429496728</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>HMCorporatePlan</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMPatientInsurance_EndDate1</Name>
												<ElementPosition>644245092</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EndDate</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<Label>@SYS35164</Label>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormReferenceGroupControl">
												<Name>HMPatientInsurance_HMEligibleClass</Name>
												<ElementPosition>858993456</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ReferenceGroup</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls />
												<DataSource>HMPatientInsurance</DataSource>
												<Mandatory>Yes</Mandatory>
												<ReferenceField>HMEligibleClass</ReferenceField>
												<ReplacementFieldGroup>Description</ReplacementFieldGroup>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_CoPayAmount1</Name>
												<ElementPosition>1073741820</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>CoPayAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_EligibilityAmount</Name>
												<ElementPosition>1288490184</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>EligibilityAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormRealControl">
												<Name>HMPatientInsurance_BalanceAmount</Name>
												<ElementPosition>1503238548</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Real</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>BalanceAmount</DataField>
												<DataSource>HMPatientInsurance</DataSource>
												<NoOfDecimals>-1</NoOfDecimals>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMPatientInsurance_PriorAuthorizationNumber1</Name>
												<ElementPosition>1717986912</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PriorAuthorizationNumber</DataField>
												<DataSource>HMPatientInsurance</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMPatientInsurance_AuthorizationDate1</Name>
												<ElementPosition>1932735276</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>AuthorizationDate</DataField>
												<DataSource>HMPatientInsurance</DataSource>
											</AxFormControl>
										</Controls>
										<Columns>2</Columns>
										<Caption>@MAZ9186</Caption>
									</AxFormControl>
								</Controls>
								<ColumnsMode>Fill</ColumnsMode>
								<Caption>@MAZ8811</Caption>
								<FastTabExpanded>No</FastTabExpanded>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormTabPageControl">
								<Name>AddressTabPage</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1789569705</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>TabPage</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>AddressBook</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PostalAddress</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Roles</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>220254732</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>DirPartyAddressLocationRoleNames</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsAddressCountryRegionId</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>330382098</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>LogisticsAddressCountryRegionId</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_CountryRegionId</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>495573147</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>CountryRegionId</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_ZipCode</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>660764196</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>ZipCode</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_Street</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>825955245</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Street</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_BuildingCompliment</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>991146294</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>BuildingCompliment</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_StreetNumber</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1156337343</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>StreetNumber</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_State</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1321528392</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>State</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_PostBox</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1486719441</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>PostBox</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_City</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1651910490</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>City</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_DistrictName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1817101539</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>DistrictName</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>LogisticsPostalAddress_County</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1982292588</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>County</DataField>
														<DataSource>LogisticsPostalAddress</DataSource>
													</AxFormControl>
												</Controls>
												<Columns>3</Columns>
												<DataSource>LogisticsPostalAddress</DataSource>
												<FrameType>None</FrameType>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ElectronicAddress</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PhoneMobile</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>PhoneMobile</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AddressEmail</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1431655764</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7370</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>EmailBase</ExtendedDataType>
														<Label>@MAZ2648</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AddressFax</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1789569705</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7371</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>TeleFax</ExtendedDataType>
														<Label>@MAZ4606</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AddressPhone</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741822</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ7369</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>PhoneMobile</ExtendedDataType>
														<Label>@SYS36310</Label>
														<Mandatory>Yes</Mandatory>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AddressPhoneExt</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1610612734</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@SYS1812</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>60</Width>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ4125</Label>
													</AxFormControl>
												</Controls>
												<Columns>3</Columns>
												<Caption>Electronic Address</Caption>
											</AxFormControl>
										</Controls>
										<Caption>Address</Caption>
									</AxFormControl>
								</Controls>
								<Caption>@SYS340110</Caption>
								<FastTabExpanded>No</FastTabExpanded>
								<Scrollbars>Auto</Scrollbars>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>FastTabs</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormComboBoxControl">
						<Name>HideShowComboBox</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1561806288</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ComboBox</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<EnumType>HideShowFields</EnumType>
						<Items />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>HideShowButton</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1854644967</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SYS191204</HelpText>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<BackgroundColor>DynBackgroundWhite</BackgroundColor>
						<Border>None</Border>
						<SaveRecord>No</SaveRecord>
						<Text>@SYS191195</Text>
					</AxFormControl>
				</Controls>
				<BottomMargin>11</BottomMargin>
				<BottomMarginMode>Fixed</BottomMarginMode>
				<LeftMargin>11</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>11</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<TopMargin>11</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonGroupControl">
				<Name>ButtonGroup1</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<Type>ButtonGroup</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Save</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>805306366</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<AutoRefreshData>Yes</AutoRefreshData>
						<Command>OK</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@MAZ13063</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>Cancel</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Command>Cancel</Command>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>OK</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1207959549</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Skip>Yes</Skip>
						<Type>CommandButton</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<AutoRefreshData>Yes</AutoRefreshData>
						<Command>Cancel</Command>
						<DefaultButton>Yes</DefaultButton>
						<SaveRecord>No</SaveRecord>
						<Text>@MAZ8704</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalRight</ArrangeMethod>
				<Style>DialogCommitContainer</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>