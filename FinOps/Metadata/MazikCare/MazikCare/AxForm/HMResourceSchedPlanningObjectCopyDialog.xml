<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMResourceSchedPlanningObjectCopyDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMResourceSchedPlanningObjectCopyDialog extends FormRun
{
    RecId   physicianRecId;
}
]]></Source>
			</Method>
			<Method>
				<Name>copyPlanningObject</Name>
				<Source><![CDATA[
    public boolean copyPlanningObject()
    {
        HMResourceSchedulingPlanningObject      hmResourceSchedulingPlanningObjectMain,hmResourceSchedulingPlanningObjectCopy;
        HMResourceSchedulingDayPlan             hmResourceSchedulingDayPlanMain,hmResourceSchedulingDayPlanCopy;
        HMResourceSchedulingDayPlanItem         hmResourceSchedulingDayPlanItemMain,hmResourceSchedulingDayPlanItemCopy;
        HMResourceSchedulingWeekPlan            hmResourceSchedulingWeekPlanMain,hmResourceSchedulingWeekPlanCopy;
        HMResourceSchedulingWeekPlanToCalender  hmResourceSchedulingWeekPlanToCalenderMain,hmResourceSchedulingWeekPlanToCalenderCopy;
        HMResourceSchedulingWeekDayPlan         hmResourceSchedulingWeekDayPlanMain,hmResourceSchedulingWeekDayPlanCopy,hmResourceSchedulingWeekDayPlanExist;
        Map                                     DayRecId,WeekRecId;
        List                                    list;
        RecordInsertList    recordListDayPlan = new RecordInsertList(tableNum(HMResourceSchedulingDayPlan));
        RecordInsertList    recordListDayPlanItem = new RecordInsertList(tableNum(HMResourceSchedulingDayPlanItem));
        RecordInsertList    schedulingWeekPlanToCalenderCopyList = new RecordInsertList(tableNum(HMResourceSchedulingWeekPlanToCalender));
        RecordInsertList    schedulingWeekPlanCopyList = new RecordInsertList(tableNum(HMResourceSchedulingWeekPlan));
        RecordInsertList schedulingWeekDayPlanCopyList = new RecordInsertList(tableNum(HMResourceSchedulingWeekDayPlan));
        DayRecId                                = new Map(Types::Int64,Types::Int64);
        WeekRecId                               = new Map(Types::Int64,Types::Int64);
        list = new list(Types::String);
        select * from hmResourceSchedulingPlanningObjectMain
        where hmResourceSchedulingPlanningObjectMain.Code == Code.text();
    
        if(hmResourceSchedulingPlanningObjectMain.RecId > 0)
        {
            warning('Code already exist');
            return false;
        }
        select * from hmResourceSchedulingPlanningObjectMain where hmResourceSchedulingPlanningObjectMain.RecId == element.args().record().RecId;
    
    
        //inserting planning object
        hmResourceSchedulingPlanningObjectCopy.CaseType = hmResourceSchedulingPlanningObjectMain.CaseType;
        hmResourceSchedulingPlanningObjectCopy.Category = hmResourceSchedulingPlanningObjectMain.Category;
        hmResourceSchedulingPlanningObjectCopy.Code = Code.text();
        hmResourceSchedulingPlanningObjectCopy.Description = Description.text();
        hmResourceSchedulingPlanningObjectCopy.EndDate = hmResourceSchedulingPlanningObjectMain.EndDate;
        hmResourceSchedulingPlanningObjectCopy.HMBuildingUnit = hmResourceSchedulingPlanningObjectMain.HMBuildingUnit;
        hmResourceSchedulingPlanningObjectCopy.HMClinicStaff = physicianRecId;
        hmResourceSchedulingPlanningObjectCopy.HMOrganizationalUnit = hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit;
        hmResourceSchedulingPlanningObjectCopy.OverbookAllowed = hmResourceSchedulingPlanningObjectMain.OverbookAllowed;
        hmResourceSchedulingPlanningObjectCopy.PlanningObjectStatus = hmResourceSchedulingPlanningObjectMain.PlanningObjectStatus;
        hmResourceSchedulingPlanningObjectCopy.ScheduleOnPublicHoliday = hmResourceSchedulingPlanningObjectMain.ScheduleOnPublicHoliday;
        hmResourceSchedulingPlanningObjectCopy.SearchInterval = hmResourceSchedulingPlanningObjectMain.SearchInterval;
        hmResourceSchedulingPlanningObjectCopy.StartDate = hmResourceSchedulingPlanningObjectMain.StartDate;
        hmResourceSchedulingPlanningObjectCopy.insert();
    
    
        //inserting day plan
        while select * from hmResourceSchedulingDayPlanMain
            where hmResourceSchedulingDayPlanMain.HMResourceSchedulingPlanningObject == element.args().record().RecId
        {
            if(!(DayRecId.exists(hmResourceSchedulingDayPlanMain.RecId)))
            {
                hmResourceSchedulingDayPlanCopy.Code = hmResourceSchedulingDayPlanMain.Code;
                hmResourceSchedulingDayPlanCopy.DayEndTime = hmResourceSchedulingDayPlanMain.DayEndTime;
                hmResourceSchedulingDayPlanCopy.DayStartTime = hmResourceSchedulingDayPlanMain.DayStartTime;
                hmResourceSchedulingDayPlanCopy.Description = hmResourceSchedulingDayPlanMain.Description;
                hmResourceSchedulingDayPlanCopy.HMResourceSchedulingPlanningObject = hmResourceSchedulingPlanningObjectCopy.RecId;
    
                recordListDayPlan.add(hmResourceSchedulingDayPlanCopy);
                DayRecId.insert(hmResourceSchedulingDayPlanMain.RecId,hmResourceSchedulingDayPlanMain.RecId);
                while select * from hmResourceSchedulingDayPlanItemMain
                    where hmResourceSchedulingDayPlanItemMain.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlanMain.RecId
                {
                    hmResourceSchedulingDayPlanItemCopy.AdmissionQuota = hmResourceSchedulingDayPlanItemMain.AdmissionQuota;
                    hmResourceSchedulingDayPlanItemCopy.EndTime = hmResourceSchedulingDayPlanItemMain.EndTime;
                    hmResourceSchedulingDayPlanItemCopy.HMBuildingUnit = hmResourceSchedulingDayPlanItemMain.HMBuildingUnit;
                    hmResourceSchedulingDayPlanItemCopy.HMClinicStaff = hmResourceSchedulingDayPlanItemMain.HMClinicStaff;
                    hmResourceSchedulingDayPlanItemCopy.HMOrganizationalUnit = hmResourceSchedulingDayPlanItemMain.HMOrganizationalUnit;
                    hmResourceSchedulingDayPlanItemCopy.HMResourceSchedulingDayPlan = hmResourceSchedulingDayPlanCopy.RecId;
                    hmResourceSchedulingDayPlanItemCopy.HMResourceSchedulingTypeCode = hmResourceSchedulingDayPlanItemMain.HMResourceSchedulingTypeCode;
                    hmResourceSchedulingDayPlanItemCopy.HMSpecialtyCode = hmResourceSchedulingDayPlanItemMain.HMSpecialtyCode;
                    hmResourceSchedulingDayPlanItemCopy.NumberOfOverBookings = hmResourceSchedulingDayPlanItemMain.NumberOfOverBookings;
                    hmResourceSchedulingDayPlanItemCopy.NumberOfTimeSlots = hmResourceSchedulingDayPlanItemMain.NumberOfTimeSlots;
                    hmResourceSchedulingDayPlanItemCopy.StartTime = hmResourceSchedulingDayPlanItemMain.StartTime;
                    recordListDayPlanItem.add(hmResourceSchedulingDayPlanItemCopy);
    
                }
                
            }

            while select * from hmResourceSchedulingWeekDayPlanMain
                where hmResourceSchedulingWeekDayPlanMain.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlanMain.RecId
                    && hmResourceSchedulingWeekDayPlanMain.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanMain.RecId
                {
                    select * from hmResourceSchedulingWeekDayPlanExist
                    where hmResourceSchedulingWeekDayPlanExist.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlanCopy.RecId
                    && hmResourceSchedulingWeekDayPlanExist.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanCopy.RecId
                    && hmResourceSchedulingWeekDayPlanExist.Days == hmResourceSchedulingWeekDayPlanMain.Days;
    
                    if(hmResourceSchedulingWeekDayPlanExist.RecId == 0)
                    {
                        hmResourceSchedulingWeekDayPlanCopy.HMResourceSchedulingDayPlan = hmResourceSchedulingDayPlanCopy.RecId;
                        hmResourceSchedulingWeekDayPlanCopy.HMResourceSchedulingWeekPlan = hmResourceSchedulingWeekPlanCopy.RecId;
                        hmResourceSchedulingWeekDayPlanCopy.Days = hmResourceSchedulingWeekDayPlanMain.Days;
                        schedulingWeekDayPlanCopyList.add(hmResourceSchedulingWeekDayPlanCopy);
                    }
                    
                }
            

            
            //inserting week plan
            while select * from hmResourceSchedulingWeekPlanMain where hmResourceSchedulingWeekPlanMain.HMResourceSchedulingPlanningObject == element.args().record().RecId
            {
                if(!(WeekRecId.exists(hmResourceSchedulingWeekPlanMain.RecId)))
                {
                    hmResourceSchedulingWeekPlanCopy.code = hmResourceSchedulingWeekPlanMain.Code;
                    hmResourceSchedulingWeekPlanCopy.Description = hmResourceSchedulingWeekPlanMain.Description;
                    hmResourceSchedulingWeekPlanCopy.FromYear = hmResourceSchedulingWeekPlanMain.FromYear;
                    hmResourceSchedulingWeekPlanCopy.HMResourceSchedulingPlanningObject = hmResourceSchedulingPlanningObjectCopy.RecId;
                    hmResourceSchedulingWeekPlanCopy.IsGenerated = hmResourceSchedulingWeekPlanMain.IsGenerated;
                    hmResourceSchedulingWeekPlanCopy.ToYear = hmResourceSchedulingWeekPlanMain.ToYear;
                    hmResourceSchedulingWeekPlanCopy.WeekNumber = hmResourceSchedulingWeekPlanMain.WeekNumber;
                    schedulingWeekPlanCopyList.add(hmResourceSchedulingWeekPlanCopy);
                    WeekRecId.insert(hmResourceSchedulingWeekPlanMain.RecId,hmResourceSchedulingWeekPlanMain.RecId);
                    while select * from hmResourceSchedulingWeekPlanToCalenderMain where hmResourceSchedulingWeekPlanToCalenderMain.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanMain.RecId
                    {
                        hmResourceSchedulingWeekPlanToCalenderCopy.HMResourceSchedulingWeekPlan = hmResourceSchedulingWeekPlanCopy.RecId;
                        hmResourceSchedulingWeekPlanToCalenderCopy.WeekNo = hmResourceSchedulingWeekPlanToCalenderMain.WeekNo;
                        hmResourceSchedulingWeekPlanToCalenderCopy.YearNo = hmResourceSchedulingWeekPlanToCalenderMain.YearNo;
                        schedulingWeekPlanToCalenderCopyList.add(hmResourceSchedulingWeekPlanToCalenderCopy);
                    }
                }
                

                while select * from hmResourceSchedulingWeekDayPlanMain
                where hmResourceSchedulingWeekDayPlanMain.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlanMain.RecId
                    && hmResourceSchedulingWeekDayPlanMain.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanMain.RecId
                {
                    select * from hmResourceSchedulingWeekDayPlanExist
                    where hmResourceSchedulingWeekDayPlanExist.HMResourceSchedulingDayPlan == hmResourceSchedulingDayPlanCopy.RecId
                    && hmResourceSchedulingWeekDayPlanExist.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanCopy.RecId
                    && hmResourceSchedulingWeekDayPlanExist.Days == hmResourceSchedulingWeekDayPlanMain.Days;
    
                    if(hmResourceSchedulingWeekDayPlanExist.RecId == 0)
                    {
                        hmResourceSchedulingWeekDayPlanCopy.HMResourceSchedulingDayPlan = hmResourceSchedulingDayPlanCopy.RecId;
                        hmResourceSchedulingWeekDayPlanCopy.HMResourceSchedulingWeekPlan = hmResourceSchedulingWeekPlanCopy.RecId;
                        hmResourceSchedulingWeekDayPlanCopy.Days = hmResourceSchedulingWeekDayPlanMain.Days;
                        schedulingWeekDayPlanCopyList.add(hmResourceSchedulingWeekDayPlanCopy);
                    }
                }
                
            }
        }
        recordListDayPlan.insertDatabase();
        recordListDayPlanItem.insertDatabase();
        schedulingWeekDayPlanCopyList.insertDatabase();
        schedulingWeekPlanCopyList.insertDatabase();
        schedulingWeekPlanToCalenderCopyList.insertDatabase();
        schedulingWeekDayPlanCopyList.insertDatabase();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPlanningObjectNew</Name>
				<Source><![CDATA[
    public boolean copyPlanningObjectNew()
    {
        HMResourceSchedulingPlanningObject      hmResourceSchedulingPlanningObjectMain, hmResourceSchedulingPlanningObjectCopy, hmResourceSchedulingPlanningObjectLocal;
    
        Map                                     DayRecId,WeekRecId;
        List                                    list;
        DayRecId                                = new Map(Types::Int64,Types::Int64);
        WeekRecId                               = new Map(Types::Int64,Types::Int64);
        list = new list(Types::String);
    
        select * from hmResourceSchedulingPlanningObjectMain
        where hmResourceSchedulingPlanningObjectMain.Code == Code.text();
    
        if(hmResourceSchedulingPlanningObjectMain.RecId > 0)
        {
            warning('Code already exist');
            return false;
        }
    
        select * from hmResourceSchedulingPlanningObjectMain
            where hmResourceSchedulingPlanningObjectMain.RecId == element.args().record().RecId;
    
        //inserting planning object
        hmResourceSchedulingPlanningObjectCopy.CaseType = hmResourceSchedulingPlanningObjectMain.CaseType;
        hmResourceSchedulingPlanningObjectCopy.Category = hmResourceSchedulingPlanningObjectMain.Category;
        hmResourceSchedulingPlanningObjectCopy.Code = Code.text();
        hmResourceSchedulingPlanningObjectCopy.Description = Description.text();
        hmResourceSchedulingPlanningObjectCopy.EndDate = hmResourceSchedulingPlanningObjectMain.EndDate;
        hmResourceSchedulingPlanningObjectCopy.HMBuildingUnit = hmResourceSchedulingPlanningObjectMain.HMBuildingUnit;
        hmResourceSchedulingPlanningObjectCopy.HMClinicStaff = physicianRecId;
        hmResourceSchedulingPlanningObjectCopy.HMOrganizationalUnit = hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit;
        hmResourceSchedulingPlanningObjectCopy.OverbookAllowed = hmResourceSchedulingPlanningObjectMain.OverbookAllowed;
        hmResourceSchedulingPlanningObjectCopy.PlanningObjectStatus = hmResourceSchedulingPlanningObjectMain.PlanningObjectStatus;
        hmResourceSchedulingPlanningObjectCopy.ScheduleOnPublicHoliday = hmResourceSchedulingPlanningObjectMain.ScheduleOnPublicHoliday;
        hmResourceSchedulingPlanningObjectCopy.SearchInterval = hmResourceSchedulingPlanningObjectMain.SearchInterval;
        hmResourceSchedulingPlanningObjectCopy.StartDate = hmResourceSchedulingPlanningObjectMain.StartDate;
    
        select count(RecId) from hmResourceSchedulingPlanningObjectLocal
            where hmResourceSchedulingPlanningObjectLocal.CaseType == hmResourceSchedulingPlanningObjectCopy.CaseType
            && hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit == hmResourceSchedulingPlanningObjectCopy.HMOrganizationalUnit
            && hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit == hmResourceSchedulingPlanningObjectCopy.HMBuildingUnit
            && hmResourceSchedulingPlanningObjectLocal.HMClinicStaff == hmResourceSchedulingPlanningObjectCopy.HMClinicStaff
            && hmResourceSchedulingPlanningObjectLocal.RecId != hmResourceSchedulingPlanningObjectCopy.RecId;
    
        if (hmResourceSchedulingPlanningObjectLocal.RecId > 0)
        {
            warning(strFmt("@MAZ3174",HMClinicStaff::getPhysicianNameByRecId(hmResourceSchedulingPlanningObjectCopy.HMClinicStaff),HMBuildingUnit::find(hmResourceSchedulingPlanningObjectCopy.HMBuildingUnit).Description));
            return false;
        }
        else
        {
            hmResourceSchedulingPlanningObjectCopy.insert();
            if (hmResourceSchedulingPlanningObjectCopy.RecId)
            {
                info(SysLabel::labelId2String2('@MAZ11035'));
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>method1</Name>
				<Source><![CDATA[
    private void method1()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>storePhysician</Name>
				<Source><![CDATA[
    public void storePhysician(recId _RecId)
    {
        physicianRecId = _RecId;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Phy</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
            args.name(formstr(HMPhysicianAdvanceLookup));
            args.caller(element);
            args.parmEnumType(enumNum(HMAdvanceStaffLookupParm));
            args.parmEnum(HMAdvanceStaffLookupParm::Physician);
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            HMClinicStaff           hmClinicStaffLocal;
            HMlookupClass           HMlookupClassObj =new HMlookupClass();
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.text() != "")
                {
                    hmClinicStaffLocal = HMlookupClassObj.checkValidPhysicianName(this.text());
        
                    if (hmClinicStafflocal.RecId)
                    {
                        element.storePhysician(hmClinicStafflocal.RecId);
                    }
                    else
                    {
                        warning(strFmt("@SYS316757",'Physician'));
                        Phy.text(HMClinicStaff::getPhysicianNameByRecId( physicianRecId));
                    }
                }
                else
                {
                    element.storePhysician(0);
                }
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OKButton</Name>
				<Type>CommandButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if(element.copyPlanningObjectNew())
            {
                element.args().caller().refreshData();
                super();
        
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">@MAZ1452</Caption>
		<DialogSize xmlns="">Medium</DialogSize>
		<Frame xmlns="">Dialog</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Style xmlns="">DropDialog</Style>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>MainInstruction</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Style>MainInstruction</Style>
						<Text>@MAZ7290</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStaticTextControl">
						<Name>SupplementalInstruction</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>StaticText</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<DisplayHeight>2</DisplayHeight>
						<DisplayHeightMode>Fixed</DisplayHeightMode>
						<DisplayLength>80</DisplayLength>
						<DisplayLengthMode>Fixed</DisplayLengthMode>
						<Text></Text>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_</Name>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Code</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@MAZ1723</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>HMCode</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Description</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@MAZ1724</HelpText>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>Description</ExtendedDataType>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>Phy</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@MAZ1907</HelpText>
						<NeededPermission>Manual</NeededPermission>
						<Type>String</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Label>@MAZ65</Label>
						<Mandatory>Yes</Mandatory>
					</AxFormControl>
				</Controls>
				<BottomMargin>11</BottomMargin>
				<BottomMarginMode>Fixed</BottomMarginMode>
				<LeftMargin>11</LeftMargin>
				<LeftMarginMode>Fixed</LeftMarginMode>
				<RightMargin>11</RightMargin>
				<RightMarginMode>Fixed</RightMarginMode>
				<TopMargin>11</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogCommit</Name>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormCommandButtonControl">
								<Name>OKButton</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Skip>Yes</Skip>
								<Type>CommandButton</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Command>OK</Command>
								<DefaultButton>Yes</DefaultButton>
								<Text>@SYS40266</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Footnote</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<TopMargin>10</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>