<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HmUploadFileDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HmUploadFileDialog extends FormRun
{   
    HmResourceSchedulingAttachmentTmpTable  myTmpTable;
    System.IO.MemoryStream                  stream;
    HMPatient                               myHMPatient;
    DocuRef                                 myDocuRef;
    FormRun                                 myFormRun, callerForm;
    File                                    myFile;
    Args                                    arguments;
    str                                     myFileName;
    str                                     myFileTypeId;
    str                                     myFileExtension;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void init()
    {
        super();

        if(element.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogChargeEntryLine) || element.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogClaim))
        {
            DocumentType.visible(true);
            DocumentType.mandatory(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>DocumentType</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void lookup()
        {
            SysTableLookup  lookup;
            Query           query;
            QueryBuildDataSource dataSource, dataSourceJoin;
            RecId insuranceCarrierRecId;

            HMPatientChargeEntryLine chargeEntryLine;
            HMPatientChargeEntryTable chargeEntryTable;
            HMCaseInsurance caseInsurance;
            HMClaimTable                claimTable;
            HMPatientInsurance          patientInsurance;
            HMInsuranceCarrier          insuranceCarrier;
    
            if(element.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogClaim))
            {
                claimTable = element.args().record();
                insuranceCarrierRecId = claimTable.HMInsuranceCarrier;
            }
            else if(element.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogChargeEntryLine))
            {
                chargeEntryLine = element.args().record();

                    
                select firstonly * from chargeEntryTable
                    where chargeEntryTable.RecId == chargeEntryLine.HMPatientChargeEntryTable
                    join * from caseInsurance where caseInsurance.HMCase == chargeEntryTable.HMCase
                    join * from patientInsurance where patientInsurance.RecId == caseInsurance.HMPatientInsurance
                    join * from insuranceCarrier where insuranceCarrier.COde == patientInsurance.InsuranceCarrier;

                insuranceCarrierRecId = insuranceCarrier.RecId;
            }

            query       = new Query();
            dataSource  = query.addDataSource(tablenum(HMRequiredDocuments), tablestr(HMRequiredDocuments));

            dataSourceJoin = dataSource.addDataSource(tableNum(HMRequiredDocumentsInsuranceCarrier));
            dataSourceJoin.relations(true);

            dataSourceJoin.addRange(fieldnum(HMRequiredDocumentsInsuranceCarrier, HMInsuranceCarrier)).value(queryValue(insuranceCarrierRecId));

            lookup = SysTableLookup::newParameters(tablenum(HMRequiredDocuments), this);
            lookup.parmQuery(query);
            lookup.addLookupfield(fieldnum(HMRequiredDocuments, Code), true);
            lookup.addLookupfield(fieldnum(HMRequiredDocuments, Description));

            lookup.performFormLookup();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>FileUploadControl</Name>
				<Type>Custom</Type>
				<Methods>
					<Method>
						<Name>OnUploadCompleted</Name>
						<Source><![CDATA[
        /// <summary>
        /// Test Comment
        /// </summary>
        public void OnUploadCompleted()
        {
            super();
            
            stream  = new System.IO.MemoryStream();
            stream  = this.getUploadedFile();

            myFileName      = this.fileName();
            myFileTypeId    = FileTypeId.valueStr();
            myFileExtension = System.IO.Path::GetExtension(myFileName);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>OpenButtonControl</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        public void clicked()
        {
            if(element.args().record().TableId == tableNum(HmPatient))
            {
                myHMPatient = element.args().record() as HMPatient;
            
                arguments = new Args();
                arguments = element.args();
                arguments.name(formStr(HMPatientAddNewDocDialog));
                arguments.record(myHMPatient);

                myDocuRef.RefTableId   = tableNum(HMPatient);
                myDocuRef.RefRecId     = myHMPatient.RecId;
                myDocuRef.RefCompanyId = curext();
                
                ttsbegin;

                myDocuRef = DocumentManagement::attachFile(tableNum(HMPatient),
                                                        myHMPatient.RecId,
                                                        curExt(),
                                                        myFileTypeId,
                                                        stream,
                                                        myFileName,
                                                        myFileExtension,
                                                        myFileName);

                ttscommit;

                myFormRun = ClassFactory.formRunClass(arguments);
                myFormRun.init();
                myFormRun.run();
                myFormRun.detach();

                element.close();
            }
            else if (element.args().record().TableId == tableNum(HmResourceSchedulingAttachmentTmpTable))
            {
                container conResultStream;
                conResultStream   = conIns(conResultStream, 1, stream);

                myTmpTable                      = element.args().record() as HmResourceSchedulingAttachmentTmpTable;
                myTmpTable.Name                 = myFileName;
                myTmpTable.TypeId               = myFileTypeId;
                myTmpTable.FileExtension        = myFileExtension;
                myTmpTable.ImageStreamContainer = Binary::constructFromMemoryStream(stream).getContainer();
                
                ttsbegin;
                
                myTmpTable.insert();
                
                ttscommit;
            }
            else if(element.args().record().TableId == tableNum(HMPatientChargeEntryLine))
            {
                HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocument;
                HMClaimTable claimTable;
                HMPatientChargeEntryLine chargeEntryLine = element.args().record() as HMPatientChargeEntryLine;
            
                myDocuRef.RefTableId   = tableNum(HMPatientChargeEntryLine);
                myDocuRef.RefRecId     = chargeEntryLine.RecId;
                myDocuRef.RefCompanyId = curext();
                
                ttsbegin;

                myDocuRef = DocumentManagement::attachFile(tableNum(HMPatientChargeEntryLine),
                                                        chargeEntryLine.RecId,
                                                        curExt(),
                                                        myFileTypeId,
                                                        stream,
                                                        myFileName,
                                                        myFileExtension,
                                                        myFileName);

                if(DocumentType.valueStr())
                {
                    hmClaimChargeEntryRequireDocument.initValue();

                    hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine = chargeEntryLine.RecId;
                    hmClaimChargeEntryRequireDocument.DocuRef = myDocuRef.RecId;
                    hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType.valueStr()).RecId;

                    hmClaimChargeEntryRequireDocument.HMClaimTable = (select RecId from HMClaimTable where HMClaimTable.HMPatientChargeEntryTable == chargeEntryLine.HMPatientChargeEntryTable).RecId;
                                       
                    hmClaimChargeEntryRequireDocument.insert();
                }
                ttscommit;
            }
            else if(element.args().record().TableId == tableNum(HMClaimTable))
            {
                HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocument;
                HMClaimTable claimTable = element.args().record() as HMClaimTable;
            
                myDocuRef.RefTableId   = tableNum(HMClaimTable);
                myDocuRef.RefRecId     = claimTable.RecId;
                myDocuRef.RefCompanyId = curext();
                
                ttsbegin;

                myDocuRef = DocumentManagement::attachFile(tableNum(HMClaimTable),
                                                        claimTable.RecId,
                                                        curExt(),
                                                        myFileTypeId,
                                                        stream,
                                                        myFileName,
                                                        myFileExtension,
                                                        myFileName);

                if(DocumentType.valueStr())
                {
                    hmClaimChargeEntryRequireDocument.initValue();

                    hmClaimChargeEntryRequireDocument.HMClaimTable = claimTable.RecId;
                    hmClaimChargeEntryRequireDocument.DocuRef = myDocuRef.RecId;
                    hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType.valueStr()).RecId;

                    hmClaimChargeEntryRequireDocument.insert();
                }
                ttscommit;
            }

            super();

            element.args().record().dataSource().research();
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DocuRef</Name>
			<Table>DocuRef</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Author</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPersonId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultAttachment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncyclopediaItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAttachmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMHashValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InterCompanySkipUpdate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsJustification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Name</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Party</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefCompanyId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefTableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Restriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailEntryID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmEMailStoreID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ValueRecId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AutoNotify>No</AutoNotify>
			<AutoQuery>No</AutoQuery>
			<AutoSearch>No</AutoSearch>
			<AllowCheck>No</AllowCheck>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">Upload File</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<Style xmlns="">Dialog</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>UploadButtonGroup</Name>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>FileTypeId</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<HelpText>File type</HelpText>
						<Type>String</Type>
						<FormControlExtension
							i:nil="true" />
						<ExtendedDataType>DocuTypeId</ExtendedDataType>
						<Label>File Type</Label>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormStringControl">
						<Name>DocumentType</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<Type>String</Type>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Label>Document type</Label>
					</AxFormControl>
					<AxFormControl>
						<Name>FileUploadControl</Name>
						<HelpText>Select file</HelpText>
						<FormControlExtension>
							<Name>FileUpload</Name>
							<ExtensionComponents />
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>fileTypesAccepted</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>fileNameLabel</Name>
									<Type>String</Type>
									<Value>Select File:</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>browseText</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>style</Name>
									<Type>Enum</Type>
									<TypeName>FileUploadStyle</TypeName>
									<Value>Standard</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>baseFileUploadStrategyClassName</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>imageMaxWidth</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>imageMaxHeight</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>NavigationButtonGroup</Name>
				<Height>550</Height>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>OpenButtonControl</Name>
						<Type>Button</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Text>Ok</Text>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormCommandButtonControl">
						<Name>CancelCommandButtonControl</Name>
						<Type>CommandButton</Type>
						<FormControlExtension
							i:nil="true" />
						<ButtonDisplay>TextOnly</ButtonDisplay>
						<Command>Cancel</Command>
						<SaveRecord>No</SaveRecord>
						<Text>Cancel</Text>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>