<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMPatientChargeEntryAdvancePayment</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMPatientChargeEntryAdvancePayment extends FormRun
{
    HMResourceSchedulingAppointmentSalesTbl HMResourceSchedulingAppointmentSalesTbl;
    HMResourceSchedulingAppointment         hmResourceSchedulingAppointment;
    RecId                                   patientRecId;
    HMChargeEntryPaymentType                paymentType;
    Map                                     performedServicesMap;
    Map                                     scheduledServicesMap;
    SalesTable                              salesTable;
    HMPatientChargeEntryAdvPaymFormHandler  formHandlerClass;
    AmountMST                               totalAmountToPay;
    boolean                                 isFirst,isCalledFromPharmacy;
    InventDimCtrl_Frm_Mov                   inventDimFormSetup;
    str                                     pharmacyCompany;
    Dialog                                  dialog;
    container                               conRefundCaseTrans;
    boolean                                 refundJournalCreated;
}
]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmount</Name>
				<Source><![CDATA[
    public void calculateTotalAmount()
    {
        real            totalAmount;
        HMCaseTrans     hmCaseTransLocal;
        MapEnumerator mapEnumerator;
        totalAmountToPay = 0;
    
        mapEnumerator = performedServicesMap.getEnumerator();
        while(mapEnumerator.moveNext())
        {
            select CashAmount,DeductibleActual from hmCaseTransLocal
            where hmCaseTransLocal.RecId == mapEnumerator.currentKey();
    
            totalAmount += hmCaseTransLocal.CashAmount + hmCaseTransLocal.DeductibleActual;
    
            totalAmountToPay = totalAmount;
        }
        totalAmountToPay = decRound(totalAmountToPay,2);
        TotalMarkedAmount.realValue(totalAmountToPay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCart</Name>
				<Source><![CDATA[
    public void clearCart()
    {
        HMPharmacyItemDispense localPharmacyItems;
    
        ttsBegin;
        while select forUpdate localPharmacyItems
        {
            localPharmacyItems.delete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCaseTransDetailForPayments</Name>
				<Source><![CDATA[
    public void createCaseTransDetailForPayments(container _jourTransCon, boolean _markPaid = false, RecId _paymentReceivedRecid = 0)
    {
        //Zain
        MenuFunction                        paymentReceiptMF;
        //Zain
        MapEnumerator                       mapEnumerator;
        boolean                             paymentExist;
        HMCaseTrans                         hmCaseTransLocal;
        CustTrans                           custTrans;
        HMCase                              hmCaseLocal;
        HMCaseTransDetailTransactionType    transType;
        hmResourceSchedulingAppointment     appointment;
        Args                                args = new Args();
        CustTable                           custTable;
    
        int i;
    
        try
        {
            mapEnumerator = performedServicesMap.getEnumerator();
    
            while(mapEnumerator.moveNext())
            {
                hmCAseTransLocal = HMCaseTrans::find(mapEnumerator.currentKey());
                /*select HMPatientInsurance from hmCaseLocal
                where hmCaseLocal.recid == hmCAseTransLocal.HMCase;
                if(hmCaseLocal.HMPatientInsurance == 0)
                {
                    transType = HMCaseTransDetailTransactionType::PatientPayment;
                }
                else
                {
                    transType = HMCaseTransDetailTransactionType::InsurancePayment;
                }*/
    
                for(i=1;i<=conlen(_jourTransCon);i++)
                {
                    paymentExist = true;
    
                    custTrans = custTrans::find(LedgerJournalTrans::findRecId(conPeek(_jourTransCon,i),false).CustTransId);
                    select CustType from custTable
                    where custTable.AccountNum == custTrans.AccountNum;
                    if(custTable.CustType == CustType::Patient)
                    {
                        transType = HMCaseTransDetailTransactionType::PatientPayment;
                    }
                    else
                    {
                        transType = HMCaseTransDetailTransactionType::InsurancePayment;
                    }

                    //Zain
                    if(HMBillParameters::find().DeductiblePaymCRToPatIns == HMPaymCreditTo::Patient)
                        transType = HMCaseTransDetailTransactionType::PatientPayment;
                    else
                        transType = HMCaseTransDetailTransactionType::InsurancePayment;


                    //Zain
                    HMCaseTransDetail::createCaseTransDetail(mapEnumerator.currentKey(),
                                                                transType,
                                                                custTrans.RecId,
                                                                tableNum(CustTrans),
                                                                0,
                                                                _paymentReceivedRecid);
    
                }
                if(paymentExist || _markPaid)
                {
                    hmCaseTransLocal = mapEnumerator.currentValue();
                    formHandlerClass.markCaseTransPaid(hmCaseTransLocal);
                }
    
            }
            if(_markPaid)
            {
                info("@MAZ13346");
                HMCaseTrans_ds.executeQuery();
            }
    
            args.record(HMResourceSchedulingAppointment::find(HMResourceSchedulingAppointment::findRecIdByAppointmentNum(custTrans.HMAppointmentNumber)));
            HMPharmacyItemDispense_ds.executeQuery();
    
            if (HMResourceSchedulingAppointmentDS)
            {
                args.record(HMResourceSchedulingAppointmentDS);
            }
            else if (HMCase)
            {
                args.record(HMCase);
            }
    
            HMPharmacyItemDispense_ds.executeQuery();
            if(paymentExist)
            {
                //Zain report run comment for time being.
                //HMPaymentReceiptController::main(args, isCalledFromPharmacy);
                paymentReceiptMF = new MenuFunction("HMPaymentReceiptReport", MenuItemType::Action);
                paymentReceiptMF.run(args);
                paymentReceiptMF.wait();
                //Zain
                
            }
    
        }
        catch
        {
            ttsAbort;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientRecId</Name>
				<Source><![CDATA[
    public RecId getPatientRecId()
    {
        if(element.args().menuItemName() == menuitemDisplayStr(HMPatientChargeEntryPaymentOutstandingSO))
        {
            if(!patientRecId)
            {
                if(!salesTable)
                {
                    salesTable = element.args().record();
                    AccountDetails_SO.visible(false);
                    PatientNumberSO.text(SalesTable.InvoiceAccount);
                    PatientNameSo.text(SalesTable.invoiceName());
                }
                patientRecId = HMPatient::findByMRN(salesTable.InvoiceAccount).RecId;
                if(!patientRecId)
                {
                    warning("@MAZ12517");
                    element.close();
                }
            }
        }
        else
        {
            if(!HMResourceSchedulingAppointment)
            {
                HMResourceSchedulingAppointment = element.args().record();
                patientRecId = HMResourceSchedulingAppointment.HMPatient;
            }
            else
            {
                if(!patientRecId)
                {
                    patientRecId = HMResourceSchedulingAppointment.HMPatient;
                }
            }
        }
        return patientRecId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerformedServiceMap</Name>
				<Source><![CDATA[
    public Map getPerformedServiceMap()
    {
        return performedServicesMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPharmacyCompany</Name>
				<Source><![CDATA[
    public str getPharmacyCompany()
    {
        return pharmacyCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPharmacyItemDispenseTable</Name>
				<Source><![CDATA[
    public HMPharmacyItemDispense getPharmacyItemDispenseTable()
    {
        return HMPharmacyItemDispense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gettotalAmountToPay</Name>
				<Source><![CDATA[
    public real gettotalAmountToPay()
    {
        return totalAmountToPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideFactBoxes</Name>
				<Source><![CDATA[
    public  void hideFactBoxes()
    {
        FormRun                          formRunFactBox;
        int i;
        PartList                         PartListformRunFactBox  = new PartList(this);
    
        for ( i = 1; i <= partlistformrunfactbox.partcount(); i++)
        {
            formrunfactbox = partlistformrunfactbox.getpartbyid(i);
            if(formrunfactbox)
            {
                formrunfactbox.design().visible(false);
                formrunfactbox.design().maximizeBox(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        
        super();
        element.updateDesign(InventDimFormDesignUpdate::Init);
        //verticalSplitter = new SysFormSplitter_X(VSplitter, ServiceGRoup, element, 300);
        performedServicesMap = new Map(Types::Int64,Types::Record);
        scheduledServicesMap = new Map(Types::Int64,Types::Record);
        formHandlerClass = new HMPatientChargeEntryAdvPaymFormHandler();
    
        isFirst = true;
    
        if (element.args().menuItemName() == menuitemDisplayStr(HMPatientChargeEntryAdvancePaymentPharm))
        {
            isCalledFromPharmacy = true;
            this.clearCart();
            this.updateControlForPharmacy();
            pharmacyCompany = HMParameters::getPharmacyDataArea();
        }
        formHandlerClass.parmIsCalledFromPharmacy(isCalledFromPharmacy);

    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromPharmacy</Name>
				<Source><![CDATA[
    public boolean isCalledFromPharmacy()
    {
        return isCalledFromPharmacy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInsuranceDetails</Name>
				<Source><![CDATA[
    public void loadInsuranceDetails()
    {
        str bookingNotesLocal;

        HMCaseInsurance							caseInsurance		= HMCaseInsurance::findByCase(HMCase.RecId);
        HMPatientInsurance                      patientInsurance	= HMPatientInsurance::find(caseInsurance.HMPatientInsurance);//HMPatientInsurance::find(HMCase.HMPatientInsurance);
        HMInsuranceContractClassOrPlans         plan				= HMInsuranceContractClassOrPlans::find(patientInsurance.HMInsuranceContractClassOrPlans);
        HMInsuranceCarrier                      carrier;
        HMInsuranceContract                     contract;
        HMInsuranceContractCarrierCombination   combination;
        HMInsuranceContractClassDeductible      deductible;
        //BookingNotes.text('');
        InsuranceName.text('');
        InsuranceContract.text('');
        InsuranceClass.text('');
        InsuranceExpirationDate.dateValue(dateNull());
    
        if (caseInsurance)
        {
            contract    = HMInsuranceContract::find(plan.HMInsuranceContract);
            combination = HMInsuranceContractCarrierCombination::find(contract.HMInsuranceContractCarrierCombination);
            carrier     = HMInsuranceCarrier::findByCode(caseInsurance.InsuranceCarrier);

            select HMMaxOutPatientDeductibleLimit,RecId,HMMaxEmergencyDeductibleLimit,HMContractClassId, HMContractClassNetwork from plan
            where plan.HMInsuranceContract == contract.RecId;   
    
            select * from deductible
            where deductible.HMInsuranceContractClassOrPlans == plan.RecId
            && deductible.HMCaseType == HMCase.HMCaseType;
    
            InsuranceName.text(carrier.name);
            InsuranceContract.text(contract.HMContractName);
            InsuranceClass.text(plan.HMContractClassId);
            InsuranceNetwork.text(plan.HMContractClassNetwork);
            InsuranceExpirationDate.dateValue(patientInsurance.EndDate);
            if(HMCase.HMCaseType == HMCaseType::Emergency)
            {
                HMMaxOutPatientDeductibleLimit.value(plan.HMMaxEmergencyDeductibleLimit);
                HMMaxOutPatientDeductibleLimit.label("@MAZ13099");
            }
            else
            {
                HMMaxOutPatientDeductibleLimit.value(plan.HMMaxOutPatientDeductibleLimit);
            }

            HMDeductibleMainMemberAmount.realValue(deductible.HMDeductibleMainMemberAmount);
            HMDeductibleMainMemberPercentage.realValue(deductible.HMDeductibleMainMemberPercentage);
    
            //BookingNotes.text(bookingNotesLocal);
        }

        if(!caseInsurance)
        {
            HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PatientResponsibility)).allowEdit(false);
        }
        else
        {
            HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PatientResponsibility)).allowEdit(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openPaymentForm</Name>
				<Source><![CDATA[
    public void openPaymentForm(str _menuItemToCall)
    {
        MapEnumerator mapEnumerator;
        HMCaseTrans hmCaseTransLocal;
    
        HMPatientPaymentResponsibility patientPaymentResp;
        boolean                         isFirstLocal = true;
        Args args;
        totalAmountToPay = 0;
        mapEnumerator = performedServicesMap.getEnumerator();
        while(mapEnumerator.moveNext())
        {
            select * from hmCaseTransLocal
            where hmCaseTransLocal.RecId == mapEnumerator.currentKey();
            if(isFirstLocal)
            {
                patientPaymentResp = hmCaseTransLocal.PatientResponsibility;
                isFirstLocal = false;
            }
            else
            {
                if(hmCaseTransLocal.PatientResponsibility != patientPaymentResp)
                {
                    warning("Responsibility should be same for all the marked service(s)/item(s) to proceed the payment");
                    return;
                }
            }
            if(hmCaseTransLocal.BillingStatus != HMBillStatus::NotPaid)
            {
                warning("@MAZ13337");
                return;
            }
            else if(hmCaseTransLocal.BillingStatus == HMBillStatus::NotRequired)
            {
                warning("@MAZ13563");
                return;
            }
        }
        this.calculateTotalAmount();
        if(totalAmountToPay <= 0)
        {
            warning("@MAZ13338");
            return;
        }
        if(element.args().menuItemName() == menuitemDisplayStr(HMPatientChargeEntryPaymentOutstandingSO))
        {
            args = new Args();
            args.record(HMPatient::find(patientRecId));
            args.parm('CalledFromSO');
            args.caller(element);
            new MenuFunction(menuitemDisplayStr(HMPatientChargeEntryNewPaymentDialog),MenuItemType::Display).run(args);
        }
        else
        {
            args = new Args();
            //Zain
            //if(HMCase.HMCaseType == HMCaseType::OutPatient)
            //{
            //    args.record(HMResourceSchedulingAppointmentDS);
            //}
            //if(HMCase.HMCaseType == HMCaseType::Emergency )
            //{
            //    args.record(HMCase);
            //}
            args.record(HMCase);
            //Zain
            args.caller(element);
            new MenuFunction(_menuItemToCall,MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConRefundCaseTrans</Name>
				<Source><![CDATA[
    public container parmConRefundCaseTrans(container _conRefundCaseTrans = conRefundCaseTrans)
    {
        conRefundCaseTrans = _conRefundCaseTrans;
    
        return conRefundCaseTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefundJournalCreated</Name>
				<Source><![CDATA[
    public boolean parmRefundJournalCreated(boolean _refundJournalCreated = refundJournalCreated)
    {
        refundJournalCreated = _refundJournalCreated;
    
        return refundJournalCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDeductible</Name>
				<Source><![CDATA[
    public void refreshDeductible()
    {
        RecId record;
        record = HMCaseTrans.RecId;
        HMCaseTrans_ds.executeQuery();
        formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase, true);
        TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
        HMCaseTrans_ds.executeQuery();
        HMCaseTrans_ds.findRecord(HMCaseTrans::find(record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDS</Name>
				<Source><![CDATA[
    public void refreshDS()
    {
        performedServicesMap = new Map(Types::Int64,Types::Record);
        scheduledServicesMap = new Map(Types::Int64,Types::Record);
        HMCaseTrans_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
    
        super();
        //TODO: fix later
        // if(HMCase.HMCaseType == HMCaseType::Emergency)
        //{
        AppointmentNumber.visible(false);
        CaseNumber.visible(true);
        AppointmentGroup.caption("@SYS131766");
        DoctorName.visible(false);
        ApptDateTime.visible(false);
        HMResourceSchedulingAppointmentOrder.visible(false);
        relatedAppointmentNumber.visible(false);
        //}
        //else if (HMCase.HMCaseType == HMCaseType::OutPatient)
        //{
        //    AppointmentNumber.visible(true);
        //    CaseNumber.visible(false);
        //}
        formHandlerClass.parmHmCase(HMCase);
        formHandlerClass.parmAppointmentRecid(hmResourceSchedulingAppointmentDs.RecId);
        AppointmentOutstandingToPay.realValue(formHandlerClass.getVisitCaseAmount());
        CaseAmount.realValue(formHandlerClass.getCaseAmount());
    
        if (element.args().menuItemName() != menuitemDisplayStr(HMPatientChargeEntryAdvancePaymentPharm))
        {
            this.hideFactBoxes();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionCompleted</Name>
				<Source><![CDATA[
    private void transactionCompleted()
    {
        info("@MAZ11990");
        element.refreshDS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlForPharmacy</Name>
				<Source><![CDATA[
    private void updateControlForPharmacy()
    {
        PartList                partList;
        FormRun                 formPart;
        str                     formName;
        int                     counter;
        NumberOf        numberOfParts;
        partList = new PartList(this);
        DispensingGroup.visible(true);
        HMPatientChargeEntryNewPaymentPharmacy.visible(true);
        HMPatientChargeEntryNewPaymentDialog.visible(false);
        ServiceGRoup.caption("@MAZ13553");
        HMPatientChargeEntryOverrideDeductibe.visible(false);
        HMPatientChargeEntryAdvPayPackageDetails.visible(false);
        HMResourceSchedulingAppointmentOrder.visible(false);
        HMPatientChargeEntryMedicationDispense.visible(true);
        ScanBarCode.allowEdit(true);
        relatedAppointmentNumber.visible(false);
        HMCaseTrans_OrderedQty.visible(true);
        HMCaseTrans_Qty.label("@MAZ1118");
        HMResourceSchedulingAppointmentOrder.visible(false);
        IsMarkedForSchedule.visible(false);
        DeleteButton.visible(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign(InventDimFormDesignUpdate mode)
    {
        SalesLine       salesLine;
        InventMovement  movement = InventMovement::construct(salesLine);
    
        switch (mode)
        {
            case InventDimFormDesignUpdate::Init        :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl_Frm_Mov::newFromFormMovement(element, movement);
                }
    
            case InventDimFormDesignUpdate::Active      :
                inventDimFormSetup.formActiveSetup(movement.inventDimGroupSetup(), movement);
                inventDimFormSetup.formSetControls(true);
                break;
    
            case InventDimFormDesignUpdate::FieldChange :
                inventDimFormSetup.formActiveSetup(movement.inventDimGroupSetup(), movement);
                inventDimFormSetup.formSetControls(false);
                break;
    
            default : throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceMap</Name>
				<Source><![CDATA[
    public void updateServiceMap()
    {
        HMCaseTrans     HMCaseTransLocal;
    
        HMCaseTransLocal = HMCaseTrans_ds.getFirst();
        while(HMCaseTransLocal)
        {
            //if(isCalledFromPharmacy)
            //{
            //if(HMCaseTrans.Urgency != HMUrgency::Routine)
            //{
            //HMCaseTransLocal = HMCasetrans_ds.getNext();
            //continue;
            //
            //}
            //}
            if(HMCaseTransLocal.AlternatDrugStatus == HMAlternatDrugStatus::AlternateAdded)
            {
                HMCaseTransLocal = HMCasetrans_ds.getNext();
                continue;
    
            }
            if(HMCaseTransLocal.BillingStatus == HMBillStatus::NotPaid)
            {
                performedServicesMap.insert(HMCaseTransLocal.RecId,HMCaseTransLocal);
            }
            HMCaseTransLocal = HMCasetrans_ds.getNext();
        }
        formHandlerClass.updateActualDeductible(performedServicesMap,hmcaseTrans.dataSource(),hmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase);
        TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
        isFirst = false;
        HMCaseTrans_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettlement</Name>
				<Source><![CDATA[
    public boolean validateSettlement()
    {
        MapEnumerator   mapEnumerator;
        real            invoiceAmount,paymentAmount, refundAmount;
        CustTransOpen   custTransOpenValidate;
        //if(custTransPaymentMap.empty())
        //{
        //warning("No payment marked for settlement");
        //return false;
        //}
        //
        //if(custTransOpenMap.empty() && custTransRefundMap.empty())
        //{
        //warning("Select either invoice or refund transaction to settle payment");
        //return false;
        //}
        //
        //mapEnumerator = custTransOpenMap.getEnumerator();
        //while (mapEnumerator.moveNext())
        //{
        //custTransOpenValidate =  mapEnumerator.currentValue();
        //invoiceAmount += custTransOpenValidate.AmountCur;
        //}
        //
        //mapEnumerator = custTransPaymentMap.getEnumerator();
        //while (mapEnumerator.moveNext())
        //{
        //custTransOpenValidate =  mapEnumerator.currentValue();
        //paymentAmount += abs(custTransOpenValidate.AmountCur);
        //}
        //
        //mapEnumerator = custTransRefundMap.getEnumerator();
        //while (mapEnumerator.moveNext())
        //{
        //custTransOpenValidate =  mapEnumerator.currentValue();
        //refundAmount += custTransOpenValidate.AmountCur;
        //}
        //if(invoiceAmount == 0)
        //{
        //if(refundAmount > 0 && paymentAmount < invoiceAmount)
        //{
        //warning("Cannot settle the transactions, Payment amount is lesser than refund/invoice amount");
        //return false;
        //}
        //}
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created by Zain
    /// </summary>
    public AmountMST getPrice(HMPatientPaymentResponsibility _paymentResponsibility)
    {
        AmountMST               price;
        boolean                 isValid = true;
        HMParameters            parameters;
        HMItemCptPcsCodes       pcsCodes;
        HMProcedureCodeMaster   procedureCode;
        
        // Marij
        Price           myPrice;
        container       priceContainer;
        InventDim       inventDimLocal;
        HMCase          hmCaseBuffer          = HMCase::find(HMCase.RecId);//HMPatientChargeEntryTable.HMCase);
        InventDim       inventDimBuffer       = InventDim::find(HMCaseTrans.InventDim);
        InventTable     inventTableBuffer     = InventTable::find(HMCaseTrans.ItemId);
        HMCaseInsurance hmCaseInsuranceBuffer = HMCaseInsurance::findByCase(hmCaseBuffer.RecId);
        HMPatientInsurance hmPatientInsuranceLocal = HMPatientInsurance::find(hmCaseInsuranceBuffer.HMPatientInsurance);
        HMInsuranceContract hmInsuranceContract = HMInsuranceContract::findByCarrierCombo(HMInsuranceContractCarrierCombination::findByInsCarrier(HMInsuranceCarrier::findByCode(hmPatientInsuranceLocal.InsuranceCarrier).RecId).RecId);
        HMInsuranceContractClassOrPlans contractClassOrPlans = HMInsuranceContractClassOrPlans::findByContractId(hmInsuranceContract.RecId, false, ConcurrencyModel::Auto);
        HMInsuranceNetwork insuranceNetworkBuffer = HMInsuranceNetwork::find(contractClassOrPlans.HMContractClassNetwork);
        container   priceAgreementContainer;
        container   discContainer;
        DiscAmountMST   discAmount;
        DiscPct         discPct;
        //Zain
        HMPriceDisc priceDisc;
        CustTable   custTable = CustTable::findRecId(HMPatient::find(HMCase.HMPatient).CustTable);
        HMPatientChargeEntryLine    hmPatientChargeEntryLine = HMPatientChargeEntryLine::findByCaseTrans(HMCaseTrans.RecId);
        //Zain
        // Marij
        
        parameters = HMParameters::find();

        if (parameters.isAllowChargeCodeEditing)
        {
            select RecId from pcsCodes
                where pcsCodes.ItemId == HMCaseTrans.ItemId
                join procedureCode
                    where procedureCode.RecId == pcsCodes.HMProcedureCodeMaster
                    && procedureCode.Type == HMProcCodeSearchType::CPT_HCPS;

            if (pcsCodes.RecId)
            {
                isValid = true;
            }
            else
            {
                isValid = false;
            }
        }
        else
        {
            isValid = true;
        }

        if (isValid)
        {
            if(!hmCaseInsuranceBuffer ||
                (hmCaseInsuranceBuffer && _paymentResponsibility == HMPatientPaymentResponsibility::Patient)) //self-pay
            {
                inventDimLocal.InventSiteId = inventDimBuffer.InventSiteId;
                inventDimLocal.InventLocationId = inventDimBuffer.InventLocationId;
                //inventDimLocal.wMSLocationId = inventDimBuffer.wMSLocationId;
                if (inventTable::find(inventTableBuffer.ItemId).ItemType == ItemType::Item)
                    inventDimLocal.inventBatchId = inventDimBuffer.inventBatchId;
                else if (inventTable::find(inventTableBuffer.ItemId).ItemType == ItemType::Service)
                    inventDimLocal.inventBatchId = "";

                inventDimLocal = InventDim::findOrCreate(inventDimLocal);

                priceDisc = new HMPriceDisc(ModuleInventPurchSales::Sales, inventTableBuffer.ItemId,
                    inventDimLocal,
                    HMCaseTrans.salesUnitId(),
                    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                    1,
                    custTable.AccountNum,
                    CustTable::find(custTable.AccountNum).Currency);

                if (priceDisc.findPrice(custTable.PriceGroup, 0, 0, 0, hmCaseBuffer.HMCaseType))
                    price = priceDisc.price();
                else if (priceDisc.findItemPrice())
                    price = priceDisc.price();
            }
            else if (hmCaseInsuranceBuffer && _paymentResponsibility ==HMPatientPaymentResponsibility::Client) //insurance
            {
                inventDimLocal.InventSiteId = inventDimBuffer.InventSiteId;
                inventDimLocal.InventLocationId = inventDimBuffer.InventLocationId;
                inventDimLocal.inventBatchId = inventDimBuffer.inventBatchId;
                inventDimLocal = InventDim::findOrCreate(inventDimLocal);

                priceAgreementContainer = HMPriceDisc::findItemPriceAgreement(ModuleInventPurchSales::Sales,
                                                                              inventTableBuffer.ItemId,
                                                                              inventDimLocal,
                                                                              HMCaseTrans.salesUnitId(),
                                                                              DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                              (HMCaseTrans.Qty == 0) ? 1 : HMCaseTrans.Qty,
                                                                              CustTable::find(HMCaseInsurance::findByCase(hmCase.RecId).InsuranceCarrier).AccountNum,
                                                                              custTable.Currency,
                                                                              '', //PriceGroup
                                                                              hmInsuranceContract.RecId,
                                                                              contractClassOrPlans.RecId,
                                                                              insuranceNetworkBuffer.RecId,
                                                                              hmCaseBuffer.HMCaseType,
                                                                              hmPatientChargeEntryLine.RevenueCode,
                                                                              hmPatientChargeEntryLine.CPTCodes,
                                                                              hmPatientChargeEntryLine.Modifier1,
                                                                              hmPatientChargeEntryLine.Modifier2,
                                                                              hmPatientChargeEntryLine.Modifier3,
                                                                              hmPatientChargeEntryLine.Modifier4);
                                                                              
                                                  
                price = conPeek(priceAgreementContainer, 1);
                
                if(price == 0)
                {
                    InventTable::find(hmcaseTrans.itemId).salesPcsPrice();
                }
                
                HMCaseTrans.SalesPrice = price;
            }

            discContainer = element.getDiscount(_paymentResponsibility);
            discAmount = conPeek(discContainer, 1);
            discPct = conPeek(discContainer, 2);

            if (discPct > 0)
                    discAmount = price * (discPct/100);
            else
                    discAmount = discAmount;
            
            if (price > 0)
            {
                HMCaseTrans.InsuranceAmount = price * HMCaseTrans.Qty;
                HMCaseTrans.DiscountAmount = discAmount * HMCaseTrans.Qty;
                HMCaseTrans.TotalAmount =  (price * HMCaseTrans.Qty) - HMCaseTrans.DiscountAmount;
                HMCaseTrans.RemainingBillAmount = HMCaseTrans.TotalAmount;
                //fix: Charge entry line price not updated on item change by Ammar
                HMCaseTrans.SalesPrice = price;
                //fix: Charge entry line price not updated on item change by Ammar
            }
            else
            {
                price = HMCaseTrans.getItemSalesPrice();
                HMCaseTrans.SalesPrice = price;
                HMCaseTrans.DiscountAmount = discAmount * HMCaseTrans.Qty;
                HMCaseTrans.InsuranceAmount = price * HMCaseTrans.Qty;
                HMCaseTrans.TotalAmount =  (price * HMCaseTrans.Qty) - HMCaseTrans.DiscountAmount;
                HMCaseTrans.RemainingBillAmount = HMCaseTrans.TotalAmount;
            }

        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created by Zain
    /// </summary>
    /// <returns></returns>
    public container getDiscount(HMPatientPaymentResponsibility _paymentResponsibility)
    {
        DiscAmountMST discValue;
        DiscPct       discPct;
        boolean                 isValid = true;
        HMParameters            parameters;
        HMItemCptPcsCodes       pcsCodes;
        HMProcedureCodeMaster   procedureCode;
        
        Price           myPrice;
        container       priceContainer;
        InventDim       inventDimLocal;
        HMCase          hmCaseBuffer          = HMCase::find(HMCaseTrans.HMCase);
        InventDim       inventDimBuffer       = InventDim::find(HMCaseTrans.InventDim);
        InventTable     inventTableBuffer     = InventTable::find(HMCaseTrans.ItemId);
        HMCaseInsurance hmCaseInsuranceBuffer = HMCaseInsurance::findByCase(hmCaseBuffer.RecId);
        HMPatientInsurance hmPatientInsuranceLocal = HMPatientInsurance::find(hmCaseInsuranceBuffer.HMPatientInsurance);
        HMInsuranceContract hmInsuranceContract = HMInsuranceContract::findByCarrierCombo(HMInsuranceContractCarrierCombination::findByInsCarrier(HMInsuranceCarrier::findByCode	(hmPatientInsuranceLocal.InsuranceCarrier).RecId).RecId);
        HMInsuranceContractClassOrPlans contractClassOrPlans = HMInsuranceContractClassOrPlans::find(hmPatientInsuranceLocal.HMInsuranceContractClassOrPlans, false, ConcurrencyModel::Auto);
        HMInsuranceNetwork insuranceNetworkBuffer = HMInsuranceNetwork::find(contractClassOrPlans.HMContractClassNetwork);
        container   lineDiscAgreementContainer;
        container   discountContainer;
        HMPriceDisc priceDisc;
        CustTable   custTable = CustTable::findRecId(HMPatient::find(HMCase.HMPatient).CustTable);
        HMPatientChargeEntryLine    hmPatientChargeEntryLine = HMPatientChargeEntryLine::findByCaseTrans(HMCaseTrans.RecId);

        parameters = HMParameters::find();

        if (parameters.isAllowChargeCodeEditing)
        {
            select RecId from pcsCodes
                where pcsCodes.ItemId == HMCaseTrans.ItemId
                join procedureCode
                    where procedureCode.RecId == pcsCodes.HMProcedureCodeMaster
                    && procedureCode.Type == HMProcCodeSearchType::CPT_HCPS;

            if (pcsCodes.RecId)
            {
                isValid = true;
            }
            else
            {
                isValid = false;
            }
        }
        else
        {
            isValid = true;
        }

        if (isValid)
        {
            if(!hmCaseInsuranceBuffer ||
                (hmCaseInsuranceBuffer && _paymentResponsibility == HMPatientPaymentResponsibility::Patient)) //self-pay
            //if (!hmCaseInsuranceBuffer)
            {
                inventDimLocal.InventSiteId = inventDimBuffer.InventSiteId;
                inventDimLocal.InventLocationId = inventDimBuffer.InventLocationId;
                //inventDimLocal.wMSLocationId = inventDimBuffer.wMSLocationId;
                inventDimLocal.inventBatchId = inventDimBuffer.inventBatchId;
                inventDimLocal = InventDim::findOrCreate(inventDimLocal);

                priceDisc = new HMPriceDisc(ModuleInventPurchSales::Sales, inventTableBuffer.ItemId,
                    inventDimLocal,
                    HMCaseTrans.salesUnitId(),
                    DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                    1,
                    custTable.AccountNum,
                    CustTable::find(custTable.AccountNum).Currency);

                if (priceDisc.findLineDisc(inventTableBuffer.ItemId, custTable.LineDisc, 0, 0, 0, hmCaseBuffer.HMCaseType))
                {
                    discValue = priceDisc.lineDiscAmount();
                    discPct = pricedisc.lineDiscPct();

                    discountContainer = [discValue, discPct];
                }
                else
                    discountContainer = [0, 0];
            }
            else if (hmCaseInsuranceBuffer && _paymentResponsibility ==HMPatientPaymentResponsibility::Client) //insurance
            //else
            {
                inventDimLocal.InventSiteId = inventDimBuffer.InventSiteId;
                inventDimLocal.InventLocationId = inventDimBuffer.InventLocationId;
                inventDimLocal.inventBatchId = inventDimBuffer.inventBatchId;
                inventDimLocal = InventDim::findOrCreate(inventDimLocal);

                lineDiscAgreementContainer = HMPriceDisc::findItemLineDiscAgreement(ModuleInventPurchSales::Sales,
                                                                              inventTableBuffer.ItemId,
                                                                              inventDimLocal,//inventDimBuffer,
                                                                              HMCaseTrans.salesUnitId(),
                                                                              DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                              (HMCaseTrans.Qty == 0) ? 1 : HMCaseTrans.Qty,
                                                                              CustTable::find(HMCaseInsurance::findByCase(hmCase.RecId).InsuranceCarrier).AccountNum,//CustTable::findRecId(HMInsuranceCarrier::findByCode(HMPatientInsurance::getPrimaryInsurance(hmPatientInsurance.HMPatient)).CustTable).AccountNum,
                                                                              CustTable::find(custTable.AccountNum).Currency,
                                                                              CustTable::find(HMCaseInsurance::findByCase(hmCase.RecId).InsuranceCarrier).AccountNum, //LineDiscGroup
                                                                              inventTableBuffer.ItemId,
                                                                              hmInsuranceContract.RecId,
                                                                              contractClassOrPlans.RecId,
                                                                              insuranceNetworkBuffer.RecId,
                                                                              hmCaseBuffer.HMCaseType,
                                                                              hmPatientChargeEntryLine.RevenueCode,
                                                                              hmPatientChargeEntryLine.CPTCodes,
                                                                              hmPatientChargeEntryLine.Modifier1,
                                                                              hmPatientChargeEntryLine.Modifier2,
                                                                              hmPatientChargeEntryLine.Modifier3,
                                                                              hmPatientChargeEntryLine.Modifier4,
                                                                              0,
                                                                              '',
                                                                              NoYes::Yes);

                discValue = conPeek(lineDiscAgreementContainer, 1);
                discPct = conPeek(lineDiscAgreementContainer, 2);
                discountContainer = [discValue, discPct];
            }
        }

        return discountContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    //NS: Bug 3654:While Entering the payment of an invoice line on Payment center, the select/checked marked invoice is not shown after All payment is closed by Ammar.Ali
    /// <summary>
    ///Refreshes the calling form to display new payment lines
    /// </summary>
    public void close()
    {
        #Task
        FormRun formRun;

        super();

        formRun = element.args().caller();

        if (formRun)
        {
            formRun.task(#taskF5);
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMCaseTrans</Name>
				<Methods>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            if(HMCaseTrans.AlternatDrugStatus == HMAlternatDrugStatus::AlternateAdded)
            {
                formHandlerClass.updatePharmacyDrug(HMCaseTrans.RecId);
            }
            super();
            hmcasetrans_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>delCartLine</Name>
						<Source><![CDATA[
        public void delCartLine(HMCaseTrans _hmCaseTrans)
        {
            HMPharmacyItemDispense localHMPharmacyItemDispense;
        
            ttsBegin;
            while select forUpdate localHMPharmacyItemDispense
                where localHMPharmacyItemDispense.ItemId == _hmCaseTrans.ItemId
            {
                localHMPharmacyItemDispense.delete();
            }
            ttsCommit;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editIsMarkedForSchedule</Name>
						<Source><![CDATA[
        // BP deviation documented
        public edit boolean editIsMarkedForSchedule(
            boolean _set,
            HMCaseTrans _hmCaseTrans,
            boolean _isMarked)
        {
            boolean isMarked;
            RecId record;
            if(_set)
            {
                if(_isMarked)
                {
                    if(_hmCaseTrans.RelatedAppointmentRecId > 0)
                    {
                        warning("@MAZ13465");
                    }
                    else if(_hmCaseTrans.CRMOrderId == emptyGuid())
                    {
                        warning("@MAZ13466");
                    }
                    else if(!scheduledServicesMap.exists(_hmCaseTrans.RecId))
                    {
                        scheduledServicesMap.insert(_hmCaseTrans.RecId,_hmCaseTrans);
                    }
                }
                else
                {
                    if(scheduledServicesMap.exists(_hmCaseTrans.RecId))
                    {
                        scheduledServicesMap.remove(_hmCaseTrans.RecId);
                    }
                }
            }
        
            isMarked = scheduledServicesMap.exists(_hmCaseTrans.RecId);
            return isMarked;
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            HMResourceSchedulingAppointment appt,apptPrimary;
            HMCaseTrans                     hmCaseTransLocal;
            QueryBuildDataSource            qbdsHMCaseTrans;
            QueryBuildDataSource            qbdsInventTable;
            //Zain
            HMCase                          hmCaseLocal;
            //Zain
            super();
            this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans,ParentCaseTransId)).value(SysQuery::value(0));
            if(element.args().record().TableId == tableNum(HMResourceSchedulingAppointment))
            {
                appt = element.args().record();
                if(appt.PrimaryAppointment == YesNo::No)
                {
                    select RecId from apptPrimary
                    where apptPrimary.HMCase == appt.HMCase
                    && apptPrimary.PrimaryAppointment == YesNo::Yes;
                    if(apptPrimary)
                    {
                        select RecId,ParentCaseTransId from hmCaseTransLocal
                        where hmCaseTransLocal.RelatedAppointmentRecId == appt.RecId
                        && hmCaseTransLocal.ParentCaseTransId != 0;
                        if(hmCaseTransLocal)
                        {
                            this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans,RecId)).value(SysQuery::value(hmCaseTransLocal.ParentCaseTransId));
                        }
                        else
                        {
                            this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans,RelatedAppointmentRecId)).value(SysQuery::value(appt.RecId));
                        }
                    }
        
                }
                else
                {
                    this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans,HMResourceSchedulingAppointment)).value(SysQuery::value(appt.RecId));
                }
            }
            else if(element.args().record().TableId == tableNum(HMCase))
            {
                hmCaseLocal = element.args().record();
                if(hmCaseLocal.RecId)
                {
                    this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans, HMCase)).value(SysQuery::value(hmCaseLocal.RecId));
                }
            }
            this.query().dataSourceTable(tableNum(HMCaseTrans)).addRange(fieldNum(HMCaseTrans,HMServiceStatus)).value(SysQuery::valueNot(HMServiceStatus::Cancelled));
        
            if (element.args().menuItemName() == menuitemDisplayStr(HMPatientChargeEntryAdvancePaymentPharm))
            {
                qbdsHMCaseTrans = this.query().dataSourceTable(tableNum(HMCaseTrans));
                qbdsHMCaseTrans.addRange(fieldnum(HMCaseTrans, Urgency)).value(queryValue(HMUrgency::Routine));
                qbdsInventTable = qbdsHMCaseTrans.addDataSource(tableNum(InventTable));
                qbdsInventTable.addLink(fieldNum(InventTable, ItemId), fieldNum(HMCaseTrans, ItemId));
                qbdsInventTable.addRange(fieldnum(InventTable, HMProductType)).value(queryValue(HMInventType::Medication));
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,Qty)).allowEdit(false);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,OrderedQty)).allowEdit(false);
            }

        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            if(isFirst)
            {
                element.updateServiceMap();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            HMCaseTrans         caseTrans;
            HMCaseTransDetail   caseTransDetails;
        
            ret = super();
            if(ret)
            {
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PatientResponsibility)).allowEdit(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered && HMCaseInsurance::findByCase(HMCase.RecId).HMPatientInsurance !=0);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,InsuranceAmount)).allowEdit(HMCaseTrans.HMServiceStatus != HMServiceStatus::Complete);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PreAuthorizationStatus)).allowEdit(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PreAuthValidDate)).allowEdit(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,PreAuthorizationNumber)).allowEdit(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered);
                HMCaseTrans_ds.object(fieldNum(HMCaseTrans,CashAmount)).allowEdit(false);
                if(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered)
                {
                    HMCaseTrans_ds.object(fieldNum(HMCaseTrans,InsuranceAmount)).allowEdit(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client);
                }
        
                AppointmentOutstandingToPay.realValue(formHandlerClass.getVisitCaseAmount());
                HMPatientChargeEntryAdvPayPackageDetails.enabled(HMCaseTrans.isBOM());
                HMResourceSchedulingAppointmentOrder.enabled(HMCaseTrans.RelatedAppointmentRecId == 0);
                HMPatientChargeEntryOverrideDeductibe.enabled(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client && HMCaseTrans.BillingStatus == HMBillStatus::NotPaid);
                FieldGroup1.enabled(HMCaseTrans.BillingStatus == HMBillStatus::NotPaid);
                ChildGroup1.enabled(HMCaseTrans.BillingStatus == HMBillStatus::NotPaid);
                InventoryDimensions.enabled(HMCaseTrans.BillingStatus == HMBillStatus::NotPaid);
                FieldGroup2.enabled(HMCaseTrans.BillingStatus == HMBillStatus::NotPaid);
                HMCaseTrans_ds.allowEdit(HMCaseTrans.AlternatDrugStatus != HMAlternatDrugStatus::AlternateAdded);
                
        
                if (HMCaseTrans.HMResourceSchedulingAppointment)
                {
                    select firstOnly caseTrans
                    join caseTransDetails
                    where caseTrans.RecId == caseTransDetails.hmcaseTrans
                     && caseTrans.HMResourceSchedulingAppointment == HMCaseTrans.HMResourceSchedulingAppointment
                     && ( caseTransDetails.TransactionType  == HMCaseTransDetailTransactionType::PatientPayment     ||
                        caseTransDetails.TransactionType    == HMCaseTransDetailTransactionType::PatientRefund      ||
                        caseTransDetails.TransactionType    == HMCaseTransDetailTransactionType::InsurancePayment);
                }
                else if (HMCaseTrans.HMCase)
                {
                    select firstOnly caseTrans
                    join caseTransDetails
                    where caseTrans.RecId == caseTransDetails.hmcaseTrans
                     && caseTrans.HMCase == HMCaseTrans.HMCase
                     && ( caseTransDetails.TransactionType  == HMCaseTransDetailTransactionType::PatientPayment     ||
                        caseTransDetails.TransactionType    == HMCaseTransDetailTransactionType::PatientRefund      ||
                        caseTransDetails.TransactionType    == HMCaseTransDetailTransactionType::InsurancePayment);
                }
        
                AlternativeDrug.enabled(HMCaseTrans.AlternatDrugStatus == HMAlternatDrugStatus::None);
                HMCaseTrans_ds.allowDelete(HMCaseTrans.AlternatDrugStatus == HMAlternatDrugStatus::AlternateAdded);
        
                if(HMCase.HMCaseType == HMCaseType::Emergency)
                {
                    HMCaseTrans_ds.object(fieldNum(HMCaseTrans,InsuranceAmount)).allowEdit(HMCaseTrans.BillingStatus != HMBillStatus::Paid);
                }
                //Zain
                HMPaymentReceiptReport.enabled(caseTrans.RecId);

                if(HMBillParameters::find().ChangeOfResponsiblity)
                    HMCaseTrans_ds.object(fieldNum(HMCaseTrans, PatientResponsibility)).allowEdit(true);
                else
                    HMCaseTrans_ds.object(fieldNum(HMCaseTrans, PatientResponsibility)).allowEdit(false);

                //if(HMBillParameters::find().AllowPaymBeforeService && HMCaseTrans.HMServiceStatus == HMServiceStatus::Complete)
                //    HMPatientChargeEntryNewPaymentDialog.enabled(true);
                //else
                //    HMPatientChargeEntryNewPaymentDialog.enabled(false);

                //Zain
        
            }

            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>editIsMarkedForPayment</Name>
						<Source><![CDATA[
        /// <summary>
        /// Gets or sets whether the open transaction is marked for settlement.
        /// </summary>
        /// <param name="_set">
        /// true if marked for settlement is set; otherwise, false.
        /// </param>
        /// <param name="_custTransOpen">
        /// The current instance of the CustTransOpen table.
        /// </param>
        /// <param name="_isMarkedForSettlement">
        /// The new marked for settlement when the <paramref name="_set"/> is true.
        /// </param>
        /// <returns>
        /// Whether the open transaction is marked for settlement.
        /// </returns>
        
        // BP deviation documented
        public edit boolean editIsMarkedForPayment(
            boolean _set,
            HMCaseTrans _hmCaseTrans,
            boolean _isMarked)
        {
            boolean isMarked;
            AmountMST insuranceAmount;
            RecId record;
            if(_set)
            {
                if(_isMarked)
                {
                    if(!performedServicesMap.exists(_hmCaseTrans.RecId))
                    {
                        performedServicesMap.insert(_hmCaseTrans.RecId,_hmCaseTrans);
                        formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase);
                        record = HMCaseTrans.RecId;
                        TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                        HMCaseTrans_ds.executeQuery();
                        HMCaseTrans_ds.findRecord(HMCaseTrans::find(record));
                    }
                }
                else
                {
                    if(performedServicesMap.exists(_hmCaseTrans.RecId))
                    {
                        performedServicesMap.remove(_hmCaseTrans.RecId);
                        record = HMCaseTrans.RecId;
                        formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,HmcaseTrans.HMCase);
                        TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                        HMCaseTrans_ds.reread();
                        if(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Patient)
                        {
                            hmCaseTrans.InsuranceAmount = 0;
                        }
                        else
                        {
                            //insuranceAmount = decRound(HMCaseTrans.TotalAmount - HMCaseTrans.DeductibleActual - HMCaseTrans.DiscountAmount - HMCaseTrans.CashAmount,2);
                            //hmCaseTrans.InsuranceAmount = insuranceAmount;
                        }
                        HMCaseTrans_ds.executeQuery();
                        HMCaseTrans_ds.findRecord(HMCaseTrans::find(record));
                    }
                    if (isCalledFromPharmacy)
                    {
                        this.delCartLine(_hmCaseTrans);
                        HMPharmacyItemDispense_ds.refresh();
                        HMPharmacyItemDispense_ds.research();
                    }
                }
            }
        
            isMarked = performedServicesMap.exists(_hmCaseTrans.RecId);
            element.calculateTotalAmount();
            return isMarked;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMCase</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
            RefRecId HMPatientInsurance = HMCaseInsurance::findByCase(HMCase.RecId).HMPatientInsurance;
            ret = super();
            if(ret)
            {
                HMTableofbenefits.enabled(HMPatientInsurance != 0);
                HMClaimAdministrationFormReport.enabled(HMPatientInsurance != 0);
                PreAuthGroup.enableChilds(HMPatientInsurance != 0);

            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            super();
            element.loadInsuranceDetails();
            HMResourceSchedulingAppointmentDS_ds.executeQuery();
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            HMResourceSchedulingAppointment appt;
            RecId   hmCaseRecId;
            super();
            //if(element.args().record().TableId == tableNum(HMResourceSchedulingAppointment))
            //{
            //    appt = element.args().record();
            //    HMCase_ds.queryBuildDataSource().addRange(fieldNum(HMCase,RecId)).value(SysQuery::value(appt.HMCase));
            //}
            //else
            //{
            hmCaseRecId = element.args().record().RecId;
            HMCase_ds.queryBuildDataSource().addRange(fieldNum(HMCase,RecId)).value(SysQuery::value(element.args().record().RecId));
            HMCase_ds.queryBuildDataSource().clearDynalinks();
            //}
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMResourceSchedulingAppointmentDS</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            if(element.args().record().TableId == tableNum(HMResourceSchedulingAppointment))
            {
                HMResourceSchedulingAppointmentDS_ds.queryBuildDataSource().addRange(fieldNum(HMResourceSchedulingAppointment,RecId)).value(SysQuery::value(element.args().record().RecId));
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>executeQuery</Name>
						<Source><![CDATA[
        public void executeQuery()
        {
            container conInsurance;
            super();
        
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>InventDim</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
            inventDim.data(InventDim::find(HMCaseTrans.InventDim));
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            //super();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMPharmacyItemDispense</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
            if(ret)
            {
                HMPharmacyItemDispense_ds.object(fieldNum(HMPharmacyItemDispense,Qty)).allowEdit(HMCaseTrans::getBillingStatus(HMPharmacyItemDispense.HMCaseTrans) == HMBillStatus::NotPaid);
        
            }
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
            super();
            if(formHandlerClass.updatePharmacyInventBatchId(HMPharmacyItemDispense))
            {
                HMCaseTrans_ds.executeQuery();
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            MapEnumerator   mapEnumerator = performedServicesMap.getEnumerator();
            HMCaseTrans     hmCaseTransLocal;
            boolean         noRecordExist = true;
            ret = super();
            if(ret)
            {
                if(HMPharmacyItemDispense.ItemId != '')
                {
                    while(mapEnumerator.moveNext())
                    {
                        hmCaseTransLocal = HMCaseTrans::find(mapEnumerator.currentKey());
                        if(hmCaseTransLocal.ItemId == HMPharmacyItemDispense.ItemId)
                        {
                            if(hmCaseTransLocal.AlternatDrugStatus == HMAlternatDrugStatus::AlternateAdded)
                            {
                                warning("@MAZ13623");
                                return false;
                            }
                            HMPharmacyItemDispense.HMCaseTrans = hmCaseTransLocal.RecId;
                            if(hmCaseTransLocal.BillingStatus != HMBillStatus::NotPaid && hmCaseTransLocal.Qty != HMPharmacyItemDispense.Qty)
                            {
                                warning("@MAZ13624");
                                HMPharmacyItemDispense.Qty = HMPharmacyItemDispense.orig().Qty;
                                return false;
                            }
                            ret = formHandlerClass.checkPharmacyMedicationOnHand(HMPharmacyItemDispense.InventBatchId,HMPharmacyItemDispense.ItemId,HMPharmacyItemDispense.Qty);
                            noRecordExist = false;
                        }
                    }
                }
            }
            if(noRecordExist)
            {
                warning("@MAZ13568");
                ret = false;
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>HMPatientChargeEntryNewPaymentPharmacy</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.openPaymentForm(menuitemDisplayStr(HMPatientChargeEntryNewPaymentPharmacy));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientChargeEntryNewPaymentDialog</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            element.openPaymentForm(menuitemDisplayStr(HMPatientChargeEntryNewPaymentDialog));
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPaymentRefunds</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            //Zain
            MenuFunction paymentReceiptMF;
            //Zain
            Args args = new Args();
            HMSalesInvoiceCreateFormHandler salesInvoiceCreateFormhandler = new HMSalesInvoiceCreateFormHandler();
            boolean paymentExist;
            boolean hasRecords = false;
            HMCaseTrans hmCaseTransLocal;
            MapEnumerator mapEnumerator;
            ListEnumerator listEnumerator;
            List list = new List(Types::Int64);
            List refundTransactions = new List(Types::Int64);
            container conRefundTransactions;
            int i;
        
            try
            {
                if(Box::yesNo("@MAZ13318",DialogButton::No,"@MAZ7757") == DialogButton::Yes)
                {
                    ttsBegin;
                    mapEnumerator = performedServicesMap.getEnumerator();
                    while(mapEnumerator.moveNext())
                    {
                        hmCaseTransLocal = HMCaseTrans::find(mapEnumerator.currentKey());
                        if(hmCaseTransLocal.BillingStatus != HMBillStatus::Paid)
                        {
                            checkFailed("@MAZ13319");
                            ttsAbort;
                            return;
                        }
                        if(hmCaseTransLocal.CRMOrderId == emptyGuid())
                        {
                            if(hmCaseTransLocal.HMServiceStatus != HMServiceStatus::Paid
                            && hmCaseTransLocal.HMServiceStatus != HMServiceStatus::Decline)
                            {
                                checkFailed("@MAZ13517");
                                ttsAbort;
                                return;
                            }
                        }
                        hasRecords = true;
                        if(hmCaseTransLocal.CashAmount + hmCaseTransLocal.DeductibleActual != 0)
                        {
                            paymentExist=true;
                        }
                        //{
                        //hmCaseTransLocal.selectForUpdate(true);
                        //hmCaseTransLocal.HMServiceStatus = HMServiceStatus::Ordered;
                        //hmCaseTransLocal.BillingStatus = HMBillStatus::NotPaid;
                        //hmCaseTransLocal.update();
                        ////salesInvoiceCreateFormhandler.markOrderRefundForCRMService(HMCaseTrans);
                        ////List.addEnd(hmCaseTransLocal.RecId);
                        //}
                        //else
                        //{
                        //paymentExist = true;
                        //}
        
                    }
        
                    ttsCommit;
                    if(!hasRecords)
                    {
                        warning("@MAZ13650");
                        return;
                    }
        
                    args.parm("Refund");
        
                    if (HMResourceSchedulingAppointmentDS)
                    {
                        args.record(HMResourceSchedulingAppointmentDS);
                    }
                    else if (HMCase)
                    {
                        args.record(HMCase);
                    }
        
                    super();
        
                    if(paymentExist)
                    {
                        conRefundTransactions = element.parmConRefundCaseTrans();
        
                        for (i=1; i <= conlen(conRefundTransactions); i++)
                        {
                            refundTransactions.addEnd(conPeek(conRefundTransactions, i));
                        }
        
                        //Zain -- commented for time being
                        //HMPaymentReceiptController::main(args, isCalledFromPharmacy, refundTransactions);
                        paymentReceiptMF = new MenuFunction("HMPaymentReceiptReport", MenuItemType::Action);
                        paymentReceiptMF.run(args);
                        paymentReceiptMF.wait();
                        //Zain
                    }
                    element.parmRefundJournalCreated(false);
                }
            }
            catch
            {
        
            }
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientAdvancePaymentPosting</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            if(element.args().menuItemName() != menuitemDisplayStr(HMPatientChargeEntryPaymentOutstandingSO))
            {
                HMResourceSchedulingAppointment = HMResourceSchedulingAppointment::find(HMResourceSchedulingAppointment.RecId);
                if(LedgerJournalTable::find(HMResourceSchedulingAppointment.LedgerJournalTable_AdvancePayment).Posted == NoYes::Yes)
                {
                    element.close();
                }
            }
            else
            {
                element.close();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientPaymentSettlements</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            if(Box::yesNo("@MAZ12009",DialogButton::No,"@MAZ7757") == DialogButton::Yes)
            {
                if(element.validateSettlement())
                {
                    super();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMClaimAdministrationFormReport</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            //super();
            Args args = new Args();
        
            if (HMResourceSchedulingAppointmentDS)
            {
                args.record(HMResourceSchedulingAppointmentDS);
            }
            else
            {
                args.record(HMCase);
            }
        
            args.caller(this);
        
            new MenuFunction(menuItemActionStr(HMClaimAdministrationFormReport), MenuItemType::Action).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientAppointmentPrescription</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
        
            if (HMResourceSchedulingAppointmentDS)
            {
                args.record(HMResourceSchedulingAppointmentDS);
            }
            else
            {
                args.record(HMCase);
            }
        
            args.caller(this);
        
            new MenuFunction(menuItemActionStr(HMPatientAppointmentPrescription), MenuItemType::Action).run(args);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPaymentReceiptReport</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            Args args = new Args();
        
            if (HMResourceSchedulingAppointmentDS)
            {
                args.record(HMResourceSchedulingAppointmentDS);
            }
            else
            {
                args.record(HMCase);
            }
        
            args.parm('PaymentReceiptReport');
        
            HMPaymentReceiptController::main(args, isCalledFromPharmacy);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPatientChargeEntryMedicationDispense</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            HMCaseTrans_ds.executeQuery();
            HMPharmacyItemDispense_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMResourceSchedulingAppointmentOrder</Name>
				<Type>MenuFunctionButton</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            MenuFunction    menuFunction;
            MapEnumerator mapEnumerator;
            Container conSend;
            ContainerClass conClass;
            Args args = new Args();
            int i = 1;
        
            if(scheduledServicesMap.elements() > 0)
            {
                if(scheduledServicesMap.elements() == 1)
                {
                    super();
                }
                else
                {
                    mapEnumerator = scheduledServicesMap.getEnumerator();
                    while(mapEnumerator.moveNext())
                    {
                        conSend = conins(conSend, i, mapEnumerator.currentKey());
                    }
        
                    conClass = new ContainerClass(conSend);
                    args.parmObject(conClass);
                    menuFunction = this.menufunction();
                    args.caller(element);
                    args.record(HMCaseTrans);
                    menuFunction.run(args);
                }
            }
            else
            {
                warning("@MAZ13421");
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMCaseTrans_PatientResponsibility</Name>
				<Type>ComboBox</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
            if(ret)
            {
                //Zain
               
                if(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Patient)
                {
                    HMCaseTrans.DiscountAmount = 0;
                    HMCaseTrans.DiscPercent1 = 0;
                    HMCaseTrans.DiscPercent2 = 0;
                    HMCaseTrans.InsuranceAmount = 0;
                    HMCaseTrans.DeductibleActual = 0;
                    //Zain
                    HMCaseTrans.CashAmount = element.getPrice(HMCaseTrans.PatientResponsibility) - HMCaseTrans.DiscountAmount;//HMCaseTrans.TotalAmount - HMCaseTrans.DiscountAmount;
                    HMCaseTrans.Deductible = 0;
                    HMCaseTrans.DeductiblePercentage = 0;
                    HMCaseTrans.InsuranceAmount = 0;
                    HMCaseTrans.DeductiblePerUnit =0;
                    HMCaseTrans.PatientResponsibility = HMPatientPaymentResponsibility::Patient;
                    //Zain
                    HMCaseTrans.PreAuthorizationNumber = '';
        
                    HMCaseTrans.PreAuthValidDate = dateNull();
                    HMCaseTrans.PreAuthorizationStatus = 0;
                    //HMCaseTrans.write();
        
                }
                else if (HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client)
                {
                    //HMCaseTrans.DiscountAmount = 0;
                    //HMCaseTrans.DiscPercent1 = 0;
                    //HMCaseTrans.DiscPercent2 = 0;
                    HMCaseTrans.InsuranceAmount = element.getPrice(HMCaseTrans.PatientResponsibility);;
                    //HMCaseTrans.DeductibleActual = 0;
                    //Zain
                    HMCaseTrans.CashAmount = 0; 
                    HMCaseTrans.Deductible = 0;
                    //HMCaseTrans.DeductiblePercentage = 0;
                    //HMCaseTrans.DeductiblePerUnit =0;
                    HMCaseTrans.PatientResponsibility = HMPatientPaymentResponsibility::Client;
                    HMCaseTrans.write();
                    HMCaseTrans.updateCaseTransDeductibe(0, HMCaseTrans.HMCase);
                    //HMCaseTrans.DeductibleActual = 0;
                    HMCaseTrans.InsuranceAmount = HMCaseTrans.TotalAmount - HMCaseTrans.DeductibleActual;
                    HMCaseTrans.PreAuthorizationNumber = '';
                    HMCaseTrans.PreAuthValidDate = dateNull();
                    HMCaseTrans.PreAuthorizationStatus = 0;
                }
                if(HMCaseTrans.HMServiceStatus == HMServiceStatus::Ordered)
                {
                    HMCaseTrans_ds.object(fieldNum(HMCaseTrans,CashAMount)).allowEdit(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client);
                }
                //HMCaseTrans.updateCaseTransDeductibe(HMCaseTrans.HMResourceSchedulingAppointment, HMCaseTrans.HMCase);
                
                if(HMCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client)
                {
                    //Zain
                    formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase);
                    TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                    //Zain

                    HMCaseTrans.InsuranceAmount = HMCaseTrans.TotalAmount - HMCaseTrans.DeductibleActual;// - HMCaseTrans.DiscountAmount;
                    HMCaseTrans.CashAmount = 0;
        
                }
                HMCaseTrans_ds.research(true);
                HMCaseTrans_ds.reread();
                AppointmentOutstandingToPay.realValue(formHandlerClass.getVisitCaseAmount());
        
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMCaseTrans_Qty</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            RecId record;
            ret = super();
            if(ret)
            {
                //Zain
                element.getPrice(HMCaseTrans.PatientResponsibility);
                HMCaseTrans.write();
                HMCaseTrans.updateCaseTransDeductibe(0, HMCaseTrans.HMCase);
                //formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase, true);
                //Zain
                record = HMCaseTrans.RecId;
                TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                HMCaseTrans_ds.executeQuery();
                HMCaseTrans_ds.findRecord(HMCaseTrans::find(record));
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMCaseTrans_InsuranceAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            if(ret)
            {
                HMCaseTrans.CashAmount = 0;
                if(HMCaseTrans.InsuranceAmount + HMCaseTrans.DeductibleActual + HMCaseTrans.DiscountAmount > HMCaseTrans.TotalAmount)
                {
                    warning("@MAZ13345");
                    HMCaseTrans.InsuranceAmount = HMCaseTrans.orig().InsuranceAmount;
                    HMCaseTrans.CashAmount = HMCaseTrans.TotalAmount - HMCaseTrans.DiscountAmount - HMCaseTrans.DeductibleActual - HMCaseTrans.InsuranceAmount;
                    if(HMCaseTrans.CashAmount < 0)
                    {
                        HMCaseTrans.CashAmount = 0;
                    }
                    return ret;
                }
                HMCaseTrans.CashAmount = HMCaseTrans.TotalAmount - HMCaseTrans.DiscountAmount - HMCaseTrans.DeductibleActual - HMCaseTrans.InsuranceAmount;
    
                formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase);
                if(HMCaseTrans.CashAmount < 0)
                {
                    HMCaseTrans.CashAmount = 0;
                }
                TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                HMCaseTrans_ds.research(true);
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMCaseTrans_CashAmount</Name>
				<Type>Real</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
    
            ret = super();
            /*if(ret)
            {
                if(HMCaseTrans.CashAmount > (HMCaseTrans.TotalAmount - HMCaseTrans.DiscountAmount))
                {
                    warning("@MAZ13345");
                    HMCaseTrans.CashAmount = HMCaseTrans.orig().CashAmount;
                    return ret;
                }
                HMCaseTrans.InsuranceAmount = HMCaseTrans.TotalAmount - HMCaseTrans.DiscountAmount - HMCaseTrans.DeductibleActual - HMCaseTrans.CashAmount;
                if(HMCaseTrans.InsuranceAmount <0)
                {
                    HMCaseTrans.InsuranceAmount = 0;
                }
                //HMCaseTrans.updateCaseTransDeductibe(HMCaseTrans.HMResourceSchedulingAppointment,HMCaseTrans.HMCase);
                formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase);
    
                TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                HMCaseTrans_ds.research(true);
    
            }*/
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ScanBarCode</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            InventItemBarcode inventItemBarCode;
            HMCaseTrans                 localHMCaseTrans = HMCAseTrans_DS.getFirst() as HMCaseTrans;
        
            ret = super();
        
            select inventItemBarCode
                where inventItemBarCode.itemBarCode == this.valueStr();
            if (inventItemBarCode)
            {
                while(localHMCaseTrans)
                {
        
                    if (inventItemBarCode.itemId == localHMCaseTrans.ItemId && HMCAseTrans_DS.editIsMarkedForPayment(false,localHMCaseTrans,true))
                    {
                        if (!HMPharmacyItemDispense.validate(localHMCaseTrans.ItemId,inventItemBarCode.InventBatchId,HMPharmacyItemDispense))
                        {
                            HMPharmacyItemDispense.ItemId              = localHMCaseTrans.ItemId;
                            HMPharmacyItemDispense.Price               = localHMCaseTrans.Deductible + localHMCaseTrans.CashAmount;
                            HMPharmacyItemDispense.Qty                 = 1;
                            HMPharmacyItemDispense.UnitOfMeasureSymbol = localHMCaseTrans.salesUnitId();
                            HMPharmacyItemDispense.InventBatchId       = inventItemBarCode.InventBatchId;
                            HMPharmacyItemDispense.insert();
                            this.text("");
                        }
                        else if (HMPharmacyItemDispense.validate(localHMCaseTrans.ItemId,inventItemBarCode.InventBatchId,HMPharmacyItemDispense))
                        {
                            ttsBegin;
                            select forUpdate HMPharmacyItemDispense
                                where HMPharmacyItemDispense.ItemId == localHMCaseTrans.ItemId && HMPharmacyItemDispense.InventBatchId == inventItemBarCode.InventBatchId;
                            HMPharmacyItemDispense.Qty = HMPharmacyItemDispense.Qty + 1;
                            HMPharmacyItemDispense.update();
                            ttsCommit;
                            this.text("");
                        }
                    }
                    this.text("");
                    localHMCaseTrans = HMCAseTrans_DS.getNext() as HMCaseTrans;
                }
                this.text("");
                HMPharmacyItemDispense_ds.refresh();
                HMPharmacyItemDispense_ds.research();
                HMCAseTrans_DS.refresh();
                HMCAseTrans_DS.research();
            }
        
        
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AutoLoadAll</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HMCaseTrans                 localHMCaseTrans = HMCAseTrans_DS.getFirst() as HMCaseTrans;
        
        
            super();
        
            while(localHMCaseTrans)
            {
        
                if (!HMPharmacyItemDispense.validate(localHMCaseTrans.ItemId,'',HMPharmacyItemDispense) && HMCAseTrans_DS.editIsMarkedForPayment(false,localHMCaseTrans,true))
                {
                    if(localHMCaseTrans.AlternatDrugStatus != HMAlternatDrugStatus::AlternateAdded)
                    {
                        if(localHMCaseTrans.HMServiceStatus != HMServiceStatus::Complete)
                        {
                            if(!HMPatientChargeEntryAdvPaymFormHandler::isItemExistInPharmacyCompany(localHMCaseTrans.ItemId,pharmacyCompany))
                            {
                                warning(strFmt("Cannot add %1, Item doesn't exist in pharmacy %2 company",localHMCaseTrans.ItemId,pharmacyCompany));
                            }
                            else
                            {
                                HMPharmacyItemDispense.ItemId              = localHMCaseTrans.ItemId;
                                HMPharmacyItemDispense.Price               = localHMCaseTrans.DeductibleActual + localHMCaseTrans.CashAmount;
                                HMPharmacyItemDispense.Qty                 = localHMCaseTrans.Qty;
                                HMPharmacyItemDispense.UnitOfMeasureSymbol = localHMCaseTrans.salesUnitId();
                                HMPharmacyItemDispense.HMCaseTrans = localHMCaseTrans.RecId;
                                HMPharmacyItemDispense.insert();
                            }
                        }
                    }
                }
        
                localHMCaseTrans = HMCAseTrans_DS.getNext() as HMCaseTrans;
        
            }
            HMPharmacyItemDispense_ds.refresh();
            HMPharmacyItemDispense_ds.research();
            HMCAseTrans_DS.refresh();
            HMCAseTrans_DS.research();
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>AlternativeDrug</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
        
            DialogField field;
            ItemId  itemId;
            HMCaseTrans                 localHMCaseTrans = HMCAseTrans;
            RecId                       newCAseTransRecId;
            HMCaseTrans                 newHMCaseTrans;
        
            HMCaseService caseService = new HMCaseService();
            if(localHMCaseTrans.HMServiceStatus == HMServiceStatus::Complete)
            {
                warning("Cannot add alternate drug against dispensed item");
                return;
            }
            //todo: ax 7 to be resolved
            //itemId = HMAlternativeDrugDialog::callDialog(new Args());
            //todo end
            /*dialog = new Dialog("Alternative Drug");
            dialog.addText("Select Alternative Drug :");
            field = dialog.addField(extendedTypeStr(ItemId));
            dialog.formRun().controlMethodOverload(true);
            dialog.formRun().controlMethodOverloadObject(this);
            dialog.run();
            if (dialog.closedOk())
            {
                itemId = field.value();*/
            if (itemId)
            {
                newCAseTransRecId = caseService.createCaseTransPharm(itemId,HMServiceStatus::Ordered,HMCaseTrans.HMCase,localHMCaseTrans.HMResourceSchedulingAppointment,localHMCaseTrans.Qty,emptyGuid(),localHMCaseTrans.salesUnitId(),localHMCaseTrans.Urgency, HMAlternatDrugStatus::New);
        
                ttsBegin;
                localHMCaseTrans.selectForUpdate(true);
                localHMCaseTrans.AlternatDrugStatus = HMAlternatDrugStatus::AlternateAdded;
                localHMCaseTrans.update();
                newHMCaseTrans = HMCaseTrans::find(newCAseTransRecId,true);
                newHMCaseTrans.AlternatePrimaryCaseTransId = localHMCaseTrans.RecId;
                newHMCaseTrans.update();
                ttscommit;
                if(performedServicesMap.exists(localHMCaseTrans.RecId))
                {
                    performedServicesMap.remove(localHMCaseTrans.RecId);
                }
                HMPharmacyItemDispense_ds.refresh();
                HMPharmacyItemDispense_ds.research();
                HMCAseTrans_DS.refresh();
                HMCAseTrans_DS.research();
            }
            //}
        
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ClearDeliveryList</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
        
            ttsBegin;
            delete_from HMPharmacyItemDispense;
            ttsCommit;
            HMPharmacyItemDispense_ds.refresh();
            HMPharmacyItemDispense_ds.research();
            HMCAseTrans_DS.refresh();
            HMCAseTrans_DS.research();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>UpdateOrderedQty</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HMCaseTrans     hmCaseTransLocal;
            super();
            try
            {
                ttsBegin;
                while select sum(Qty), ItemId, HMCaseTrans from HMPharmacyItemDispense
                group ItemId, HMCaseTrans
                {
                    select forupdate hmCaseTransLocal
                    where hmCaseTransLocal.RecId == HMPharmacyItemDispense.HMCaseTrans;
                    if(hmCaseTransLocal.HMServiceStatus == HMServiceStatus::Paid)
                    {
                        throw error("Cannot update quantity of paid medication");
                    }
                    hmCaseTransLocal.Qty = HMPharmacyItemDispense.Qty;
                    hmCaseTransLocal.modifiedField(fieldNum(HMCaseTrans,Qty));
                    hmCaseTransLocal.update();
                }
                ttsCommit;
                HMCaseTrans_ds.executeQuery();
                HMPharmacyItemDispense_ds.executeQuery();
                formHandlerClass.updateActualDeductible(performedServicesMap,HmcaseTrans.dataSource(),HmcaseTrans.HMResourceSchedulingAppointment,hmcaseTrans.HMCase, true);
                TotalDeductible.realValue(formHandlerClass.getTotalDeductible());
                HMCaseTrans_ds.executeQuery();
        
                info("Dispensed quantity updated successfully");
            }
            catch
            {
                error("Error in updating dispensed quantity");
                ttsAbort;
            }
        
            HMPharmacyItemDispense_ds.executeQuery();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPharmacyItemDispense_InventBatchId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            changeCompany(pharmacyCompany)
            {
                super();
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMPharmacyItemDispense_ItemId</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args        args;
            FormRun     formRun;
            ;
            //super();
            args = new Args();
            args.name(formstr(HMExamCodeLookup));
            args.caller(element);
            formRun = classfactory.formRunClass(args);
            formRun.init();
            this.performFormLookup(formRun);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMCaseTrans</Name>
			<Table>HMCaseTrans</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AlternatDrugStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AlternatePrimaryCaseTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CashAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CRMOrderId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Deductible</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductibleActual</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductibleCollectionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductiblePercentage</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DeductiblePerUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Discount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscountAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiscPercent2</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClaimTableSetup_PatientStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMItemCptPcsCodes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingAppointment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingAppointmentInvent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMServiceStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Instructions</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InsuranceAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventDim</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsPPS</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OrderedQty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ParentCaseTransId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientResponsibility</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PharmacyBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Protocol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RelatedAppointmentRecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RemainingBillAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportUrl</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesPrice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SettledAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TotalAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Urgency</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WriteOff</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMCase</JoinSource>
			<LinkType>Active</LinkType>
			<AllowCreate>No</AllowCreate>
			<InsertAtEnd>No</InsertAtEnd>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMCase</Name>
			<Table>HMCase</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AddmisionDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdmittingDiagnosisCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CaseNo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CaseStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Clinic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CRMCaseRefID</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CSVFileGenerated</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DiagnosisandProcedureCodeQualifier</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DischargeDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DischargeStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocumentControlNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ecia</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ecib</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Ecic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ECode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnit_Room</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCaseReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCaseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMFinancialClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMParentCase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientInsurance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPPSCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMRoomType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OperatingPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OtherPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OtherPhysician1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientReasonA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientReasonB</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientReasonC</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PointOfOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAdmittingDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrincipalDiagnosisCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrincipalProcedureCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrincipalProcedureDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Remarks</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>serviceDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TypeOfAdmission</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMPatient</Name>
			<Table>HMPatient</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AgeInDays</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AgeInMonths</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BirthTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BloodGroup</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BoxId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CallNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CanContact</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CivicAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactFirst</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ContactPhoneMobile</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardToken</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CriticalMedicalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CustTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirPartyRelationshipNextToKin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DirPartyTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DrivingLicenseNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmployeeNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Employer</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Employment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmploymentEmail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmploymentFax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmploymentLogisticsLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmploymentPhone</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EncounterActive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Executive</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExecutiveProtocol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ExtraCoveredByClient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FamilyPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Field1</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FileLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FormProvision</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Gender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HasCareBookRegistration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmEthnicOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HcmLanguageCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Height</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HIPAA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HipaaDateAcknowledge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAgeValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBookingOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCalcBirthDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaffFamilyDoctor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMHijriDateOfBirth</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMHijriExpiryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMIdentificationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMLaboratories</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMNationalIdExpiryDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMNationalIdType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientAllergyInvestigationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientRestriction</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPharmacy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMProfession</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMRaceCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMReferringPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InClinicFileLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsAuthorized</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOnHold</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOutstanding</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsVIP</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>JobTitle</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LogisticsAddressCountryRegion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NameSuffix</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OtherName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PassportExpireDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PassportNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientHighlights</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalChartNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PictureRefused</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Pilot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreEmployment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreEmploymentProtocol</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrefModeOfCommunication</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProfessionalStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProvincialHealthCardExpDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ProvincialHealthCardNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RAMQ</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTableMerge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReasonTablePatientDeactivate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecallDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReferringPhysician</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefusedToProvidePicture</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefuseToSign</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RefuseToSignAcknowledge</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegisteredBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RegistrationDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Relationship</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RISRegistered</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Salutation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SelfEmployed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>smmBusRelTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SocialSecurityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TextOnInvoice</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Weight</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMCase</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingAppointmentDS</Name>
			<Table>HMResourceSchedulingAppointment</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ActualArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AdmissionOrderSource</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentConfirmationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentEndTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentReason</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AppointmentTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ArrivalTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Bed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BOMVersion</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BookingNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChartPrepared</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ChiefComplaint</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClientBillingLogisticsPostalAddress</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ClientReportLogisticsPostalAddres</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CopyOfEmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreatedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardToken</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CreditCardTokenRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CriticalMedicalInformation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultDimension</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DispositionComments</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DispositionFollowUp</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DocuRef</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Duration</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmailStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EmployeeNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EODProcessed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinanceBillingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FinanceBillingStatus_Client</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ForceBookingStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FreeFollowUpAvailed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>GOPNum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAnesthesiaType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMAppointmentType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBookingOrigin</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCancellationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMCase</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMConfirmationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMInsuranceContractClassOrPlans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitAdmissionWard</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnitServiceLocation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientInsurance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPatientVisit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMRecurrentApptDetail</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster_PerformingDoctor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingPlanningObject</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceSchedulingTypeCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMScheduleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMTreatmentClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMWaitingList</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ImportedNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InclinicNotes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncompleteInfoLog</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IncompleteReserveAppointmentTaskGeneratd</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsDelayed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsHotspot</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOnlineAppointment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsOverBooked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsReconfirmEmailSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsSpecificConsultant</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LedgerJournalTable_AdvancePayment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ModifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Notes</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientContact</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PatientRequestor</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PhysicalChartRequired</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PONum</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthorizationStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PreAuthValidDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PrimaryAppointment</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PriorityNumber</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Referral</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReportSentContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RequestorContactPerson</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RescheduleWithoutConfirmation</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResultExpectedDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ResultVisitStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SalesTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SendEmailTo</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SmsSent</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SysOutgoingEmailTable</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>WalkinPatient</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<AllowCreate>No</AllowCreate>
			<AllowDelete>No</AllowDelete>
			<AllowEdit>No</AllowEdit>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>InventDim</Name>
			<Table>InventDim</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>configId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventColorId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventDimId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventGtdId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventOwnerId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventProfileId_RU</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>inventSerialId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSiteId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventSizeId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStatusId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventStyleId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>LicensePlateId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SHA1HashHex</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSLocationId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>wMSPalletId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMCaseTrans</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMPharmacyItemDispense</Name>
			<Table>HMPharmacyItemDispense</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>HMCaseTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMRetailStoreId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>InventBatchId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ItemId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Price</DataField>
					<Visible>No</Visible>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Qty</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<AllowEdit>No</AllowEdit>
					<DataField>UnitOfMeasureSymbol</DataField>
					<Enabled>No</Enabled>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MAZ8417</Caption>
		<Style xmlns="">SimpleList</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">Edit</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPatientChargeEntryNewPaymentPharmacy</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>460175066</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMPatientChargeEntryNewPaymentPharmacy</MenuItemName>
										<Text>@MAZ11987</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMServiceItemMarkPaid</Name>
										<ElementPosition>920350134</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>HMServiceItemMarkPaid</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPatientChargeEntryNewPaymentDialog</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>971480697</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMPatientChargeEntryNewPaymentDialog</MenuItemName>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPaymentRefunds</Name>
										<ElementPosition>1022611260</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>HMPaymentRefunds</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPatientAdvancePaymentPosting</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1227133512</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<AutoRefreshData>Yes</AutoRefreshData>
										<MenuItemName>HMPatientAdvancePaymentPosting</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<NeedsRecord>Yes</NeedsRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPatientPaymentSettlements</Name>
										<ElementPosition>1482786327</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>HMPatientPaymentSettlements</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>buttonVoucherTrans</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1738439142</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>LedgerTransVoucher1</MenuItemName>
										<SaveRecord>No</SaveRecord>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMTableofbenefits</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1863424962</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<MenuItemName>HMInsuranceContractCarrierCombination</MenuItemName>
										<Text>@MAZ13120</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMClaimAdministrationFormReport</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1988410783</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMClaimAdministrationFormReport</MenuItemName>
										<MenuItemType>Action</MenuItemType>
										<Text>@MAZ13516</Text>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPatientAppointmentPrescription</Name>
										<ElementPosition>2057295013</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMPatientAppointmentPrescription</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMPaymentReceiptReport</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>2126179244</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMPaymentReceiptReport</MenuItemName>
										<MenuItemType>Action</MenuItemType>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormMenuFunctionButtonControl">
										<Name>HMMedicationLabelReportController</Name>
										<ElementPosition>2138961885</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>MenuFunctionButton</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
										<MenuItemName>HMMedicationLabelReportController</MenuItemName>
										<MenuItemType>Output</MenuItemType>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Caption>Payments</Caption>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Main</Name>
						<ElementPosition>966367640</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStaticTextControl">
								<Name>MainInstruction</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>StaticText</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<FontSize>13</FontSize>
								<ForegroundColor>ScrollBar</ForegroundColor>
								<Style>MainInstruction</Style>
								<Text>@MAZ6569</Text>
							</AxFormControl>
						</Controls>
						<Columns>2</Columns>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Group_</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1556925643</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>AccountDetails_SO</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>613566756</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PatientNumberSO</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ11373</HelpText>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>patientChartNum</DataMethod>
										<DataSource>HMPatient</DataSource>
										<Label>@MAZ11856</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>PatientNameSO</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataMethod>patientName</DataMethod>
										<DataSource>HMPatient</DataSource>
										<Label>@MAZ9</Label>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>GroupDetiailsAndPreAuth</Name>
								<Type>Group</Type>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>GroupDetails</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>997045978</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>AppointmentGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>954437174</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>AppointmentNumber</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>292838678</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>AppointmentNumber[1]</DataField>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ8923</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>CaseNumber</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>439258018</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>CaseNo[1]</DataField>
														<DataSource>HMCase</DataSource>
														<Label>@MAZ:HMCaseNumber</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>PatientNumber</Name>
														<ElementPosition>585677358</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11373</HelpText>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>patientChartNum</DataMethod>
														<DataSource>HMPatient</DataSource>
														<Label>@MAZ11856</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>Patient</Name>
														<ElementPosition>780903144</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>patientName</DataMethod>
														<DataSource>HMPatient</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>DoctorName</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>959860114</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>getAppointmentResource</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ65</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>ApptDateTime</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1138817084</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormDateControl">
																<Name>HMResourceSchedulingAppointmentDS_AppointmentDate</Name>
																<ElementPosition>1073741822</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Date</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>AppointmentDate[1]</DataField>
																<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
																<Label>@MAZ:HMAppointmentDate</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormTimeControl">
																<Name>HMResourceSchedulingAppointmentDS_AppointmentTime</Name>
																<ElementPosition>1610612733</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Time</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>AppointmentTime[1]</DataField>
																<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
																<Label>@MAZ:HMAppointmentTime</Label>
															</AxFormControl>
														</Controls>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>ExpectedCharges</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1317774055</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11998</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ11997</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>AppointmentOutstandingToPay</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1476395006</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11993</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ11994</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>CaseAmount</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1555705481</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ13575</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ13576</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TotalDeductible</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1635015957</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11991</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>Deductible</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>AppointmentPayments</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1805838520</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11991</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>totalAppointmentAdvancePayments</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ2727</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>AppointmentAvailableAmount</Name>
														<AllowEdit>No</AllowEdit>
														<ElementPosition>1976661083</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ11996</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Visible>No</Visible>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>totalAvailableAmount</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ11995</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<Columns>2</Columns>
												<Caption>@MAZ3465</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>PaymentDetails</Name>
												<ElementPosition>1431655763</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<Visible>No</Visible>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TotalInvoiceAmount</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ12001</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>patientTotalInvoiceAmount</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ12002</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TotalAdvancePaid</Name>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ12000</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>patientTotalAdvancePayments</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ2727</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>TotalAvailableAmount</Name>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<HelpText>@MAZ12005</HelpText>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<Width>100</Width>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataMethod>patientTotalAvlblAmount</DataMethod>
														<DataSource>HMResourceSchedulingAppointmentDS</DataSource>
														<Label>@MAZ12004</Label>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<Caption>Payment details</Caption>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>InsuranceDetails</Name>
												<ElementPosition>1789569704</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InsuranceName</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>715827880</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ13045</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InsuranceContract</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1073741820</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ13053</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InsuranceNetwork</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1207959547</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@SYS30485</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>InsuranceClass</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1342177275</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>SizeToAvailable</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ13052</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormDateControl">
														<Name>InsuranceExpirationDate</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1503238549</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Date</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>@MAZ13050</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormIntegerControl">
														<Name>HMMaxOutPatientDeductibleLimit</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1664299823</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Integer</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>HMMaxOutPatientDeductibleLimit</ExtendedDataType>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>HMDeductibleMainMemberAmount</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1825361097</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>HMDeductibleMainMemberAmount</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>HMDeductibleMainMemberPercentage</Name>
														<AllowEdit>No</AllowEdit>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1986422371</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<ExtendedDataType>HMDeductibleMainMemberPercentage</ExtendedDataType>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
												</Controls>
												<Columns>3</Columns>
												<Caption>@MAZ8810</Caption>
											</AxFormControl>
										</Controls>
										<Columns>3</Columns>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>PreAuthGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1380525200</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormDateControl">
												<Name>HMCase_PreAuthValidDate</Name>
												<ElementPosition>858993458</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Date</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PreAuthValidDate[1]</DataField>
												<DataSource>HMCase</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormComboBoxControl">
												<Name>HMCase_PreAuthorizationStatus</Name>
												<ElementPosition>1288490187</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>ComboBox</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PreAuthorizationStatus</DataField>
												<DataSource>HMCase</DataSource>
												<Items />
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormStringControl">
												<Name>HMCase_PreAuthorizationNumber</Name>
												<ElementPosition>1717986916</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>String</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<DataField>PreAuthorizationNumber[1]</DataField>
												<DataSource>HMCase</DataSource>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ6877</Caption>
									</AxFormControl>
								</Controls>
								<Columns>2</Columns>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>PaymentAndServiceGroup</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1764004422</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>ServiceGRoup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>858993458</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>ServiceDetailGroup</Name>
												<AutoDeclaration>Yes</AutoDeclaration>
												<ElementPosition>1431655764</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>SizeToAvailable</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormActionPaneControl">
														<Name>ServiceActionPane</Name>
														<ElementPosition>858993458</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>ActionPane</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormActionPaneTabControl">
																<Name>ServiceActionPaneTab</Name>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>ActionPaneTab</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonGroupControl">
																		<Name>RecordsBasic</Name>
																		<ElementPosition>954437176</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ButtonGroup</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormCommandButtonControl">
																				<Name>DeleteButton</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1431655764</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>CommandButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<Visible>No</Visible>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
																				<Command>DeleteRecord</Command>
																				<NormalImage>Delete</NormalImage>
																				<Primary>Yes</Primary>
																				<SaveRecord>No</SaveRecord>
																				<Text>@SYS14425</Text>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>Vertical</ArrangeMethod>
																		<DataSource>HMCaseTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormButtonGroupControl">
																		<Name>ServiceButtonGroup</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1431655764</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ButtonGroup</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<Controls>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>HMPatientChargeEntryMedicationDispense</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>477218588</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<Visible>No</Visible>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<MenuItemName>HMPatientChargeEntryMedicationDispense</MenuItemName>
																				<MenuItemType>Action</MenuItemType>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>InventDimParmFixed</Name>
																				<ElementPosition>715827882</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<MenuItemName>InventDimParmFixed</MenuItemName>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormDropDialogButtonControl">
																				<Name>HMPatientChargeEntryOverrideDeductibe</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1073741823</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>DropDialogButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMCaseTrans</DataSource>
																				<MenuItemName>HMPatientChargeEntryOverrideDeductibe</MenuItemName>
																				<NeedsRecord>Yes</NeedsRecord>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>HMPatientChargeEntryAdvPayPackageDetails</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1431655764</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMCaseTrans</DataSource>
																				<MenuItemName>HMPatientChargeEntryAdvPayPackageDetails</MenuItemName>
																			</AxFormControl>
																			<AxFormControl xmlns=""
																				i:type="AxFormMenuFunctionButtonControl">
																				<Name>HMResourceSchedulingAppointmentOrder</Name>
																				<AutoDeclaration>Yes</AutoDeclaration>
																				<ElementPosition>1789569705</ElementPosition>
																				<FilterExpression>%1</FilterExpression>
																				<HeightMode>Auto</HeightMode>
																				<Type>MenuFunctionButton</Type>
																				<VerticalSpacing>-1</VerticalSpacing>
																				<WidthMode>Auto</WidthMode>
																				<FormControlExtension
																					i:nil="true" />
																				<DataSource>HMCaseTrans</DataSource>
																				<MenuItemName>HMResourceSchedulingAppointmentOrder</MenuItemName>
																				<NeedsRecord>Yes</NeedsRecord>
																			</AxFormControl>
																		</Controls>
																		<ArrangeMethod>Vertical</ArrangeMethod>
																	</AxFormControl>
																</Controls>
																<AlignChild>No</AlignChild>
																<AlignChildren>No</AlignChildren>
																<ArrangeMethod>Vertical</ArrangeMethod>
															</AxFormControl>
														</Controls>
														<AlignChild>No</AlignChild>
														<AlignChildren>No</AlignChildren>
														<ArrangeMethod>Vertical</ArrangeMethod>
														<Style>Strip</Style>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGridControl">
														<Name>ServiceGrid</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1288490187</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<Height>500</Height>
														<HeightMode>Auto</HeightMode>
														<Type>Grid</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>IsMarkedForPayment</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>613566756</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@SYS24864</HelpText>
																<Type>CheckBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataMethod>editIsMarkedForPayment</DataMethod>
																<DataSource>HMCaseTrans</DataSource>
																<Label>@SYS19120</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormCheckBoxControl">
																<Name>IsMarkedForSchedule</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>920350134</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>@MAZ13454</HelpText>
																<Type>CheckBox</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataMethod>editIsMarkedForSchedule</DataMethod>
																<DataSource>HMCaseTrans</DataSource>
																<Label>@SYS6793</Label>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>FieldGroup1</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1227133512</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>HMCaseTrans_ItemId</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>536870910</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>ItemId[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>Description</Name>
																		<ElementPosition>660764197</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>getitemname</DataMethod>
																		<DataSource>HMCaseTrans</DataSource>
																		<Label>@RUP79</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>HMCaseTrans_PatientResponsibility</Name>
																		<ElementPosition>784657484</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PatientResponsibility</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>HMCaseTrans_Protocol</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>908550771</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Protocol[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Label>@MAZ6974</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>HMCaseTrans_BillingStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1032444058</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>BillingStatus</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_OrderedQty</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1094390701</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>OrderedQty[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_Qty</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1156337344</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Qty[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_DiscountAmount</Name>
																		<ElementPosition>1218283988</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DiscountAmount[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_DeductiblePercentage</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1280230632</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DeductiblePercentage[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_Deductible</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1404123919</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>Deductible[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_DeductibleActual</Name>
																		<ElementPosition>1528017206</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DeductibleActual[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																</Controls>
																<BackgroundColor>WindowBackground</BackgroundColor>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>HMCaseTrans_InsuranceAmount</Name>
																<ElementPosition>1651910493</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<DataField>InsuranceAmount</DataField>
																<DataSource>HMCaseTrans</DataSource>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>ChildGroup1</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1227133512</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_TotalAmount</Name>
																		<ElementPosition>2023590354</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>TotalAmount[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>dueFromPatient</Name>
																		<ElementPosition>1899697067</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>dueFromPatient</DataMethod>
																		<DataSource>HMCaseTrans</DataSource>
																		<Label>@MAZ13403</Label>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_CashAmount</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1775803780</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>CashAmount[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																</Controls>
																<BackgroundColor>WindowBackground</BackgroundColor>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>InventoryDimensions</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1533916890</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_configId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>configId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventSizeId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventSizeId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventColorId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventColorId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventStyleId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventStyleId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventSiteId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventSiteId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventLocationId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventLocationId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_inventBatchId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>inventBatchId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_wMSLocationId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>wMSLocationId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_inventSerialId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>inventSerialId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventStatusId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventStatusId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_LicensePlateId</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>LicensePlateId</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventOwnerId_RU</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventOwnerId_RU</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventProfileId_RU</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventProfileId_RU</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>InventoryDimensions_InventGtdId_RU</Name>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>InventGtdId_RU</DataField>
																		<DataSource>InventDim</DataSource>
																	</AxFormControl>
																</Controls>
																<BackgroundColor>WindowBackground</BackgroundColor>
																<DataGroup>InventoryDimensions</DataGroup>
																<DataSource>InventDim</DataSource>
															</AxFormControl>
															<AxFormControl xmlns=""
																i:type="AxFormGroupControl">
																<Name>FieldGroup2</Name>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1840700268</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<Type>Group</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Controls>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>HMCaseTrans_Unit</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>238609294</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<CacheDataMethod>Yes</CacheDataMethod>
																		<DataMethod>salesUnitId</DataMethod>
																		<DataSource>HMCaseTrans</DataSource>
																		<Label>Unit</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_SalesPrice</Name>
																		<ElementPosition>357913941</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>SalesPrice[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>HMCaseTrans_HMServiceStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>686001720</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>HMServiceStatus</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_DiscPercent1</Name>
																		<ElementPosition>1014089499</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DiscPercent1[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormRealControl">
																		<Name>HMCaseTrans_DiscPercent2</Name>
																		<ElementPosition>1342177278</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Real</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>DiscPercent2[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<NoOfDecimals>-1</NoOfDecimals>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>HMCaseTrans_AlternatDrugStatus</Name>
																		<AllowEdit>No</AllowEdit>
																		<ElementPosition>1454025384</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>AlternatDrugStatus</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>relatedAppointmentNumber</Name>
																		<AutoDeclaration>Yes</AutoDeclaration>
																		<ElementPosition>1565873491</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataMethod>relatedAppointmentNumber</DataMethod>
																		<DataSource>HMCaseTrans</DataSource>
																		<Label>@MAZ8923</Label>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormComboBoxControl">
																		<Name>HMCaseTrans_PreAuthorizationStatus</Name>
																		<ElementPosition>1789569705</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>ComboBox</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PreAuthorizationStatus</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																		<Items />
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormDateControl">
																		<Name>HMCaseTrans_PreAuthValidDate</Name>
																		<ElementPosition>1908874352</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>Date</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PreAuthValidDate[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																	</AxFormControl>
																	<AxFormControl xmlns=""
																		i:type="AxFormStringControl">
																		<Name>HMCaseTrans_PreAuthorizationNumber</Name>
																		<ElementPosition>2028178999</ElementPosition>
																		<FilterExpression>%1</FilterExpression>
																		<HeightMode>Auto</HeightMode>
																		<Type>String</Type>
																		<VerticalSpacing>-1</VerticalSpacing>
																		<Visible>No</Visible>
																		<WidthMode>Auto</WidthMode>
																		<FormControlExtension
																			i:nil="true" />
																		<DataField>PreAuthorizationNumber[1]</DataField>
																		<DataSource>HMCaseTrans</DataSource>
																	</AxFormControl>
																</Controls>
																<BackgroundColor>WindowBackground</BackgroundColor>
															</AxFormControl>
														</Controls>
														<DataSource>HMCaseTrans</DataSource>
														<ShowRowLabels>No</ShowRowLabels>
														<VisibleRows>9</VisibleRows>
														<VisibleRowsMode>Fixed</VisibleRowsMode>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormGroupControl">
														<Name>TotalMarkedGroup</Name>
														<ElementPosition>1717986916</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>SizeToAvailable</HeightMode>
														<Type>Group</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Controls>
															<AxFormControl xmlns=""
																i:type="AxFormRealControl">
																<Name>TotalMarkedAmount</Name>
																<AllowEdit>No</AllowEdit>
																<AutoDeclaration>Yes</AutoDeclaration>
																<ElementPosition>1431655764</ElementPosition>
																<FilterExpression>%1</FilterExpression>
																<HeightMode>Auto</HeightMode>
																<HelpText>Total amount of marked items</HelpText>
																<Type>Real</Type>
																<VerticalSpacing>-1</VerticalSpacing>
																<WidthMode>Auto</WidthMode>
																<FormControlExtension
																	i:nil="true" />
																<Label>Total amount</Label>
																<NoOfDecimals>-1</NoOfDecimals>
															</AxFormControl>
														</Controls>
													</AxFormControl>
												</Controls>
											</AxFormControl>
										</Controls>
										<Caption>@MAZ13237</Caption>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>HorizontalSplitter</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1288490187</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<Style>SplitterHorizontalContainer</Style>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormGroupControl">
										<Name>DispensingGroup</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1717986916</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>SizeToAvailable</HeightMode>
										<Type>Group</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>SizeToAvailable</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls>
											<AxFormControl xmlns=""
												i:type="AxFormGroupControl">
												<Name>DispensingBtnHeaderGrp</Name>
												<ElementPosition>1073741822</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<HeightMode>Auto</HeightMode>
												<Type>Group</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<WidthMode>Auto</WidthMode>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>ScanBarCode</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>818089008</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Label>Scan Barcode</Label>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>AutoLoadAll</Name>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Skip>Yes</Skip>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>Auto-Load All</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>AlternativeDrug</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Skip>Yes</Skip>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>Alternative Drug</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>ClearDeliveryList</Name>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Skip>Yes</Skip>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>Clear Delivery List</Text>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormButtonControl">
														<Name>UpdateOrderedQty</Name>
														<ElementPosition>1994091957</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Skip>Yes</Skip>
														<Type>Button</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<Text>@MAZ13569</Text>
													</AxFormControl>
												</Controls>
												<ArrangeMethod>HorizontalRight</ArrangeMethod>
												<Columns>5</Columns>
												<DataSource>HMPharmacyItemDispense</DataSource>
											</AxFormControl>
											<AxFormControl xmlns=""
												i:type="AxFormGridControl">
												<Name>Grid</Name>
												<ElementPosition>1610612733</ElementPosition>
												<FilterExpression>%1</FilterExpression>
												<Type>Grid</Type>
												<VerticalSpacing>-1</VerticalSpacing>
												<FormControlExtension
													i:nil="true" />
												<Controls>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMPharmacyItemDispense_InventBatchId</Name>
														<ElementPosition>613566756</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>InventBatchId</DataField>
														<DataSource>HMPharmacyItemDispense</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMPharmacyItemDispense_ItemId</Name>
														<AutoDeclaration>Yes</AutoDeclaration>
														<ElementPosition>920350134</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>ItemId</DataField>
														<DataSource>HMPharmacyItemDispense</DataSource>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>HMPharmacyItemDispense_Price</Name>
														<ElementPosition>1227133512</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Price</DataField>
														<DataSource>HMPharmacyItemDispense</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormRealControl">
														<Name>HMPharmacyItemDispense_Qty</Name>
														<ElementPosition>1533916890</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>Real</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>Qty</DataField>
														<DataSource>HMPharmacyItemDispense</DataSource>
														<NoOfDecimals>-1</NoOfDecimals>
													</AxFormControl>
													<AxFormControl xmlns=""
														i:type="AxFormStringControl">
														<Name>HMPharmacyItemDispense_UnitOfMeasureSymbol</Name>
														<ElementPosition>1840700268</ElementPosition>
														<FilterExpression>%1</FilterExpression>
														<HeightMode>Auto</HeightMode>
														<Type>String</Type>
														<VerticalSpacing>-1</VerticalSpacing>
														<WidthMode>Auto</WidthMode>
														<FormControlExtension
															i:nil="true" />
														<DataField>UnitOfMeasureSymbol</DataField>
														<DataSource>HMPharmacyItemDispense</DataSource>
													</AxFormControl>
												</Controls>
												<DataSource>HMPharmacyItemDispense</DataSource>
											</AxFormControl>
										</Controls>
										<Columnspace>0</Columnspace>
										<ColumnspaceMode>Fixed</ColumnspaceMode>
										<DataSource>HMPharmacyItemDispense</DataSource>
									</AxFormControl>
								</Controls>
								<Columnspace>0</Columnspace>
								<ColumnspaceMode>Fixed</ColumnspaceMode>
							</AxFormControl>
						</Controls>
					</AxFormControl>
				</Controls>
				<Style>DialogContent</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>