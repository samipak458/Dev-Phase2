<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMColourCodingParameters</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMColourCodingParameters extends FormRun
{
    //TODO: AX7 code conflict
    //HMOutpatient_RadScheduleView.UserControl1   scheduler;
    int                                         red,green,blue;
    str                                         statusValue;
    #AOT
    str                                         Name,Value;
    HMEnumValuesTmp                             HMEnumValuesTmpBuffer;
   // HMEnumValuesTmp                             HMEnumValuesTmp;
    int                                         elementId;
    #define.EnumType("EnumType")
}
]]></Source>
			</Method>
			<Method>
				<Name>fillEnumValuesTmpBuffer</Name>
				<Source><![CDATA[
    public void fillEnumValuesTmpBuffer(str _enum)
    {
        DictEnum    enum = new DictEnum(enumName2Id(_enum));
        int         i;
    
        for (i = 0; i < enum.values(); i++)
        {
            // info(enum.index2Label(i));
            HMEnumValuesTmpBuffer.EnumValue = enum.index2Label(i);
            HMEnumValuesTmpBuffer.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    public void getValue()
    {
        str         myProp;
        TreeNode    treeMenuItem;
        TreeNode    treeDisplayMenu;
        HMEnumValuesTmpBuffer = null;
    
        if (HMColourCodingParameters.Type == HMElementType::EDT)
        {
            treeMenuItem    = TreeNode::findNode(#ExtendedDataTypesPath);
            treeDisplaymenu = TreeNode::findNode(#ExtendedDataTypesPath + '\\' + HMColourCodingParameters.ElementName);
            myProp          = treeDisPlayMenu.AOTgetProperty(#EnumType);
            if (myProp)
            {
                element.fillEnumValuesTmpBuffer(myProp);
            }
            else
            {
                info("@MAZ8500");
            }
        }
        else
        {
            element.fillEnumValuesTmpBuffer(HMColourCodingParameters.ElementName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        //scheduler           = ManagedHost.control();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMColourCodingParameters</Name>
				<Methods>
					<Method>
						<Name>active</Name>
						<Source><![CDATA[
        public int active()
        {
            int ret;
        
            ret = super();
        
            if (ret)
            {
                if (HMColourCodingParameters.RecId)
                {
                    [red,green,blue] = WinAPI::RGBint2Con(HMColourCodingParameters.ColourCode);
                    WindowColour.backgroundColor(WinAPI::RGB2int(red, green, blue));
                    //scheduler.showPreview(red, green, blue, HMColourCodingParameters.ElementValue);
                    element.getValue();
                   // ElementName.text(HMColourCodingParameters.ElementName);
                    //ElementValue.text(HMColourCodingParameters.ElementValue);
                    //elementId = HMColourCodingParameters.ElementId;
                }
                else
                {
                    WindowColour.backgroundColor(WinAPI::RGB2int(255, 255, 255));
                    //scheduler.showPreview(255, 255, 255, "");
                    HMEnumValuesTmpBuffer = null;
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>displayOption</Name>
						<Source><![CDATA[
        public void displayOption(Common _record, FormRowDisplayOption _options)
        {
            HMColourCodingParameters colourCodingParameters = _record;
        
            if (_record.RecId)
            {
                _options.backColor(colourCodingParameters.ColourCode);
                _options.affectedElementsByControl(WindowColour.id());
            }
            else
            {
                _options.backColor(WinAPI::RGB2int(255,255,255));
                _options.affectedElementsByControl(WindowColour.id());
            }
        
            super(_record, _options);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Colour</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            container colour;
        
            super();
        
            [red,green,blue]    = WinAPI::RGBint2Con(WindowColour.backgroundColor());
            colour              = WinAPI::chooseColor(element.hWnd(),red,green,blue,null,true);
            if (colour)
            {
                [red, green, blue] = colour;
                WindowColour.backgroundColor(WinAPI::RGB2int(red, green, blue));
                //scheduler.showPreview(red, green, blue, HMColourCodingParameters.ElementValue);
                HMColourCodingParameters.ColourCode = WinAPI::RGB2int(red, green, blue);
                HMColourCodingParameters_ds.research(true);
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ElementName</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            //super();
            Query                   query           = new Query();
            QueryBuildDataSource    qbds;
            SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(UtilElements), this);
        
            // For filtering data in lookup
            qbds = query.addDataSource(tableNum(UtilElements));
        
            if (HMColourCodingParameters.Type == HMElementType::Enum)
            {
                qbds.addRange(fieldNum(UtilElements,recordType)).value(SysQuery::value(UtilElementType::Enum));
            }
            else
            {
                qbds.addRange(fieldNum(UtilElements,recordType)).value(SysQuery::value(UtilElementType::ExtendedType));
            }
            //qbds.addRange(fieldNum(UtilElements, utilLevel)).value(SysQuery::value(global::currentAOLayer()));
            qbds.addRange(fieldNum(UtilElements, utilLevel)).value(SysQuery::valueNot(UtilEntryLevel::sys));
        
            sysTableLookup.addLookupfield(fieldNum(UtilElements, Name));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean         ret;
            str             myProp;
            TreeNode        treeMenuItem;
            TreeNode        treeDisplayMenu;
            UtilElements    UtilElementsLocal;
            HMEnumValuesTmpBuffer = null;
        
            ret = super();
        
            if (ret)
            {
                if (this.valueStr() != '')
                {
                    if (HMColourCodingParameters.Type == HMElementType::EDT)
                    {
                        select RecId from UtilElementsLocal
                            where UtilElementsLocal.recordType == UtilElementType::ExtendedType
                           // && UtilElementsLocal.utilLevel == global::currentAOLayer()
                            && UtilElementsLocal.utilLevel != UtilEntryLevel::sys
                            && UtilElementsLocal.name == this.valueStr();
        
                        // if typed value is a valid EDT
                        if (UtilElementsLocal.RecId)
                        {
                            treeMenuItem    = TreeNode::findNode(#ExtendedDataTypesPath);
                            treeDisplaymenu = TreeNode::findNode(#ExtendedDataTypesPath + '\\' + this.valueStr());
                            myProp          = treeDisPlayMenu.AOTgetProperty(#EnumType);
                            if (myProp)
                            {
                               element.fillEnumValuesTmpBuffer(myProp);
                            }
                            else
                            {
                                info("@MAZ8500");
                            }
                            Name                                = this.valueStr();
                            elementId                           = extendedTypeName2Id(Name);
                            HMColourCodingParameters.ElementId  = elementId;
                        }
                        else
                        {
                            warning(strFmt("@SYS316757","@MAZ8625"));
                            HMColourCodingParameters.ElementName    = "";
                            HMColourCodingParameters.ElementId      = 0;
                            HMColourCodingParameters.ElementValue   = "";
                        }
                    }
                    else
                    {
                        select RecId from UtilElementsLocal
                            where UtilElementsLocal.recordType == UtilElementType::Enum
                           // && UtilElementsLocal.utilLevel == global::currentAOLayer()
                            && UtilElementsLocal.utilLevel != UtilEntryLevel::sys
                            && UtilElementsLocal.name == this.valueStr();
        
                        // if typed value is a valid Enum
                        if (UtilElementsLocal.RecId)
                        {
                            element.fillEnumValuesTmpBuffer(this.valueStr());
                            Name = this.valueStr();
                            elementId = enumName2Id(Name);
                            HMColourCodingParameters.ElementId = elementId;
                        }
                        else
                        {
                            warning(strFmt("@SYS316757","@SYS115333"));
                            HMColourCodingParameters.ElementName    = "";
                            HMColourCodingParameters.ElementId      = 0;
                            HMColourCodingParameters.ElementValue   = "";
                        }
                    }
        
                   // HMColourCodingParameters.ElementId = elementId;
                }
        
            }
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>ElementValue</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
           // super();
            Query           query           = new Query();
            SysTableLookup  sysTableLookup  = SysTableLookup::newParameters(tableNum(HMEnumValuesTmp), this);
        
            sysTableLookup.addLookupfield(fieldNum(HMEnumValuesTmp, EnumValue), true);
        
            // BP deviation documented
            sysTableLookup.parmTmpBuffer(HMEnumValuesTmpBuffer);
            sysTableLookup.performFormLookup();
        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
        
            ret = super();
        
            if (ret)
            {
                if (this.valueStr() != "")
                {
                    select RecId from HMEnumValuesTmpBuffer
                        where HMEnumValuesTmpBuffer.EnumValue == this.valueStr();
        
                    if (HMEnumValuesTmpBuffer.RecId == 0)
                    {
                        warning(strFmt("@SYS316757","@SYS71961"));
                        HMColourCodingParameters.ElementValue = "";
                    }
        
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMColourCodingParameters</Name>
			<Table>HMColourCodingParameters</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ColourCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ElementValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Priority</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertAtEnd>No</InsertAtEnd>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MAZ8451</Caption>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>RecordBasics</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Colour</Name>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ8503</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<ButtonDisplay>TextWithImageLeft</ButtonDisplay>
										<ImageLocation>AOTResource</ImageLocation>
										<NormalImage>HM_ColourPicker_ico</NormalImage>
										<Text>@MAZ8502</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group1</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>GridContainer</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>HMColourCodingParametersNew_Type</Name>
										<ElementPosition>536870910</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Type</DataField>
										<DataSource>HMColourCodingParameters</DataSource>
										<Items />
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElementName</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>805306365</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ElementName</DataField>
										<DataSource>HMColourCodingParameters</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElementLable</Name>
										<ElementPosition>1073741820</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Visible>No</Visible>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS94528</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>ElementValue</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1342177275</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>ElementValue</DataField>
										<DataSource>HMColourCodingParameters</DataSource>
										<Label>@SYS41043</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormImageControl">
										<Name>WindowColour</Name>
										<AllowEdit>No</AllowEdit>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612730</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<Height>10</Height>
										<HeightMode>Auto</HeightMode>
										<Type>Image</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<Width>10</Width>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<BackgroundColorRGB>
											<Red>5</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</BackgroundColorRGB>
										<ColorScheme>RGB</ColorScheme>
										<ForegroundColorRGB>
											<Red>8</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</ForegroundColorRGB>
										<Label>@MAZ8452</Label>
										<LabelForegroundColorRGB>
											<Red>8</Red>
											<Green>0</Green>
											<Blue>0</Blue>
										</LabelForegroundColorRGB>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormComboBoxControl">
										<Name>HMColourCodingParameters_Priority</Name>
										<ElementPosition>1744830457</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>ComboBox</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Priority</DataField>
										<DataSource>HMColourCodingParameters</DataSource>
										<Items />
									</AxFormControl>
								</Controls>
								<AlternateRowShading>No</AlternateRowShading>
								<DataSource>HMColourCodingParameters</DataSource>
								<HighlightActive>No</HighlightActive>
								<MultiSelect>No</MultiSelect>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Style>BorderlessGridContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>VSplitter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<FramePosition>Inside</FramePosition>
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Preview</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormManagedHostControl">
								<Name>ManagedHost</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>ManagedHost</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AssemblyName>HMOutpatient_RadScheduleView, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</AssemblyName>
								<RTLCapable>Yes</RTLCapable>
								<TypeName>HMOutpatient_RadScheduleView.UserControl1</TypeName>
							</AxFormControl>
						</Controls>
						<Caption>@SYS65316</Caption>
					</AxFormControl>
				</Controls>
				<Columns>3</Columns>
				<Columnspace>0</Columnspace>
				<ColumnspaceMode>Fixed</ColumnspaceMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>