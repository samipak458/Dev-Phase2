<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMPlanningObjectLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMPlanningObjectLookup extends FormRun
{
    containerClass conClass_Obj;
}
]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    public void closeSelect(str _selectString)
    {
        element.closeSelectRecord(HMResourceSchedulingPlanningObject);
    
        super(_selectString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectRecord</Name>
				<Source><![CDATA[
    public void closeSelectRecord(Common _selectedRecord)
    {
        element.args().caller().storePlanningObject(_selectedRecord.RecId);
        super(_selectedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        element.selectMode(HMResourceSchedulingPlanningObject_Description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsContainCheifComplaint</Name>
				<Source><![CDATA[
    public boolean IsContainCheifComplaint(RecId _chief, container _con)
    {
        boolean ret;
        int a;
        int j;
        container temp;
        for (a=1 ; a <= conLen(_con) ; a++ )
        {
          temp = conPeek(_con,a);
           j = conFind(temp,_chief);
            if(j != 0)
            {
                ret = true;
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean                         filterLookup;
        FormStringControl               callingControl;
    
        callingControl = SysTableLookup::getCallerStringControl(element.args());
        filterLookup = SysTableLookup::FilterLookupPreRun(callingControl,HMResourceSchedulingPlanningObject_Description, HMResourceSchedulingPlanningObject_DS);
    
        super();
    
        SysTableLookup::FilterLookupPostRun(filterLookup,callingControl.text(), HMResourceSchedulingPlanningObject_Description, HMResourceSchedulingPlanningObject_DS);
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMResourceSchedulingPlanningObject</Name>
				<Methods>
					<Method>
						<Name>showSuggestion</Name>
						<Source><![CDATA[
        [SysClientCacheDataMethodAttribute(true)]
        public display String10 showSuggestion(HMResourceSchedulingPlanningObject _objextId)
        {
            container   con;
            HMOrganizationChiefComplaint     HMOrganizationChiefComplaintLocal;
            str ret= "";
        
                if (conClass_Obj)
                {
                    con = conClass_Obj.value();
        
                    while select RecId,HMClinicalObservation  from HMOrganizationChiefComplaintLocal where HMOrganizationChiefComplaintLocal.HMOrganizationalUnit ==  _objextId.HMOrganizationalUnit
                    {
                        if(element.IsContainCheifComplaint(HMOrganizationChiefComplaintLocal.HMClinicalObservation,con))
                        {
                            ret = "@SYS323111";
                            break;
                        }
                    }
        
                }
                return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>createhmResourceSchedulingPlanningObjectQuery</Name>
						<Source><![CDATA[
        public void createhmResourceSchedulingPlanningObjectQuery()
        {
            boolean     ret;
            HMResourceSchedulingPlanningObject  HMResourceSchedulingPlanningObjectLocal;
        
            HMResourceSchedulingPlanningObject hmResourceSchedulingPlanningObjectForRole;
        
            HMCaseType  casetypeLocal;
        
            RecId hmClinicStaffRecId,PlanningObjectRecId;
            str activeUserRole;
            HMClinicStaff  hmClinicStaffWorker;
            boolean         roleExist,checkOpen;
            Common   tableBufferLocal;
            HMStaffNursingUnit  hmStaffNursingUnit;
            Query query;
            QueryRun queryRun;
            QueryBuildDataSource qbd;

            checkOpen = false;
            query =  new Query();
            hmClinicStaffWorker = HMClinicStaff::findByWorker(HcmWorkerLookup::currentWorker());
        
            activeUserRole   = hmClinicStaffWorker.Role();
        
            if(element.args().parmEnum() == HMCaseType::OutPatient)
            {
                DisplaySuggestion.visible(true);
                conClass_Obj = element.args().parmObject();
        
        
            }
            qbd = query.addDataSource(tableNum(HMResourceSchedulingPlanningObject));
            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
            addRange(fieldNum(HMResourceSchedulingPlanningObject,PlanningObjectStatus)).value(SysQuery::value(AllowanceStatus::Active));
        
            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
            //addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value("<"+date2Str(today(),213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Space,DateYear::Digits4,DateFlags::None)));
            addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value('<'+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
            //addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value("="+date2Str(today(),213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Space,DateYear::Digits4,DateFlags::None)));
            addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value('='+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
        
            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
            //addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value(">"+date2Str(today(),213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Space,DateYear::Digits4,DateFlags::None)));
            addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value('>'+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
            //addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value("="+date2Str(today(),213,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Space,DateYear::Digits4,DateFlags::None)));
            addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value('='+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
        
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,PlanningObjectStatus)).value(SysQuery::value(AllowanceStatus::Active));
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,AvailabilityStatus)).value(SysQuery::value(NoYes::No));
        
        
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value('<'+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,StartDate)).value(SysQuery::value('='+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
        
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value('>'+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
            qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,EndDate)).value(SysQuery::value('='+date2StrUSR(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateFlags::None)));
            if (element.args().record())
            {
                qbd.
                addRange(fieldNum(HMResourceSchedulingPlanningObject,HMClinicStaff)).value(SysQuery::value(element.args().record().RecId));
            }
        
        
            if(element.args().parm() == 'Appointment')
            {
        
                HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(element.args().parmEnum()));
            }
            else if(element.args().parmEnum() == HMCaseType::Physiotherapy)
            {
                conClass_Obj = element.args().parmObject();
                casetypeLocal = HMCaseType::Physiotherapy;
                DisplaySuggestion.visible(true);
                HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(element.args().parmEnum()));
                if (element.args().record().RecId != 0)
                {
                    qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(HMCaseType::Physiotherapy));
                    checkOpen = true;
                    //HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                    //addRange(fieldNum(HMResourceSchedulingPlanningObject,HMClinicStaff)).value(SysQuery::value(element.args().record().RecId));
        
                }
                else
                {
                    HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                  addRange(fieldNum(HMResourceSchedulingPlanningObject,RecId)).value(SysQuery::value(0));
                }
            }
        
            else if(element.args().parmEnum() == HMCaseType::InPatient)
            {
                HMResourceSchedulingPlanningObject_ds.queryBuildDataSource().clearDynalinks();
                HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(HMCaseType::InPatient));
                casetypeLocal = HMCaseType::InPatient;
                qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(HMCaseType::InPatient));
        
                checkOpen = true;
        
        
        
        
        
        
        
            }
            if(element.args().parmEnum() == HMCaseType::OutPatient)
            {
                HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(HMCaseType::OutPatient));
        
                if (element.args().record().RecId != 0)
                {
                    casetypeLocal = HMCaseType::OutPatient;
                    qbd.addRange(fieldNum(HMResourceSchedulingPlanningObject,CaseType)).value(SysQuery::value(HMCaseType::OutPatient));
                    checkOpen = true;
                    //HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                    //addRange(fieldNum(HMResourceSchedulingPlanningObject,HMClinicStaff)).value(SysQuery::value(element.args().record().RecId));
                }
                else
                {
                    HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).
                  addRange(fieldNum(HMResourceSchedulingPlanningObject,RecId)).value(SysQuery::value(0));
                }
            }
        
            if(checkOpen)
            {
                queryRun = new QueryRun(query);
                while (queryRun.next())
                {
        
                    tableBufferLocal = queryRun.get(tableNum(HMResourceSchedulingPlanningObject));
                    hmClinicStaffRecId = tableBufferLocal.(fieldNum(HMResourceSchedulingPlanningObject,HMClinicStaff));
                    PlanningObjectRecId = tableBufferLocal.(fieldNum(HMResourceSchedulingPlanningObject,RecId));
        
        
        
                    roleExist = false;
        
                    if(activeUserRole == "@MAZ1898"  || activeUserRole == "@MAZ2967" || activeUserRole == "@SYS82385" || activeUserRole == "@SYS108846")
                    {
                        select * from hmResourceSchedulingPlanningObjectForRole
                    where hmResourceSchedulingPlanningObjectForRole.HMClinicStaff == hmClinicStaffRecId
                    && (hmResourceSchedulingPlanningObjectForRole.CaseType == casetypeLocal  )
                    && hmResourceSchedulingPlanningObjectForRole.RecId == PlanningObjectRecId;
        
                        select * from hmStaffNursingUnit
                            where hmStaffNursingUnit.HMClinicStaff == hmClinicStaffWorker.RecId
                            && hmStaffNursingUnit.HMOrganizationalUnit == hmResourceSchedulingPlanningObjectForRole.HMOrganizationalUnit;
                        if(hmStaffNursingUnit.RecId != 0)
                        {
                            roleExist = true;
                        }
        
                        if(roleExist)
                        {
                            ret = true;
                            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).addRange(fieldNum(HMResourceSchedulingPlanningObject,RecId)).value(SysQuery::value(PlanningObjectRecId));
        
                            continue;
                        }
        
                    }
                    else if(activeUserRole == 'Doctor')
                    {
                        if (hmClinicStaffWorker.RecId == hmClinicStaffRecId)
                        {
                            ret = true;
                            HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).addRange(fieldNum(HMResourceSchedulingPlanningObject,RecId)).value(SysQuery::value(PlanningObjectRecId));
                            continue;
                        }
                    }
        
        
                }
                if(!ret)
                {
        
                    if (HcmWorkerLookup::currentWorker() != 0)
                    {
                        HMResourceSchedulingPlanningObject_Q.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject)).addRange(fieldNum(HMResourceSchedulingPlanningObject,RecId)).value(SysQuery::value(0));
                    }
                }
            }
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            super();
            this.createhmResourceSchedulingPlanningObjectQuery();
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMResourceSchedulingPlanningObject</Name>
			<Table>HMResourceSchedulingPlanningObject</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>AvailabilityStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>CaseType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Category</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DefaultScheduleType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>EndDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMClinicStaff</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationalUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMResourceMaster</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HotSpotType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HotSpotValue</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OverbookAllowed</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>PlanningObjectStatus</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ScheduleOnPublicHoliday</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SearchInterval</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>StartDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<AlwaysOnTop xmlns="">Yes</AlwaysOnTop>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<MaximizeBox xmlns="">No</MaximizeBox>
		<MinimizeBox xmlns="">No</MinimizeBox>
		<Style xmlns="">Lookup</Style>
		<WidthMode xmlns="">Column</WidthMode>
		<WindowResize xmlns="">Fixed</WindowResize>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>GridContainer</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HMResourceSchedulingPlanningObject_Code</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Code</DataField>
								<DataSource>HMResourceSchedulingPlanningObject</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HMResourceSchedulingPlanningObject_Description</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>HMResourceSchedulingPlanningObject</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>DisplaySuggestion</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1879048189</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataMethod>showSuggestion</DataMethod>
								<DataSource>HMResourceSchedulingPlanningObject</DataSource>
								<Label>@MAZ8386</Label>
							</AxFormControl>
						</Controls>
						<AlternateRowShading>Yes</AlternateRowShading>
						<DataSource>HMResourceSchedulingPlanningObject</DataSource>
						<ShowRowLabels>No</ShowRowLabels>
					</AxFormControl>
				</Controls>
				<FrameType>None</FrameType>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>