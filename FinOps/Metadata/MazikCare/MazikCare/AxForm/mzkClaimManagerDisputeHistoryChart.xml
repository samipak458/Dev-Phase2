<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>mzkClaimManagerDisputeHistoryChart</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class mzkClaimManagerDisputeHistoryChart extends FormRun
{
    CustCollectionsDisputeHistoryChartDataTmp disputeHistoryChartDataTmp;

    private static readonly str promiseToPay = enum2Str(CustVendDisputeStatus::PromiseToPay);

    private static readonly str promiseToPayBroken = enum2Str(CustVendDisputeStatus::PromiseToPayBroken);

    private static readonly str disputed = enum2Str(CustVendDisputeStatus::Disputed);

    private static readonly str other = "@AccountsReceivable:CustCollectionsDisputeHistoryChartOtherStatus";

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        element.buildTmpTableNoFilter();

        disputeHistoryChartData.linkPhysicalTableInstance(disputeHistoryChartDataTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>padChartDataForStatusWithZero</Name>
				<Source><![CDATA[
    private void padChartDataForStatusWithZero(str _status)
    {
        if (!CustCollectionsDisputeHistoryChartDataTmp::statusExists(disputeHistoryChartDataTmp, _status))
        {
            disputeHistoryChartDataTmp.Status = _status;
            disputeHistoryChartDataTmp.SumAmount = 0.0;
            disputeHistoryChartDataTmp.CountTrans = 0;
            disputeHistoryChartDataTmp.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatusIntoDisputeHistoryTmp</Name>
				<Source><![CDATA[
    private void insertStatusIntoDisputeHistoryTmp(CustVendDisputeStatus _status, str _statusStr, CustCollectionsCustomerFilterTmp _customerFilterTmp = null)
    {
        CustCollectionsDisputeHistoryChartData disputeHistoryView;

        if (prmIsDefault(_customerFilterTmp))
        {
            insert_recordset disputeHistoryChartDataTmp(SumAmount, CountTrans, Status)
                select sum(TransBalanceMST), sum(CustTransCount), _statusStr from disputeHistoryView
                    group by Status
                    where disputeHistoryView.Status == _status;
        }
        else
        {
            insert_recordset disputeHistoryChartDataTmp(SumAmount, CountTrans, Status)
                select sum(TransBalanceMST), sum(CustTransCount), _statusStr from disputeHistoryView
                    group by Status
                    where disputeHistoryView.Status == _status
                exists join _customerFilterTmp
                    where _customerFilterTmp.AccountNum == disputeHistoryView.AccountNum;
        }

        element.padChartDataForStatusWithZero(_statusStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOtherStatus</Name>
				<Source><![CDATA[
    private void insertOtherStatus(CustCollectionsCustomerFilterTmp _customerFilterTemp = null)
    {
        CustCollectionsDisputeHistoryChartData disputeHistoryView;

        if (prmIsDefault(_customerFilterTemp))
        {
            insert_recordset disputeHistoryChartDataTmp(SumAmount, CountTrans, Status)
                select sum(TransBalanceMST), sum(CustTransCount), other from disputeHistoryView
                    group by DataAreaId
                    where disputeHistoryView.Status != CustVendDisputeStatus::PromiseToPay &&
                          disputeHistoryView.Status != CustVendDisputeStatus::PromiseToPayBroken &&
                          disputeHistoryView.Status != CustVendDisputeStatus::Disputed;
        }
        else
        {
            insert_recordset disputeHistoryChartDataTmp(SumAmount, CountTrans, Status)
                select sum(TransBalanceMST), sum(CustTransCount), other from disputeHistoryView
                    group by DataAreaId
                    where disputeHistoryView.Status != CustVendDisputeStatus::PromiseToPay &&
                          disputeHistoryView.Status != CustVendDisputeStatus::PromiseToPayBroken &&
                          disputeHistoryView.Status != CustVendDisputeStatus::Disputed
                exists join _customerFilterTemp
                    where _customerFilterTemp.AccountNum == disputeHistoryView.AccountNum;
        }

        element.padChartDataForStatusWithZero(other);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasPoolFilter</Name>
				<Source><![CDATA[
    private boolean hasPoolFilter()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTmpTableNoFilter</Name>
				<Source><![CDATA[
    private void buildTmpTableNoFilter()
    {
        CustCollectionsDisputeHistoryChartData disputeHistoryView;
        
        delete_from disputeHistoryChartDataTmp;

        changecompany(curExt())
        {
            element.insertStatusIntoDisputeHistoryTmp(CustVendDisputeStatus::PromiseToPay, promiseToPay);
            
            element.insertStatusIntoDisputeHistoryTmp(CustVendDisputeStatus::PromiseToPayBroken, promiseToPayBroken);
            
            element.insertStatusIntoDisputeHistoryTmp(CustVendDisputeStatus::Disputed, disputed);
            
            element.insertOtherStatus();

            select sum(SumAmount) from disputeHistoryChartDataTmp;

            if (disputeHistoryChartDataTmp.SumAmount == 0)
            {
                delete_from disputeHistoryChartDataTmp;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTempTables</Name>
				<Source><![CDATA[
    public void updateTempTables()
    {
        element.buildTmpTableNoFilter();
        element.setTouched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTouched</Name>
				<Source><![CDATA[
    public void setTouched()
    {
        disputeHistoryChartData_ds.executeQuery();
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>CollectionsHistoryChart</Name>
				<Type>Container</Type>
				<Methods>
					<Method>
						<Name>DrillThrough</Name>
						<Source><![CDATA[
        public void DrillThrough(str _contextObject)
        {
            str context = subStr(_contextObject, 2, strLen(_contextObject) - 2);
            ListEnumerator contextEnum = strSplit(context, ',').getEnumerator();

            str temp, newContext;
            while (contextEnum.moveNext())
            {
                container param = str2con(contextEnum.current(), ':');

                temp = contextEnum.current();

                if (newContext == '')
                {
                    newContext = temp;
                }
                else
                {
                    newContext = strFmt('%1,%2', newContext, temp);
                }
            }

            newContext = strFmt('{%1}', newContext);

            super(newContext);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>DisputeHistoryChartData</Name>
			<Table>CustCollectionsDisputeHistoryChartDataTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>CountTrans</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>SumAmount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<CrossCompanyAutoQuery>Yes</CrossCompanyAutoQuery>
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">FormPart</Style>
		<UseCaptionFromMenuItem xmlns="">Yes</UseCaptionFromMenuItem>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Charts</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormContainerControl">
						<Name>CollectionsHistoryChart</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>chart_2x4</ExtendedStyle>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Container</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>SysChart</Name>
							<ExtensionComponents>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmDataSets</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentLeaf">
											<Name>DisputeStatus</Name>
											<ComponentType>SysBuildChartDataSet</ComponentType>
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmDataSource</Name>
													<Type>String</Type>
													<Value>DisputeHistoryChartData</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmCategoryField</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmGroupBy</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
								</AxFormControlExtensionComponent>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmMeasures</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentLeaf">
											<Name>DisputeChart</Name>
											<ComponentType>SysBuildChartMeasure</ComponentType>
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmChartType</Name>
													<Type>Enum</Type>
													<TypeName>SysChartType</TypeName>
													<Value>Pie</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmMeasureField</Name>
													<Type>String</Type>
													<Value>SumAmount</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmTitle</Name>
													<Type>String</Type>
													<Value>@AccountsReceivable:CustCollectionsDisputeHistoryChartBalanceByStatusSeriesTitle</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataLabels</Name>
													<Type>Enum</Type>
													<TypeName>SysChartDataLabels</TypeName>
													<Value>Outside</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataSet</Name>
													<Type>String</Type>
													<Value>DisputeStatus</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmUseSecondaryYAxis</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmSecondaryYAxisName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmClickMenuItemType</Name>
													<Type>Enum</Type>
													<TypeName>MenuItemType</TypeName>
													<Value>Display</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmClickMenuItemName</Name>
													<Type>ExtendedDataType</Type>
													<TypeName>MenuItemName</TypeName>
													<Value>CustCollectionsDisputeHistoryChartCustTrans</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmKeyField</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmParameter1</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmParameter2</Name>
													<Type>String</Type>
													<Value>SumAmount</Value>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
								</AxFormControlExtensionComponent>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmSecondaryYAxes</Name>
									<ExtensionComponents />
								</AxFormControlExtensionComponent>
							</ExtensionComponents>
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmLegendEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>True</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendAlignment</Name>
									<Type>Enum</Type>
									<TypeName>SysChartHorizontalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendPosition</Name>
									<Type>Enum</Type>
									<TypeName>SysChartVerticalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendLayout</Name>
									<Type>Enum</Type>
									<TypeName>SysChartLegendLayout</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTitleAlignment</Name>
									<Type>Enum</Type>
									<TypeName>SysChartHorizontalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmText</Name>
									<Type>String</Type>
									<Value>@AccountsReceivable:CustCollectionsDisputeHistoryChartBalanceByStatus</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTitlePosition</Name>
									<Type>Enum</Type>
									<TypeName>SysChartVerticalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmSerializedButtons</Name>
									<Type>String</Type>
									<Value>Line;Bar;Column;Pie;Funnel</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisTitle</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisVisible</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmXAxisTitle</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmClickMenuItemType</Name>
									<Type>Enum</Type>
									<TypeName>MenuItemType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmClickMenuItemName</Name>
									<Type>ExtendedDataType</Type>
									<TypeName>MenuItemName</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmInteractionsDisabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmZoomLimit</Name>
									<Type>Enum</Type>
									<TypeName>SysChartDateTimeInterval</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmToolbarEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPadMargin</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmCrosshairsEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTooltipShared</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<Controls />
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>