<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMOrganizationalCategoryLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMOrganizationalCategoryLookup extends FormRun
{
    boolean                 isformclose;
    ImageRes                imageRes;
    recid                   lastSelected;
    TreeItemIdx             lastSelectedIdx;
    int64                   Recid;
    str                     orgCatDescription;
    boolean                 hasChildDept;
}
]]></Source>
			</Method>
			<Method>
				<Name>canClose</Name>
				<Source><![CDATA[
    public boolean canClose()
    {
        boolean ret;
    
        ret = super();
        ret = false;
        //ret=isformclose;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    public void closeSelect(str _selectString = "")
    {
        element.args().caller().setParentID(HMOrganizationaCategory.RecId);
        super(_selectString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSelectRecord</Name>
				<Source><![CDATA[
    public void closeSelectRecord(Common _selectedRecord)
    {
        HMOrganizationaCategory       hmHMOrganizationaCategoryLocal;
        hmHMOrganizationaCategoryLocal = _selectedRecord;
        element.args().caller().setParentID(hmHMOrganizationaCategoryLocal.RecId);
        super(_selectedRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
    
        super();
        this.parentCall();
        element.selectMode(HMOrganizationaCategory_Description);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentCall</Name>
				<Source><![CDATA[
    public void parentCall()
    {
    
        TreeItemIdx                     parentItemIdx;
    
        TreeView.deleteAll();
        parentItemIdx = SysFormTreeControl::addTreeItem(TreeView,"@MAZ70",
                                                       FormTreeAdd::Root,0,imageRes,1);
    
    //    while select * from hmOrganizationaCategorylocal
    //        where hmOrganizationaCategorylocal.HMOrganizationaCategory == 0
    //    {
    //        hasChild=false;
    //        while select * from HMOrganizationaCategorylocalForChildCheck
    //            where HMOrganizationaCategorylocalForChildCheck.HMOrganizationaCategory == hmOrganizationaCategorylocal.RecId
    //        {
    //            hasChild = true;
    //        }
    //        if(hasChild)
    //        {
    //            treeItemIdx = SysFormTreeControl::addTreeItem(Tree,hmOrganizationaCategorylocal.Description,
    //                                                                parentItemIdx,hmOrganizationaCategorylocal.RecId,imageRes,1);
    //        }
    //        else
    //        {
    //            treeItemIdx = SysFormTreeControl::addTreeItem(Tree,hmOrganizationaCategorylocal.Description,
    //                                                                parentItemIdx,hmOrganizationaCategorylocal.RecId,imageRes,0);
    //        }
    
        this.TreeFill(parentItemIdx,0);
        TreeView.expand(parentItemIdx);
    //    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFill</Name>
				<Source><![CDATA[
    public void treeFill(TreeItemIdx _RecId,int64 _RecIdx)
    {
        TreeItemIdx                         parentItemIdx;
        boolean                             hasChild;
        HMOrganizationaCategory             HMOrganizationaCategorylocalForChildCheck, HMOrganizationaCategorylocalForClinic;
        HMOrganizationaCategory             hmOrganizationaCategorylocalForTree;
       hasChild = false;
    
        while select Description,REcId,HMOrganizationaCategory from hmOrganizationaCategorylocalForTree
            where hmOrganizationaCategorylocalForTree.HMOrganizationaCategory == _RecIdx
            && hmOrganizationaCategorylocalForTree.Indicator == HMOrganizationalCategoryIndicator::DepartmentalUnit
        {
            select count(RecId) from HMOrganizationaCategorylocalForChildCheck
                where HMOrganizationaCategorylocalForChildCheck.HMOrganizationaCategory == hmOrganizationaCategorylocalForTree.RecId
                && HMOrganizationaCategorylocalForChildCheck.Indicator == HMOrganizationalCategoryIndicator::DepartmentalUnit
                || HMOrganizationaCategorylocalForChildCheck.Indicator == HMOrganizationalCategoryIndicator::OutpatientTreatment;
            if(HMOrganizationaCategorylocalForChildCheck.recid > 0)
            {
                hasChild = true;
            }
            if(hasChild)
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(TreeView,hmOrganizationaCategorylocalForTree.Description,
                                                                    _RecId,hmOrganizationaCategorylocalForTree.RecId,imageRes,1);
                if(lastSelected == hmOrganizationaCategorylocalForTree.RecId)
                {
                    lastSelectedIdx = parentItemIdx;
                }
    
                this.treeFill(parentItemIdx,hmOrganizationaCategorylocalForTree.RecId);
                hasChild = false;
            }
            else
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(TreeView,hmOrganizationaCategorylocalForTree.Description,
                                                                    _RecId,hmOrganizationaCategorylocalForTree.RecId,imageRes,0);
                if(lastSelected == hmOrganizationaCategorylocalForTree.RecId)
                {
                    lastSelectedIdx = parentItemIdx;
                }
            }
    
            while select Description,REcId,HMOrganizationaCategory from HMOrganizationaCategorylocalForClinic
            where HMOrganizationaCategorylocalForClinic.HMOrganizationaCategory == hmOrganizationaCategorylocalForTree.RecId
            && HMOrganizationaCategorylocalForClinic.Indicator == HMOrganizationalCategoryIndicator::OutpatientTreatment
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(TreeView,HMOrganizationaCategorylocalForClinic.Description,
                                                                parentItemIdx,HMOrganizationaCategorylocalForClinic.RecId,imageRes,0);
                if(lastSelected == HMOrganizationaCategorylocalForClinic.RecId)
                {
                    lastSelectedIdx = parentItemIdx;
                }
            }
    
    
        }
    
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMOrganizationaCategory</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
           // QueryBuildDataSource    qryBuildDataSource;
          //  QueryBuildRange             qryBuildRange;
         //   HMOrganizationaCategory     hmOrganizationaCategoryLocal;
         //   HMOrganizationaCategory     hmOrganizationalCategory_Sub;
         //   str                         result;
            super();
        
            /*this.query().dataSourceName(tableId2name(tableNum(HMOrganizationaCategory))).cleardynalinks();
            this.query().dataSourceTable(tableNum(HMOrganizationaCategory)).addrange(fieldNum(HMOrganizationaCategory,Indicator)).value(SysQuery::value(HMOrganizationalCategoryIndicator::DepartmentalUnit));
            this.query().dataSourceTable(tableNum(HMOrganizationaCategory)).addrange(fieldNum(HMOrganizationaCategory,recId));
        
            result = "(" + fieldStr(HMOrganizationaCategory,recId) + " != " + SysQuery::value((element.args().record().RecId)) + ")" ;
        
            while select * from hmOrganizationaCategoryLocal
                where hmOrganizationaCategoryLocal.Indicator == HMOrganizationalCategoryIndicator::DepartmentalUnit
            {
                select count(recId) from hmOrganizationalCategory_Sub where hmOrganizationalCategory_Sub.HMOrganizationaCategory == hmOrganizationaCategoryLocal.RecId
                    && hmOrganizationalCategory_Sub.Indicator == HMOrganizationalCategoryIndicator::DepartmentalUnit;
        
                if(hmOrganizationalCategory_Sub.recId>0)
                {
                    result = result + " && " + "(" + fieldStr(HMOrganizationaCategory,recId) + " != " + SysQuery::value((hmOrganizationaCategoryLocal.RecId)) + ")";
                }
        
            }
            //result = result + ')';
        
            this.query().dataSourceTable(tableNum(HMOrganizationaCategory)).addrange(fieldNum(HMOrganizationaCategory,recId)).value(result);
            //qryBuildRage.value(SysQuery::valueNot(result));
            //info(this.query().toString());*/
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>TreeView</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
        {
            FormTreeItem selectedTreeItem = TreeView.getItem(TreeView.getSelection());
        
        //    HMOrganizationaCategory     hmOrganizationaCategoryLocal;
            HMOrganizationaCategory     hmOrganizationalCategory_Sub;
            super(_OldItem, _NewItem, _how);
        
        
            Recid = selectedTreeItem.data();
            orgCatDescription = selectedTreeItem.text();
                select count(recId) from hmOrganizationalCategory_Sub where
                    hmOrganizationalCategory_Sub.HMOrganizationaCategory == Recid
                    && hmOrganizationalCategory_Sub.Indicator == HMOrganizationalCategoryIndicator::DepartmentalUnit;
        
            if(hmOrganizationalCategory_Sub.recId==0)
            {
                hasChildDept = false;
            }
            else
            {
                hasChildDept = true;
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>btnOk</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            super();
            if (Recid == element.args().record().RecId)
            {
                Box::stop('Cannot select this record','Error');
                return;
            }
        
            element.args().caller().setParentID(Recid,hasChildDept);
            element.close();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMOrganizationaCategory</Name>
			<Table>HMOrganizationaCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMOrganizationaCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Indicator</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Style xmlns="">Lookup</Style>
		<Width xmlns="">300</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>536870911</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMOrganizationaCategory_Code</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Code</DataField>
										<DataSource>HMOrganizationaCategory</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMOrganizationaCategory_Description</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>HMOrganizationaCategory</DataSource>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>Yes</AlternateRowShading>
								<DataSource>HMOrganizationaCategory</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SYS3340</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Auto</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTreeControl">
				<Name>TreeView</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1073741822</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Tree</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormButtonControl">
				<Name>btnOk</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1610612733</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<HelpText>@MAZ1942</HelpText>
				<LeftMode>AutoRight</LeftMode>
				<Skip>Yes</Skip>
				<Type>Button</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Text>@SYS113428</Text>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>