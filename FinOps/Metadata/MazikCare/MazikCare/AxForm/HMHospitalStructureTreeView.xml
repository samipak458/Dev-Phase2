<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMHospitalStructureTreeView</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMHospitalStructureTreeView extends FormRun
{
    ImageRes                imageRes;
}
]]></Source>
			</Method>
			<Method>
				<Name>fillBuildingUnitChild</Name>
				<Source><![CDATA[
    private void fillBuildingUnitChild(TreeItemIdx _RecId,int64 _RecIdx)
    {
        TreeItemIdx                     parentItemIdx;
        boolean                         hasChild;
        HMBuildingUnit                  hmBuildingUnitlocalForChildCheck;
        HMBuildingUnit                  hmBuildingUnitlocalForTree;
        hasChild = false;
        while select * from hmBuildingUnitlocalForTree
            where hmBuildingUnitlocalForTree.HMBuildingUnit == _RecIdx
         //   && hmBuildingUnitlocalForTree.IsBlocked == NoYes::No
            && (hmBuildingUnitlocalForTree.FromDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmBuildingUnitlocalForTree.ToDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            while select * from hmBuildingUnitlocalForChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnit == hmBuildingUnitlocalForTree.RecId
    
            {
                hasChild = true;
            }
    
    
            if(hasChild)
            {
    
                parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitlocalForTree.Description,
                                                                    _RecId,hmBuildingUnitlocalForTree.RecId,imageRes,1);
                this.fillBuildingUnitChild(parentItemIdx,hmBuildingUnitlocalForTree.RecId);
                hasChild = false;
            }
            else
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitlocalForTree.Description,
                                                                    _RecId,hmBuildingUnitlocalForTree.RecId,imageRes,0);
            }
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBuildingUnits</Name>
				<Source><![CDATA[
    private void fillBuildingUnits(TreeItemIdx _RecId,int64 _RecIdx)
    {
        TreeItemIdx                     parentItemIdx;
        boolean                         hasChild;
        HMBuildingUnit                  hmBuildingUnitlocalForChildCheck;
        HMBuildingUnit                  hmBuildingUnitlocalForTree;
        hasChild = false;
        while select * from hmBuildingUnitlocalForTree
            where hmBuildingUnitlocalForTree.RecId == _RecIdx
          //  && hmBuildingUnitlocalForTree.IsBlocked == NoYes::No
            && (hmBuildingUnitlocalForTree.FromDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmBuildingUnitlocalForTree.ToDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            while select * from hmBuildingUnitlocalForChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnit == hmBuildingUnitlocalForTree.RecId
    
            {
                hasChild = true;
            }
    
    
            if(hasChild)
            {
    
                parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitlocalForTree.Description,
                                                                    _RecId,hmBuildingUnitlocalForTree.RecId,imageRes,1);
                this.fillBuildingUnitChild(parentItemIdx,hmBuildingUnitlocalForTree.RecId);
                hasChild = false;
            }
            else
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitlocalForTree.Description,
                                                                    _RecId,hmBuildingUnitlocalForTree.RecId,imageRes,0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.parentCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentCall</Name>
				<Source><![CDATA[
    private void parentCall()
    {
        TreeItemIdx                     parentItemIdx;
    
        Tree.deleteAll();
        parentItemIdx = SysFormTreeControl::addTreeItem(Tree,CompanyInfo::findRecId(CompanyInfo::current()).Name(),
                                                       FormTreeAdd::Root,0,imageRes,1);
        this.treeFill(parentItemIdx,0);
        Tree.expand(parentItemIdx);
        SysFormTreeControl::expandTree(Tree,parentItemIdx);
        Tree.select(parentItemIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFill</Name>
				<Source><![CDATA[
    private void treeFill(TreeItemIdx _RecId,int64 _RecIdx)
    {
        HMOrganizationalUnit            hmOrganizationalUnit;
        HMOrganizationalUnit            hmOrganizationalUnitlocalForChildCheck;
       // HMOrganizationalUnit            hmOrganizationUnitForBLUnit;
       // HMOrganizationalUnit            hmOrganizationUnitForBLUnitExist;
        boolean                         hasOrganizationalChildUnit;
        boolean                         hasBuildingUnit;
        TreeItemIdx                     parentItemIdx;
        HMOrganizationalBuildingUnit    hmOrganizationalBuildingUnitForBLUnitExist;
        HMOrganizationalBuildingUnit    hmOrganizationalBuildingUnit;
        hasOrganizationalChildUnit = false;
        hasBuildingUnit = false;
    
        while select * from hmOrganizationalUnit
            where hmOrganizationalUnit.HMOrganizationalUnit == _RecIdx
           // && hmOrganizationalUnit.IsBlocked == NoYes::No
            && (hmOrganizationalUnit.FromDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) &&  hmOrganizationalUnit.ToDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    
            //temporary for demo 18 july 2011
            //todo:remove after demo
    
        {
            while select * from hmOrganizationalBuildingUnitForBLUnitExist
                where hmOrganizationalBuildingUnitForBLUnitExist.HMOrganizationalUnit == hmOrganizationalUnit.RecId
            {
                if(HMOrganizationalBuildingUnitForBLUnitExist.HMBuildingUnit != 0)
                {
                    hasBuildingUnit = true;
                }
            }
            while select * from hmOrganizationalUnitlocalForChildCheck
                    where hmOrganizationalUnitlocalForChildCheck.HMOrganizationalUnit == hmOrganizationalUnit.RecId
                {
                    hasOrganizationalChildUnit = true;
                }
            if(hasBuildingUnit)
            {
                parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmOrganizationalUnit.Description,
                                                                    _RecId,hmOrganizationalUnit.RecId,imageRes,1);
                while select * from hmOrganizationalBuildingUnit
                    where hmOrganizationalBuildingUnit.HMOrganizationalUnit == hmOrganizationalUnit.RecId
                {
                    this.fillBuildingUnits(parentItemIdx,hmOrganizationalBuildingUnit.HMBuildingUnit);
                }
    
    
                hasBuildingUnit = false;
                if(hasOrganizationalChildUnit)
                {
                    this.treeFill(parentItemIdx,hmOrganizationalUnit.RecId);
                    hasOrganizationalChildUnit = false;
                }
            }
            else
            {
                if(hasOrganizationalChildUnit)
                {
                    parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmOrganizationalUnit.Description,
                                                                    _RecId,hmOrganizationalUnit.RecId,imageRes,1);
                    this.treeFill(parentItemIdx,hmOrganizationalUnit.RecId);
                    hasOrganizationalChildUnit = false;
                }
                else
                {
                        parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmOrganizationalUnit.Description,
                                                                    _RecId,hmOrganizationalUnit.RecId,imageRes,0);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="" />
		<Members xmlns="" />
	</SourceCode>
	<DataSources />
	<Design>
		<Caption xmlns="">@MAZ2478</Caption>
		<WindowResize xmlns="">Dynamic</WindowResize>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>TreeContainer</Name>
				<ElementPosition>1073741823</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>Tree</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
				</Controls>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>