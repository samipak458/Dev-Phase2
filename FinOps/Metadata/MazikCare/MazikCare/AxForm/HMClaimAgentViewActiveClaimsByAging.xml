<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMClaimAgentViewActiveClaimsByAging</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMClaimAgentViewActiveClaimsByAging extends FormRun
{
    mzkClaimManagerChartDataTmp bucket;
    CustCollectionsAgent        gCustCollectionsAgent = CustCollectionsAgent::findCurrentAgent();
    boolean                     isMultiSelectPoolFilterEnabled = true;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        CustCollectionsAgentPool    CustCollectionsAgentPool;
        str                         DefaulPoolFiters;

        super();

        if(!gCustCollectionsAgent)
        {
            isMultiSelectPoolFilterEnabled = false;
        }
        else
        {
            select firstonly RecId from custCollectionsAgentPool
                where custCollectionsAgentPool.CustCollectionsAgent == gCustCollectionsAgent.RecId;

            if(custCollectionsAgentPool.RecId == 0)
            {
                isMultiSelectPoolFilterEnabled = false;
            }

        }

        if(isMultiSelectPoolFilterEnabled)
        {
            while select CustomerPoolId from custCollectionsAgentPool
                where custCollectionsAgentPool.CustCollectionsAgent == gCustCollectionsAgent.RecId
            {
                DefaulPoolFiters += strFmt("%1;",custCollectionsAgentPool.CustomerPoolId);
            }

            DefaulPoolFiters = strDel(DefaulPoolFiters, strLen(DefaulPoolFiters) -0, 1);

            MultiSelectPoolFilter.text(DefaulPoolFiters);
            CurrentUserPools.text(DefaulPoolFiters);
        }

        MultiSelectPoolFilter.enabled(isMultiSelectPoolFilterEnabled);

        element.buildTempTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the data in the temp table to display on the graph
    /// </summary>
    /// <param name = "_update">True if updating the temp table with new values</param>
    /// <remarks>If _update is true the method first deletes all records from the temp table then inserts the new calculated values</remarks>
    public void buildTempTable()
    {
        int                     agingStartDay = 1;
        int                     agingEndDay = 0;
        int                     claimCount;
        Query                   query;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
        
        delete_from bucket;

        if(isMultiSelectPoolFilterEnabled)
        {
            query = this.getPoolListQuery();

            query = this.getPoolListQuery();
            qbds = query.dataSourceTable(tableNum(HMClaimTable));
            qbds.addRange(fieldNum(HMClaimTable, MzkClaimAgingDays)).value(queryValue("> 0"));

            qr = new QueryRun(query);

            if(SysQuery::countTotal(qr))
            {
                for(int i = 1; i <= 5; i++)
                {
                    agingEndDay += 30;
                    claimCount  = this.getClaimsCountByAgingPeriod(agingStartDay, agingEndDay);

                    if(claimCount > 0)
                    {
                        bucket.clear();
                        bucket.ClaimCount = claimCount;
                        bucket.Status = agingEndDay == 150 ? "> 120" : strFmt("%1 - %2",agingStartDay, agingEndDay);
                        bucket.insert();
                    }

                    agingStartDay += 30;
                }
            }

        }

        mzkClaimManagerChartDataTmp.linkPhysicalTableInstance(bucket);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClaimsCountByAgingPeriod</Name>
				<Source><![CDATA[
    public int getClaimsCountByAgingPeriod(int _startDay, int _endDay)
    {
        Query                   query;
        QueryRun                qr;
        QueryBuildDataSource    qbds;

        query = this.getPoolListQuery();
        qbds = query.dataSourceTable(tableNum(HMClaimTable));
        
        if(_endDay != 150)
        {
            qbds.addRange(fieldNum(HMClaimTable, MzkClaimAgingDays)).value(strFmt('((%1.%2 >= %3) && (%1.%2 <= %4))',
                qbds.name(),
                fieldStr(HMClaimTable, MzkClaimAgingDays),
                queryValue(_startDay),
                queryValue(_endDay)));
        }
        else
        {
            qbds.addRange(fieldNum(HMClaimTable, MzkClaimAgingDays)).value(queryValue("> 120"));
        }

        qr = new QueryRun(query);
        
        return SysQuery::countTotal(qr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPoolListQuery</Name>
				<Source><![CDATA[
    // <summary>
    /// get query with pool list range
    /// </summary>
    /// <returns></returns>
    private Query getPoolListQuery()
    {
        List                    poolList = new List(Types::String);
        ListIterator            iterator;
        container               con;
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        CustCollectionsPool     custCollectionsPool;

        if(MultiSelectPoolFilter.text() != "")
        {
            poolList = strSplit(MultiSelectPoolFilter.text(),";");
        }
        else
        {
            con += queryValue(0);
            poolList = strSplit(CurrentUserPools.text() ,";");
        }

        iterator = new ListIterator(poolList);

        while(iterator.more())
        {
            select RecId from custCollectionsPool
                where custCollectionsPool.Name == iterator.value();

            con += queryValue(custCollectionsPool.RecId);

            iterator.next();
        }

        query = new Query(queryStr(HMClaimAgingChartsQuery));

        qbds = query.dataSourceTable(tableNum(HMClaimTable));
        qbds.addRange(fieldNum(HMClaimTable, ClaimAgent)).value(queryValue(gCustCollectionsAgent.RecId));
        qbr = qbds.addRange(fieldNum(HMClaimTable, ClaimPool));
        qbr.value(con2str(con));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>MultiSelectPoolFilter</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        /// <summary>
        /// 
        /// </summary>
        public void lookup()
        {
            Query                       query = new Query();
            QueryBuildDataSource        qbdsCustCollectionsPool;
            QueryBuildRange             qbr;
            container                   con, selectFields;
            CustCollectionsAgentPool    custCollectionsAgentPool;
            CustCollectionsPool         custCollectionsPool;

            qbdsCustCollectionsPool = query.addDataSource(tableNum(CustCollectionsPool));
            qbdsCustCollectionsPool.addSelectionField(fieldNum(CustCollectionsPool, Name));
            qbdsCustCollectionsPool.addSelectionField(fieldNum(CustCollectionsPool, Description));

            qbr = qbdsCustCollectionsPool.addRange(fieldNum(CustCollectionsPool, Name));

            while select Name from custCollectionsPool 
                where custCollectionsPool.Type == CustPoolType::Collection
                join custCollectionsAgentPool
                    where custCollectionsAgentPool.CustCollectionsAgent == gCustCollectionsAgent.RecId
                        && custCollectionsAgentPool.CustomerPoolId == custCollectionsPool.Name
            {
                con += queryValue(custCollectionsPool.Name);
            }

            qbr.value(con2str(con));

            selectFields = [tableNum(CustCollectionsPool), fieldNum(CustCollectionsPool, RecId)];

            SysLookupMultiSelectGrid::lookup(query, this, MultiSelectPoolFilter, this, selectFields);

            MultiSelectPoolFilter.modified();

        }

]]></Source>
					</Method>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public boolean modified()
        {
            boolean ret = super();

            element.buildTempTable();
            mzkClaimManagerChartDataTmp_ds.research();

            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>mzkClaimManagerChartDataTmp</Name>
			<Table>mzkClaimManagerChartDataTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>ClaimCount</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Partition</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Status</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MAZ:HMClaimAgentViewActiveClaimsByAging</Caption>
		<Pattern xmlns="">Custom</Pattern>
		<SetCompany xmlns="">No</SetCompany>
		<Style xmlns="">FormPart</Style>
		<ViewEditMode xmlns="">View</ViewEditMode>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>FilterGroup</Name>
				<ExtendedStyle>hubPartGrid_header</ExtendedStyle>
				<Pattern>FiltersAndToolbarInline</Pattern>
				<PatternVersion>1.0</PatternVersion>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>Filters</Name>
						<Type>Group</Type>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>MultiSelectPoolFilter</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS10507</Label>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>CurrentUserPools</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<Type>String</Type>
								<Visible>No</Visible>
								<FormControlExtension
									i:nil="true" />
								<Label>@SYS10507</Label>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>HorizontalLeft</ArrangeMethod>
						<FrameType>None</FrameType>
						<ViewEditMode>Edit</ViewEditMode>
					</AxFormControl>
				</Controls>
				<ArrangeMethod>HorizontalLeft</ArrangeMethod>
				<Breakable>No</Breakable>
				<FrameType>None</FrameType>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Charts</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormContainerControl">
						<Name>CollectionsHistoryChart</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ExtendedStyle>chart_2x4</ExtendedStyle>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Container</Type>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension>
							<Name>SysChart</Name>
							<ExtensionComponents>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmDataSets</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentLeaf">
											<Name>AgingDays</Name>
											<ComponentType>SysBuildChartDataSet</ComponentType>
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmDataSource</Name>
													<Type>String</Type>
													<Value>mzkClaimManagerChartDataTmp</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmCategoryField</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmGroupBy</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
								</AxFormControlExtensionComponent>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmMeasures</Name>
									<ExtensionComponents>
										<AxFormControlExtensionComponent xmlns=""
											i:type="AxFormControlExtensionComponentLeaf">
											<Name>Claims</Name>
											<ComponentType>SysBuildChartMeasure</ComponentType>
											<ExtensionProperties>
												<AxFormControlExtensionProperty>
													<Name>parmChartType</Name>
													<Type>Enum</Type>
													<TypeName>SysChartType</TypeName>
													<Value>Doughnut</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmMeasureField</Name>
													<Type>String</Type>
													<Value>ClaimCount</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmTitle</Name>
													<Type>String</Type>
													<Value>@MAZ:HMClaimAgentViewActiveClaimsByAging</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataLabels</Name>
													<Type>Enum</Type>
													<TypeName>SysChartDataLabels</TypeName>
													<Value>Outside</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataSet</Name>
													<Type>String</Type>
													<Value>AgingDays</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmUseSecondaryYAxis</Name>
													<Type>Enum</Type>
													<TypeName>boolean</TypeName>
													<Value>False</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmSecondaryYAxisName</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmClickMenuItemType</Name>
													<Type>Enum</Type>
													<TypeName>MenuItemType</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmClickMenuItemName</Name>
													<Type>ExtendedDataType</Type>
													<TypeName>MenuItemName</TypeName>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmKeyField</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmParameter1</Name>
													<Type>String</Type>
													<Value>Status</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmParameter2</Name>
													<Type>String</Type>
													<Value>ClaimCount</Value>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmDataLabelsFormat</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
												<AxFormControlExtensionProperty>
													<Name>parmColor</Name>
													<Type>String</Type>
												</AxFormControlExtensionProperty>
											</ExtensionProperties>
										</AxFormControlExtensionComponent>
									</ExtensionComponents>
								</AxFormControlExtensionComponent>
								<AxFormControlExtensionComponent xmlns=""
									i:type="AxFormControlExtensionComponentComposite">
									<Name>parmSecondaryYAxes</Name>
									<ExtensionComponents />
								</AxFormControlExtensionComponent>
							</ExtensionComponents>
							<ExtensionProperties>
								<AxFormControlExtensionProperty>
									<Name>parmLegendEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>True</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendAlignment</Name>
									<Type>Enum</Type>
									<TypeName>SysChartHorizontalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendPosition</Name>
									<Type>Enum</Type>
									<TypeName>SysChartVerticalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmLegendLayout</Name>
									<Type>Enum</Type>
									<TypeName>SysChartLegendLayout</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTitleAlignment</Name>
									<Type>Enum</Type>
									<TypeName>SysChartHorizontalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmText</Name>
									<Type>String</Type>
									<Value>@MAZ:HMClaimAgentViewActiveClaimsByAging</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTitlePosition</Name>
									<Type>Enum</Type>
									<TypeName>SysChartVerticalAlignment</TypeName>
									<Value>Auto</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmSerializedButtons</Name>
									<Type>String</Type>
									<Value>Line;Bar;Column;Pie;Funnel</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisTitle</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisVisible</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmXAxisTitle</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmClickMenuItemType</Name>
									<Type>Enum</Type>
									<TypeName>MenuItemType</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmClickMenuItemName</Name>
									<Type>ExtendedDataType</Type>
									<TypeName>MenuItemName</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmInteractionsDisabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmZoomLimit</Name>
									<Type>Enum</Type>
									<TypeName>SysChartDateTimeInterval</TypeName>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmToolbarEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPadMargin</Name>
									<Type>Int32</Type>
									<Value>0</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmCrosshairsEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmTooltipShared</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisLabelsHidden</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisMinValue</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmYAxisMaxValue</Name>
									<Type>String</Type>
								</AxFormControlExtensionProperty>
								<AxFormControlExtensionProperty>
									<Name>parmPlotLineEnabled</Name>
									<Type>Enum</Type>
									<TypeName>boolean</TypeName>
									<Value>False</Value>
								</AxFormControlExtensionProperty>
							</ExtensionProperties>
						</FormControlExtension>
						<Controls />
					</AxFormControl>
				</Controls>
				<AllowUserSetup>No</AllowUserSetup>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>