<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMBuildingUnitCategoryLookup</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMBuildingUnitCategoryLookup extends FormRun
{
    boolean                 isformclose;
    str                     lastSelected;
    TreeItemIdx             initialSelection;
    ImageRes                imageRes;
    HMBuildingUnitType      hmBuildingUnitTypeGlobal;
}
]]></Source>
			</Method>
			<Method>
				<Name>closeSelect</Name>
				<Source><![CDATA[
    public void closeSelect(str _selectString = "")
    {
        if(isformclose)
        {
           super(_selectString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        element.selectMode(HMBuildingUnitCategoryTmp_Description);
        this.parentCall();
        if(initialSelection != 0)
        {
            tree.select(initialSelection);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentCall</Name>
				<Source><![CDATA[
    private void parentCall()
    {
    
        TreeItemIdx                     parentItemIdx;
        int64                     recId;
    
        boolean                 isFirst;
        List list = new List(Types::String);
        Enumerator en ;
        list = strSplit(element.args().parm(),'-');
        en = list.getEnumerator();
        isFirst = true;
        Tree.deleteAll();
        while (en.moveNext())
        {
            if(isFirst)
            {
                recId = str2int64(en.current());
                isFirst = false;
            }
            lastSelected = en.current();
        }
        select * from hmBuildingUnitTypeGlobal
            where hmBuildingUnitTypeGlobal.RecId == recId;
    
        parentItemIdx = SysFormTreeControl::addTreeItem(Tree,"@MAZ70", FormTreeAdd::Root,0,imageRes,1);
    
        if(hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::Building)
        {
            this.treeFillForOthers(parentItemIdx,0);
        }
        else if(hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::BedLocation)
        {
            this.treeFillForBedLocation(parentItemIdx,0);
        }
        else if(hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport)
        {
            this.treeFillForRoom_RWS(parentItemIdx,0);
        }
        Tree.expand(parentItemIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
    
    
    
        //callingControl = SysTableLookup::getCallerStringControl(element.args());
        //filterLookup = SysTableLookup::FilterLookupPreRun(callingControl,HMBuildingUnitCategoryTmp_Description, HMBuildingUnitCategory_ds);
    
        super();
        //SysTableLookup::FilterLookupPostRun(filterLookup,callingControl.text(), HMBuildingUnitCategoryTmp_Description, HMBuildingUnitCategory_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFillForBedLocation</Name>
				<Source><![CDATA[
    private void treeFillForBedLocation(TreeItemIdx _RecIdx,Recid _recId)
    {
        TreeItemIdx                     parentItemIdx;
        FormTreeItem                    formTreeItem;
        HMBuildingUnitCategory          hmBuildingUnitCategoryForTree;
        HMBuildingUnitCategory          hmBuildingUnitCategoryChildCheck;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
        HMBuildingUnitType              hmBuildingUnitTypeChildCheck;
    
        while select * from hmBuildingUnitCategoryForTree
            where hmBuildingUnitCategoryForTree.HMBuildingUnitCategory == _recId
            join * from hmBuildingUnitTypeLocal
            where hmBuildingUnitCategoryForTree.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
        {
            select count(recId) from hmBuildingUnitCategoryChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategoryForTree.RecId
            join * from hmBuildingUnitTypeChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitType == hmBuildingUnitTypeChildCheck.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building);
    
            if(hmBuildingUnitCategoryChildCheck.RecId>0)
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
    
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
    
                this.treeFillForBedLocation(parentItemIdx,hmBuildingUnitCategoryForTree.RecId);
            }
            else
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
    
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFillForOthers</Name>
				<Source><![CDATA[
    private void treeFillForOthers(TreeItemIdx _RecIdx,Recid _recId)
    {
        TreeItemIdx                     parentItemIdx;
        FormTreeItem                    formTreeItem;
        HMBuildingUnitCategory          hmBuildingUnitCategoryForTree;
        HMBuildingUnitCategory          hmBuildingUnitCategoryChildCheck;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
        HMBuildingUnitType              hmBuildingUnitTypeChildCheck;
    
        while select * from hmBuildingUnitCategoryForTree
            where hmBuildingUnitCategoryForTree.HMBuildingUnitCategory == _recId
            join * from hmBuildingUnitTypeLocal
            where hmBuildingUnitCategoryForTree.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
        {
            select count(recId) from hmBuildingUnitCategoryChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategoryForTree.RecId
            join * from hmBuildingUnitTypeChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitType == hmBuildingUnitTypeChildCheck.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building);
    
            if(hmBuildingUnitCategoryChildCheck.RecId>0)
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
    
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
    
                this.treeFillForOthers(parentItemIdx,hmBuildingUnitCategoryForTree.RecId);
            }
            else
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
    
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFillForRoom_RWS</Name>
				<Source><![CDATA[
    private void treeFillForRoom_RWS(TreeItemIdx _RecIdx,Recid _recId)
    {
        TreeItemIdx                     parentItemIdx;
        FormTreeItem                    formTreeItem;
        HMBuildingUnitCategory          hmBuildingUnitCategoryForTree;
        HMBuildingUnitCategory          hmBuildingUnitCategoryChildCheck;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
        HMBuildingUnitType              hmBuildingUnitTypeChildCheck;
    
        while select * from hmBuildingUnitCategoryForTree
            where hmBuildingUnitCategoryForTree.HMBuildingUnitCategory == _recId
            join * from hmBuildingUnitTypeLocal
            where hmBuildingUnitCategoryForTree.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
        {
            select count(recId) from hmBuildingUnitCategoryChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategoryForTree.RecId
            join * from hmBuildingUnitTypeChildCheck
            where hmBuildingUnitCategoryChildCheck.HMBuildingUnitType == hmBuildingUnitTypeChildCheck.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building);
    
            if(hmBuildingUnitCategoryChildCheck.RecId>0)
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
                this.treeFillForRoom_RWS(parentItemIdx,hmBuildingUnitCategoryForTree.RecId);
            }
            else
            {
                formTreeItem = new FormTreeItem();
                //BP deviation documented
                formTreeItem.text(hmBuildingUnitCategoryForTree.Description);
                formTreeItem.data(hmBuildingUnitCategoryForTree.RecId);
    
                parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                if(lastSelected == hmBuildingUnitCategoryForTree.Description)
                {
                    initialSelection = parentItemIdx;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMBuildingUnitCategory</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            HMBuildingUnitCategory      hmBuildingUnitCategorylocal;
        
            super();
            this.query().dataSourceTable(tableNum(HMBuildingUnitCategory)).clearDynalinks();
            hmBuildingUnitCategorylocal = element.args().record();
        
            this.query().dataSourceTable(tableNum(HMBuildingUnitCategory)).addRange(fieldNum(HMBuildingUnitCategory,RecId)).value(SysQuery::valueNot(hmBuildingUnitCategorylocal.RecId));
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
			<DataSource>
				<Name>HMBuildingUnitType</Name>
				<Methods>
					<Method>
						<Name>parentCall</Name>
						<Source><![CDATA[
        private void parentCall()
        {
        
        }

]]></Source>
					</Method>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            HMBuildingUnitType      hmBuildingUnitTypelocal;
            super();
            select * from hmBuildingUnitTypelocal
                where hmBuildingUnitTypelocal.RecId == str2int64(element.args().parm());
        
            if(hmBuildingUnitTypelocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypelocal.Indicators == HMBuildingUnitTypeIndicator::Building)
            {
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::Others));
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::Building));
            }
            else if(hmBuildingUnitTypelocal.Indicators == HMBuildingUnitTypeIndicator::BedLocation)
            {
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::RoomWithBedSupport));
            }
            else if(hmBuildingUnitTypelocal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypelocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport)
            {
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::Others));
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::Building));
            }
            //info(this.query().toString());
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Button</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HMBuildingUnitType      hmBuildingUnitTypeLocal;
            FormTreeItem selectedTreeItem = tree.getItem(tree.getSelection());
            super();
            hmBuildingUnitTypeLocal = HMBuildingUnitType::find(HMBuildingUnitCategory::find(selectedTreeItem.data()).HMBuildingUnitType);
            if(hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport || hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::Building)
            {
                if(hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
                {
                    if(!(selectedTreeItem.data() == element.args().record().RecId))
                    {
                        element.args().caller().setParentID(selectedTreeItem.data());
                        isformclose = true;
                        element.close();
                    }
        
                }
            }
            else if (hmBuildingUnitTypeGlobal.Indicators == HMBuildingUnitTypeIndicator::BedLocation)
            {
                if(hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport)
                {
                    if(!(selectedTreeItem.data() == element.args().record().RecId))
                    {
                        element.args().caller().setParentID(selectedTreeItem.data());
                        isformclose = true;
                        element.close();
                    }
                }
            }
        
        
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnitCategory</Name>
			<Table>HMBuildingUnitCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<LinkType>OuterJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnitType</Name>
			<Table>HMBuildingUnitType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Indicators</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMBuildingUnitCategory</JoinSource>
			<LinkType>ExistJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Frame xmlns="">Border</Frame>
		<HeightMode xmlns="">Column</HeightMode>
		<HideIfEmpty xmlns="">No</HideIfEmpty>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Style xmlns="">Lookup</Style>
		<Width xmlns="">300</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTreeControl">
						<Name>Tree</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1073741822</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Tree</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<FormControlExtension
							i:nil="true" />
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormButtonControl">
						<Name>Button</Name>
						<ElementPosition>1610612733</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<HelpText>@SYS128940</HelpText>
						<LeftMode>AutoRight</LeftMode>
						<Skip>Yes</Skip>
						<Type>Button</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Text>@SYS110839</Text>
					</AxFormControl>
				</Controls>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTabControl">
				<Name>Tab</Name>
				<AlignControl>No</AlignControl>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Tab</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormTabPageControl">
						<Name>TabPage</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>TabPage</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGridControl">
								<Name>Grid</Name>
								<AllowEdit>No</AllowEdit>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Grid</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<Visible>No</Visible>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMBuildingUnitCategoryTmp_Code</Name>
										<ElementPosition>1073741822</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Code</DataField>
										<DataSource>HMBuildingUnitCategory</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMBuildingUnitCategoryTmp_Description</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1610612733</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>HMBuildingUnitCategory</DataSource>
									</AxFormControl>
								</Controls>
								<AlternateRowShading>Yes</AlternateRowShading>
								<DataSource>HMBuildingUnitCategory</DataSource>
								<ShowRowLabels>No</ShowRowLabels>
							</AxFormControl>
						</Controls>
						<Caption>@SYS3340</Caption>
						<Scrollbars>Auto</Scrollbars>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<ArrangeMethod>Vertical</ArrangeMethod>
				<Style>Auto</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>