<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMOrganizationalBuildingUnitDialog</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMOrganizationalBuildingUnitDialog extends FormRun
{
    recId                                   oraganizationalUnitRecId;
    HMBuildingUnit                          hmBuildingUnitLocal;
    Object                                  formRunObject;
    FormRun                                 formRun;
    NoYes                                   isOkClicked;
    ImageRes                                imageRes;
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
    
        super();
        //hmOrganizationalBuildingUnit=HMOrganizationaCategory::find(HMOrganizationalUnit::find(selectedTreeItem.data()).HMOrganizationaCategory);
    
        //if (isOkClicked == NoYes::Yes)
        //{
            //
            ////hmBuildingUnitLocal = HMBuildingUnit_ds.getFirst(1);
            ////while (hmBuildingUnitLocal)
            ////{
                ////select count(recId) from hmOrganizationalBuildingUnitForExist
                    ////where hmOrganizationalBuildingUnitForExist.HMOrganizationalUnit == oraganizationalUnitRecId
                    ////&& hmOrganizationalBuildingUnitForExist.HMBuildingUnit == hmBuildingUnitLocal.RecId;
    ////
                ////if(hmOrganizationalBuildingUnitForExist.RecId==0)
                ////{
                    ////hmOrganizationalBuildingUnit.HMOrganizationalUnit = oraganizationalUnitRecId;
                    ////hmOrganizationalBuildingUnit.HMBuildingUnit = hmBuildingUnitLocal.RecId;
                    ////hmOrganizationalBuildingUnit.insert();
                ////}
                ////hmBuildingUnitLocal = HMBuildingUnit_ds.getNext();
            ////}
            ////formRun = element.args().caller();
    ////
            ////if (formHasMethod(formRun, identifierstr(refreshData)))
            ////{
                ////formRunObject = formRun;
                ////formRunObject.refreshData();
            ////}
    //
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        oraganizationalUnitRecId = element.args().record().RecId;
    
        super();
         this.parentCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentCall</Name>
				<Source><![CDATA[
    private void parentCall()
    {
        HMOrganizationaCategory         hmOrganizationaCategory;
        TreeItemIdx                     parentItemIdx;
    
        //Tree.deleteAll();
        parentItemIdx = SysFormTreeControl::addTreeItem(Tree,"@MAZ70", FormTreeAdd::Root,0,imageRes,1);
        select * from hmOrganizationaCategory
            where hmOrganizationaCategory.RecId == str2int64(element.args().parm());
    
        if(hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::NursingAssignments)
        {
            this.treeFillForNursingAssignment(parentItemIdx,0);
        }
        else if(hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::TreatmentUnit || hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::OutpatientTreatment ||
                    hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::OtherUnit)
        {
                this.treeFillForOthers(parentItemIdx,0);
        }
        Tree.expand(parentItemIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        super();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFillForNursingAssignment</Name>
				<Source><![CDATA[
    private void treeFillForNursingAssignment(TreeItemIdx _RecIdx,Recid _recId)
    {
        TreeItemIdx                     parentItemIdx;
        HMBuildingUnit                  hmBuildingUnitlocalForChildCheck;
        HMBuildingUnit                  hmBuildingUnitForTree;
        HMBuildingUnitCategory          hmBuildingUnitCategoryLocal;
        HMBuildingUnitCategory          hmBuildingUnitCategoryChildCheck;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
        HMBuildingUnitType              hmBuildingUnitTypeChildCheck;
        FormTreeItem                    formTreeItem;
    
        while select * from hmBuildingUnitForTree
            where hmBuildingUnitForTree.HMBuildingUnit == _recId
            join * from hmBuildingUnitCategoryLocal
            join * from hmBuildingUnitTypeLocal
            where hmBuildingUnitForTree.HMBuildingUnitCategory == hmBuildingUnitCategoryLocal.RecId
            && hmBuildingUnitCategoryLocal.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
            && hmBuildingUnitForTree.IsBlocked == NoYes::No
            //&& (hmBuildingUnitForTree.FromDate > today() && hmBuildingUnitForTree.ToDate < today())
        {
            if (hmBuildingUnitForTree.FromDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) <= hmBuildingUnitForTree.ToDate)
            {
                select count(recId) from hmBuildingUnitlocalForChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnit == hmBuildingUnitForTree.RecId
                join * from hmBuildingUnitCategoryChildCheck
                join * from hmBuildingUnitTypeChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategoryChildCheck.RecId
                && hmBuildingUnitCategoryChildCheck.HMBuildingUnitType == hmBuildingUnitTypeChildCheck.RecId
                && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
                && hmBuildingUnitlocalForChildCheck.IsBlocked == NoYes::No
                && hmBuildingUnitlocalForChildCheck.FromDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
                && hmBuildingUnitlocalForChildCheck.ToDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    
                if(hmBuildingUnitlocalForChildCheck.RecId>0)
                {
                    formTreeItem = new FormTreeItem();
                    //BP deviation documented
                    formTreeItem.text(hmBuildingUnitForTree.Description);
                    formTreeItem.data(hmBuildingUnitForTree.RecId);
    
                    parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                    //if(lastSelected == hmOrganizationalUnitForTree.Description)
                    //{
                        //initialSelection = parentItemIdx;
                    //}
    
                    this.treeFillForNursingAssignment(parentItemIdx,hmBuildingUnitForTree.RecId);
                }
                else
                {
                    formTreeItem = new FormTreeItem();
                    //BP deviation documented
                    formTreeItem.text(hmBuildingUnitForTree.Description);
                    formTreeItem.data(hmBuildingUnitForTree.RecId);
    
                    parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                    //if(lastSelected == hmOrganizationalUnitForTree.Description)
                    //{
                        //initialSelection = parentItemIdx;
                    //}
    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeFillForOthers</Name>
				<Source><![CDATA[
    private void treeFillForOthers(TreeItemIdx _RecIdx,Recid _recId)
    {
        TreeItemIdx                     parentItemIdx;
        HMBuildingUnit                  hmBuildingUnitlocalForChildCheck;
        HMBuildingUnit                  hmBuildingUnitForTree;
        HMBuildingUnitCategory          hmBuildingUnitCategoryLocal;
        HMBuildingUnitCategory          hmBuildingUnitCategoryChildCheck;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
        HMBuildingUnitType              hmBuildingUnitTypeChildCheck;
        FormTreeItem                    formTreeItem;
    
        while select * from hmBuildingUnitForTree
            where hmBuildingUnitForTree.HMBuildingUnit == _recId
            join * from hmBuildingUnitCategoryLocal
            join * from hmBuildingUnitTypeLocal
            where hmBuildingUnitForTree.HMBuildingUnitCategory == hmBuildingUnitCategoryLocal.RecId
            && hmBuildingUnitCategoryLocal.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
            && hmBuildingUnitForTree.IsBlocked == NoYes::No
    
    
        {
            //info(date2StrXpp(hmBuildingUnitForTree.FromDate) + ' - ' +  date2StrXpp(hmBuildingUnitForTree.ToDate));
            if (hmBuildingUnitForTree.FromDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) <= hmBuildingUnitForTree.ToDate)
            {
                select count(recId) from hmBuildingUnitlocalForChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnit == hmBuildingUnitForTree.RecId
                join * from hmBuildingUnitCategoryChildCheck
                join * from hmBuildingUnitTypeChildCheck
                where hmBuildingUnitlocalForChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategoryChildCheck.RecId
                && hmBuildingUnitCategoryChildCheck.HMBuildingUnitType == hmBuildingUnitTypeChildCheck.RecId
                && (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Others || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::Building)
                && hmBuildingUnitlocalForChildCheck.IsBlocked == NoYes::No
                && hmBuildingUnitlocalForChildCheck.FromDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
                && hmBuildingUnitlocalForChildCheck.ToDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    
                if(hmBuildingUnitlocalForChildCheck.RecId>0)
                {
                    formTreeItem = new FormTreeItem();
                    //BP deviation documented
                    formTreeItem.text(hmBuildingUnitForTree.Description);
                    formTreeItem.data(hmBuildingUnitForTree.RecId);
    
                    parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                    //if(lastSelected == hmOrganizationalUnitForTree.Description)
                    //{
                        //initialSelection = parentItemIdx;
                    //}
    
                    this.treeFillForOthers(parentItemIdx,hmBuildingUnitForTree.RecId);
                }
                else
                {
                    formTreeItem = new FormTreeItem();
                    //BP deviation documented
                    formTreeItem.text(hmBuildingUnitForTree.Description);
                    formTreeItem.data(hmBuildingUnitForTree.RecId);
    
                    parentItemIdx = Tree.addItem(_RecIdx,FormTreeAdd::Sort,formTreeItem);
    
                    //if(lastSelected == hmOrganizationalUnitForTree.Description)
                    //{
                        //initialSelection = parentItemIdx;
                    //}
    
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMBuildingUnitType</Name>
				<Methods>
					<Method>
						<Name>init</Name>
						<Source><![CDATA[
        public void init()
        {
            HMOrganizationaCategory         hmOrganizationaCategory;
            super();
            select * from hmOrganizationaCategory
                where hmOrganizationaCategory.RecId == str2int64(element.args().parm());
            if(hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::NursingAssignments)
            {
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::RoomWithBedSupport));
            }
            else if(hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::TreatmentUnit || hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::OutpatientTreatment ||
                        hmOrganizationaCategory.Indicator == HMOrganizationalCategoryIndicator::OtherUnit)
            {
                this.query().dataSourceTable(tableNum(HMBuildingUnitType)).addRange(fieldNum(HMBuildingUnitType,Indicators)).value(SysQuery::value(HMBuildingUnitTypeIndicator::TreatmentRoom));
            }
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Ok</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            HMOrganizationalBuildingUnit    hmOrganizationalBuildingUnit;//,hmOrganizationalBuildingUnitForExist;
            HMBuildingUnitType              hmBuildingUnitTypeLocal;
            FormTreeItem                    selectedTreeItem = tree.getItem(tree.getSelection());
            hmBuildingUnitTypeLocal = HMBuildingUnitType::find(HMBuildingUnitCategory::find(HMBuildingUnit::find(selectedTreeItem.data()).HMBuildingUnitCategory).HMBuildingUnitType);
        
            if (hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::TreatmentRoom || hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport)
            {
                hmOrganizationalBuildingUnit.HMOrganizationalUnit = oraganizationalUnitRecId;
                hmOrganizationalBuildingUnit.HMBuildingUnit = selectedTreeItem.data();
                if(hmOrganizationalBuildingUnit.validateWrite())
                {
                    hmOrganizationalBuildingUnit.insert();
                    formRun = element.args().caller();
        
                    if (formHasMethod(formRun, identifierstr(refreshData)))
                    {
                        formRunObject = formRun;
                        formRunObject.refreshData();
                    }
                    super();
                    element.close();
                }
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnit</Name>
			<Table>HMBuildingUnit</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Census</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DimensionDefault</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>FromDate</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Gender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBedClass</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBedType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBlockingReasonCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnit</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMTreatmentClassification</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsBlocked</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>IsGender</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>MaximumCapacity</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ShortName</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ToDate</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMBuildingUnitCategory</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnitCategory</Name>
			<Table>HMBuildingUnitCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<JoinSource>HMBuildingUnitType</JoinSource>
			<LinkType>InnerJoin</LinkType>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnitType</Name>
			<Table>HMBuildingUnitType</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>createdDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Indicators</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedBy</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>modifiedDateTime</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<BackgroundColor xmlns="">WindowBackground</BackgroundColor>
		<Caption xmlns="">Organization building unit</Caption>
		<Frame xmlns="">None</Frame>
		<HideToolbar xmlns="">Yes</HideToolbar>
		<Scrollbars xmlns="">No</Scrollbars>
		<StatusBarStyle xmlns="">None</StatusBarStyle>
		<Style xmlns="">DropDialog</Style>
		<Width xmlns="">300</Width>
		<WindowType xmlns="">Popup</WindowType>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogContent</Name>
				<ElementPosition>429496729</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Visible>No</Visible>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGridControl">
						<Name>Grid</Name>
						<AllowEdit>No</AllowEdit>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<Type>Grid</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Visible>No</Visible>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HMBuildingUnit_Code</Name>
								<ElementPosition>1073741822</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Code</DataField>
								<DataSource>HMBuildingUnit</DataSource>
							</AxFormControl>
							<AxFormControl xmlns=""
								i:type="AxFormStringControl">
								<Name>HMBuildingUnit_Description</Name>
								<ElementPosition>1610612733</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>String</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<DataField>Description</DataField>
								<DataSource>HMBuildingUnit</DataSource>
							</AxFormControl>
						</Controls>
						<DataSource>HMBuildingUnitType</DataSource>
					</AxFormControl>
				</Controls>
				<BackStyle>Opaque</BackStyle>
				<BackgroundColor>DynBackgroundWhite</BackgroundColor>
				<DataSource>HMBuildingUnit</DataSource>
				<FrameType>None</FrameType>
				<Style>DialogContent</Style>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormStaticTextControl">
				<Name>MainInstruction</Name>
				<ElementPosition>858993458</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Left>5</Left>
				<LeftMode>Manual</LeftMode>
				<Top>5</Top>
				<TopMode>Manual</TopMode>
				<Type>StaticText</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Style>MainInstruction</Style>
				<Text>@MAZ3412</Text>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormTreeControl">
				<Name>Tree</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1288490187</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Left>10</Left>
				<LeftMode>Manual</LeftMode>
				<Type>Tree</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<Width>280</Width>
				<WidthMode>Auto</WidthMode>
				<FormControlExtension
					i:nil="true" />
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>DialogCommit</Name>
				<ElementPosition>1717986916</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormButtonGroupControl">
						<Name>ButtonGroup</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ButtonGroup</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonControl">
								<Name>Ok</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<HelpText>@SYS128940</HelpText>
								<Skip>Yes</Skip>
								<Type>Button</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<AutoRefreshData>Yes</AutoRefreshData>
								<DefaultButton>Yes</DefaultButton>
								<MultiSelect>Yes</MultiSelect>
								<SaveRecord>No</SaveRecord>
								<Text>@SYS2245</Text>
							</AxFormControl>
						</Controls>
						<ArrangeMethod>Vertical</ArrangeMethod>
						<Style>DialogCommitContainer</Style>
					</AxFormControl>
				</Controls>
				<BackStyle>Auto</BackStyle>
				<Style>DialogCommit</Style>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>