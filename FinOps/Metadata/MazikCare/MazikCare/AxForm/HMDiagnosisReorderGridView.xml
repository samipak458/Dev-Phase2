<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMDiagnosisReorderGridView</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMDiagnosisReorderGridView extends FormRun
{
    //TODO: AX7 code conflict
    //DiagnosisReorderGridView.HMDiagnosisGridView dgv;
    
}
]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        element.args().caller().refreshData();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertObjectToString</Name>
				<Source><![CDATA[
    private str convertObjectToString(System.Object obj)
    {
        return System.Convert::ToString(obj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    //public void dgv_CellClick(object sender, System.Windows.Forms.DataGridViewCellEventArgs e)
    //{
    //    //dgv.revertCellColor();
    //}

    //void dgv_CellMouseDown(object sender, System.Windows.Forms.DataGridViewCellMouseEventArgs e)
    //{
    //    //dgv.revertCellColor();
    //    //dgv.dataGridView_CellMouseDown(sender,e);
    //}

    //void dgv_DragDrop(object sender, System.Windows.Forms.DragEventArgs e)
    //{
    //    str value;
    //    System.String[]  result;
    //    result = dgv.dataGridView_DragDrop(sender,e);
    //    if(result != null)
    //    {
    //        value = System.Convert::ToString(result.get_Item(0));
    //        if(value == 'Cell')
    //        {
    //            if(this.swapCellRecord(result))
    //            {
    //                Button.enabled(true);
    //                this.populateData();
    //                dgv.changeCellColor();
    //            }
    //            else
    //            {
    //                this.populateData();
    //            }

    //        }
    //        else
    //        {
    //            this.swapRowRecord(result);
    //            Button.enabled(true);
    //            this.populateData();
    //        }
    //    }

    //}

    //void dgv_DragEnter(object sender, System.Windows.Forms.DragEventArgs e)
    //{
    //    e.set_Effect(System.Windows.Forms.DragDropEffects::All);
    //}

    public void init()
    {
        super();
        //dgv = ManagedHost.control();
        //dgv.add_DragEnter(new ManagedEventHandler(this, 'dgv_DragEnter'));
        //dgv.add_CellMouseDown(new ManagedEventHandler(this,'dgv_CellMouseDown'));
        //dgv.add_DragDrop(new ManagedEventHandler(this,'dgv_DragDrop'));
        //dgv.add_CellClick(new ManagedEventHandler(this,'dgv_CellClick'));
        //dt = new System.Data.DataTable();
        //dgv.InitializeTable(dt);
        //dgv = ManagedHost.control();
        //dgv.AddNewRow(dt,0,0,0,'adads',0,'adsad',0,'adsadsad',0,'asdadsads',0,'adsasdads');
        //dgv.AddNewRow(dt,0,0,0,'adads',0,'adsad',0,'adsadsad',0,'asdadsads',0,'adsasdads');
        //dgv.AddNewRow(dt,0,0,0,'adads',0,'adsad',0,'adsadsad',0,'asdadsads',0,'adsasdads');
        //dgv.AddNewRow(dt,0,0,0,'adads',0,'adsad',0,'adsadsad',0,'asdadsads',0,'adsasdads');
        //dgv.AddNewRow(dt,0,0,0,'adads',0,'adsad',0,'adsadsad',0,'asdadsads',0,'adsasdads');
        //dgv.BindTableWithGrid(dt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performSingleSourceTableValidation</Name>
				<Source><![CDATA[
    private boolean performSingleSourceTableValidation(HMPatientChargeEntryLine source)
    {
        if(source.RecId != 0)
        {
            if(source.validateWrite())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>performValidation</Name>
				<Source><![CDATA[
    private boolean performValidation(HMPatientChargeEntryLine source,
                        HMPatientChargeEntryLine destination)
    {
        if(source.RecId != 0 && destination.RecId != 0)
        {
            if(source.validateWrite() && destination.validateWrite())
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return false;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    public void populateData()
    {
        System.Data.DataTable dt;
        HMPatientChargeEntryLine    hmPatientChargeEntryLineLocal;
        HMPatientChargeEntryTable   hmPatientChargeEntryTableLocal;
    
        dt = new System.Data.DataTable();
        //dgv.InitializeTable(dt);
    
        //while select * from hmPatientChargeEntryLineLocal
        //    join * from hmPatientChargeEntryTableLocal
        //    order by hmPatientChargeEntryLineLocal.ProcedureOrder asc
        //    where hmPatientChargeEntryTableLocal.RecId == hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable
        //    && hmPatientChargeEntryTableLocal.RecId == HMPatientChargeEntryLine::find(element.args().record().RecId).HMPatientChargeEntryTable

        //{
        //    //dgv.AddNewRow(dt,hmPatientChargeEntryLineLocal.RecId,
        //    //                hmPatientChargeEntryLineLocal.ProcedureOrder,
        //    //                InventTable::find(hmPatientChargeEntryLineLocal.InventTable).RecId,hmPatientChargeEntryLineLocal.InventTable,
        //    //                hmPatientChargeEntryLineLocal.Diagnosis1,
        //    //                HMDiagnosisDictionary::find(hmPatientChargeEntryLineLocal.Diagnosis1).Code,
        //    //                hmPatientChargeEntryLineLocal.Diagnosis2,
        //    //                HMDiagnosisDictionary::find(hmPatientChargeEntryLineLocal.Diagnosis2).Code,
        //    //                hmPatientChargeEntryLineLocal.Diagnosis3,
        //    //                HMDiagnosisDictionary::find(hmPatientChargeEntryLineLocal.Diagnosis3).Code,
        //    //                hmPatientChargeEntryLineLocal.Diagnosis4,
        //    //                HMDiagnosisDictionary::find(hmPatientChargeEntryLineLocal.Diagnosis4).Code);
        //}
        //dgv.BindTableWithGrid(dt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
    
        super();
        this.populateData();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapCellRecord</Name>
				<Source><![CDATA[
    public boolean swapCellRecord(System.String[] array,boolean undo = false)
    {
        HMPatientChargeEntryLine    source,destination;
        ListEnumerator              enum;
    
        boolean                     ret;
        str diagSourceColumnName,diagDestinationColumnName;
        RecId diagSourceRecId, diagSDestinationRecId,temp;
        List SourceRowRecId, DestinationRowRecId, DiagnosisSourceRecID, DiagnosisDestinationRecID;
        SourceRowRecId = new List(Types::String);
        DestinationRowRecId = new List(Types::String);
        DiagnosisSourceRecID = new List(Types::String);
        DiagnosisDestinationRecID = new List(Types::String);
        ret = false;
    
        try
        {
            SourceRowRecId = strSplit(this.convertObjectToString(array.get_Item(1)),',');
            DestinationRowRecId = strSplit(this.convertObjectToString(array.get_Item(2)),',');
            DiagnosisSourceRecID = strSplit(this.convertObjectToString(array.get_Item(3)),',');
            DiagnosisDestinationRecID = strSplit(this.convertObjectToString(array.get_Item(4)),',');
            ttsBegin;
            enum = SourceRowRecId.getEnumerator();
            enum.moveNext();
            enum.moveNext();
            source = HMPatientChargeEntryLine::find(enum.current(),true);
    
            enum = DestinationRowRecId.getEnumerator();
            enum.moveNext();
            enum.moveNext();
            destination = HMPatientChargeEntryLine::find(enum.current(),true);
    
            enum = DiagnosisSourceRecID.getEnumerator();
            enum.moveNext();
            enum.moveNext();
            diagSourceRecId = enum.current();
            enum.moveNext();
            diagSourceColumnName = enum.current();
    
            enum = DiagnosisDestinationRecID.getEnumerator();
            enum.moveNext();
            enum.moveNext();
            diagSDestinationRecId = enum.current();
            enum.moveNext();
            diagDestinationColumnName = enum.current();
            if(diagSourceColumnName != '' && diagDestinationColumnName != ''  && diagSourceRecId != 0 && source.RecId != 0 && destination.RecId != 0 || undo == true)
            {
                if(undo)
                {
                    temp = diagSDestinationRecId;
                    diagSDestinationRecId = diagSourceRecId;
                    diagSourceRecId = temp;
                }
                ret = this.updateRecord(diagSourceColumnName,
                                diagDestinationColumnName,
                                diagSDestinationRecId,
                                diagSourceRecId,
                                source,
                                destination);
            }
            else
            {
                ret = false;
                warning('Error');
            }
    
            ttsCommit;
            return ret;
        }
        catch
        {
            warning('Exception occur while updating data');
            ttsAbort;
            this.populateData();
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapRowRecord</Name>
				<Source><![CDATA[
    public void swapRowRecord(System.String[] array)
    {
        HMPatientChargeEntryLine    source,destination;
        int                         sourcePriority,destPriority;
        ListEnumerator              enum;
        List                        SourceRow, DestinationRow;
        SourceRow = new List(Types::String);
        DestinationRow = new List(Types::String);
    
        SourceRow = strSplit(this.convertObjectToString(array.get_Item(1)),',');
        DestinationRow = strSplit(this.convertObjectToString(array.get_Item(2)),',');
    
    
        ttsBegin;
        enum = SourceRow.getEnumerator();
        enum.moveNext();
        enum.moveNext();
        source = HMPatientChargeEntryLine::find(enum.current(),true);
        sourcePriority = source.ProcedureOrder;
    
        enum = DestinationRow.getEnumerator();
        enum.moveNext();
        enum.moveNext();
        destination = HMPatientChargeEntryLine::find(enum.current(),true);
        destPriority = destination.ProcedureOrder;
    
        source.ProcedureOrder   = destPriority;
        destination.ProcedureOrder = sourcePriority;
        source.update();
        destination.update();
        ttsCommit;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecord</Name>
				<Source><![CDATA[
    private boolean updateRecord(str diagSourceColumnName,
                        str diagDestinationColumnName,
                        RecId diagSDestinationRecId,
                        RecId diagSourceRecId,
                        HMPatientChargeEntryLine source,
                        HMPatientChargeEntryLine destination)
    {
        boolean ret;
        ret = false;
        switch(diagSourceColumnName)
        {
            case 'Dx 1':
            if(diagDestinationColumnName == 'Dx 1')
            {
                source.Diagnosis1 =  diagSDestinationRecId;
                destination.Diagnosis1 = diagSourceRecId;
                if(this.performValidation(source,destination))
                {
                    source.update();
                    destination.update();
                    ret = true;
                }
            }
            else if(diagDestinationColumnName == 'Dx 2')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis1 =  diagSDestinationRecId;
                    source.Diagnosis2 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis1 = diagSDestinationRecId;
                    destination.Diagnosis2 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 3')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis1 =  diagSDestinationRecId;
                    source.Diagnosis3 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis1 = diagSDestinationRecId;
                    destination.Diagnosis3 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 4')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis1 =  diagSDestinationRecId;
                    source.Diagnosis4 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis1 = diagSDestinationRecId;
                    destination.Diagnosis4 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            break;
            case 'Dx 2':
            if(diagDestinationColumnName == 'Dx 1')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis2 =  diagSDestinationRecId;
                    source.Diagnosis1 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis2 =  diagSDestinationRecId;
                    destination.Diagnosis1 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 2')
            {
                source.Diagnosis2 =  diagSDestinationRecId;
                destination.Diagnosis2 = diagSourceRecId;
                if(this.performValidation(source,destination))
                {
                    source.update();
                    destination.update();
                    ret = true;
                }
            }
            else if(diagDestinationColumnName == 'Dx 3')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis2 =  diagSDestinationRecId;
                    source.Diagnosis3 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis2 = diagSDestinationRecId;
                    destination.Diagnosis3 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 4')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis2 =  diagSDestinationRecId;
                    source.Diagnosis4 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis2 = diagSDestinationRecId;
                    destination.Diagnosis4 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            break;
            case 'Dx 3':
            if(diagDestinationColumnName == 'Dx 1')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis3 =  diagSDestinationRecId;
                    source.Diagnosis1 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis3 =  diagSDestinationRecId;
                    destination.Diagnosis1 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 2')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis3 =  diagSDestinationRecId;
                    source.Diagnosis2 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis3 = diagSDestinationRecId;
                    destination.Diagnosis2 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 3')
            {
                source.Diagnosis3 =  diagSDestinationRecId;
                destination.Diagnosis3 = diagSourceRecId;
                if(this.performValidation(source,destination))
                {
                    source.update();
                    destination.update();
                    ret = true;
                }
            }
            else if(diagDestinationColumnName == 'Dx 4')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis3 =  diagSDestinationRecId;
                    source.Diagnosis4 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis3 = diagSDestinationRecId;
                    destination.Diagnosis4 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            break;
            case 'Dx 4':
            if(diagDestinationColumnName == 'Dx 1')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis4 =  diagSDestinationRecId;
                    source.Diagnosis1 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis4 =  diagSDestinationRecId;
                    destination.Diagnosis1 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 2')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis4 =  diagSDestinationRecId;
                    source.Diagnosis2 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis4 = diagSDestinationRecId;
                    destination.Diagnosis2 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 3')
            {
                if(source.RecId == destination.RecId)
                {
                    source.Diagnosis4 =  diagSDestinationRecId;
                    source.Diagnosis3 = diagSourceRecId;
                    if(this.performSingleSourceTableValidation(source))
                    {
                        source.update();
                        ret = true;
                    }
                }
                else
                {
                    source.Diagnosis4 = diagSDestinationRecId;
                    destination.Diagnosis3 = diagSourceRecId;
                    if(this.performValidation(source,destination))
                    {
                        source.update();
                        destination.update();
                        ret = true;
                    }
                }
            }
            else if(diagDestinationColumnName == 'Dx 4')
            {
                source.Diagnosis4 =  diagSDestinationRecId;
                destination.Diagnosis4 = diagSourceRecId;
                if(this.performValidation(source,destination))
                {
                    source.update();
                    destination.update();
                    ret = true;
                }
            }
            break;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="" />
		<DataControls xmlns="">
			<Control>
				<Name>Button</Name>
				<Type>Button</Type>
				<Methods>
					<Method>
						<Name>clicked</Name>
						<Source><![CDATA[
        void clicked()
        {
            str value;
            int Stackcount;
            System.String[]  result;
            //Stackcount = dgv.stackCount();
            if(Stackcount>0)
            {
                //result = dgv.PopStack();
                //Stackcount = dgv.stackCount();
                //if(Stackcount == 0)
                //{
                //    this.enabled(false);
                //}
                if(result != null)
                {
                    value = System.Convert::ToString(result.get_Item(0));
                    if(value == 'Cell')
                    {
                        if(element.swapCellRecord(result,true))
                        {
                            element.populateData();
                            //dgv.revertCellColor();
                        }
                        else
                        {
                            element.populateData();
                        }
        
                    }
                    else
                    {
                        element.swapRowRecord(result);
                        element.populateData();
                    }
                }
            }
            else
            {
                this.enabled(false);
            }
            super();
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMProcedureChargeTmp</Name>
			<Table>HMProcedureChargeTmp</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Ancillary</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>AssessCopay</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillInsurance</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>BillPatient</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>DisplayDesc</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Electronic</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMChargeCodeCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMPlaceOfService</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMTypeOfService</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>NumericCode</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>OvrwriteExist</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>ReqCLIA</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Tax</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Type</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources>
				<AxFormReferencedDataSource>
					<Name>HMTypeOfService</Name>
					<Table>HMTypeOfService</Table>
					<Fields>
						<AxFormDataSourceField>
							<DataField>Code</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>createdDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>dataAreaId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>Description</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>DimensionDefault</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedBy</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>modifiedDateTime</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>RecId</DataField>
						</AxFormDataSourceField>
						<AxFormDataSourceField>
							<DataField>TableId</DataField>
						</AxFormDataSourceField>
					</Fields>
					<ReferencedDataSources />
					<JoinSource>HMProcedureChargeTmp</JoinSource>
					<LinkType>OuterJoin</LinkType>
					<OnlyFetchActive>No</OnlyFetchActive>
					<JoinRelation>HMTypeOfService</JoinRelation>
				</AxFormReferencedDataSource>
			</ReferencedDataSources>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MAZ6490</Caption>
		<Height xmlns="">300</Height>
		<StatusBarStyle xmlns="">Simple</StatusBarStyle>
		<Style xmlns="">SimpleList</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>ButtonGroup</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormButtonControl">
										<Name>Button</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<Enabled>No</Enabled>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ6551</HelpText>
										<Type>Button</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Text>@SYS322572</Text>
									</AxFormControl>
								</Controls>
								<ArrangeMethod>Vertical</ArrangeMethod>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormManagedHostControl">
				<Name>ManagedHost</Name>
				<AutoDeclaration>Yes</AutoDeclaration>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>ManagedHost</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<AssemblyName>HMDiagnosisReorderGridView, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</AssemblyName>
				<RTLCapable>Yes</RTLCapable>
				<TypeName>DiagnosisReorderGridView.HMDiagnosisGridView</TypeName>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>