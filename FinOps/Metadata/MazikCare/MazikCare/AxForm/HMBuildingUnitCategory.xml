<?xml version="1.0" encoding="utf-8"?>
<AxForm xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="Microsoft.Dynamics.AX.Metadata.V6">
	<Name>HMBuildingUnitCategory</Name>
	<SourceCode>
		<Methods xmlns="">
			<Method>
				<Name>classDeclaration</Name>
				<Source><![CDATA[
[Form]
public class HMBuildingUnitCategory extends FormRun
{
    int64                   unitTypeID;
    int64                   ParentID;
    recId                   selectedRecId;
    CcFormTreeDatasource    hierarchyTree;
    ImageRes                imageRes;
    recid                   lastSelected;
    TreeItemIdx             lastSelectedIdx,lasttreeItemIdx;
    boolean                 isFirstTime;

}
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
    
        super();
        isFirstTime = false;
        this.ParentCall();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ParentCall</Name>
				<Source><![CDATA[
    public void ParentCall()
    {
        TreeItemIdx                     parentItemIdx;
    
        Tree.deleteAll();
        parentItemIdx = SysFormTreeControl::addTreeItem(Tree,"@MAZ70",
                                                       FormTreeAdd::Root,0,imageRes,1);
    
        this.TreeFill(parentItemIdx,0);
        Tree.expand(parentItemIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentID</Name>
				<Source><![CDATA[
    private void setParentID(int64 _parentID)
    {
        if(_parentID != 0)
        {
            ParentID = _parentID;
            HMUnitCategory.text(HMBuildingUnitCategory::find(ParentID).Description);
            HMBuildingUnitCategory.HMBuildingUnitCategory =_parentID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUnitTypeValue</Name>
				<Source><![CDATA[
    public void setUnitTypeValue(int64 _param)
    {
        //unitTypeID=_param;
        HMBuildingUnitCategory hmBuildingUnitCategoryLocal;
        hmBuildingUnitCategoryLocal = HMBuildingUnitCategory.orig();
        if (HMBuildingUnitCategory.HMBuildingUnitType != hmBuildingUnitCategoryLocal.HMBuildingUnitType)
        {
            if(HMBuildingUnitCategory.RecId != 0)
            {
                select count(RecId) from hmBuildingUnitCategoryLocal
                    where HMBuildingUnitCategory.RecId ==  hmBuildingUnitCategoryLocal.HMBuildingUnitCategory;
                if(hmBuildingUnitCategoryLocal.RecId>0)
                {
                    warning('Cannot change building unit type, ' + HMBuildingUnitCategory.Description + ' predecessor exist');
                    HMBuildingUnitCategory_HMBuildingUnitType.value(HMBuildingUnitCategory.HMBuildingUnitType);
                }
                else
                {
                    HMBuildingUnitCategory.HMBuildingUnitType = _param;
                }
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>TreeFill</Name>
				<Source><![CDATA[
    public void TreeFill(TreeItemIdx _RecId,int64 _RecIdx)
    {
        TreeItemIdx                 parentItemIdx;
        boolean                     hasChild;
        HMBuildingUnitCategory      hmBuildingUnitCategoryForChildCheck;
        HMBuildingUnitCategory      hmBuildingUnitCategorylocalForTree;
        hasChild = false;
    
            while select * from hmBuildingUnitCategorylocalForTree
                where hmBuildingUnitCategorylocalForTree.HMBuildingUnitCategory == _RecIdx
            {
                while select * from hmBuildingUnitCategoryForChildCheck
                    where hmBuildingUnitCategoryForChildCheck.HMBuildingUnitCategory == hmBuildingUnitCategorylocalForTree.RecId
                {
                      hasChild = true;
                }
    
                if(hasChild)
                {
                    parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitCategorylocalForTree.Description,
                                                                    _RecId,hmBuildingUnitCategorylocalForTree.RecId,imageRes,1);
                    if(lastSelected == hmBuildingUnitCategorylocalForTree.RecId)
                    {
                        lastSelectedIdx = parentItemIdx;
                    }
                    this.TreeFill(parentItemIdx,hmBuildingUnitCategorylocalForTree.RecId);
                    hasChild=false;
                }
                else
                {
                   parentItemIdx = SysFormTreeControl::addTreeItem(Tree,hmBuildingUnitCategorylocalForTree.Description,
                                                                    _RecId,hmBuildingUnitCategorylocalForTree.RecId,imageRes,0);
    
                    if(lastSelected == hmBuildingUnitCategorylocalForTree.RecId)
                    {
                        lastSelectedIdx = parentItemIdx;
                    }
                }
            }
    
    }

]]></Source>
			</Method>
		</Methods>
		<DataSources xmlns="">
			<DataSource>
				<Name>HMBuildingUnitCategory</Name>
				<Methods>
					<Method>
						<Name>initValue</Name>
						<Source><![CDATA[
        public void initValue()
        {
            super();
        
            HMUnitCategory.enabled(true);
            HMUnitCategory.text("");
        }

]]></Source>
					</Method>
					<Method>
						<Name>validateWrite</Name>
						<Source><![CDATA[
        public boolean validateWrite()
        {
            boolean ret;
            //HMBuildingUnitCategory  hmBuildingUnitCategoryLocal; - 26th June 2012, removed for BP error
            ret = super();
        
            if(ret)
            {
                if(HMUnitCategory.valueStr()== "")
                {
                    HMBuildingUnitCategory.HMBuildingUnitCategory = 0;
                }
        
                if(HMBuildingUnitCategory.HMBuildingUnitCategory == 0)
                {
                    if(HMBuildingUnitType::find(HMBuildingUnitCategory.HMBuildingUnitType).Indicators != HMBuildingUnitTypeIndicator::Others
                        && HMBuildingUnitType::find(HMBuildingUnitCategory.HMBuildingUnitType).Indicators != HMBuildingUnitTypeIndicator::Building)
                    {
        
                        warning('Location cannot be empty for type ' +  enum2str(HMBuildingUnitType::find(HMBuildingUnitCategory.HMBuildingUnitType).Indicators));
                        tree.select(lastSelectedIdx);
                        ret = false;
                    }
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
					<Method>
						<Name>create</Name>
						<Source><![CDATA[
        public void create(boolean _append = false)
        {
           // HMUnitCategory.enabled(true);
           // HMUnitCategory.text("");
            super(_append);
        }

]]></Source>
					</Method>
					<Method>
						<Name>delete</Name>
						<Source><![CDATA[
        public void delete()
        {
            super();
            element.ParentCall();
        }

]]></Source>
					</Method>
					<Method>
						<Name>write</Name>
						<Source><![CDATA[
        public void write()
        {
        
            //if(HMBuildingUnitCategory.HMBuildingUnitCategory == 0)
            //{
                //if(HMBuildingUnitType::find(HMBuildingUnitCategory.HMBuildingUnitType).Indicators != HMBuildingUnitTypeIndicator::Others)
                //{
        //
                    //info('Location cannot be empty for type ' +  enum2str(HMBuildingUnitType::find(HMBuildingUnitCategory.HMBuildingUnitType).Indicators));
                    //return;
                //}
            //}
            //if(HMUnitCategory.valueStr()== "")
            //{
                //HMBuildingUnitCategory.HMBuildingUnitCategory = 0;
            //}
            //else
            //{
                //HMBuildingUnitCategory.HMBuildingUnitCategory = ParentID;
            //}
            super();
            //ParentID=0;
        
            lastSelected = HMBuildingUnitCategory.RecId;
        
            element.ParentCall();
            tree.select(lastSelectedIdx);
        }

]]></Source>
					</Method>
				</Methods>
				<Fields />
			</DataSource>
		</DataSources>
		<DataControls xmlns="">
			<Control>
				<Name>Tree</Name>
				<Type>Tree</Type>
				<Methods>
					<Method>
						<Name>selectionChanged</Name>
						<Source><![CDATA[
        public void selectionChanged(FormTreeItem _OldItem, FormTreeItem _NewItem, FormTreeSelect _how)
        {
        
            FormTreeItem selectedTreeItem = tree.getItem(tree.getSelection());
            super(_OldItem, _NewItem, _how);
        
        
            if(tree.getRoot() == tree.getSelection())
            {
                HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).clearRanges();
                HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).addRange(fieldNum(HMBuildingUnitCategory,recId)).value('0');
                HMBuildingUnitCategory_ds.executeQuery();
                HMUnitCategory.enabled(false);
                HMUnitCategory.text("");
                lastSelectedIdx = selectedTreeItem.idx();
            }
            else
            {
                HMUnitCategory.enabled(true);
                if (tree.getRoot() != lastSelectedIdx)
                {
                    if(selectedTreeItem.idx() != lastSelectedIdx)
                    {
                        if(HMBuildingUnitCategory_ds.validateWrite())
                        {
                            HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).clearRanges();
        
                            selectedRecId = selectedTreeItem.data();
        
        
                            HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).addRange(fieldNum(HMBuildingUnitCategory,recId)).value(int642str(selectedRecId));
                            HMBuildingUnitCategory_ds.executeQuery();
                            lastSelectedIdx = selectedTreeItem.idx();
        
                            ParentID = HMBuildingUnitCategory::find(HMBuildingUnitCategory.HMBuildingUnitCategory).RecId;
                            HMUnitCategory.text(HMBuildingUnitCategory::find(ParentID).Description);
                        }
                        else
                        {
                            tree.select(lastSelectedIdx);
                        }
                    }
                }
                else
                {
                    HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).clearRanges();
        
                    selectedRecId = selectedTreeItem.data();
        
        
                    HMBuildingUnitCategory_q.dataSourceTable(tableNum(HMBuildingUnitCategory)).addRange(fieldNum(HMBuildingUnitCategory,recId)).value(int642str(selectedRecId));
                    HMBuildingUnitCategory_ds.executeQuery();
                    lastSelectedIdx = selectedTreeItem.idx();
                }
        
        
            }
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMBuildingUnitCategory_HMBuildingUnitType</Name>
				<Type>ReferenceGroup</Type>
				<Methods>
					<Method>
						<Name>modified</Name>
						<Source><![CDATA[
        public boolean modified()
        {
            boolean ret;
            HMBuildingUnitCategory hmBuildingUnitCategoryLocal;
            HMBuildingUnitCategory hmBuildingUnitCategoryLocalOrig;
            int64                       unitTypeRecId;
            ret = super();
        
            if(ret)
            {
                unitTypeRecId = str2int64(HMBuildingUnitCategory_HMBuildingUnitType.valueStr());
        
                hmBuildingUnitCategoryLocalOrig = HMBuildingUnitCategory.orig();
                if(HMBuildingUnitCategory.RecId != 0)
                {
                    select count(RecId) from hmBuildingUnitCategoryLocal
                        where HMBuildingUnitCategory.RecId ==  hmBuildingUnitCategoryLocal.HMBuildingUnitCategory;
                    if(hmBuildingUnitCategoryLocal.RecId>0)
                    {
                        warning('Cannot change building unit type, ' + HMBuildingUnitCategory.Description + ' predecessor exist');
                        ret = false;
                        this.value(hmBuildingUnitCategoryLocalOrig.HMBuildingUnitType);
                        HMBuildingUnitCategory.HMBuildingUnitType = hmBuildingUnitCategoryLocalOrig.HMBuildingUnitType;
                    }
                }
            }
        
            return ret;
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
			<Control>
				<Name>HMUnitCategory</Name>
				<Type>String</Type>
				<Methods>
					<Method>
						<Name>lookup</Name>
						<Source><![CDATA[
        public void lookup()
        {
            Args args = new Args();
            FormRun itemLookUp;
        
        
            args.name(formstr(HMBuildingUnitCategoryLookup));
            args.caller(element);
            args.record(HMBuildingUnitCategory);
            args.parm(HMBuildingUnitCategory_HMBuildingUnitType.valueStr() + '-' + HMUnitCategory.text());
            itemLookUp = ClassFactory.formRunClass(args);
            itemLookUp.init();
            this.performFormLookup(itemLookUp);
        }

]]></Source>
					</Method>
				</Methods>
			</Control>
		</DataControls>
		<Members xmlns="" />
	</SourceCode>
	<DataSources>
		<AxFormDataSource xmlns="">
			<Name>HMBuildingUnitCategory</Name>
			<Table>HMBuildingUnitCategory</Table>
			<Fields>
				<AxFormDataSourceField>
					<DataField>Code</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>dataAreaId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>Description</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitCategory</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>HMBuildingUnitType</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>RecId</DataField>
				</AxFormDataSourceField>
				<AxFormDataSourceField>
					<DataField>TableId</DataField>
				</AxFormDataSourceField>
			</Fields>
			<ReferencedDataSources />
			<InsertIfEmpty>No</InsertIfEmpty>
			<DataSourceLinks />
			<DerivedDataSources />
		</AxFormDataSource>
	</DataSources>
	<Design>
		<Caption xmlns="">@MAZ2522</Caption>
		<ColumnSpace xmlns="">0</ColumnSpace>
		<ColumnSpaceMode xmlns="">Fixed</ColumnSpaceMode>
		<Columns xmlns="">2</Columns>
		<Style xmlns="">SimpleListDetails</Style>
		<Controls xmlns="">
			<AxFormControl xmlns=""
				i:type="AxFormActionPaneControl">
				<Name>ActionPane</Name>
				<ElementPosition>715827882</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>Auto</HeightMode>
				<Type>ActionPane</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormActionPaneTabControl">
						<Name>ActionPaneTab</Name>
						<ElementPosition>1431655764</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>ActionPaneTab</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormButtonGroupControl">
								<Name>RecordBasics</Name>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>ButtonGroup</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>Auto</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls />
								<ArrangeMethod>Vertical</ArrangeMethod>
								<DataSource>HMBuildingUnitCategory</DataSource>
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<AlignChildren>No</AlignChildren>
						<ArrangeMethod>Vertical</ArrangeMethod>
					</AxFormControl>
				</Controls>
				<AlignChild>No</AlignChild>
				<AlignChildren>No</AlignChildren>
				<ArrangeMethod>Vertical</ArrangeMethod>
			</AxFormControl>
			<AxFormControl xmlns=""
				i:type="AxFormGroupControl">
				<Name>Group_</Name>
				<ElementPosition>1431655764</ElementPosition>
				<FilterExpression>%1</FilterExpression>
				<HeightMode>SizeToAvailable</HeightMode>
				<Type>Group</Type>
				<VerticalSpacing>-1</VerticalSpacing>
				<WidthMode>SizeToAvailable</WidthMode>
				<FormControlExtension
					i:nil="true" />
				<Controls>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>TreeContainer</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>858993458</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<Width>300</Width>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormTreeControl">
								<Name>Tree</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>SizeToAvailable</HeightMode>
								<Type>Tree</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<FormControlExtension
									i:nil="true" />
							</AxFormControl>
						</Controls>
						<AlignChild>No</AlignChild>
						<RightMargin>0</RightMargin>
						<RightMarginMode>Fixed</RightMarginMode>
						<Style>BorderlessGridContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>VSplitter</Name>
						<AutoDeclaration>Yes</AutoDeclaration>
						<ElementPosition>1288490187</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>Auto</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>Auto</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls />
						<Columns>0</Columns>
						<FramePosition>Inside</FramePosition>
						<Style>SplitterVerticalContainer</Style>
					</AxFormControl>
					<AxFormControl xmlns=""
						i:type="AxFormGroupControl">
						<Name>DetailsHeader</Name>
						<ElementPosition>1717986916</ElementPosition>
						<FilterExpression>%1</FilterExpression>
						<HeightMode>SizeToAvailable</HeightMode>
						<Type>Group</Type>
						<VerticalSpacing>-1</VerticalSpacing>
						<WidthMode>SizeToAvailable</WidthMode>
						<FormControlExtension
							i:nil="true" />
						<Controls>
							<AxFormControl xmlns=""
								i:type="AxFormGroupControl">
								<Name>Group1</Name>
								<AutoDeclaration>Yes</AutoDeclaration>
								<ElementPosition>1431655764</ElementPosition>
								<FilterExpression>%1</FilterExpression>
								<HeightMode>Auto</HeightMode>
								<Type>Group</Type>
								<VerticalSpacing>-1</VerticalSpacing>
								<WidthMode>SizeToAvailable</WidthMode>
								<FormControlExtension
									i:nil="true" />
								<Controls>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMBuildingUnitCategory_Code1</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>715827882</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Code</DataField>
										<DataSource>HMBuildingUnitCategory</DataSource>
										<Label>@MAZ1106</Label>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMBuildingUnitCategory_Description1</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1073741823</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<DataField>Description</DataField>
										<DataSource>HMBuildingUnitCategory</DataSource>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormReferenceGroupControl">
										<Name>HMBuildingUnitCategory_HMBuildingUnitType</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1431655764</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1918</HelpText>
										<Type>ReferenceGroup</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Controls />
										<DataSource>HMBuildingUnitCategory</DataSource>
										<Label>@SYS325014</Label>
										<Mandatory>Yes</Mandatory>
										<ReferenceField>HMBuildingUnitType</ReferenceField>
										<ReplacementFieldGroup>Description</ReplacementFieldGroup>
									</AxFormControl>
									<AxFormControl xmlns=""
										i:type="AxFormStringControl">
										<Name>HMUnitCategory</Name>
										<AutoDeclaration>Yes</AutoDeclaration>
										<ElementPosition>1789569705</ElementPosition>
										<FilterExpression>%1</FilterExpression>
										<HeightMode>Auto</HeightMode>
										<HelpText>@MAZ1916</HelpText>
										<NeededPermission>Manual</NeededPermission>
										<Type>String</Type>
										<VerticalSpacing>-1</VerticalSpacing>
										<WidthMode>Auto</WidthMode>
										<FormControlExtension
											i:nil="true" />
										<Label>@SYS14719</Label>
									</AxFormControl>
								</Controls>
								<Caption>@MAZ1917</Caption>
								<FrameType>None</FrameType>
							</AxFormControl>
						</Controls>
						<Columnspace>0</Columnspace>
						<ColumnspaceMode>Fixed</ColumnspaceMode>
						<RightMargin>5</RightMargin>
						<RightMarginMode>Fixed</RightMarginMode>
						<TopMargin>5</TopMargin>
						<TopMarginMode>Fixed</TopMarginMode>
					</AxFormControl>
				</Controls>
				<Columns>3</Columns>
				<Columnspace>0</Columnspace>
				<ColumnspaceMode>Fixed</ColumnspaceMode>
				<TopMargin>0</TopMargin>
				<TopMarginMode>Fixed</TopMarginMode>
			</AxFormControl>
		</Controls>
	</Design>
	<Parts />
</AxForm>