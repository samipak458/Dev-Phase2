<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMDimensionClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMDimensionClass
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultDimension2ledgerDimension</Name>
				<Source><![CDATA[
    public static DimensionDynamicAccount defaultDimension2ledgerDimension(LedgerJournalAC _ledgerJournalAC,DimensionDefault _defaultDimension )
    {
        container           conDimName;
        container           conDimValue;
        int                 loop = 1;
        DimensionValue      dimValue;
        Name                dimName;
    
        DimensionServiceProvider    DimensionServiceProvider = new DimensionServiceProvider();
        LedgerAccountContract       LedgerAccountContract    = new LedgerAccountContract();
        List                        ListValueContract        = new List(Types::Class);
        DimensionAttributeValueContract     ValueContract;
        dimensionAttributeValueCombination  dimensionAttributeValueCombination;
        DimensionStorage                    dimStorage;
    
        conDimName = HMDimensionClass::getDimensionNameTID();
    
        while(loop <= conLen(conDimName))
        {
            dimName  = conPeek(conDimName,loop);
            dimValue = HMDimensionClass::getDimensionValueTEC(_defaultDimension,dimName);
            if(dimValue)
            {
                 ValueContract = new DimensionAttributeValueContract();
                 ValueContract.parmName(dimName);
                 ValueContract.parmValue(dimValue);
                 ListValueContract.addEnd(ValueContract);
            }
            loop++;
        }
    
       LedgerAccountContract.parmMainAccount(_ledgerJournalAC);
       LedgerAccountContract.parmValues(ListValueContract);
       dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract);
       dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());
       return dimensionAttributeValueCombination.RecId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNameTID</Name>
				<Source><![CDATA[
    public static container getDimensionNameTID()
    {
        DimensionAttribute              dimAttr;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionEnumeration            dimensionSetId;
        DimensionAttributeValue         dimAttributeValue;
        container                       DimensionName;
    
        dimensionSetId      = DimensionCache::getDimensionAttributeSetForLedger();
    
        while select dimAttr order by Name
                    where dimAttr.Type != DimensionAttributeType::MainAccount
                join RecId from dimAttrSetItem
                    where dimAttrSetItem.DimensionAttribute     == dimAttr.RecId &&
                          dimAttrSetItem.DimensionAttributeSet  == dimensionSetId
                {
                    dimensionName += dimAttr.Name;
    
                }
    
        return DimensionName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueTEC</Name>
				<Source><![CDATA[
    public static str 255 getDimensionValueTEC(RecId defaultDimension, Name dimName)
     {
       DimensionAttributeValueSetStorage  dimStorage;
       Counter               i;
       DimensionAttribute         dimAttributeCostCenter;
       DimensionAttributeValue       dimAttributeValue;
       dimStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
       return dimStorage.getDisplayValueByDimensionAttribute(DimensionAttribute::findByName(dimName).RecId);
     }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>