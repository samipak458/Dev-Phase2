<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMDataPrepForClaimAgeCalcBusinessLogic</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMDataPrepForClaimAgeCalcBusinessLogic
{
    SysGuid        currentGuid;
    int            taskNumber;
    RecId          hmClaimBatchJobLogsHeader;
    HMClaimJobType jobType, jobTypeForCalcAgeBatchJob;
    
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the class
    /// </summary>
    /// <returns>Return the class object</returns>
    public server static HMDataPrepForClaimAgeCalcBusinessLogic construct()
    {
        return new HMDataPrepForClaimAgeCalcBusinessLogic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void processInit(QueryRun _queryRun, int _taskNumber = 0, RecId _hmClaimBatchJobLogsHeader = 0)
    {
        try
        {
            currentGuid                 = newGuid();
            taskNumber                  = _taskNumber;
            hmClaimBatchJobLogsHeader   = _hmClaimBatchJobLogsHeader;

            this.insertDataIntoHMClaimQualifiedForAgeCalculate(_queryRun);
        }
        catch
        {
            throw;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataIntoHMClaimQualifiedForAgeCalculate</Name>
				<Source><![CDATA[
    public void insertDataIntoHMClaimQualifiedForAgeCalculate(QueryRun _queryRun)
    {
        HMClaimTable                    claimTable;
        HMClaimQualifiedForAgeCalculate hmClaimQualifiedForAgeCalculate;
        RecordInsertList                recordInsertList = new RecordInsertList(tableNum(HMClaimQualifiedForAgeCalculate));
        int64                           sysDateNum, createdDateNum, age;
        RecordInsertList                insertRecListForClaimLogs = new RecordInsertList(tableNum(HMClaimBatchJobsLogs));
        HMClaimBatchJobsLogs            hmClaimBatchJobsLogs;
        boolean                         exceptionOccured = false;
        HMClaimProcessingStatus         claimProcessingStatus;
        str                             validationMsg = "";

        _queryRun = this.addZeroClaimRange(_queryRun);

        while(_queryRun.next())
        {
            claimTable = _queryRun.get(tableNum(HMClaimTable));

            sysDateNum      = date2Num(DateTimeUtil::getToday(0));
            createdDateNum  = date2Num(DateTimeUtil::date(claimTable.HMClaimDate));
            age             = sysDateNum < createdDateNum ? 0 : sysDateNum - createdDateNum;

            hmClaimQualifiedForAgeCalculate.clear();
            hmClaimQualifiedForAgeCalculate.ClaimID                             = claimtable.ClaimID;
            hmClaimQualifiedForAgeCalculate.OldClaimAgingDaysStr                = int2Str(claimTable.MzkClaimAgingDays);
            hmClaimQualifiedForAgeCalculate.ClaimAgingDaysStr                   = int2Str(age);
            hmClaimQualifiedForAgeCalculate.ClaimAgingDays                      = age;
            hmClaimQualifiedForAgeCalculate.ClaimQualifiedForAgeCalculateGuid   = currentGuid;
            hmClaimQualifiedForAgeCalculate.TaskNumberForDataPreparation        = taskNumber;
            hmClaimQualifiedForAgeCalculate.JobType                             = jobTypeForCalcAgeBatchJob;
            hmClaimQualifiedForAgeCalculate.HMClaimBatchJobLogsHeader           = hmClaimBatchJobLogsHeader;

            if(hmClaimQualifiedForAgeCalculate.validateWrite())
            {
                recordInsertList.add(hmClaimQualifiedForAgeCalculate);

                claimProcessingStatus = HMClaimProcessingStatus::Successful;
            }
            else
            {
                claimProcessingStatus   = HMClaimProcessingStatus::Failed;
                validationMsg           = strFmt("@MAZ:TempTableValidationFailedMSG", "HMClaimQualifiedForAgeCalculate", claimtable.ClaimID);
            }

            hmClaimBatchJobsLogs = HMClaimBatchJobsLogs::createData(jobType
                                                                    , claimtable.ClaimID
                                                                    , int2Str(claimTable.MzkClaimAgingDays)
                                                                    , int2Str(age)
                                                                    , taskNumber
                                                                    , claimProcessingStatus
                                                                    , validationMsg
                                                                    , hmClaimBatchJobLogsHeader);

            insertRecListForClaimLogs.add(hmClaimBatchJobsLogs);

        }

        try
        {
            ttsbegin;

            recordInsertList.insertDatabase();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                exceptionOccured = true;

                throw error("@MAZ:FailedToInsertDataOnTempTable");
            }
            else
            {
                retry;
            }
        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                exceptionOccured = true;

                throw error("@MAZ:FailedToInsertDataOnTempTable");
            }
            else
            {
                retry;
            }

        }
        finally
        {
            if(this.insertDataIntoClaimBatchLogsTable(insertRecListForClaimLogs))
            {
                if(exceptionOccured)
                {
                    this.updateDataIntoClaimBatchLogsTable();
                }

            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addZeroClaimRange</Name>
				<Source><![CDATA[
    public QueryRun addZeroClaimRange(QueryRun _queryRun)
    {
        jobType                     = HMClaimJobType::AgeDataPrep;
        jobTypeForCalcAgeBatchJob   = HMClaimJobType::Age;

        return _queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataIntoClaimBatchLogsTable</Name>
				<Source><![CDATA[
    public void updateDataIntoClaimBatchLogsTable()
    {
        HMClaimBatchJobsLogs hmClaimBatchJobsLogs;

        try
        {
            ttsbegin;

            update_recordset hmClaimBatchJobsLogs
            setting ClaimProcessingStatus = HMClaimProcessingStatus::Failed
            , ErrorLog = "@MAZ:FailedToInsertDataOnTempTable"
            where hmClaimBatchJobsLogs.HMClaimBatchJobLogsHeader == hmClaimBatchJobLogsHeader
                && hmClaimBatchJobsLogs.BatchThreadNumbers == taskNumber;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@MAZ:FailedToUpdateDataOnTable", "@MAZ:ClaimBatchLogs"));
            }
            else
            {
                retry;
            }

        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@MAZ:FailedToUpdateDataOnTable", "@MAZ:ClaimBatchLogs"));
            }
            else
            {
                retry;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataIntoClaimBatchLogsTable</Name>
				<Source><![CDATA[
    public boolean insertDataIntoClaimBatchLogsTable(RecordInsertList _insertRecListForClaimLogs)
    {
        boolean isLogsCreated = true;

        try
        {
            ttsbegin;
               
            _insertRecListForClaimLogs.insertDatabase();
                
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                isLogsCreated = false;

                throw error(strFmt("@MAZ:FailedToInsertDataOnTable", "@MAZ:ClaimBatchLogs"));

            }
            else
            {
                retry;
            }

        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                isLogsCreated = false;

                throw error(strFmt("@MAZ:FailedToInsertDataOnTable", "@MAZ:ClaimBatchLogs"));
            }
            else
            {
                retry;
            }

        }

        return isLogsCreated;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>