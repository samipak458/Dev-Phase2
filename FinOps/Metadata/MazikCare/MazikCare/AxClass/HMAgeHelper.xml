<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMAgeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMAgeHelper
{
    date    startDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAgeInDays</Name>
				<Source><![CDATA[
    public int64 getAgeInDays(Date _date)
    {
        return startDate - _date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgeInMonths</Name>
				<Source><![CDATA[
    public int64 getAgeInMonths(Date _date)
    {
        int64 ageInMonths;
        int years = yearDiff(startDate, _date);
        int months = conPeek(this.getYearsMonthsDaysFromDate(_date),2);
    
        ageInMonths = (years * 12) + months;
    
        return ageInMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgeInWeeks</Name>
				<Source><![CDATA[
    public real getAgeInWeeks(Date _date)
    {
        return (startDate - _date)/7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgeInYears</Name>
				<Source><![CDATA[
    public real getAgeInYears(Date _date)
    {
        real ageInYears;
        int years = yearDiff(startDate, _date);
        int months = conPeek(this.getYearsMonthsDaysFromDate(_date),2);
    
        ageInYears = years + (months/12);
    
        return ageInYears;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromAge</Name>
				<Source><![CDATA[
    public HMCalcBirthDate getDateFromAge(Integer _age)
    {
        int currentYear,currentDay,currentMonth;
        int birthDateYear;
        str datestr;
        HMCalcBirthDate DOB;
    
        if (_age !=0)
        {
            currentYear = year(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            currentDay = dayOfMth(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            currentMonth  = mthOfYr(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            birthDateYear = currentyear - _age;
            datestr = int2str(currentDay) + '/' + int2str(currentMonth) + '/'+ int2str(birthDateYear);
            DOB = str2DateDMY(datestr);
        }
        return DOB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromAgeInDMY</Name>
				<Source><![CDATA[
    public TransDate getDateFromAgeInDMY(Integer _day, Integer _month, Integer _year)
    {
        int currentYear,currentDay,currentMonth;
        int birthDateYear;
        str datestr;
        TransDate DOB;
    
        if (!(_day ==0 && _month ==0 && _year ==0))
        {
            DOB = dateMthFwd(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),-(_year*12));
            DOB = dateMthFwd(DOB,-_month);
            DOB = DOB - _day;
        }
    
        return DOB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsMonthsDaysFromDate</Name>
				<Source><![CDATA[
    public container getYearsMonthsDaysFromDate(date _date)
    {
        int years;
        int months;
        int days;
    
        int currentMonth;
        int currentDay;
        int currentYear;
    
        int noOfdaysInPreviousMonthFromCurrent;
        int previousMonthFromCurrent;
    
        int birthYear;
        int birthMonth;
        int birthDay;
    
        int counterOfMonths;
        int counterOfDays;
    
        boolean isMonthCrossed;
        boolean willMonthsCrossed;
    
        years=yearDiff(startDate, _date);
        months=0;
        days=0;
    
        currentYear=year(startDate);
        currentMonth=mthOfYr(startDate);
        currentDay=dayOfMth(startDate);
    
        birthYear=year(_date);
        birthMonth=mthOfYr(_date);
        birthDay=dayOfMth(_date);
    
        previousMonthFromCurrent = 0;
        noOfdaysInPreviousMonthFromCurrent=0;
    
        counterOfMonths = 0;
        counterOfDays=0;
    
        isMonthCrossed=false;
        willMonthsCrossed=false;
    
        //calculating previous month from current date
        if(currentMonth==1)
        {
            previousMonthFromCurrent=12;
        }
        else
        {
            previousMonthFromCurrent=currentMonth-1;
        }
    
        //calculating no fo days in previous month from current days
        switch(previousMonthFromCurrent)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                noOfdaysInPreviousMonthFromCurrent=31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                noOfdaysInPreviousMonthFromCurrent=30;
                break;
            case 2:
                if((currentYear mod 4) == 0)
                {
                    noOfdaysInPreviousMonthFromCurrent=29;
                }
                else
                {
                    noOfdaysInPreviousMonthFromCurrent=28;
                }
                break;
        }
    
    
        if(birthMonth==currentMonth && currentYear==birthYear) // if age is less than a month i.e. birthdate's month is equal to current date's month
        {
            months=0;
        }
        else if(birthMonth==currentMonth && years > 0 && currentDay >= birthDay ) // if age is n years and/or n/0 day
        {
            months=0;
        }
        else //calculating n months
        {
            months++;
    
            counterOfMonths = birthMonth;
    
            if(counterOfMonths==12)
            {
                counterOfMonths=1;
            }
            else
            {
                counterOfMonths++;
            }
            while(true)
            {
                if(counterOfMonths==currentMonth)
                {
                    break;
                }
                else
                {
                    months++;
    
                    if(counterOfMonths==12)
                    {
                        counterOfMonths=1;
                    }
                    else
                    {
                        counterOfMonths++;
                    }
                }
            }
        }
    
        if(birthDay > currentDay)
        {
            willMonthsCrossed = true;
        }
        else
        {
            willMonthsCrossed = false;
        }
    
        while(true)
        {
            if(birthDay==currentDay)
            {
                if(isMonthCrossed==true)
                {
                    months--;
                }
                break;
            }
            else
            {
                days++;
    
                if(birthDay >= noOfdaysInPreviousMonthFromCurrent && willMonthsCrossed && !isMonthCrossed)
                {
                    birthDay=1;
                    isMonthCrossed=true;
                }
                else
                {
                    birthDay++;
                }
            }
        }
    
        return [years,months,days];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(date _startDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        startDate = _startDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>