<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMResourceSchedulingAppointmentBilling</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMResourceSchedulingAppointmentBilling
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allClientExamsInvoiced</Name>
				<Source><![CDATA[
    private boolean allClientExamsInvoiced(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
        int                                     totalCount,NotRequired;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client;
    
        totalCount = apptInvent.RecId;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client
        && apptInvent.NotRequired == NoYes::Yes;
    
        NotRequired = apptInvent.RecId;
    
        if(NotRequired>0 && totalCount>0)
        {
            if(totalCount == NotRequired)
            {
                return false;
            }
        }
    
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client
        && apptInvent.NotRequired == NoYes::No
        && apptInvent.Invoiced == NoYes::No
        && (apptInvent.HMServiceStatus == HMServiceStatus::Complete
        || apptInvent.HMServiceStatus == HMServiceStatus::Decline
        || apptInvent.HMServiceStatus == HMServiceStatus::NotStarted
        || apptInvent.HMServiceStatus == HMServiceStatus::Started);
    
        if(apptInvent.recid > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allClientExamsPosted</Name>
				<Source><![CDATA[
    private boolean allClientExamsPosted(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.NotRequired == NoYes::No
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client
        && apptInvent.SalesLine == ''
        && (apptInvent.HMServiceStatus == HMServiceStatus::Complete
        || apptInvent.HMServiceStatus == HMServiceStatus::Decline
        || apptInvent.HMServiceStatus == HMServiceStatus::NotStarted
        || apptInvent.HMServiceStatus == HMServiceStatus::Started);
    
        if(apptInvent.recid > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allPatientExamsInvoiced</Name>
				<Source><![CDATA[
    private boolean allPatientExamsInvoiced(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
        int                                     totalCount,NotRequired;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client;
    
        totalCount = apptInvent.RecId;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client
        && apptInvent.NotRequired == NoYes::Yes;
    
        NotRequired = apptInvent.RecId;
        if(NotRequired>0 && totalCount>0)
        {
            if(totalCount == NotRequired)
            {
                return false;
            }
        }
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Patient
        && apptInvent.NotRequired == NoYes::No
        && apptInvent.Invoiced == NoYes::No
        && (apptInvent.HMServiceStatus == HMServiceStatus::Complete
        || apptInvent.HMServiceStatus == HMServiceStatus::Decline
        || apptInvent.HMServiceStatus == HMServiceStatus::NotStarted
        || apptInvent.HMServiceStatus == HMServiceStatus::Started);
    
        if(apptInvent.recid > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allPatientExamsPosted</Name>
				<Source><![CDATA[
    private boolean allPatientExamsPosted(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
    
        select count(RecId) from apptInvent
        where apptInvent.HMResourceSchedulingAppointment == _appointmentRecId
        && apptInvent.NotRequired == NoYes::No
        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Patient
        && apptInvent.SalesLine == ''
        && (apptInvent.HMServiceStatus == HMServiceStatus::Complete
        || apptInvent.HMServiceStatus == HMServiceStatus::Decline
        || apptInvent.HMServiceStatus == HMServiceStatus::NotStarted
        || apptInvent.HMServiceStatus == HMServiceStatus::Started);
    
        if(apptInvent.recid > 0)
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clientHasResponsibility</Name>
				<Source><![CDATA[
    public boolean clientHasResponsibility(RecId _apptRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
    
        select count(RecId) from apptInvent
        where apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client
        && apptInvent.HMResourceSchedulingAppointment == _apptRecId;
    
        if(apptInvent.RecId > 0)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noPaymentLeftOnClient</Name>
				<Source><![CDATA[
    private boolean noPaymentLeftOnClient(HMAppointmentNumber _appointmentNumber, AccountNum _clientAccount)
    {
        HMPatient       hmPatient;
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;
    
        if(_clientAccount)
        {
            select count(RecId) from custTransOpen
            join custTrans
            where custTransOpen.AccountNum == custTrans.AccountNum
            && custTransOpen.RefRecId == custTrans.RecId
            && custTrans.HMAppointmentNumber == _appointmentNumber
            && custTrans.AccountNum == _clientAccount;
    
            if(custTransOpen.RecId > 0)
            {
                return false;
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>noPaymentLeftOnPatient</Name>
				<Source><![CDATA[
    private boolean noPaymentLeftOnPatient(HMAppointmentNumber _appointmentNumber, RecId _patientRecId)
    {
        HMPatient       hmPatient;
        CustTransOpen   custTransOpen;
        CustTrans       custTrans;
        CustAccount     custAccount;
    
        select CustTable from hmPatient where hmPatient.RecId == _patientRecId;
        custAccount = hmPatient.getMRN();
        if(custAccount)
        {
            select count(RecId) from custTransOpen
            join custTrans
            where custTransOpen.AccountNum == custTrans.AccountNum
            && custTransOpen.RefRecId == custTrans.RecId
            && custTrans.HMAppointmentNumber == _appointmentNumber
            && custTrans.AccountNum == custAccount;
    
            if(custTransOpen.RecId > 0)
            {
                return false;
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientHasResponsibility</Name>
				<Source><![CDATA[
    public boolean patientHasResponsibility(RecId _apptRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
    
        select count(RecId) from apptInvent
        where apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Patient
        && apptInvent.HMResourceSchedulingAppointment == _apptRecId;
    
        if(apptInvent.RecId > 0)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClientBillingStatus</Name>
				<Source><![CDATA[
    private void updateClientBillingStatus(HMResourceSchedulingAppointment _appt)
    {
        try
        {
            ttsBegin;
            switch(_appt.FinanceBillingStatus_Client)
            {
                case HMAppointmentBillingStatus::None:
                    if(this.clientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::NotPosted;
                        _appt.update();
                    }
                    break;
                case HMAppointmentBillingStatus::NotPosted:
                    if(!this.clientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::None;
                        _appt.update();
                        ttscommit;
                        return;
                    }
                    if(this.allClientExamsInvoiced(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::Invoiced;
                        /*if(this.clientHasResponsibility(_appt.RecId))
                        {
                            if(this.noPaymentLeftOnClient(_appt.AppointmentNumber,_appt.Client))
                            {
                                _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::Paid;
                            }
                        }*/
                        _appt.update();
                    }
                    break;
                case HMAppointmentBillingStatus::Invoiced:
                case HMAppointmentBillingStatus::Paid:
                    if(!this.clientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::None;
                        _appt.update();
                        ttscommit;
                        return;
                    }
                    if(!this.allClientExamsPosted(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::NotPosted;
                        _appt.update();
                        ttsCommit;
                        return;
                    }
                    //if(this.clientHasResponsibility(_appt.RecId))
                    //{
                        //if(this.noPaymentLeftOnClient(_appt.AppointmentNumber,_appt.Client))
                        //{
                            //_appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::Paid;
                            //_appt.update();
                        //}
                        //else
                        //{
                            //_appt.FinanceBillingStatus_Client = HMAppointmentBillingStatus::Invoiced;
                            //_appt.update();
                        //}
                    //}
                    //break;
    
            }
            ttsCommit;
        }
        catch
        {
            error(strFmt("@MAZ12242"));
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePatientBillingStatus</Name>
				<Source><![CDATA[
    private void updatePatientBillingStatus(HMResourceSchedulingAppointment _appt)
    {
        try
        {
            ttsBegin;
            switch(_appt.FinanceBillingStatus)
            {
                case HMAppointmentBillingStatus::None:
                    if(this.patientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus = HMAppointmentBillingStatus::NotPosted;
                        _appt.update();
                    }
                    break;
                case HMAppointmentBillingStatus::NotPosted:
                    if(!this.patientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus = HMAppointmentBillingStatus::None;
                        _appt.update();
                        ttscommit;
                        return;
                    }
                    if(this.allPatientExamsInvoiced(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus = HMAppointmentBillingStatus::Invoiced;
                        if(this.patientHasResponsibility(_appt.RecId))
                        {
                            if(this.noPaymentLeftOnPatient(_appt.AppointmentNumber,_appt.HMPatient))
                            {
                                _appt.FinanceBillingStatus = HMAppointmentBillingStatus::Paid;
                            }
                        }
                        _appt.update();
                    }
                    break;
                case HMAppointmentBillingStatus::Invoiced:
                case HMAppointmentBillingStatus::Paid:
                    if(!this.patientHasResponsibility(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus = HMAppointmentBillingStatus::None;
                        _appt.update();
                        ttscommit;
                        return;
                    }
                    if(!this.allPatientExamsPosted(_appt.RecId))
                    {
                        _appt.FinanceBillingStatus = HMAppointmentBillingStatus::NotPosted;
                        _appt.update();
                        ttsCommit;
                        return;
                    }
                    if(this.patientHasResponsibility(_appt.RecId))
                    {
                        if(this.noPaymentLeftOnPatient(_appt.AppointmentNumber,_appt.HMPatient) && this.allPatientExamsInvoiced(_appt.RecId))
                        {
                            _appt.FinanceBillingStatus = HMAppointmentBillingStatus::Paid;
                            _appt.update();
                        }
                        else
                        {
                            _appt.FinanceBillingStatus = HMAppointmentBillingStatus::Invoiced;
                            _appt.update();
                        }
                    }
                    break;
    
            }
            ttsCommit;
        }
        catch
        {
            error(strFmt("@MAZ12242"));
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBillingStatus</Name>
				<Source><![CDATA[
    public static void updateBillingStatus(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointmentBilling objClass = new HMResourceSchedulingAppointmentBilling();
        if(_appointmentRecId)
        {
            objClass.updatePatientBillingStatus(HMResourceSchedulingAppointment::find(_appointmentRecId,true));
            objClass.updateClientBillingStatus(HMResourceSchedulingAppointment::find(_appointmentRecId,true));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>