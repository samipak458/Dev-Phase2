<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMContactInfoFormHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMContactInfoFormHandler extends DirPartyContactInfoFormHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAddressDs</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddress getAddressDs()
    {
        LogisticsElectronicAddress temp = addressDs.cursor();
    
        return temp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>HMContactInfoFormHandler</c> class.
    /// </returns>
    public static HMContactInfoFormHandler construct()
    {
        return new HMContactInfoFormHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called by menu items.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object that is passed from the menu item.
    /// </param>
    /// <param name="_showForm">
    ///    A Boolean value that indicates whether to show the form.
    /// </param>
    public static void main(Args _args, boolean _showForm = true)
    {
        Args                                args;
        FormRun                             contactForm, callerForm;
        Object                              callerObject;
        HMContactInfoFormHandler            contactInfoForm;
        FormDataSource                      formDataSource;
    
        // can't be called without a table buffer
        if (!_args.record())
        {
            throw error(strFmt("@SYS134996", tableId2pname(_args.dataset())));
        }
    
        if(FormDataUtil::getFormDataSource(_args.record()))
        {
            contactInfoForm = HMContactInfoFormHandler::newParameters(FormDataUtil::getFormDataSource(_args.record()));
        }
        else
        {
            contactInfoForm = HMContactInfoFormHandler::newWithCallerRecord(_args.record());
        }
    
        contactInfoForm.setOpenMode(_args.openMode());
    
        callerForm = _args.caller();
    
        callerObject = callerForm;
    
        // Set the current selected location
        if (formHasMethod(callerForm, identifierStr(parmContactInfoLocation)))
        {
            contactInfoForm.parmLocation(callerObject.parmContactInfoLocation());
        }
    
        if(_args.menuItemName() == menuitemDisplayStr(HMPatientEmailPrimaryNew))
        {
            contactInfoForm.parmOpenedForEmailPrimary(true);
        }
        else if(_args.menuItemName() == menuitemDisplayStr(HMRequestorEmailPrimaryNew))
        {
            contactInfoForm.parmOpenedForEmailPrimary(true);
        }
    
        _args.parmObject(contactInfoForm);
        args = new Args();
        args.name(formStr(LogisticsContactInfo));
        args.record(_args.record());
        args.openMode(_args.openMode());
        args.parmObject(_args.parmObject());
        args.caller(_args.caller());
        args.menuItemName(_args.menuItemName());
    
        contactForm = classfactory.formRunClass(args);
        if (contactForm)
        {
            contactForm.init();
            if (_showForm)
            {
                contactForm.run();
                contactForm.wait();
            }
            if (contactForm.closed() && !contactForm.closedCancel())
            {
                if(_args.menuItemName() == menuitemDisplayStr(HMPatientEmailPrimaryNew))
                {
                    if (formHasMethod(callerForm, identifierStr(updatePatientEmail)))
                    {
                        callerObject.updatePatientEmail(contactInfoForm.getAddressDs().Locator);
                    }
                }
                else if(_args.menuItemName() == menuitemDisplayStr(HMRequestorEmailPrimaryNew))
                {
                    if (formHasMethod(callerForm, identifierStr(updateRequestorEmail)))
                    {
                        callerObject.updateRequestorEmail(contactInfoForm.getAddressDs().Locator);
                    }
                }
    
                //Refresh caller
                formDataSource = callerForm.dataSource(identifierStr(DirPartyLocation_Electronic));
                if (formHasMethod(callerForm, identifierStr(parmContactInfoLocation)))
                {
                    callerObject.parmContactInfoLocation(contactInfoForm.parmLocation());
                    if (formDataSource != null)
                    {
                        formDataSource.executeQuery();
                    }
                    else if (formHasMethod(callerForm, identifierStr(executeContactInfoQuery)))
                    {
                        callerObject.executeContactInfoQuery();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class with required parameters.
    /// </summary>
    /// <param name="_callerDS">
    ///    A <c>FormDataSource</c> object of the current caller record.
    /// </param>
    /// <returns>
    ///    Returns a new instance of the <c>HMContactInfoFormHandler</c> class.
    /// </returns>
    static HMContactInfoFormHandler newParameters(FormDataSource _callerDS)
    {
        HMContactInfoFormHandler contactInfoForm = HMContactInfoFormHandler::construct();
    
        contactInfoForm.datasourceCaller(_callerDS);
    
        return contactInfoForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the class with required parameters.
    /// </summary>
    /// <param name="_callerRecord">
    ///    A <c>Common</c> object of the current caller record.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>HMContactInfoFormHandler</c> class.
    /// </returns>
    static HMContactInfoFormHandler newWithCallerRecord(Common _callerRecord)
    {
        HMContactInfoFormHandler contactInfoForm = HMContactInfoFormHandler::construct();
    
        contactInfoForm.setCallerRecord(_callerRecord);
    
        return contactInfoForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>