<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonFormTableHM</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class ReasonFormTableHM extends ReasonFormTable 
{
    // <MazikCare>
    public  FormCheckBoxControl reasonGridAccountTypeMovementCancel;
    public  FormCheckBoxControl reasonGridAccountTypeMovementReject;
    public  FormCheckBoxControl reasonGridInPatientMaintain;
    public  FormCheckBoxControl reasonGridMedicationStopped; 
    public  FormCheckBoxControl reasonGridImmunizationRefusal; 
    public  FormCheckBoxControl reasonGridLabRadiologyCancel; 
    public  FormCheckBoxControl reasonGridWriteOff;
    public  FormCheckBoxControl reasonGridAppointments;
    public  FormCheckBoxControl reasonGridOrdering;
    public  FormCheckBoxControl reasonGridClaim;
    public  FormCheckBoxControl reasonGridCaseStatus;
    public  FormCheckBoxControl reasonGridMedicationError;
    public  FormCheckBoxControl reasonGridEncounterDisposition;
    public  FormCheckBoxControl reasonGridPhysiotherapy;
    public  FormCheckBoxControl reasonGridWaitingListCancel;
    public  FormCheckBoxControl reasonGridPatientMerge;
    public  FormCheckBoxControl reasonGridMovementEdit;
    public  FormCheckBoxControl reasonGridMovement;
    public  FormCheckBoxControl reasonGridRegistrationRequestCancel;
    public  FormCheckBoxControl reasonGridTransportOrderCancel;
    public  FormCheckBoxControl reasonGridEnquiry;
    public  FormCheckBoxControl reasonGridDischargeReason;
    public  FormCheckBoxControl reasonGridOnHold;
    public  FormCheckBoxControl reasonGridCSSDEquipmentTest;
    public  FormCheckBoxControl reasonGridCSSDRecallRequest;
    public  FormCheckBoxControl reasonGridAmendment;
    public  FormCheckBoxControl reasonGridAmendmentDeny;
    public  FormCheckBoxControl reasonGridForceBookingCancel;
    public  FormCheckBoxControl reasonGridPatientDeactivate;
    public  FormCheckBoxControl reasonGridAppointmentSlotBlocking;
    public  FormCheckBoxControl reasonGridAppointmentCloseSchedule;
    public  FormCheckBoxControl reasonGridServicePostponed;
    public  FormCheckBoxControl reasonGridServiceDone;
    public  FormCheckBoxControl reasonGridEligibilityBypass;
    // </MazikCare>
// <MazikCare>
    public  FormCheckBoxControl accountTypeMovementCancel;
    public  FormCheckBoxControl accountTypeMovementReject;
    public  FormCheckBoxControl accountTypeInPatientMaintain;
    public  FormCheckBoxControl accountTypeMedicationStopped;
    public  FormCheckBoxControl accountTypeImmunizationRefusal;
    public  FormCheckBoxControl accountTypeLabRadiologyCancel;
    public  FormCheckBoxControl accountTypeWriteOff;
    public  FormCheckBoxControl accountTypeAppointments;
    public  FormCheckBoxControl accountTypeOrdering;
    public  FormCheckBoxControl accountTypeClaim;
    public  FormCheckBoxControl accountTypeCaseStatus;
    public  FormCheckBoxControl accountTypeMedicationError;
    public  FormCheckBoxControl accountTypeEncounterDisposition;
    public  FormCheckBoxControl accountTypePhysiotherapy;
    public  FormCheckBoxControl accountTypeWaitingListCancel;
    public  FormCheckBoxControl accountTypePatientMerge;
    public  FormCheckBoxControl accountTypeMovementEdit;
    public  FormCheckBoxControl accountTypeMovement;
    public  FormCheckBoxControl accountTypeRegistrationRequestCancel;
    public  FormCheckBoxControl accountTypeTransportOrderCancel;
    public  FormCheckBoxControl accountTypeEnquiry;
    public  FormCheckBoxControl accountTypeDischargeReason;
    public  FormCheckBoxControl accountTypeOnHold;
    public  FormCheckBoxControl accountTypeCSSDEquipmentTest;
    public  FormCheckBoxControl accountTypeCSSDRecallRequest;
    public  FormCheckBoxControl accountTypeAmendment;
    public  FormCheckBoxControl accountTypeAmendmentDeny;
    public  FormCheckBoxControl accountTypeForceBookingCancel;
    public  FormCheckBoxControl accountTypePatientDeactivate;
    public  FormCheckBoxControl accountTypeAppointmentSlotBlocking;
    public  FormCheckBoxControl accountTypeAppointmentCloseSchedule;
    public  FormCheckBoxControl accountTypeServicePostponed;
    public  FormCheckBoxControl accountTypeServiceDone;
    public  FormCheckBoxControl accountTypeEligibilityBypass;



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceinitlocal</Name>
				<Source><![CDATA[
    // </MazikCare>
    
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    public void datasourceinitlocal(ReasonTable _reasonTable)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            switch(reasonCodeAccountType)
            {
                case ReasonCodeAccountTypeAll::MovementCancel:
                    // default the Movement Cancel
                    _reasonTable.MovementCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::MovementReject:
                    // default the Movement Reject
                    _reasonTable.MovementReject = true;
                    break;

                case ReasonCodeAccountTypeAll::InPatientMaintain:
                    // default the In patient maintain
                    _reasonTable.InPatientMaintain = true;
                    break;

                case ReasonCodeAccountTypeAll::MedicationStopped:
                    // default the Medication Stopped
                    _reasonTable.MedicationStopped = true;
                    break;

                case ReasonCodeAccountTypeAll::ImmunizationRefusal:
                    // default the Immunization Refusal
                    _reasonTable.ImmunizationRefusal = true;
                    break;

                case ReasonCodeAccountTypeAll::LabRadiologyCancel:
                    // default the lab/radiology cancel
                    _reasonTable.LabRadiologyCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::BillingReason:
                    // default the Billing reason
                    _reasonTable.BillingReason = true;
                    break;

                case ReasonCodeAccountTypeAll::Appointments:
                    // default the Appointments
                    _reasonTable.Appointments = true;
                    break;

                case ReasonCodeAccountTypeAll::Ordering:
                    // default the Ordering
                    _reasonTable.Ordering = true;
                    break;

                case ReasonCodeAccountTypeAll::Claim:
                    // default the Claims
                    _reasonTable.Claim = true;
                    break;

                case ReasonCodeAccountTypeAll::CaseStatus:
                    // default the CaseStatus
                    _reasonTable.CaseStatus = true;
                    break;

                case ReasonCodeAccountTypeAll::MedicationError:
                    // default the Medication error
                    _reasonTable.MedicationError = true;
                    break;

                case ReasonCodeAccountTypeAll::EncounterDisposition:
                    // default the Encounter Disposition
                    _reasonTable.EncounterDisposition = true;
                    break;

                case ReasonCodeAccountTypeAll::Physiotherapy:
                    // default the physiotherapy
                    _reasonTable.Physiotherapy = true;
                    break;

                case ReasonCodeAccountTypeAll::WaitingListCancel:
                    // default the waiting list cancel
                    _reasonTable.WaitingListCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::PatientMerge:
                    // default the patient merge
                    _reasonTable.PatientMerge = true;
                    break;

                case ReasonCodeAccountTypeAll::MovementEdit:
                    // default the movement edit
                    _reasonTable.MovementEdit = true;
                    break;

                case ReasonCodeAccountTypeAll::Movement:
                    // default the movement
                    _reasonTable.Movement = true;
                    break;

                case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
                    // default the Registration request cancel
                    _reasonTable.RegistrationRequestCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::TransportOrderCancel:
                    // default the transport order cancel
                    _reasonTable.TransportOrderCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::Enquiry:
                    // default the Enquriy
                    _reasonTable.Enquiry = true;
                    break;

                case ReasonCodeAccountTypeAll::DischargeReason:
                    // default the discharge reason
                    _reasonTable.DischargeReason= true;
                    break;

                case ReasonCodeAccountTypeAll::OnHoldSterileItem:
                    // default the onhold sterile item
                    _reasonTable.OnHoldSterileItem = true;
                    break;

                case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
                    // default the CSSD equipment test
                    _reasonTable.CSSDEquipmentTest = true;
                    break;

                case ReasonCodeAccountTypeAll::CSSDRecallRequest:
                    // default the CSSD recall request
                    _reasonTable.CSSDRecallRequest = true;
                    break;

                case ReasonCodeAccountTypeAll::Amendment:
                    // default the CSSD equipment test
                    _reasonTable.Amendment = true;
                    break;

                case ReasonCodeAccountTypeAll::AmendmentDeny:
                    // default the CSSD recall request
                    _reasonTable.AmendmentDeny = true;
                    break;

                case REasonCodeAccountTypeAll::ForceBookingCancel:
                    //default the force booking field
                    _reasonTable.ForceBookingCancel = true;
                    break;

                case ReasonCodeAccountTypeAll::PatientDeactivate:
                    // default the patient deactivate
                    _reasonTable.PatientDeactivate = true;
                    break;

                case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                    // default the appointment slot blocking
                    _reasonTable.AppointmentSlotBlocking = true;
                    break;

                case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                    //default the appointment close schedule
                    reasonTable.AppointmentCloseSchedule = true;
                    break;

                case ReasonCodeAccountTypeAll::ServicePostponed:
                    // default the service postponed
                    _reasonTable.ServicePostponed = true;
                    break;

                case ReasonCodeAccountTypeAll::ServiceDone:
                    //default the service done
                    _reasonTable.ServiceDone = true;
                    break;
                case ReasonCodeAccountTypeAll::EligibilityBypass:
                    //default the Eligibility Bypass
                    _reasonTable.EligibilityBypass = true;
                    break;
            }
        }
        // </MazikCare>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControlslocal</Name>
				<Source><![CDATA[
    public void initControlslocal(ReasonCodeAccountTypeAll _rcAccountTypeMenu)
    {
        reasonCodeAccountType = _rcAccountTypeMenu;
        // <MazikCare>
        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            switch(reasonCodeAccountType)
            {
                case ReasonCodeAccountTypeAll::MovementCancel:
                    this.setControlsVisible(false);
                    /*todo ax7
                    if (reasonGridAccountTypeMovementCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridAccountTypeMovementCancel.visible(true);
                    }

                    if (accountTypeMovementCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMovementCancel.visible(true);
                    }
                    reasonFormCaption = "@MAZ3089";
                    */
                    break;

                case ReasonCodeAccountTypeAll::MovementReject:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridAccountTypeMovementReject)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridAccountTypeMovementReject.visible(true);
                    }

                    if (accountTypeMovementReject)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMovementReject.visible(true);
                    }
                    reasonFormCaption = "@MAZ3090";
                    */
                    break;

                case ReasonCodeAccountTypeAll::InPatientMaintain:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridInPatientMaintain)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridInPatientMaintain.visible(true);
                    }

                    if (accountTypeInPatientMaintain)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeInPatientMaintain.visible(true);
                    }
                    reasonFormCaption = "@MAZ3091";
                    */
                    break;

                case ReasonCodeAccountTypeAll::MedicationStopped:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridMedicationStopped)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridMedicationStopped.visible(true);
                    }

                    if (accountTypeMedicationStopped)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMedicationStopped.visible(true);
                    }
                    reasonFormCaption = "@MAZ3357";
                    */
                    break;

                case ReasonCodeAccountTypeAll::ImmunizationRefusal:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridImmunizationRefusal)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridImmunizationRefusal.visible(true);
                    }

                    if (accountTypeImmunizationRefusal)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeImmunizationRefusal.visible(true);
                    }
                    reasonFormCaption = "@MAZ4913";
                    */
                    break;

                case ReasonCodeAccountTypeAll::LabRadiologyCancel:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridLabRadiologyCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridLabRadiologyCancel.visible(true);
                    }

                    if (accountTypeLabRadiologyCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeLabRadiologyCancel.visible(true);
                    }
                    reasonFormCaption = "@MAZ5116";
                    */
                    break;

                case ReasonCodeAccountTypeAll::BillingReason:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridWriteOff)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridWriteOff.visible(true);
                    }

                    if (accountTypeWriteOff)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeWriteOff.visible(true);
                    }
                    reasonFormCaption = "@MAZ5429";
                    */
                    break;

                case ReasonCodeAccountTypeAll::Appointments:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridAppointments)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridAppointments.visible(true);
                    }

                    if (accountTypeAppointments)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeAppointments.visible(true);
                    }
                    reasonFormCaption = "@MAZ3701";
                    */
                    break;

                case ReasonCodeAccountTypeAll::Ordering:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridOrdering)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridOrdering.visible(true);
                    }

                    if (accountTypeOrdering)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeOrdering.visible(true);
                    }
                    reasonFormCaption = "@MAZ6612";
                    */
                    break;
                case ReasonCodeAccountTypeAll::Claim:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if(reasonGridClaim)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridClaim.visible(true);
                    }

                    if(accountTypeClaim)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeClaim.visible(true);
                    }
                    reasonFormCaption = "@MAZ7361";
                    */
                    break;
               
                case ReasonCodeAccountTypeAll::CaseStatus:
                    this.setControlsVisible(false);
                    break;

                case ReasonCodeAccountTypeAll::MedicationError:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridMedicationError)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridMedicationError.visible(true);
                    }

                    if (accountTypeMedicationError)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMedicationError.visible(true);
                    }
                    reasonFormCaption = "@MAZ7778";
                    */
                    break;
                case ReasonCodeAccountTypeAll::EncounterDisposition:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridEncounterDisposition)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridEncounterDisposition.visible(true);
                    }

                    if (accountTypeEncounterDisposition)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeEncounterDisposition.visible(true);
                    }
                    reasonFormCaption = "@MAZ7928";
                    */
                    break;
                case ReasonCodeAccountTypeAll::Physiotherapy:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridPhysiotherapy)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridPhysiotherapy.visible(true);
                    }

                    if (accountTypePhysiotherapy)
                    {
                        // Hide the checkbox on the general tab
                        accountTypePhysiotherapy.visible(true);
                    }
                    reasonFormCaption = "@MAZ7807";
                    */
                    break;
                case ReasonCodeAccountTypeAll::WaitingListCancel:
                    this.setControlsVisible(false);
                    /* todo     ax7
                    if (reasonGridWaitingListCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridWaitingListCancel.visible(true);
                    }

                    if (accountTypeWaitingListCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeWaitingListCancel.visible(true);
                    }
                    reasonFormCaption = "@MAZ8091";
                    */
                    break;
                case ReasonCodeAccountTypeAll::PatientMerge:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridPatientMerge)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridPatientMerge.visible(true);
                    }

                    if (accountTypePatientMerge)
                    {
                        // Hide the checkbox on the general tab
                        accountTypePatientMerge.visible(true);
                    }
                    reasonFormCaption = "@MAZ8286";
                    */
                    break;
                case ReasonCodeAccountTypeAll::MovementEdit:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridMovementEdit)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridMovementEdit.visible(true);
                    }

                    if (accountTypeMovementEdit)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMovementEdit.visible(true);
                    }
                    reasonFormCaption = "@MAZ8366";
                    */
                    break;
                case ReasonCodeAccountTypeAll::Movement:
                    this.setControlsVisible(false);
                    /*todo  ax7
                    if (reasonGridMovement)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridMovement.visible(true);
                    }

                    if (accountTypeMovement)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeMovement.visible(true);
                    }
                    reasonFormCaption = "@SYS13678";
                    */
                    break;
                case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
                    this.setControlsVisible(false);
                    /*  todo ax7
                    if (reasonGridRegistrationRequestCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridRegistrationRequestCancel.visible(true);
                    }

                    if (accountTypeRegistrationRequestCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeRegistrationRequestCancel.visible(true);
                    }
                    reasonFormCaption = "@MAZ8693";
                    */
                    break;

                case ReasonCodeAccountTypeAll::TransportOrderCancel:
                    this.setControlsVisible(false);
                    /*todo  ax7
                    if (reasonGridTransportOrderCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridTransportOrderCancel.visible(true);
                    }

                    if (accountTypeTransportOrderCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeTransportOrderCancel.visible(true);
                    }
                    */
                    reasonFormCaption = "@MAZ8778";
                    break;
                case ReasonCodeAccountTypeAll::Enquiry:
                    this.setControlsVisible(false);
                    /*todo ax7
                    if (reasonGridEnquiry)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridEnquiry.visible(true);
                    }

                    if (accountTypeEnquiry)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeEnquiry.visible(true);
                    }
                    reasonFormCaption = "@MAZ8078";
                    */
                    break;
                case ReasonCodeAccountTypeAll::DischargeReason:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridDischargeReason)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridDischargeReason.visible(true);
                    }

                    if (accountTypeDischargeReason)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeDischargeReason.visible(true);
                    }
                    reasonFormCaption = "@MAZ9081";
                    */
                    break;
                case ReasonCodeAccountTypeAll::OnHoldSterileItem:
                    this.setControlsVisible(false);
                    /* if (reasonGridonHold)
                {
                    // Hide the checkbox on the grid.
                    reasonGridonHold.visible(true);
                }

                if (accountTypeOnHold)
                {
                    // Hide the checkbox on the general tab
                    accountTypeOnHold.visible(true);
                }
               */
                    reasonFormCaption = "@MAZ9844";
                    break;

                case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
                    this.setControlsVisible(false);
                    /*if (reasonGridCSSDEquipmentTest)
                {
                    // Hide the checkbox on the grid.
                    reasonGridCSSDEquipmentTest.visible(true);
                }

                if (accountTypeCSSDEquipmentTest)
                {
                    // Hide the checkbox on the general tab
                    accountTypeCSSDEquipmentTest.visible(true);
                }
                */
                    reasonFormCaption = "@MAZ9908";
                    break;

                case ReasonCodeAccountTypeAll::CSSDRecallRequest:
                    this.setControlsVisible(false);
                    /* if (reasonGridCSSDRecallRequest)
                {
                    // Hide the checkbox on the grid.
                    reasonGridCSSDRecallRequest.visible(true);
                }

                if (accountTypeCSSDRecallRequest)
                {
                    // Hide the checkbox on the general tab
                    accountTypeCSSDRecallRequest.visible(true);
                }
               */
                    reasonFormCaption = "@MAZ9909";
                    break;

                case ReasonCodeAccountTypeAll::Amendment:
                    this.setControlsVisible(false);
                    reasonFormCaption = "@MAZ10448";
                    break;

                case ReasonCodeAccountTypeAll::AmendmentDeny:
                    this.setControlsVisible(false);
                    reasonFormCaption = "@MAZ10449";
                    break;
                case ReasonCodeAccountTypeAll::ForceBookingCancel:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridForceBookingCancel)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridForceBookingCancel.visible(true);
                    }

                    if (accountTypeForceBookingCancel)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeForceBookingCancel.visible(true);
                    }
                    reasonFormCaption = "@MAZ11290";*/
                    break;
                case ReasonCodeAccountTypeAll::PatientDeactivate:
                    this.setControlsVisible(false);
                    /*todo ax7
                    if (reasonGridPatientDeactivate)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridPatientDeactivate.visible(true);
                    }

                    if (accountTypePatientDeactivate)
                    {
                        // Hide the checkbox on the general tab
                        accountTypePatientDeactivate.visible(true);
                    }
                    reasonFormCaption = "@MAZ11935";
                    */
                    break;
                case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                    this.setControlsVisible(false);
                    /*todo ax7
                    if (reasonGridAppointmentSlotBlocking)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridAppointmentSlotBlocking.visible(true);
                    }

                    if (accountTypeAppointmentSlotBlocking)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeAppointmentSlotBlocking.visible(true);
                    }
                    reasonFormCaption = "@MAZ11936";*/
                    break;
                case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                    this.setControlsVisible(false);
                    
                    //todo ax7
                   // reasonFormInstance.design().controlName(formControlStr(Reasons, AccountType_AppointmentCloseSchedule)).visible(true);
                  //  reasonFormCaption = "@MAZ11937";
                    break;
                case ReasonCodeAccountTypeAll::ServicePostponed:
                    this.setControlsVisible(false);
                    /* todo ax7
                    reasonFormCaption = "@MAZ12265";
                    */
                    break;
                case ReasonCodeAccountTypeAll::ServiceDone:
                    this.setControlsVisible(false);
                    /*todo ax7
                    if (reasonGridServiceDone)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridServiceDone.visible(true);
                    }

                    if (accountTypeServiceDone)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeServiceDone.visible(true);
                    }
                    reasonFormCaption = "@MAZ12266";
                    */
                    break;

                case ReasonCodeAccountTypeAll::EligibilityBypass:
                    this.setControlsVisible(false);
                    /* todo ax7
                    if (reasonGridEligibilityBypass)
                    {
                        // Hide the checkbox on the grid.
                        reasonGridEligibilityBypass.visible(true);
                    }

                    if (accountTypeEligibilityBypass)
                    {
                        // Hide the checkbox on the general tab
                        accountTypeEligibilityBypass.visible(true);
                    }
                    reasonFormCaption = "@MAZ12988";
                    */
                    break;
            }
        }
        // </MazikCare>
  
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsVisiblelocal</Name>
				<Source><![CDATA[
    public void setControlsVisiblelocal(boolean _visible=true)
    {
        // <MazikCare>
        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            if(reasonGridClaim)
            {
                reasonGridClaim.visible(_visible);
            }

            if(reasonGridCaseStatus)
            {
                reasonGridCaseStatus.visible(_visible);
            }

            if (reasonGridAccountTypeMovementCancel)
            {
                reasonGridAccountTypeMovementCancel.visible(_visible);
            }

            if (accountTypeMovementCancel)
            {
                accountTypeMovementCancel.visible(_visible);
            }

            if (reasonGridAccountTypeMovementReject)
            {
                reasonGridAccountTypeMovementReject.visible(_visible);
            }

            if (accountTypeMovementReject)
            {
                accountTypeMovementReject.visible(_visible);
            }

            if (reasonGridInPatientMaintain)
            {
                reasonGridInPatientMaintain.visible(_visible);
            }

            if (accountTypeInPatientMaintain)
            {
                accountTypeInPatientMaintain.visible(_visible);
            }

            if (reasonGridMedicationStopped)
            {
                reasonGridMedicationStopped.visible(_visible);
            }

            if (accountTypeMedicationStopped)
            {
                accountTypeMedicationStopped.visible(_visible);
            }

            if (reasonGridImmunizationRefusal)
            {
                reasonGridImmunizationRefusal.visible(_visible);
            }

            if (accountTypeImmunizationRefusal)
            {
                accountTypeImmunizationRefusal.visible(_visible);
            }

            if (accountTypeLabRadiologyCancel)
            {
                accountTypeLabRadiologyCancel.visible(_visible);
            }

            if (reasonGridLabRadiologyCancel)
            {
                reasonGridLabRadiologyCancel.visible(_visible);
            }

            if (reasonGridWriteOff)
            {
                reasonGridWriteOff.visible(_visible);
            }

            if (accountTypeWriteOff)
            {
                accountTypeWriteOff.visible(_visible);
            }

            if (reasonGridAppointments)
            {
                reasonGridAppointments.visible(_visible);
            }

            if (accountTypeAppointments)
            {
                accountTypeAppointments.visible(_visible);
            }

            if (reasonGridOrdering)
            {
                reasonGridOrdering.visible(_visible);
            }

            if (accountTypeOrdering)
            {
                accountTypeOrdering.visible(_visible);
            }

            if (reasonGridMedicationError)
            {
                reasonGridMedicationError.visible(_visible);
            }

            if (accountTypeMedicationError)
            {
                accountTypeMedicationError.visible(_visible);
            }

            if (reasonGridEncounterDisposition)
            {
                reasonGridEncounterDisposition.visible(_visible);
            }

            if (accountTypeEncounterDisposition)
            {
                accountTypeEncounterDisposition.visible(_visible);
            }
            if (reasonGridPhysiotherapy)
            {
                reasonGridPhysiotherapy.visible(_visible);
            }

            if (accountTypePhysiotherapy)
            {
                accountTypePhysiotherapy.visible(_visible);
            }

            if (reasonGridWaitingListCancel)
            {
                reasonGridWaitingListCancel.visible(_visible);
            }

            if (accountTypeWaitingListCancel)
            {
                accountTypeWaitingListCancel.visible(_visible);
            }

            if (reasonGridPatientMerge)
            {
                reasonGridPatientMerge.visible(_visible);
            }

            if (accountTypePatientMerge)
            {
                accountTypePatientMerge.visible(_visible);
            }

            if (reasonGridMovementEdit)
            {
                reasonGridMovementEdit.visible(_visible);
            }

            if (accountTypeMovementEdit)
            {
                accountTypeMovementEdit.visible(_visible);
            }

            if (reasonGridMovement)
            {
                reasonGridMovement.visible(_visible);
            }

            if (accountTypeMovement)
            {
                accountTypeMovement.visible(_visible);
            }

            if (reasonGridRegistrationRequestCancel)
            {
                reasonGridRegistrationRequestCancel.visible(_visible);
            }

            if (accountTypeRegistrationRequestCancel)
            {
                accountTypeRegistrationRequestCancel.visible(_visible);
            }

            if (reasonGridTransportOrderCancel)
            {
                reasonGridTransportOrderCancel.visible(_visible);
            }

            if (accountTypeTransportOrderCancel)
            {
                accountTypeTransportOrderCancel.visible(_visible);
            }

            if (reasonGridEnquiry)
            {
                reasonGridEnquiry.visible(_visible);
            }

            if (accountTypeEnquiry)
            {
                accountTypeEnquiry.visible(_visible);
            }

            if (accountTypeDischargeReason)
            {
                accountTypeDischargeReason.visible(_visible);
            }

            if (reasonGridDischargeReason)
            {
                reasonGridDischargeReason.visible(_visible);
            }

            if (reasonGridOnHold)
            {
                reasonGridOnHold.visible(_visible);
            }

            if (accountTypeOnHold)
            {
                accountTypeOnHold.visible(_visible);
            }

            if (reasonGridCSSDEquipmentTest)
            {
                reasonGridCSSDEquipmentTest.visible(_visible);
            }

            if (accountTypeCSSDEquipmentTest)
            {
                accountTypeCSSDEquipmentTest.visible(_visible);
            }

            if (reasonGridCSSDRecallRequest)
            {
                reasonGridCSSDRecallRequest.visible(_visible);
            }

            if (accountTypeCSSDRecallRequest)
            {
                accountTypeCSSDRecallRequest.visible(_visible);
            }

            if (reasonGridAmendment)
            {
                reasonGridAmendment.visible(_visible);
            }

            if (accountTypeAmendment)
            {
                accountTypeAmendment.visible(_visible);
            }

            if (reasonGridAmendmentDeny)
            {
                reasonGridAmendmentDeny.visible(_visible);
            }

            if (accountTypeAmendmentDeny)
            {
                accountTypeAmendmentDeny.visible(_visible);
            }

            if(reasonGridForceBookingCancel)
            {
                reasonGridForceBookingCancel.visible(_visible);
            }

            if(accountTypeForceBookingCancel)
            {
                accountTypeForceBookingCancel.visible(_visible);
            }

            if(reasonGridPatientDeactivate)
            {
                reasonGridPatientDeactivate.visible(_visible);
            }

            if(accountTypePatientDeactivate)
            {
                accountTypePatientDeactivate.visible(_visible);
            }

            if(reasonGridAppointmentSlotBlocking)
            {
                reasonGridAppointmentSlotBlocking.visible(_visible);
            }

            if(accountTypeAppointmentSlotBlocking)
            {
                accountTypeAppointmentSlotBlocking.visible(_visible);
            }

            if(reasonGridAppointmentCloseSchedule)
            {
                reasonGridAppointmentCloseSchedule.visible(_visible);
            }

            if(accountTypeAppointmentCloseSchedule)
            {
                accountTypeAppointmentCloseSchedule.visible(_visible);
            }

            if(reasonGridServicePostponed)
            {
                reasonGridServicePostponed.visible(_visible);
            }

            if(accountTypeServicePostponed)
            {
                accountTypeServicePostponed.visible(_visible);
            }

            if(reasonGridServiceDone)
            {
                reasonGridServiceDone.visible(_visible);
            }

            if(accountTypeServiceDone)
            {
                accountTypeServiceDone.visible(_visible);
            }

            if(reasonGridEligibilityBypass)
            {
                reasonGridEligibilityBypass.visible(_visible);
            }

            if(accountTypeEligibilityBypass)
            {
                accountTypeEligibilityBypass.visible(_visible);
            }
        }
        // </MazikCare>

    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedeletelocal</Name>
				<Source><![CDATA[
    public boolean validatedeletelocal(ReasonTable _reasonTable)
    {
        boolean ret;

        switch(reasonCodeAccountType)
        {
            case ReasonCodeAccountTypeAll::FixedAssets:

                // Validation fails if any fields are checked except the fixed asset field.

                // <GEERU>
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                || _reasonTable.MovementReject
                || _reasonTable.InPatientMaintain
                || _reasonTable.MedicationStopped
                || _reasonTable.ImmunizationRefusal
                || _reasonTable.LabRadiologyCancel
                || _reasonTable.BillingReason
                || _reasonTable.Ordering
                || _reasonTable.Claim
                || _reasonTable.CaseStatus
                || _reasonTable.MedicationError
                || _reasonTable.EncounterDisposition
                || _reasonTable.Physiotherapy
                || _reasonTable.WaitingListCancel
                || _reasonTable.PatientMerge
                || _reasonTable.MovementEdit
                || _reasonTable.Movement
                || _reasonTable.RegistrationRequestCancel
                || _reasonTable.TransportOrderCancel
                || _reasonTable.Enquiry
                || _reasonTable.DischargeReason
                || _reasonTable.OnHoldSterileItem
                || _reasonTable.CSSDEquipmentTest
                || _reasonTable.CSSDRecallRequest
                || _reasonTable.Amendment
                || _reasonTable.AmendmentDeny
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::Bank:

                // Validation fails if any fields are checked except the bank field.

                // <GEERU>
                if (_reasonTable.Asset || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::Cust:

                // Validation fails if any fields are checked except the cust field.

                // <GEERU>
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::Ledger:

                // Validation fails if any fields are checked except the ledger field.

                // <GEERU>
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Cust || _reasonTable.Vend || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                } 
                break;

            case ReasonCodeAccountTypeAll::Vend:

                // Validation fails if any fields are checked except the vend field.

                // <GEERU>
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;

                }
                break;
            case ReasonCodeAccountTypeAll::RCash:

                // Validation fails if any fields are checked except the vend field.
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret=false;
                }
                break;
            /*
            case ReasonCodeAccountTypeAll::RAsset:

                // Validation fails if any fields are checked except the vend field.
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret=false
                }
            */
        case ReasonCodeAccountTypeAll::DischargeReason:
        case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
        case ReasonCodeAccountTypeAll::TransportOrderCancel:
        case ReasonCodeAccountTypeAll::Enquiry:
        case ReasonCodeAccountTypeAll::OnHoldSterileItem:
        case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
        case ReasonCodeAccountTypeAll::CSSDRecallRequest:
        case ReasonCodeAccountTypeAll::Amendment:
        case ReasonCodeAccountTypeAll::AmendmentDeny:
        case ReasonCodeAccountTypeAll::ForceBookingCancel:
        case ReasonCodeAccountTypeAll::PatientDeactivate:
        case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
        case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
        case ReasonCodeAccountTypeAll::ServicePostponed:
        case ReasonCodeAccountTypeAll::ServiceDone:
        case ReasonCodeAccountTypeAll::EligibilityBypass:
            ret = this.validateDelete2(_reasonTable);
            break;

            default :
                //
                // Coming from the Basic menu, allow for entering of any Account type. Need to check all fields
                // Validation fails if any fields are checked.
                //

                // <GEERU>
                if (_reasonTable.Asset || _reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rCash || _reasonTable.rAsset
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
				||	_reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.CSSDRecallRequest
                ||  _reasonTable.Amendment
                ||  _reasonTable.AmendmentDeny
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
        }
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Pre_datasourceInitValue</Name>
				<Source><![CDATA[
    [PreHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, datasourceInitValue))]
    public static void ReasonFormTable_Pre_datasourceInitValue(XppPrePostArgs args)
    {
        ReasonFormTableHM _this = new ReasonFormTableHM();
        _this.datasourceinitlocal(args.getArg('_reasonTable'));
        // <MazikCare>
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Pre_initControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, initControls))]
    public static void ReasonFormTable_Pre_initControls(XppPrePostArgs args)
    {  
         ReasonFormTableHM _this = new ReasonFormTableHM();
       
        _this.initControlslocal(args.getArg('_rcAccountTypeMenu'));
  
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeAmendment</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeAmendment(FormCheckBoxControl _accountTypeAmendment = accountTypeAmendment)
    {
        accountTypeAmendment = _accountTypeAmendment;
        return accountTypeAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeAmendmentDeny</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeAmendmentDeny(FormCheckBoxControl _accountTypeAmendmentDeny = accountTypeAmendmentDeny)
    {
        accountTypeAmendmentDeny = _accountTypeAmendmentDeny;
        return accountTypeAmendmentDeny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeAppointmentCloseSchedule</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeAppointmentCloseSchedule(FormCheckBoxControl _accountTypeAppointmentCloseSchedule=accountTypeAppointmentCloseSchedule)
    {
        accountTypeAppointmentCloseSchedule = _accountTypeAppointmentCloseSchedule;
        return accountTypeAppointmentCloseSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeAppointments</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeAppointments(FormCheckBoxControl _accountTypeAppointments = accountTypeAppointments)
    {
        accountTypeAppointments = _accountTypeAppointments;
        return accountTypeAppointments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeAppointmentSlotBlocking</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeAppointmentSlotBlocking(FormCheckBoxControl _accountTypeAppointmentSlotBlocking=accountTypeAppointmentSlotBlocking)
    {
        accountTypeAppointmentSlotBlocking = _accountTypeAppointmentSlotBlocking;
        return accountTypeAppointmentSlotBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeClaim</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeClaim(FormCheckBoxControl _accountTypeClaim=accountTypeClaim)
    {
        accountTypeClaim = _accountTypeClaim;
        return accountTypeClaim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeCaseStatus</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeCaseStatus(FormCheckBoxControl _accountTypeCaseStatus=accountTypeCaseStatus)
    {
        accountTypeCaseStatus = _accountTypeCaseStatus;
        return accountTypeCaseStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeCSSDEquipmentTest</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeCSSDEquipmentTest(FormCheckBoxControl _accountTypeCSSDEquipmentTest = accountTypeCSSDEquipmentTest)
    {
        accountTypeCSSDEquipmentTest = _accountTypeCSSDEquipmentTest;
        return accountTypeCSSDEquipmentTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeCSSDRecallRequest</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeCSSDRecallRequest(FormCheckBoxControl _accountTypeCSSDRecallRequest = accountTypeCSSDRecallRequest)
    {
        accountTypeCSSDRecallRequest = _accountTypeCSSDRecallRequest;
        return accountTypeCSSDRecallRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeDischargeReason</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeDischargeReason(FormCheckBoxControl _accountTypeDischargeReason=accountTypeDischargeReason)
    {
        accountTypeDischargeReason = _accountTypeDischargeReason;
        return accountTypeDischargeReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeEligibilityBypass</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeEligibilityBypass(FormCheckBoxControl _accountTypeEligibilityBypass=accountTypeEligibilityBypass)
    {
        accountTypeEligibilityBypass = _accountTypeEligibilityBypass;
        return accountTypeEligibilityBypass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeEncounterDisposition</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeEncounterDisposition(FormCheckBoxControl _accountTypeEncounterDisposition = accountTypeEncounterDisposition)
    {
        accountTypeEncounterDisposition = _accountTypeEncounterDisposition;
        return accountTypeEncounterDisposition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeEnquiry</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeEnquiry(FormCheckBoxControl _accountTypeEnquiry = accountTypeEnquiry)
    {
        accountTypeEnquiry = _accountTypeEnquiry;
        return accountTypeEnquiry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeImmunizationRefusal</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeImmunizationRefusal(FormCheckBoxControl _accountTypeImmunizationRefusal = accountTypeImmunizationRefusal)
    {
        accountTypeImmunizationRefusal = _accountTypeImmunizationRefusal;
        return accountTypeImmunizationRefusal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeInPatientMaintain</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeInPatientMaintain(FormCheckBoxControl _accountTypeaInPatientMaintain=accountTypeInPatientMaintain)
    {
        accountTypeInPatientMaintain = _accountTypeaInPatientMaintain;
        return accountTypeInPatientMaintain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeLabRadiologyCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeLabRadiologyCancel(FormCheckBoxControl _accountTypeLabRadiologyCancel=accountTypeLabRadiologyCancel)
    {
        accountTypeLabRadiologyCancel = _accountTypeLabRadiologyCancel;
        return accountTypeLabRadiologyCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMedicationError</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMedicationError(FormCheckBoxControl _accountTypeMedicationError = accountTypeMedicationError)
    {
        accountTypeMedicationError = _accountTypeMedicationError;
        return accountTypeMedicationError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMedicationStopped</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMedicationStopped(FormCheckBoxControl _accountTypeMedicationStopped = accountTypeMedicationStopped)
    {
        accountTypeMedicationStopped = _accountTypeMedicationStopped;
        return accountTypeMedicationStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMovement</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMovement(FormCheckBoxControl _accountTypeMovement = accountTypeMovement)
    {
        accountTypeMovement = _accountTypeMovement;
        return accountTypeMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMovementCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMovementCancel(FormCheckBoxControl _accountTypeMovementCancel=accountTypeMovementCancel)
    {
        accountTypeMovementCancel = _accountTypeMovementCancel;
        return accountTypeMovementCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMovementEdit</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMovementEdit(FormCheckBoxControl _accountTypeMovementEdit = accountTypeMovementEdit)
    {
        accountTypeMovementEdit = _accountTypeMovementEdit;
        return accountTypeMovementEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeMovementReject</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeMovementReject(FormCheckBoxControl _accountTypeMovementReject=accountTypeMovementReject)
    {
        accountTypeMovementReject = _accountTypeMovementReject;
        return accountTypeMovementReject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeOnHold</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeOnHold(FormCheckBoxControl _accountTypeOnHold=accountTypeOnHold)
    {
        accountTypeOnHold = _accountTypeOnHold;
        return accountTypeOnHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeOrdering</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeOrdering(FormCheckBoxControl _accountTypeOrdering = accountTypeOrdering)
    {
        accountTypeOrdering = _accountTypeOrdering;
        return accountTypeOrdering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypePatientDeactivate</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypePatientDeactivate(FormCheckBoxControl _accountTypePatientDeactivate=accountTypePatientDeactivate)
    {
        accountTypePatientDeactivate = _accountTypePatientDeactivate;
        return accountTypePatientDeactivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypePatientMerge</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypePatientMerge(FormCheckBoxControl _accountTypePatientMerge = accountTypePatientMerge)
    {
        accountTypePatientMerge = _accountTypePatientMerge;
        return accountTypePatientMerge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypePhysiotherapy</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypePhysiotherapy(FormCheckBoxControl _accountTypePhysiotherapy = accountTypePhysiotherapy)
    {
        accountTypePhysiotherapy = _accountTypePhysiotherapy;
        return accountTypePhysiotherapy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeRegistrationRequestCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeRegistrationRequestCancel(FormCheckBoxControl _accountTypeRegistrationRequestCancel = accountTypeRegistrationRequestCancel)
    {
        accountTypeRegistrationRequestCancel = _accountTypeRegistrationRequestCancel;
        return accountTypeRegistrationRequestCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeServiceDone</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeServiceDone(FormCheckBoxControl _accountTypeServiceDone=accountTypeServiceDone)
    {
        accountTypeServiceDone = _accountTypeServiceDone;
        return accountTypeServiceDone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeServicePostponed</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeServicePostponed(FormCheckBoxControl _accountTypeServicePostponed=accountTypeServicePostponed)
    {
        accountTypeServicePostponed = _accountTypeServicePostponed;
        return accountTypeServicePostponed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeTransportOrderCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeTransportOrderCancel(FormCheckBoxControl _accountTypeTransportOrderCancel = accountTypeTransportOrderCancel)
    {
        accountTypeTransportOrderCancel = _accountTypeTransportOrderCancel;

        return accountTypeTransportOrderCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeWaitingListCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeWaitingListCancel(FormCheckBoxControl _accountTypeWaitingListCancel = accountTypeWaitingListCancel)
    {
        accountTypeWaitingListCancel = _accountTypeWaitingListCancel;
        return accountTypeWaitingListCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountTypeWriteOff</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmAccountTypeWriteOff(FormCheckBoxControl _accountTypeWriteOff = accountTypeWriteOff)
    {
        accountTypeWriteOff = _accountTypeWriteOff;
        return accountTypeWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForceBookingCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmForceBookingCancel(FormCheckBoxControl _accountTypeForceBookingCancel = accountTypeForceBookingCancel)
    {
        accountTypeForceBookingCancel = _accountTypeForceBookingCancel;
        return accountTypeForceBookingCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAccountTypeMovementCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAccountTypeMovementCancel(FormCheckBoxControl _reasonGridAccountTypeMovementCancel = reasonGridAccountTypeMovementCancel)
    {
        reasonGridAccountTypeMovementCancel = _reasonGridAccountTypeMovementCancel;
        return reasonGridAccountTypeMovementCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAccountTypeMovementReject</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAccountTypeMovementReject(FormCheckBoxControl _reasonGridAccountTypeMovementReject = reasonGridAccountTypeMovementReject)
    {
        reasonGridAccountTypeMovementReject = _reasonGridAccountTypeMovementReject;
        return reasonGridAccountTypeMovementReject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAmendment</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAmendment(FormCheckBoxControl _reasonGridAmendment = reasonGridAmendment)
    {
        reasonGridAmendment = _reasonGridAmendment;
        return reasonGridAmendment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAmendmentDeny</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAmendmentDeny(FormCheckBoxControl _reasonGridAmendmentDeny = reasonGridAmendmentDeny)
    {
        reasonGridAmendmentDeny = _reasonGridAmendmentDeny;
        return reasonGridAmendmentDeny;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAppointmentCloseSchedule</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAppointmentCloseSchedule(FormCheckBoxControl _reasonGridAppointmentCloseSchedule = reasonGridAppointmentCloseSchedule)
    {
        reasonGridAppointmentCloseSchedule = _reasonGridAppointmentCloseSchedule;
        return reasonGridAppointmentCloseSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAppointments</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAppointments(FormCheckBoxControl _reasonGridAppointments = reasonGridAppointments)
    {
        reasonGridAppointments = _reasonGridAppointments;
        return reasonGridAppointments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridAppointmentSlotBlocking</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridAppointmentSlotBlocking(FormCheckBoxControl _reasonGridAppointmentSlotBlocking = reasonGridAppointmentSlotBlocking)
    {
        reasonGridAppointmentSlotBlocking = _reasonGridAppointmentSlotBlocking;
        return reasonGridAppointmentSlotBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridClaim</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridClaim(FormCheckBoxControl _reasonGridClaim = reasonGridClaim)
    {
        reasonGridClaim = _reasonGridClaim;
        return reasonGridClaim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridCaseStatus</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridCaseStatus(FormCheckBoxControl _reasonGridCaseStatus = reasonGridCaseStatus)
    {
        reasonGridCaseStatus = _reasonGridCaseStatus;
        return reasonGridCaseStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridCSSDEquipmentTest</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridCSSDEquipmentTest(FormCheckBoxControl _reasonGridCSSDEquipmentTest = reasonGridCSSDEquipmentTest)
    {
        reasonGridCSSDEquipmentTest = _reasonGridCSSDEquipmentTest;
        return reasonGridCSSDEquipmentTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridCSSDRecallRequest</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridCSSDRecallRequest(FormCheckBoxControl _reasonGridCSSDRecallRequest = reasonGridCSSDRecallRequest)
    {
        reasonGridCSSDRecallRequest = _reasonGridCSSDRecallRequest;
        return reasonGridCSSDRecallRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridDischargeReason</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridDischargeReason(FormCheckBoxControl _reasonGridDischargeReason = reasonGridDischargeReason)
    {
        reasonGridDischargeReason = _reasonGridDischargeReason;
        return reasonGridDischargeReason;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridEligibilityBypass</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridEligibilityBypass(FormCheckBoxControl _reasonGridEligibilityBypass = reasonGridEligibilityBypass)
    {
        reasonGridEligibilityBypass = _reasonGridEligibilityBypass;

        return reasonGridEligibilityBypass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridEncounterDisposition</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridEncounterDisposition(FormCheckBoxControl _reasonGridEncounterDisposition = reasonGridEncounterDisposition)
    {
        reasonGridEncounterDisposition = _reasonGridEncounterDisposition;
        return reasonGridEncounterDisposition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridEnquiry</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridEnquiry(FormCheckBoxControl _reasonGridEnquiry = reasonGridEnquiry)
    {
        reasonGridEnquiry = _reasonGridEnquiry;
        return reasonGridEnquiry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridForceBookingCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridForceBookingCancel(FormCheckBoxControl _reasonGridForceBookingCancel = reasonGridForceBookingCancel)
    {
        reasonGridForceBookingCancel = _reasonGridForceBookingCancel;
        return reasonGridForceBookingCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridImmunizationRefusal</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridImmunizationRefusal(FormCheckBoxControl _reasonGridImmunizationRefusal = reasonGridImmunizationRefusal)
    {
        reasonGridImmunizationRefusal = _reasonGridImmunizationRefusal;
        return reasonGridImmunizationRefusal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridInPatientMaintain</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridInPatientMaintain(FormCheckBoxControl _reasonGridInPatientMaintain = reasonGridInPatientMaintain)
    {
        reasonGridInPatientMaintain = _reasonGridInPatientMaintain;
        return reasonGridInPatientMaintain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridLabRadiologyCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridLabRadiologyCancel(FormCheckBoxControl _reasonGridLabRadiologyCancel = reasonGridLabRadiologyCancel)
    {
        reasonGridLabRadiologyCancel = _reasonGridLabRadiologyCancel;
        return reasonGridLabRadiologyCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridMedicationError</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridMedicationError(FormCheckBoxControl _reasonGridMedicationError = reasonGridMedicationError)
    {
        reasonGridMedicationError = _reasonGridMedicationError;
        return reasonGridMedicationError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridMedicationStopped</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridMedicationStopped(FormCheckBoxControl _reasonGridMedicationStopped = reasonGridMedicationStopped)
    {
        reasonGridMedicationStopped = _reasonGridMedicationStopped;
        return reasonGridMedicationStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridMovement</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridMovement(FormCheckBoxControl _reasonGridMovement = reasonGridMovement)
    {
        reasonGridMovement = _reasonGridMovement;
        return reasonGridMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridMovementEdit</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridMovementEdit(FormCheckBoxControl _reasonGridMovementEdit = reasonGridMovementEdit)
    {
        reasonGridMovementEdit = _reasonGridMovementEdit;
        return reasonGridMovementEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridOnHold</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridOnHold(FormCheckBoxControl _reasonGridOnHold = reasonGridOnHold)
    {
        reasonGridOnHold = _reasonGridOnHold;
        return reasonGridOnHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridOrdering</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridOrdering(FormCheckBoxControl _reasonGridOrdering = reasonGridOrdering)
    {
        reasonGridOrdering = _reasonGridOrdering;
        return reasonGridOrdering;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridPatientDeactivate</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridPatientDeactivate(FormCheckBoxControl _reasonGridPatientDeactivate = reasonGridPatientDeactivate)
    {
        reasonGridPatientDeactivate = _reasonGridPatientDeactivate;
        return reasonGridPatientDeactivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridPatientMerge</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridPatientMerge(FormCheckBoxControl _reasonGridPatientMerge = reasonGridPatientMerge)
    {
        reasonGridPatientMerge = _reasonGridPatientMerge;
        return reasonGridPatientMerge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridPhysiotherapy</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridPhysiotherapy(FormCheckBoxControl _reasonGridPhysiotherapy = reasonGridPhysiotherapy)
    {
        reasonGridPhysiotherapy = _reasonGridPhysiotherapy;
        return reasonGridPhysiotherapy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridRegistrationRequestCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridRegistrationRequestCancel(FormCheckBoxControl _reasonGridRegistrationRequestCancel = reasonGridRegistrationRequestCancel)
    {
        reasonGridRegistrationRequestCancel = _reasonGridRegistrationRequestCancel;
        return reasonGridRegistrationRequestCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridServiceDone</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridServiceDone(FormCheckBoxControl _reasonGridServiceDone = reasonGridServiceDone)
    {
        reasonGridServiceDone = _reasonGridServiceDone;

        return reasonGridServiceDone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridServicePostponed</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridServicePostponed(FormCheckBoxControl _reasonGridServicePostponed = reasonGridServicePostponed)
    {
        reasonGridServicePostponed = _reasonGridServicePostponed;

        return reasonGridServicePostponed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridTransportOrderCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridTransportOrderCancel(FormCheckBoxControl _reasonGridTransportOrderCancel = reasonGridTransportOrderCancel)
    {
        reasonGridTransportOrderCancel = _reasonGridTransportOrderCancel;

        return reasonGridTransportOrderCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridWaitingListCancel</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridWaitingListCancel(FormCheckBoxControl _reasonGridWaitingListCancel = reasonGridWaitingListCancel)
    {
        reasonGridWaitingListCancel = _reasonGridWaitingListCancel;
        return reasonGridWaitingListCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonGridWriteOff</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmReasonGridWriteOff(FormCheckBoxControl _reasonGridWriteOff = reasonGridWriteOff)
    {
        reasonGridWriteOff = _reasonGridWriteOff;
        return reasonGridWriteOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Pre_setControlsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, setControlsVisible))]
    public static void ReasonFormTable_Pre_setControlsVisible(XppPrePostArgs args)
    {
        ReasonFormTableHM _this = new ReasonFormTableHM();
        _this.setControlsVisiblelocal(Args.getArg('_visible'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete2</Name>
				<Source><![CDATA[
    /*
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, validateDelete))]
    public static void ReasonFormTable_Post_validateDelete(XppPrePostArgs args)
    {
        ReasonFormTableHM _this = new ReasonFormTableHM();
        Args.setReturnValue(_this.validatedeletelocal(Args.getArg('_reasonTable')));
    }
*/
    public boolean validateDelete2(ReasonTable _reasonTable)
    {
        boolean ret;
        ;
        ret = true;
        switch(reasonCodeAccountType)
        {
            case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
                // Validation fails if any fields are checked except the RegistrationRequestCancel field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Appointments)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::TransportOrderCancel:
                // Validation fails if any fields are checked except the TransportOrderCancel field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Appointments)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::Enquiry:
                // Validation fails if any fields are checked except the enquiry field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Appointments)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::DischargeReason:
                // Validation fails if any fields are checked except the Discharge reason field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Appointments)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.OnHoldSterileItem)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::OnHoldSterileItem:
                // Validation fails if any fields are checked except the Onhold sterile item field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementReject)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.InPatientMaintain)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationStopped)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ImmunizationRefusal)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.LabRadiologyCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.BillingReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Appointments)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Ordering)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Claim)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CaseStatus)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MedicationError)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EncounterDisposition)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Physiotherapy)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.WaitingListCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientMerge)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.MovementEdit)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Movement)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.RegistrationRequestCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.TransportOrderCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.DischargeReason)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Enquiry)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDEquipmentTest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.CSSDRecallRequest)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.Amendment)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AmendmentDeny)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ForceBookingCancel)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.PatientDeactivate)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentSlotBlocking)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.AppointmentCloseSchedule)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServicePostponed)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.ServiceDone)
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && _reasonTable.EligibilityBypass))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
                // Validation fails if any fields are checked except the CSSD equipment test field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDRecallRequest
                ||  _reasonTable.Amendment
                ||  _reasonTable.AmendmentDeny
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::CSSDRecallRequest:
                // Validation fails if any fields are checked except the CSSD recall request field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                ||  _reasonTable.AmendmentDeny
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::Amendment:
                // Validation fails if any fields are checked except the CSSD recall request field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.AmendmentDeny
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::AmendmentDeny:
                // Validation fails if any fields are checked except the CSSD recall request field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.ForceBookingCancel
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::ForceBookingCancel:
                // Validation fails if any fields are checked except the CSSD recall request field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::PatientDeactivate:
                // Validation fails if any fields are checked except the patient deactivate field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                // Validation fails if any fields are checked except the aapointment slot blocking field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                // Validation fails if any fields are checked except the appointment close schedule field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::ServicePostponed:
                // Validation fails if any fields are checked except the service postponed field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentCloseSchedule
                || _reasonTable.ServiceDone
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;

            case ReasonCodeAccountTypeAll::ServiceDone:
                // Validation fails if any fields are checked except the service done field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.ServicePostponed
                || _reasonTable.EligibilityBypass)))
                {
                    ret = false;
                }
                break;
            case ReasonCodeAccountTypeAll::EligibilityBypass:
                // Validation fails if any fields are checked except the service done field.
                if (_reasonTable.Bank || _reasonTable.Cust || _reasonTable.Ledger || _reasonTable.Vend || _reasonTable.rAsset || _reasonTable.rCash
                || (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && (_reasonTable.MovementCancel
                ||  _reasonTable.MovementReject
                ||  _reasonTable.InPatientMaintain
                ||  _reasonTable.MedicationStopped
                ||  _reasonTable.ImmunizationRefusal
                ||  _reasonTable.LabRadiologyCancel
                ||  _reasonTable.BillingReason
                ||  _reasonTable.Appointments
                ||  _reasonTable.Ordering
                ||  _reasonTable.Claim
                ||  _reasonTable.CaseStatus
                ||  _reasonTable.MedicationError
                ||  _reasonTable.EncounterDisposition
                ||  _reasonTable.Physiotherapy
                ||  _reasonTable.WaitingListCancel
                ||  _reasonTable.PatientMerge
                ||  _reasonTable.MovementEdit
                ||  _reasonTable.Movement
                ||  _reasonTable.RegistrationRequestCancel
                ||  _reasonTable.TransportOrderCancel
                ||  _reasonTable.DischargeReason
                ||  _reasonTable.Enquiry
                ||  _reasonTable.OnHoldSterileItem
                ||  _reasonTable.CSSDEquipmentTest
                ||  _reasonTable.Amendment
                || _reasonTable.PatientDeactivate
                || _reasonTable.AppointmentSlotBlocking
                || _reasonTable.ServicePostponed
                || _reasonTable.ServiceDone)))
                {
                    ret = false;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReasonCodeForAccountTypelocal</Name>
				<Source><![CDATA[
    public boolean checkReasonCodeForAccountTypelocal(ReasonRefRecID _reasonRefRecID, LedgerJournalACType _ledgerJournalACType)
    {
        ReasonTable        reasonTablelocal;
        boolean            ret = false;
        ReasonCode         reasonCode;
        ;

        reasonCode  = ReasonTableRef::find(_reasonRefRecID).Reason;
        reasonTablelocal = ReasonTable::find(reasonCode);

        if (reasonCode)
        {
            // <MazikCare>
            if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            {
                switch (_ledgerJournalACType)
                {
                    case LedgerJournalACType::MovementCancel:
                    if (reasonTablelocal.MovementCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::MovementReject:
                    if (reasonTablelocal.MovementReject == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::InPatientMaintain:
                    if (reasonTablelocal.InPatientMaintain == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::MedicationStopped:
                    if (reasonTablelocal.MedicationStopped == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::ImmunizationRefusal:
                    if (reasonTablelocal.ImmunizationRefusal == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::LabRadiologyCancel:
                    if (reasonTablelocal.LabRadiologyCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::BillingReason:
                    if (reasonTablelocal.BillingReason == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Appointments:
                    if (reasonTablelocal.Appointments == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Ordering:
                    if (reasonTablelocal.Ordering == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Claim:
                    if (reasonTablelocal.Claim == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::CaseStatus:
                        if (reasonTablelocal.CaseStatus == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::MedicationError:
                    if (reasonTablelocal.MedicationError == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::EncounterDisposition:
                    if (reasonTablelocal.EncounterDisposition == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Physiotherapy:
                    if (reasonTablelocal.Physiotherapy == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::WaitingListCancel:
                    if (reasonTablelocal.WaitingListCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::PatientMerge:
                    if (reasonTablelocal.PatientMerge == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::MovementEdit:
                    if (reasonTablelocal.MovementEdit == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Movement:
                    if (reasonTablelocal.Movement == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::RegistrationRequestCancel:
                    if (reasonTablelocal.RegistrationRequestCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::TransportOrderCancel:
                    if (reasonTablelocal.TransportOrderCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::Enquiry:
                    if (reasonTablelocal.Enquiry == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::DischargeReason:
                    if (reasonTablelocal.DischargeReason == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::OnHoldSterileItem:
                    if (reasonTablelocal.OnHoldSterileItem == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::CSSDEquipmentTest:
                    if (reasonTablelocal.CSSDEquipmentTest == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::CSSDRecallRequest:
                    if (reasonTablelocal.CSSDRecallRequest == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::Amendment:
                    if (reasonTablelocal.Amendment == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;

                    case LedgerJournalACType::AmendmentDeny:
                    if (reasonTablelocal.AmendmentDeny == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::ForceBookingCancel:
                    if (reasonTablelocal.ForceBookingCancel == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::PatientDeactivate:
                    if (reasonTablelocal.PatientDeactivate == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::AppointmentSlotBlocking:
                    if (reasonTablelocal.AppointmentSlotBlocking == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::AppointmentCloseSchedule:
                    if (reasonTablelocal.AppointmentCloseSchedule == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::ServicePostponed:
                    if (reasonTablelocal.ServicePostponed == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                    case LedgerJournalACType::ServiceDone:
                    if (reasonTablelocal.ServiceDone == NoYes::Yes)
                        {
                            ret = true;
                            
                        }
                        break;
                    case LedgerJournalACType::EligibilityBypass:
                    if (reasonTablelocal.EligibilityBypass == NoYes::Yes)
                        {
                            ret = true;
                        }
                        break;
                }
            }
            // </MazikCare>

        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_checkReasonCodeForAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(ReasonFormTable), staticMethodStr(ReasonFormTable, checkReasonCodeForAccountType))]
    public static void ReasonFormTable_Post_checkReasonCodeForAccountType(XppPrePostArgs args)
    {
        ReasonFormTableHM _this = new ReasonFormTableHM();
        Args.setReturnValue(_this.checkReasonCodeForAccountTypelocal(Args.getArg('_reasonRefRecID'),Args.getArg('_ledgerJournalACType')));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountRangelocal</Name>
				<Source><![CDATA[
    public void setAccountRangelocal(LedgerJournalACType _accountType,QueryBuildDataSource _dsReasonTable)
    {
    
        // <MazikCare>
        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            switch(_accountType)
            {
                case LedgerJournalACType::MovementCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,MovementCancel)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::MovementReject:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,MovementReject)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::InPatientMaintain:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,InPatientMaintain)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::MedicationStopped:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,MedicationStopped)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::ImmunizationRefusal:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,ImmunizationRefusal)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::LabRadiologyCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,LabRadiologyCancel)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::BillingReason:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,BillingReason)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Appointments:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Appointments)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Ordering:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Ordering)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Claim:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Claim)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::CaseStatus:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,CaseStatus)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::MedicationError:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,MedicationError)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::EncounterDisposition:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,EncounterDisposition)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Physiotherapy:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Physiotherapy)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::WaitingListCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,WaitingListCancel)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::PatientMerge:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,PatientMerge)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::MovementEdit:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,MovementEdit)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Movement:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Movement)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::RegistrationRequestCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,RegistrationRequestCancel)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::TransportOrderCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,TransportOrderCancel)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Enquiry:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Enquiry)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::DischargeReason:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,DischargeReason)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::OnHoldSterileItem:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,OnholdSterileItem)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::CSSDEquipmentTest:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,CSSDEquipmentTest)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::CSSDRecallRequest:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,CSSDRecallRequest)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::Amendment:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,Amendment)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::AmendmentDeny:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,AmendmentDeny)).value(queryValue(NoYes::Yes));
                    break;
                case LedgerJournalACType::ForceBookingCancel:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,ForceBookingCancel)).value(queryValue(NoYes::Yes));
                    break;
                case LedgerJournalACType::PatientDeactivate:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,PatientDeactivate)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::AppointmentSlotBlocking:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,AppointmentSlotBlocking)).value(queryValue(NoYes::Yes));
                    break;
                case LedgerJournalACType::AppointmentCloseSchedule:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,AppointmentCloseSchedule)).value(queryValue(NoYes::Yes));
                    break;

                case LedgerJournalACType::ServicePostponed:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,ServicePostponed)).value(queryValue(NoYes::Yes));
                    break;
                case LedgerJournalACType::ServiceDone:
                    _dsReasonTable.addRange(fieldNum(ReasonTable,ServiceDone)).value(queryValue(NoYes::Yes));
                    break;
            }
        }
        // </MazikCare>

    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_setAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(ReasonFormTable), staticMethodStr(ReasonFormTable, setAccountRange))]
    public static void ReasonFormTable_Post_setAccountRange(XppPrePostArgs args)
    {
        ReasonFormTableHM _this = new ReasonFormTableHM();
        _this.setAccountRangelocal(Args.getArg('accountType'),Args.getArg('dsreasonTable'));
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>