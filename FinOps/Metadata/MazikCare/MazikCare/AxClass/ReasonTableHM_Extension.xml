<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonTableHM_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
Public static class ReasonTableHM_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isReasonExist</Name>
				<Source><![CDATA[
    public static boolean isReasonExist(ReasonTable ReasonTable)
    {
        ReasonTable     reasonTableLocal;

        select * from reasonTableLocal
        where reasonTableLocal.Reason == ReasonTable.Reason
        && reasonTableLocal.RecId != ReasonTable.RecId;
        
        if (reasonTable)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecid</Name>
				<Source><![CDATA[
    public static ReasonTable findByRecid(ReasonTable _reasontable,
                                RecId               _recid,
                                boolean             _forUpdate = false,
                                ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        ReasonTable  reasonTable;
        reasonTable.selectForUpdate(_forUpdate);
        
        if(_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            reasonTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly * from reasonTable where reasonTable.RecId == _recid;
        
        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonTable_findReasonByFilterForAccountTypesEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_reasonCode"></param>
    /// <param name="_accountType"></param>
    /// <param name="_useAccountType"></param>
    /// <param name="_offsetAccountType"></param>
    /// <param name="_useOffsetAccountType"></param>
    /// <param name="_reasonTable"></param>
    /// <param name="_result"></param>
    [SubscribesTo(tableStr(ReasonTable), delegateStr(ReasonTable, findReasonByFilterForAccountTypesEvent))]
    public static void ReasonTable_findReasonByFilterForAccountTypesEvent(ReasonCode _reasonCode, LedgerJournalACType _accountType, boolean _useAccountType, LedgerJournalACType _offsetAccountType, boolean _useOffsetAccountType, ReasonTable _reasonTable, EventHandlerResult _result)
    {
        ReasonTable reasonTable;
        NoYes     fixedAsset;
        NoYes     ledger;
        NoYes     customer;
        NoYes     vendor;
        NoYes     bank;

        // <GEERU>
        NoYes       rCash;
        NoYes       rAsset;
        // MazikCare - Start
        NoYes     movementCancel;
        NoYes     movementReject;
        NoYes     inPatientMaintain;
        NoYes     medicationStopped;
        NoYes     immunizationRefusal;
        NoYes     labRadCancel;
        NoYes     writeOff;
        NoYes     appointments;
        NoYes     ordering;
        NoYes     medicationError;
        NoYes     encounterDisposition;
        NoYes     physiotherapy;
        NoYes     waitingListCancel;
        NoYes     patientMerge;
        NoYes     movementEdit;
        NoYes     movement;
        NoYes     registrationRequestCancel;
        NoYes     transportOrderCancel;
        NoYes     enquiry;
        NoYes     dischargeReason;
        NoYes     onHold;
        NoYes     cssdEquipmentTest;
        NoYes     cssdRecallRequest;
        NoYes     amendment;
        NoYes     amendmentDeny;
        NoYes     forceBookingCancel;
        NoYes     patientDeactivate;
        NoYes     appointmentSlotBlocking;
        NoYes     appointmentCloseSchedule;
        NoYes     servicePostponed;
        NoYes     serviceDone;
        NoYes     eligibilityBypass;
        // MazikCare - End
        fixedAsset  = NoYes::No;
        ledger      = NoYes::No;
        customer    = NoYes::No;
        vendor      = NoYes::No;
        bank        = NoYes::No;

        // <GEERU>
        rCash       = NoYes::No;
        rAsset      = NoYes::No;
        boolean   errorFound = false;

        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            movementCancel              = NoYes::No;
            movementReject              = NoYes::No;
            inPatientMaintain           = NoYes::No;
            medicationStopped           = NoYes::No;
            immunizationRefusal         = NoYes::No;
            labRadCancel                = NoYes::No;
            writeOff                    = NoYes::No;
            appointments                = NoYes::No;
            ordering                    = NoYes::No;
            medicationError             = NoYes::No;
            encounterDisposition        = NoYes::No;
            physiotherapy               = NoYes::No;
            waitingListCancel           = NoYes::No;
            patientMerge                = NoYes::No;
            movementEdit                = NoYes::No;
            movement                    = NoYes::No;
            registrationRequestCancel   = NoYes::No;
            transportOrderCancel        = NoYes::No;
            enquiry                     = NoYes::No;
            dischargeReason             = NoYes::No;
            onHold                      = NoYes::No;
            cssdEquipmentTest           = NoYes::No;
            cssdRecallRequest           = NoYes::No;
            amendment                   = NoYes::No;
            amendmentDeny               = NoYes::No;
            forceBookingCancel          = NoYes::No;
            patientDeactivate           = NoYes::No;
            appointmentSlotBlocking     = NoYes::No;
            appointmentCloseSchedule    = NoYes::No;
            servicePostponed            = NoYes::No;
            serviceDone                 = NoYes::No;
            eligibilityBypass           = NoYes::No;
        }
        // MazikCare - End
        
        
        if(_useAccountType)
        {
            //
            // MazikCare - Start
            if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            {
                switch(_accountType)
                {
                    case LedgerJournalACType::MovementCancel:
                        movementCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MovementReject:
                        movementReject = NoYes::Yes;
                        break;
                    case LedgerJournalACType::InPatientMaintain:
                        inPatientMaintain = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MedicationStopped:
                        medicationStopped = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ImmunizationRefusal:
                        immunizationRefusal = NoYes::Yes;
                        break;
                    case LedgerJournalACType::LabRadiologyCancel:
                        labRadCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::BillingReason:
                        writeOff = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Appointments:
                        appointments = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Ordering:
                        ordering = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MedicationError:
                        medicationError = NoYes::Yes;
                        break;
                    case LedgerJournalACType::EncounterDisposition:
                        encounterDisposition = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Physiotherapy:
                        physiotherapy = NoYes::Yes;
                        break;
                    case LedgerJournalACType::WaitingListCancel:
                        waitingListCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::PatientMerge:
                        patientMerge = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MovementEdit:
                        movementEdit = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Movement:
                        movement = NoYes::Yes;
                        break;
                    case LedgerJournalACType::RegistrationRequestCancel:
                        registrationRequestCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::TransportOrderCancel:
                        transportOrderCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Enquiry:
                        enquiry = NoYes::Yes;
                        break;
                    case LedgerJournalACType::DischargeReason:
                        dischargeReason = NoYes::Yes;
                        break;
                    case LedgerJournalACType::OnHoldSterileItem:
                        onHold   = NoYes::Yes;
                        break;
                    case LedgerJournalACType::CSSDEquipmentTest:
                        cssdEquipmentTest = NoYes::Yes;
                        break;
                    case LedgerJournalACType::CSSDRecallRequest:
                        cssdRecallRequest = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Amendment:
                        amendment = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AmendmentDeny:
                        amendmentDeny = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ForceBookingCancel:
                        forceBookingCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::PatientDeactivate:
                        patientDeactivate = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AppointmentSlotBlocking:
                        appointmentSlotBlocking = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AppointmentCloseSchedule:
                        appointmentCloseSchedule = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ServicePostponed:
                        servicePostponed = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ServiceDone:
                        serviceDone = NoYes::Yes;
                        break;
                    case LedgerJournalACType::EligibilityBypass:
                        eligibilityBypass = NoYes::Yes;
                        break;
                }
            }
            // MazikCare - End

            switch(_accountType)
            {
                case LedgerJournalACType::FixedAssets:
                    fixedAsset=NoYes::Yes;
                    break;
                case LedgerJournalACType::Bank:
                    bank=NoYes::Yes;
                    break;
                case LedgerJournalACType::Cust:
                    customer=NoYes::Yes;
                    break;
                case LedgerJournalACType::Ledger:
                    ledger=NoYes::Yes;
                    break;
                case LedgerJournalACType::Vend:
                    vendor=NoYes::Yes;
                    // <GEERU>
                    break;
                case LedgerJournalACType::RCash:
                    rCash       = NoYes::Yes;
                    break;
                case LedgerJournalACType::FixedAssets_RU:
                    rAsset      = NoYes::Yes;
                    // </GEERU>
                    break;
            }
        }

        if(_useOffsetAccountType)
        {
            // MazikCare - Start
            if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            {
                switch(_offsetAccountType)
                {
                    case LedgerJournalACType::MovementCancel:
                        movementCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MovementReject:
                        movementReject = NoYes::Yes;
                        break;
                    case LedgerJournalACType::InPatientMaintain:
                        inPatientMaintain = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MedicationStopped:
                        medicationStopped = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ImmunizationRefusal:
                        immunizationRefusal = NoYes::Yes;
                        break;
                    case LedgerJournalACType::LabRadiologyCancel:
                        labRadCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::BillingReason:
                        writeOff = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Appointments:
                        appointments = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Ordering:
                        ordering = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MedicationError:
                        medicationError = NoYes::Yes;
                        break;
                    case LedgerJournalACType::EncounterDisposition:
                        encounterDisposition = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Physiotherapy:
                        physiotherapy = NoYes::Yes;
                        break;
                    case LedgerJournalACType::WaitingListCancel:
                        waitingListCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::PatientMerge:
                        patientMerge = NoYes::Yes;
                        break;
                    case LedgerJournalACType::MovementEdit:
                        movementEdit = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Movement:
                        movement = NoYes::Yes;
                        break;
                    case LedgerJournalACType::RegistrationRequestCancel:
                        registrationRequestCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::TransportOrderCancel:
                        transportOrderCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Enquiry:
                        enquiry = NoYes::Yes;
                        break;
                    case LedgerJournalACType::DischargeReason:
                        dischargeReason = NoYes::Yes;
                        break;
                    case LedgerJournalACType::OnHoldSterileItem:
                        onHold = NoYes::Yes;
                        break;
                    case LedgerJournalACType::CSSDEquipmentTest:
                        cssdEquipmentTest = NoYes::Yes;
                        break;
                    case LedgerJournalACType::CSSDRecallRequest:
                        cssdRecallRequest = NoYes::Yes;
                        break;
                    case LedgerJournalACType::Amendment:
                        amendment = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AmendmentDeny:
                        amendmentDeny = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ForceBookingCancel:
                        forceBookingCancel = NoYes::Yes;
                        break;
                    case LedgerJournalACType::PatientDeactivate:
                        patientDeactivate = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AppointmentSlotBlocking:
                        appointmentSlotBlocking = NoYes::Yes;
                        break;
                    case LedgerJournalACType::AppointmentCloseSchedule:
                        appointmentCloseSchedule = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ServicePostponed:
                        servicePostponed = NoYes::Yes;
                        break;
                    case LedgerJournalACType::ServiceDone:
                        serviceDone = NoYes::Yes;
                        break;
                    case LedgerJournalACType::EligibilityBypass:
                        eligibilityBypass = NoYes::Yes;
                        break;
                }
            }
            // MazikCare - End

            switch(_offsetAccountType)
            {
                case LedgerJournalACType::FixedAssets:
                    fixedAsset=NoYes::Yes;
                    break;
                case LedgerJournalACType::Bank:
                    bank=NoYes::Yes;
                    break;
                case LedgerJournalACType::Cust:
                    customer=NoYes::Yes;
                    break;
                case LedgerJournalACType::Ledger:
                    ledger=NoYes::Yes;
                    break;
                case LedgerJournalACType::Vend:
                    vendor=NoYes::Yes;
                    // <GEERU>
                    break;
                case LedgerJournalACType::RCash:
                    rCash       = NoYes::Yes;
                    break;
                case LedgerJournalACType::FixedAssets_RU:
                    rAsset      = NoYes::Yes;
                    // </GEERU>
                    break;
            }
        }

        // Reason Code is unique, so we'll only get one valid record here, at most.
        select firstonly reasonTable
    where
        reasonTable.Reason == _reasonCode;

        if (reasonTable)
        {
            if ((fixedAsset) && !(reasonTable.Asset))
            {
                errorFound = true;
            }

            if (!(errorFound) && (bank) && !(reasonTable.Bank))
            {
                errorFound = true;
            }

            if (!(errorFound) && (customer) && !(reasonTable.Cust))
            {
                errorFound = true;
            }

            if (!(errorFound) && (ledger) && !(reasonTable.Ledger))
            {
                errorFound = true;
            }

            if (!(errorFound) && (vendor) && !(reasonTable.Vend))
            {
                errorFound = true;
            }
            // MazikCare - Start
            if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            {
                if (!(errorFound) && (movementCancel) && !(reasonTable.MovementCancel))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (movementReject) && !(reasonTable.MovementReject))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (inPatientMaintain) && !(reasonTable.InPatientMaintain))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (medicationStopped) && !(reasonTable.MedicationStopped))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (immunizationRefusal) && !(reasonTable.ImmunizationRefusal))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (labRadCancel) && !(reasonTable.LabRadiologyCancel))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (writeOff) && !(reasonTable.BillingReason))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (appointments) && !(reasonTable.Appointments))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (ordering) && !(reasonTable.Ordering))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (medicationError) && !(reasonTable.MedicationError))
                {
                    errorFound = true;
                }

                if (!(errorFound) && (encounterDisposition) && !(reasonTable.EncounterDisposition))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (physiotherapy) && !(reasonTable.Physiotherapy))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (waitingListCancel) && !(reasonTable.WaitingListCancel))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (patientMerge) && !(reasonTable.PatientMerge))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (movementEdit) && !(reasonTable.MovementEdit))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (movement) && !(reasonTable.Movement))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (registrationRequestCancel) && !(reasonTable.RegistrationRequestCancel))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (transportOrderCancel) && !(reasonTable.TransportOrderCancel))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (enquiry) && !(reasonTable.Enquiry))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (dischargeReason) && !(reasonTable.DischargeReason))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (onHold) && !(reasonTable.OnHoldSterileItem))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (cssdEquipmentTest) && !(reasonTable.CSSDEquipmentTest))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (cssdRecallRequest) && !(reasonTable.CSSDRecallRequest))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (amendment) && !(reasonTable.Amendment))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (amendmentDeny) && !(reasonTable.AmendmentDeny))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (forceBookingCancel) && !(reasonTable.ForceBookingCancel))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (patientDeactivate) && !(reasonTable.PatientDeactivate))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (appointmentSlotBlocking) && !(reasonTable.AppointmentSlotBlocking))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (appointmentCloseSchedule) && !(reasonTable.AppointmentCloseSchedule))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (servicePostponed) && !(reasonTable.ServicePostponed))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (serviceDone) && !(reasonTable.ServiceDone))
                {
                    errorFound = true;
                }
                if (!(errorFound) && (eligibilityBypass) && !(reasonTable.EligibilityBypass))
                {
                    errorFound = true;
                }
            }
            // MazikCare - End
            // <GEERU>
            if (!(errorFound) && (rCash) && !(reasonTable.rCash))
            {
                errorFound = true;
            }

            if (!(errorFound) && (rAsset) && !(reasonTable.rAsset))
            {
                errorFound = true;
            }

            // </GEERU>
            // If we found an error, clear out this record buffer as it's not a valid reason code.
            //if (errorFound)
            {
               // reasonTable.clear();
               _result.result(errorFound);
            }


        }

        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>