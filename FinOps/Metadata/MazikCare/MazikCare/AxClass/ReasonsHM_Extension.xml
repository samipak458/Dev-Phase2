<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonsHM_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
Public static class ReasonsHM_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCheckboxControl</Name>
				<Source><![CDATA[
        public static FormCheckBoxControl findCheckboxControl(ReasonCodeAccountTypeAll _accountType, ReasonFormTable _reasonFormTable)
        {
       
            FormControlId formControlId;

            switch (_accountType)
            {
                case ReasonCodeAccountTypeAll::FixedAssets:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Asset));
                    break;

                case ReasonCodeAccountTypeAll::Cust:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Cust));
                    break;

                case ReasonCodeAccountTypeAll::Bank:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Bank));
                    break;

                case ReasonCodeAccountTypeAll::Vend:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Vend));
                    break;

                case ReasonCodeAccountTypeAll::RCash:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RCash));
                    break;

                case ReasonCodeAccountTypeAll::Amendment:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Amendment));
                    break;

                case ReasonCodeAccountTypeAll::AmendmentDeny:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Amendment));
                    break;

                case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_AppointmentCloseSchedule));
                    break;

                case ReasonCodeAccountTypeAll::Appointments:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Appointments));
                    break;

                case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_AppointmentSlotBlocking));
                    break;

                case ReasonCodeAccountTypeAll::BillingReason:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_BillingReason));
                    break;

                case ReasonCodeAccountTypeAll::Claim:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Claim));
                    break;

				// Musab.
				// Start: Adding CaseStatus reason code.
				case ReasonCodeAccountTypeAll::CaseStatus:
					formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CaseStatus));
					break;
				// End.
                case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CSSDEquipmentTest));
                    break;

                case ReasonCodeAccountTypeAll::CSSDRecallRequest:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CSSDRecallRequest));
                    break;

                case ReasonCodeAccountTypeAll::DischargeReason:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_DischargeReason));
                    break;

                case ReasonCodeAccountTypeAll::EligibilityBypass:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_EligibilityBypass));
                    break;

                case ReasonCodeAccountTypeAll::EncounterDisposition:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_EncounterDisposition));
                    break;

                case ReasonCodeAccountTypeAll::Enquiry:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Enquiry));
                    break;

                case ReasonCodeAccountTypeAll::ForceBookingCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ForceBookingCancel));
                    break;

                case ReasonCodeAccountTypeAll::ImmunizationRefusal:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ImmunizationRefusal));
                    break;

                case ReasonCodeAccountTypeAll::LabRadiologyCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_LabRadiologyCancel));
                    break;

                case ReasonCodeAccountTypeAll::MedicationError:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MedicationError));
                    break;

                case ReasonCodeAccountTypeAll::MedicationStopped:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MedicationStopped));
                    break;

                case ReasonCodeAccountTypeAll::Movement:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Movement));
                    break;

                case ReasonCodeAccountTypeAll::MovementCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementCancel));
                    break;

                case ReasonCodeAccountTypeAll::MovementEdit:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementEdit));
                    break;

                case ReasonCodeAccountTypeAll::MovementReject:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementReject));
                    break;

                case ReasonCodeAccountTypeAll::OnHoldSterileItem:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_OnHoldSterileItem));
                    break;

                case ReasonCodeAccountTypeAll::Ordering:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Ordering));
                    break;

                case ReasonCodeAccountTypeAll::PatientDeactivate:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_PatientDeactivate));
                    break;
                case ReasonCodeAccountTypeAll::PatientMerge:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_PatientMerge));
                    break;
                case ReasonCodeAccountTypeAll::Physiotherapy:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Physiotherapy));
                    break;
                case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RegistrationRequestCancel));
                    break;
                case ReasonCodeAccountTypeAll::ServiceDone:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ServiceDone));
                    break;
                case ReasonCodeAccountTypeAll::ServicePostponed:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ServicePostponed));
                    break;
                case ReasonCodeAccountTypeAll::TransportOrderCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_TransportOrderCancel));
                    break;
                case ReasonCodeAccountTypeAll::WaitingListCancel:
                    formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_WaitingListCancel));
                    break;

            }
            FormCheckBoxControl checkboxControl = null;

            if (formControlId != 0)
            {
                checkboxControl = _reasonFormTable.parmReasonFormInstance().control(formControlId);
            }

            return checkboxControl;
        }

]]></Source>
			</Method>
			<Method>
				<Name>Reasons_OnInitialized</Name>
				<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        [FormEventHandler(formStr(Reasons), FormEventType::Initialized)]
        public static void Reasons_OnInitialized(xFormRun sender, FormEventArgs e)
        {

            ReasonsIForm reasonForm = sender as ReasonsIForm;
            if (reasonForm)
            {
                ReasonFormTable reasonFormTable = reasonForm.getReasonFormTable();
                if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
                {
                    reasonFormTable.parmReasonGridAccountTypeMovementReject(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::MovementReject,reasonFormTable));
                    reasonFormTable.parmReasonGridAccountTypeMovementCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::MovementCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridInPatientMaintain(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::InPatientMaintain,reasonFormTable));
                    reasonFormTable.parmReasonGridMedicationStopped(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::MedicationStopped,reasonFormTable));
                    reasonFormTable.parmReasonGridImmunizationRefusal(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::ImmunizationRefusal,reasonFormTable));
                    reasonFormTable.parmReasonGridLabRadiologyCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::LabRadiologyCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridWriteOff(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::BillingReason,reasonFormTable));
                    reasonFormTable.parmReasonGridAppointments(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Appointments,reasonFormTable));
                    reasonFormTable.parmReasonGridOrdering(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Ordering,reasonFormTable));
                    reasonFormTable.parmReasonGridClaim(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Claim,reasonFormTable));
                    // Musab,
					// Start: Adding CaseStatus reason code.
					reasonFormTable.parmReasonGridCaseStatus(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::CaseStatus,reasonFormTable));
					// End.
                    reasonFormTable.parmReasonGridMedicationError(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::MedicationError,reasonFormTable));
                    reasonFormTable.parmReasonGridEncounterDisposition(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::EncounterDisposition,reasonFormTable));
                    reasonFormTable.parmReasonGridPhysiotherapy(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Physiotherapy,reasonFormTable));
                    reasonFormTable.parmReasonGridWaitingListCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::WaitingListCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridPatientMerge(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::PatientMerge,reasonFormTable));
                    reasonFormTable.parmReasonGridMovementEdit(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::MovementEdit,reasonFormTable));
                    reasonFormTable.parmReasonGridMovement(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Movement,reasonFormTable));
                    reasonFormTable.parmReasonGridRegistrationRequestCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::RegistrationRequestCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridTransportOrderCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::TransportOrderCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridEnquiry(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Enquiry,reasonFormTable));
                    reasonFormTable.parmReasonGridDischargeReason(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::DischargeReason,reasonFormTable));
                    reasonFormTable.parmReasonGridOnHold(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::OnHoldSterileItem,reasonFormTable));
                    reasonFormTable.parmReasonGridCSSDEquipmentTest(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::CSSDEquipmentTest,reasonFormTable));
                    reasonFormTable.parmReasonGridCSSDRecallRequest(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::CSSDRecallRequest,reasonFormTable));
                    reasonFormTable.parmReasonGridAmendment(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::Amendment,reasonFormTable));
                    reasonFormTable.parmReasonGridAmendmentDeny(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::AmendmentDeny,reasonFormTable));
                    reasonFormTable.parmReasonGridForceBookingCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::ForceBookingCancel,reasonFormTable));
                    reasonFormTable.parmReasonGridPatientDeactivate(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::PatientDeactivate,reasonFormTable));
                    reasonFormTable.parmAccountTypeAppointmentSlotBlocking(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::AppointmentSlotBlocking,reasonFormTable));
                    reasonFormTable.parmAccountTypeAppointmentCloseSchedule(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::AppointmentCloseSchedule,reasonFormTable));
                    reasonFormTable.parmAccountTypeServicePostponed(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::ServicePostponed,reasonFormTable));
                    reasonFormTable.parmAccountTypeServiceDone(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::ServiceDone,reasonFormTable));
                    reasonFormTable.parmReasonGridWaitingListCancel(ReasonsHM_Extension::findCheckboxControl(ReasonCodeAccountTypeAll::EligibilityBypass,reasonFormTable));
                    
                }
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>