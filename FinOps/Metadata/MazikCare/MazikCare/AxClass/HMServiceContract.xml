<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMServiceContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContractAttribute]
class HMServiceContract
{
    RefRecId    apptRecId, patientRecId, serviceRecId;
    String50    apptnum;
    Real         price;

    str patientResponsibility,apptConfrmStatus,patientName,patientFileNumber, patientDOB, apptDate, description,apptStatus,apptType,physician,
    clinic,apptTime, appointmentStartTime, appointmentEndTime,confirmationStatus, clientName, serivceStatus, itemName, itemId, itemDescription,
    resourceName,resourceId,resourceImage,drugRef;
    NoYes isDrugRefRequired,isServiceNotRequired;
    System.Byte[] patientImage;

    str duration;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInstructionFromLanguage</Name>
				<Source><![CDATA[
    private HMComments getInstructionFromLanguage(ItemId _itemId,RecId _hMPatientRecId)
    {
        HMInventTable   hmInventTable;
        HMComments      instruction;
        LanguageId      patientLanguage = HMPatient::find(_hMPatientRecId).getPatientLanguage();
    
        select firstOnly LanguageId_1, Instruction, LanguageId_2, Instruction_2 from hmInventTable
            where hmInventTable.InventTable == _itemId;
    
        if(patientLanguage == hmInventTable.LanguageId_1)
        {
            instruction = hmInventTable.Instruction;
        }
        else if(patientLanguage == hmInventTable.LanguageId_2)
        {
            instruction = hmInventTable.Instruction_2;
        }
    
        return instruction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppointmentEndTime</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentEndTime')]
    public str parmAppointmentEndTime(str _appointmentEndTime = appointmentEndTime)
    {
        appointmentEndTime = _appointmentEndTime;
    
        return appointmentEndTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppointmentStartTime</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentStartTime')]
    public str parmAppointmentStartTime(str _AppointmentStartTime = appointmentStartTime)
    {
        appointmentStartTime = _AppointmentStartTime;
    
        return appointmentStartTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptConfrmStatus</Name>
				<Source><![CDATA[
    [DataMemberAttribute('AppointmentConfirmStatus')]
    public str parmApptConfrmStatus(str _apptConfrmStatus = apptConfrmStatus)
    {
        apptConfrmStatus = _apptConfrmStatus;
    
        return apptConfrmStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptdate</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentDate')]
    public str parmApptdate(str _apptdate = apptdate)
    {
        apptdate = _apptdate;
    
        return apptdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptnum</Name>
				<Source><![CDATA[
    [DataMemberAttribute("AppointmentNumber")]
    public str parmApptnum(str _apptnum = apptnum)
    {
        apptnum = _apptnum;
    
        return apptnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptRecId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentRecId')]
    public RefRecId parmApptRecId(RefRecId _apptRecId = apptRecId)
    {
        apptRecId = _apptRecId;
    
        return apptRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptStatus</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentStatus')]
    public str parmApptStatus(str _apptStatus = apptStatus)
    {
        apptStatus = _apptStatus;
    
        return apptStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptTime</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentTime')]
    public str parmApptTime(str _apptTime = apptTime)
    {
        apptTime = _apptTime;
    
        return apptTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApptType</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('AppointmentType')]
    public str parmApptType(str _apptType = apptType)
    {
        apptType = _apptType;
    
        return apptType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClientName</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('ClientName')]
    public str parmClientName(str _clientName = clientName)
    {
        clientName = _clientName;
    
        return clientName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Description')]
    public str parmDescription(str _description = description)
    {
        description = _description;
    
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDrugRef</Name>
				<Source><![CDATA[
    [DataMemberAttribute('DrugRef')]
    public str parmDrugRef(str _drugRef = drugRef)
    {
        drugRef = _drugRef;
    
        return drugRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDuration</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Duration')]
    public str parmDuration(str _duration = duration)
    {
        duration = _duration;
    
        return duration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDrugRefRequired</Name>
				<Source><![CDATA[
    [DataMemberAttribute('IsDrugRefRequired')]
    public NoYes parmIsDrugRefRequired(NoYes _isDrugRefRequired = isDrugRefRequired)
    {
        isDrugRefRequired = _isDrugRefRequired;
    
        return isDrugRefRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsServiceNotRequired</Name>
				<Source><![CDATA[
    [DataMemberAttribute('IsServiceNotRequired')]
    public NoYes parmIsServiceNotRequired(NoYes _isServiceNotRequired = isServiceNotRequired)
    {
        isServiceNotRequired = _isServiceNotRequired;
    
        return isServiceNotRequired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDescription</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Item Description')]
    public Description255 parmItemDescription(Description255 _itemDescription = itemDescription)
    {
        itemDescription = _itemDescription;
    
        return itemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Item Id')]
    public Description255 parmItemId(Description255 _itemId = itemId)
    {
        itemId = _itemId;
    
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemName</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Item Name')]
    public Description255 parmItemName(Description255 _itemName = itemName)
    {
        itemName = _itemName;
    
        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientDOB</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Patient DOB')]
    public Description255 parmPatientDOB(Description255 _patientDOB = patientDOB)
    {
        patientDOB = _patientDOB;
    
        return patientDOB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientFileNumber</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Patient File Number')]
    public Description255 parmPatientFileNumber(Description255 _patientFileNumber = patientFileNumber)
    {
        patientFileNumber = _patientFileNumber;
    
        return patientFileNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientName</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Patient Name')]
    public Description255 parmPatientName(Description255 _patientName = patientName)
    {
        patientName = _patientName;
    
        return patientName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientRecId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('PatientRecId')]
    public RefRecId parmPatientRecId(RefRecId _patientRecId = patientRecId)
    {
        patientRecId = _patientRecId;
    
        return patientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Price')]
    public real parmPrice(real _price= price)
    {
        price = _price;
    
        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('resourceId')]
    public str parmResourceId(str _resourceId = resourceId)
    {
        resourceId = _resourceId;
    
        return resourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceImage</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('resourceImage')]
    public str parmResourceImage(str _resourceImage = resourceImage)
    {
        resourceImage = _resourceImage;
    
        return resourceImage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceName</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('resourceName')]
    public str parmResourceName(str _resourceName = resourceName)
    {
        resourceName = _resourceName;
    
        return resourceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServicePatientResponsibility</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Service Patient Responsibility')]
    public String50 parmServicePatientResponsibility(String50 _patientResponsibility = patientResponsibility)
    {
        patientResponsibility = _patientResponsibility;
    
        return patientResponsibility;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceRecId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('ServiceRecId')]
    public RefRecId parmServiceRecId(RefRecId _serviceRecId = serviceRecId)
    {
        serviceRecId = _serviceRecId;
    
        return serviceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceStatus</Name>
				<Source><![CDATA[
    [ DataMemberAttribute('Service Status')]
    public String50 parmServiceStatus(String50 _serviceStatus = serivceStatus)
    {
        serivceStatus = _serviceStatus;
    
        return serivceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateContract</Name>
				<Source><![CDATA[
    void populateContract(HMResourceSchedulingAppointmentInvent _service,Map _itemPriceMap = null)
    {
        HMResourceSchedulingAppointment appointment;
        HMServiceLog                    serviceLog;
        MapIterator                     it;
        utcDateTime                     serviceStartTime, serviceEndTime;
        int64                           intDuration;
        InventTable                     item = InventTable::find(_service.InventTable);
        HcmWorker                       hcmWorker;
        VendTable                       vendTable;
        HMInventTable                   hMInventTable;
    
        if(_service)
        {
            appointment = HMResourceSchedulingAppointment::find(_service.HMResourceSchedulingAppointment);
    
    
            select ReferenceNumberRequired from hMInventTable
            where hMInventTable.InventTable == _service.InventTable;
    
            if(hMInventTable)
            {
                this.parmIsDrugRefRequired(hMInventTable.ReferenceNumberRequired);
            }
            else
            {
                this.parmIsDrugRefRequired(NoYes::No);
            }
    
            if(appointment)
            {
                this.parmApptnum(appointment.AppointmentNumber);
                this.parmApptConfrmStatus(enum2str(appointment.HMConfirmationStatus));
                this.parmApptdate(date2str(appointment.AppointmentDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4));
                this.parmApptRecId(appointment.RecId);
                this.parmApptStatus(enum2str(appointment.AppointmentStatus));
                this.parmApptTime(time2str(appointment.AppointmentTime,TimeSeparator::Colon, TimeSeparator::Colon));
                this.parmPatientName(appointment.PatientName);
                this.parmPatientRecId(appointment.HMPatient);
            }
    
           this.parmIsServiceNotRequired(_service.NotRequired);
           this.parmDrugRef(_service.DrugReference);
    
            while select serviceLog
                where serviceLog.HMResourceSchedulingAppointmentInvent == _service.RecId
            {
                switch (serviceLog.HMServiceLogStatus)
                {
                    case HMServiceStatus::Started:
                        serviceStartTime     = DateTimeUtil::newDateTime(serviceLog.HMServiceLogDate,serviceLog.HMServiceLogTime);
                        this.parmAppointmentStartTime(datetime2str(serviceStartTime));
                    break;
    
                    case HMServiceStatus::Complete:
                    case HMServiceStatus::Decline:
                        serviceEndTime      = DateTimeUtil::newDateTime(serviceLog.HMServiceLogDate,serviceLog.HMServiceLogTime);
                        this.parmAppointmentEndTime(datetime2str(serviceEndTime));
                    break;
                }
            }
    
            if (this.parmAppointmentStartTime())
            {
                if(this.parmAppointmentEndTime())
                {
                    intDuration = DateTimeUtil::getDifference(serviceEndTime, serviceStartTime);
                }
    
                else
                {
                   // DateTimeUtil::getUserPreferredTimeZone()
                    intDuration = DateTimeUtil::getDifference(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime() , DateTimeUtil::getUserPreferredTimeZone()), serviceStartTime);
                    //intDuration = DateTimeUtil::getDifference(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime() , Timezone::GMTPLUS0500ISLAMABAD_KARACHI_TASHKENT), serviceStartTime);
                }
            }
            this.parmDuration(time2str(intDuration, TimeSeparator::Colon, TimeSeparator::Colon));
            this.parmServiceStatus(enum2str(_service.HMServiceStatus));
             if(enum2str(_service.HMServiceStatus) == 'Done')
                {
                    this.parmServiceStatus("completed");
                }
    
            //Doing this step for display purpose on app
            if(this.parmServiceStatus() == enum2str(HMServiceStatus::Decline) && this.parmAppointmentStartTime() == '')
            {
                this.parmAppointmentStartTime(this.parmAppointmentEndTime());
                this.parmAppointmentEndTime('');
            }
            //this.parmPrice(_service.Price);
            this.parmItemId(item.ItemId);
            this.parmItemName(item.NameAlias);  //itemName()
            //this.parmItemDescription(this.getInstructionFromLanguage(item.ItemId,appointment.HMPatient));
            this.parmItemDescription(item.itemDescriptionOrName());
            if(item.NameAlias == this.parmItemDescription())
            {
                this.parmItemDescription(' ');
            }
            this.parmServicePatientResponsibility(enum2str(_service.PatientResponsibility));
            this.parmServiceRecId(_service.RecId);
            if(_itemPriceMap)
            {
                it = new MapIterator (_itemPriceMap);
                while (it.more())
                {
                    if(it.key() == item.ItemId)
                    {
                    this.parmPrice(it.value());
                    }
                    it.next();
                }
            }
            if(_service.HMServiceStatus == HMServiceStatus::Complete)
            {
                if(_service.HcmWorker > 0)
                {
                    hcmWorker = HcmWorker::find(_service.HcmWorker);
                    this.parmResourceId(hcmWorker.PersonnelNumber);
                    this.parmResourceName(hcmWorker.name());
                    this.parmResourceImage(HMWorkerImageHelper::getWorkerImageBase64Encode(hcmWorker.RecId));
                }
                else if(_service.VendTable)
                {
                    vendTable = VendTable::find(_service.VendTable);
                    this.parmResourceId(vendTable.AccountNum);
                    this.parmResourceName(vendTable.name());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateContractFromInventTable</Name>
				<Source><![CDATA[
    void populateContractFromInventTable(InventTable _item,RecId _appointmentRecid = 0)
    {
        //Commenting code to not load values and resposibilty for a specific time
        //InventTableModule modulePrice;
        //int selctPriceFromTradeAgreement;
        //container valueContainer;
        //real servicePrice;
        //HMPatientPaymentResponsibility serviceResponsibility;
        //HMChargeEntryClass_Medisys hMChargeEntryClass_Medisys = new HMChargeEntryClass_Medisys();
        this.parmItemId(_item.ItemId);
        this.parmItemName(_item.NameAlias);
        this.parmItemDescription(_item.itemDescriptionOrName());
        this.parmDescription(_item.itemDescriptionOrName());
        //selctPriceFromTradeAgreement = 1;
        /*if(selctPriceFromTradeAgreement == 0)
        {
            select modulePrice
            where modulePrice.ItemId == _item.ItemId
                && modulePrice.ModuleType == ModuleInventPurchSales::Sales;
    
            this.parmPrice(modulePrice.Price);
        }
        else
        {   valueContainer = hMChargeEntryClass_Medisys.getItemPriceByAppointment(_item.ItemId,_appointmentRecid);
            if(valueContainer)
            {
            this.parmPrice(conPeek(valueContainer,1));
            serviceResponsibility =  conPeek(valueContainer,2);
            this.parmServicePatientResponsibility(strFmt('%1',serviceResponsibility));
            }
        } */
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>