<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMDocuAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMDocuAction //extends DocuActionFile
{
    Filename    hmfilename;
    #HMCDSA
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commandOverloaded</Name>
				<Source><![CDATA[
    private Filename commandOverloaded(str _operation, DocuRef _docuRef)
    {
        #define.msg('msg')
    
        Filename    filename;
        //todo: ax7 all docu functionality commented at the moment.
        /*
        DocuValue   docuValue;
        boolean     valueFileExist;
    
        if (_docuRef.isValueAttached())
        {
			// TODO : deprecated code conflicts.
            //if (this.mustStoreFiles()) //database
            //{
            //    filename = this.saveFile(_docuRef);
            //}
            //else
            //{
            //    docuValue = _docuRef.docuValue();
            //    if (smmLicense::outlookEMail() && _docuRef.fileType() == #msg)
            //    {
            //        if (!this.smmCheckOpenEMail(_docuRef))
            //            return '';
            //    }
            //    else if (docuValue.Type == DocuValueType::URL)
            //    {
            //        return docuValue.Path;
            //    }

            //    filename = _docuRef.completeFilename();
            //    valueFileExist = this.checkValueFilename(filename);
            //    if (!valueFileExist)
            //    {
            //        if (_docuRef.isValueAttached() && _docuRef.docuType().FilePlace == DocuFilePlace::Database)
            //        {
            //            if (!isRunningOnServer())
            //            {
            //                // When opening a database document from the client but failed to find the temp file
            //                // the file might have been added by batch server
            //                // rematerialize the file content into a client temp file
            //                filename = DocuActionFile::saveTempFile(_docuRef);
            //                valueFileExist = this.checkValueFilename(filename);
            //            }
            //        }
            //    }

            //    if (!valueFileExist)
            //    {
            //        checkFailed(strfmt("@SYS26666", filename));
            //        return filename;
            //    }
            //}
			// end of TODO.
    
    //        if (isRunningOnServer())
    //        {
    //            error(error::wrongUseOfFunction(funcName()));
    //            error("@SYS326630");
    //            throw Exception::Error;
    //        }
    //        else
    //        {
    //            // BP deviation documented
             //  WinAPI::shellExecute(filename,'','',_operation);
    //        }
        }
        else
            info("@SYS26665");*/
    
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    ClassDescription description()
    {
        ClassDescription    descp;
    
        descp="";
    
        return descp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDBFileTempPath</Name>
				<Source><![CDATA[
    public Filename getDBFileTempPath(DocuRef _record)
    {
        //todo: ax7 all docu functionality commented at the moment.
        /*
        Args            args = new Args();
        //HMDocuAction    action;
    
        
        args.caller(this);
        args.parmEnumType(enumNum(DocuCode));
        args.parmEnum(enum2int(DocuCode::Open));
        args.record(_record);
        docuType = DocuType::find(_record.TypeId);
        this.run(args);
        */
        return hmfilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openArchiveFile</Name>
				<Source><![CDATA[
    /*protected void open(DocuRef docuRef)
    {
		// TODO : deprecated code conflicts
        //Filename filename;

        //if (this.mustStoreFiles()) //from database
        //{
        //    DocuFileWatchDog::create();

        //    filename = this.commandOverloaded(#ShellExeOpen, docuRef);
        //    DocuOpenFile::add(docuRef, filename);

        //    DocuFileWatchDog::createDelayed();
        //}

        //hmfilename=filename;
    
    }*/

    public Filename openArchiveFile(Filename _filename, RecId _recId)
    {
        return this.processDocument(_filename, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openDBFile</Name>
				<Source><![CDATA[
    public Filename openDBFile(DocuRef _record, RecId _recId)
    {
        Args            args = new Args();
        //HMDocuAction    action;
    
        //args.caller(this);
        //args.parmEnumType(enumNum(DocuCode));
        //args.parmEnum(enum2int(DocuCode::Open));
        //args.record(_record);
        //docuType = DocuType::find(_record.TypeId);
        //this.run(args);
    
        return this.processDocument(hmfilename, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    private Filename processDocument(Filename _template, RecId _recId)
    {
        /*//for input file opening
        System.IO.Stream                                            documentStream;
        Filename                                                    templateDoc = _template;
    
        //for getting tempalte sections
        //DocumentFormat.OpenXml.Packaging.WordprocessingDocument     document;
        System.IO.Packaging.Package                                 packageFile;
        System.IO.Packaging.PackagePart                             part;
        System.IO.Packaging.PackagePartCollection                   partCollection;
        System.IO.Stream                                            stream;
        System.Collections.IEnumerator                              partCollectionE, sectionNodeE, dataNodeE;
        System.String                                               strPartContentType, strSectionName, strxPath, strDataValue;//, strSectionId, strDataName;
        System.Xml.XmlReader                                        reader;
        System.Xml.XmlDocument                                      xmlSectionList, xmlDataElementList, xmlClinicalDoc;
        System.Xml.XmlNodeList                                      sectionNodeList, DataNodeList;
        System.Xml.XmlNode                                          sectionNode, dataNode, sectionIdNode, dataNameNode, dataValueNode;
        System.Xml.XmlNamespaceManager                              nsmgr;
        System.Xml.XmlAttributeCollection                           sectionAttrCollection, dataAttrCollection;
    
    
        //to generate xml
        XmlDocument     doc;
        XmlElement      nodeXml;
        XmlElement      nodeElement;
        #define.filename('C:\\test1.xml')
        str             sectionID;
        str             name;
    
        //to fetch query data
        Query                               qry;
        QueryRun                            qryRun;
        HMPatientEncounterDisposition       HMPatientEncounterDispositionlocal;
        HMPatient                           HMPatientlocal;
        HMReferringPhysician                HMReferringPhysicianlocal;
        HMClinicStaff                       HMClinicStafflocal;
        DirPerson                           DirPersonlocal;
        DirPerson                           DirPersonlocal2;
        CompanyInfo                         CompanyInfolocal;
    
        //output document generate
        System.Xml.XmlReader                    xmlReader;
        Microsoft.Consulting.ITK.CdsaManager    manager;
        #define.outputDoc('C:\\TestDoc_output.docx')
    
        documentStream = System.IO.File::Open(templateDoc, System.IO.FileMode::Open, System.IO.FileAccess::ReadWrite);
    
        //fetch query data
        qry=new Query(QueryStr(HMConsultationReport));
    
        CompanyInfolocal=CompanyInfo::find();
    
        qry.dataSourceTable(tableNum(HMPatientEncounterDisposition)).addRange(fieldNum(HMPatientEncounterDisposition,recId)).value(int642str(_recId));
        qryRun=new QueryRun(qry);
    
        qryRun.next();
    
        HMPatientEncounterDispositionlocal=qryRun.get(tableNum(HMPatientEncounterDisposition));
        HMPatientlocal=qryRun.get(tableNum(HMPatient));
        HMReferringPhysicianlocal=qryRun.get(tableNum(HMReferringPhysician));
        HMClinicStafflocal=qryRun.get(tableNum(HMClinicStaff));
        DirPersonlocal=qryRun.get(tableNum(DirPerson),2);
        DirPersonlocal2=qryRun.get(tableNum(DirPerson));
    
        //end fethcing data
    
        // Modify the document to ensure it is correctly marked as a Document and not Template
        //document = DocumentFormat.OpenXml.Packaging.WordprocessingDocument::Open(_documentStream, true);
        //document.ChangeDocumentType(DocumentFormat.OpenXml.WordprocessingDocumentType::Document);
        //document.Close();
    
        // Open the document in the stream and replace the custom XML part
        packageFile = System.IO.Packaging.Package::Open(documentStream, System.IO.FileMode::Open, System.IO.FileAccess::ReadWrite);
    
        // Find part containing the correct namespace
        partCollection = packageFile.GetParts();
        partCollectionE = partCollection.GetEnumerator();
    
        while(partCollectionE.MoveNext())
        {
            part = partCollectionE.get_Current();
            strPartContentType = part.get_ContentType();
    
            if(strPartContentType.Equals(#AppXML, System.StringComparison::OrdinalIgnoreCase))
            {
                // Find the file with the custom Xml data in
                stream = part.GetStream();
                reader = System.Xml.XmlReader::Create(stream);
    
                if(reader != null)
                {
                    reader.MoveToContent();
                    strSectionName = reader.get_Name();
    
                    if(strSectionName.Equals(#SectionList, System.StringComparison::OrdinalIgnoreCase))
                    {
                        xmlSectionList = new System.Xml.XmlDocument();
                        xmlSectionList.Load(reader);
                    }
                    else if(strSectionName.Equals(#XDataElemList, System.StringComparison::OrdinalIgnoreCase))
                    {
                        xmlDataElementList = new System.Xml.XmlDocument();
                        xmlDataElementList.Load(reader);
                    }
                    else if(strSectionName.Equals(#ClinicDoc, System.StringComparison::OrdinalIgnoreCase))
                    {
                        xmlClinicalDoc = new System.Xml.XmlDocument();
                        xmlClinicalDoc.Load(reader);
                    }
                }
            }
        }
        reader.Close();
        packageFile.Close();
    
        sectionNodeList = xmlSectionList.SelectNodes(#AllSec);
        nsmgr = new System.Xml.XmlNamespaceManager(xmlDataElementList.get_NameTable());
        nsmgr.AddNamespace(#X, #URI);
    
        doc = XmlDocument::newBlank();
        nodeXml = doc.createElement3(#X, #DataElemList, #URI);
        doc.appendChild(nodeXml);
    
        nodeElement = doc.createElement3(#X, #DataElem, #URI);
        nodeElement.setAttribute(#Name, #Txt);
        nodeElement.setAttribute(#SecLineId, "");
        nodeElement.setAttribute(#SecId, #DocIdNum);
        nodeElement.setAttribute(#Value, "");
        nodeXml.appendChild(nodeElement);
    
        nodeElement = doc.createElement3(#X, #DataElem, #URI);
        nodeElement.setAttribute(#Name, #Txt);
        nodeElement.setAttribute(#SecLineId, "");
        nodeElement.setAttribute(#SecId, #DocIdVer);
        nodeElement.setAttribute(#Value, "");
        nodeXml.appendChild(nodeElement);
    
        SectionNodeE = sectionNodeList.GetEnumerator();
        while(SectionNodeE.MoveNext())
        {
            sectionNode = SectionNodeE.get_Current();
            sectionAttrCollection = sectionNode.get_Attributes();
            sectionIdNode = sectionAttrCollection.GetNamedItem(#SecId);
    
            sectionID=sectionIdNode.get_Value();
    
            strxPath = System.String::Concat(#XPath1, sectionIdNode.get_Value(), "']");
            dataNodeList = xmlDataElementList.SelectNodes(strxPath, nsmgr);
            dataNodeE = dataNodeList.GetEnumerator();
            while(dataNodeE.MoveNext())
            {
                dataNode = dataNodeE.get_Current();
                dataAttrCollection = dataNode.get_Attributes();
    
                dataNameNode = dataAttrCollection.GetNamedItem(#Name);
                name = dataNameNode.get_Value();
                dataValueNode = dataAttrCollection.GetNamedItem(#Value);
                strDataValue = dataValueNode.get_Value();
    
                nodeElement = doc.createElement3(#X, #DataElem, #URI);
                nodeElement.setAttribute(#Name, name);
                nodeElement.setAttribute(#SecLineId, "");
                nodeElement.setAttribute(#SecId, sectionID);
                switch(name)
                {
                    case #CmpnyAdd:
                        nodeElement.setAttribute(#Value, strReplace(CompanyInfolocal.primaryAddress(),"\n"," "));
                        break;
                    case #CmpnyPhn:
                        nodeElement.setAttribute(#Value, CompanyInfolocal.phone());
                        break;
                    case #CmpnyFx:
                        nodeElement.setAttribute(#Value, CompanyInfolocal.teleFax());
                        break;
                    case #CmpnyEml:
                        nodeElement.setAttribute(#Value, CompanyInfolocal.email());
                        break;
                    case #RefPhysiName:
                        nodeElement.setAttribute(#Value, HMReferringPhysicianlocal.displayName());
                        break;
                    case #PatName:
                        nodeElement.setAttribute(#Value, DirPersonlocal2.Name);
                        break;
                    case #PatGen:
                        nodeElement.setAttribute(#Value, enum2str(HMPatientlocal.Gender));
                        break;
                    case #PatAge:
                        nodeElement.setAttribute(#Value, (HMPatientlocal.GetAgeNewWithParameters(DirPersonlocal2.birthDate())));
                        break;
                    case #OrdrReqDt:
                        nodeElement.setAttribute(#Value, date2StrXpp(HMPatientEncounterDispositionlocal.ConsultationDate));
                        break;
                    case #OrdrStrtDt:
                        nodeElement.setAttribute(#Value, date2StrXpp(HMPatientEncounterDispositionlocal.StartDate));
                        break;
                    case #OrdrEndDt:
                        nodeElement.setAttribute(#Value, date2StrXpp(HMPatientEncounterDispositionlocal.ExpiryDate));
                        break;
                    case #OrdrTrtmntLen:
                        nodeElement.setAttribute(#Value, int2str(HMPatientEncounterDispositionlocal.ExpiryDate-HMPatientEncounterDispositionlocal.StartDate));
                        break;
                    case #ReasnOfReq:
                        nodeElement.setAttribute(#Value, "");
                        break;
                    case #OrdrinPhysiName:
                        nodeElement.setAttribute(#Value, DirPersonlocal.Name);
                        break;
                    case #OrdrinPhysiDAE:
                        nodeElement.setAttribute(#Value, HMClinicStafflocal.DEA);
                        break;
                }
                nodeXml.appendChild(nodeElement);
            }
        }
    
        doc.save(#filename);
    
        //merging template and xml file to generate final word document
        manager = new Microsoft.Consulting.ITK.CdsaManager(documentStream);
    
        xmlReader = System.Xml.XmlReader::Create(#filename);
    
        manager.CreateFromTemplate(xmlReader, #outputDoc);
    
        xmlReader.Close();
    
        documentStream.Close();
    
        System.IO.File::Delete(#filename);
    
        return #outputDoc;*/
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDirectoryPermission</Name>
				<Source><![CDATA[
    public static boolean checkDirectoryPermission(str _path)
    {
        boolean hasAccess = false;
        System.Security.AccessControl.DirectorySecurity directoryStructure = System.IO.Directory::GetAccessControl(_path);
        System.Security.AccessControl.AuthorizationRuleCollection ruleCollection= directoryStructure.GetAccessRules(true, true, System.Type::GetType('System.Security.Principal.NTAccount',false,false));
        System.Security.Principal.WindowsIdentity winIdentity = System.Security.Principal.WindowsIdentity::GetCurrent();
        str currUserName = winIdentity.get_Name();
        System.Security.AccessControl.FileSystemRights fileSystemRights;
        System.Security.AccessControl.FileSystemAccessRule fcAccessRule;
        System.Security.Principal.IdentityReference identityReference;
        str identityReferenceValue;
        int loopVariable;
        int ruleCount = ruleCollection.get_Count();
    
        for(loopVariable=0; loopVariable < ruleCount ;loopVariable++)
        {
            fcAccessRule = ruleCollection.get_Item(loopVariable);
            identityReference = fcAccessRule.get_IdentityReference();
            identityReferenceValue = identityReference.get_Value();
    
            if (identityReferenceValue == currUserName)
            {
                fileSystemRights = fcAccessRule.get_FileSystemRights();
    
                if (fileSystemRights.HasFlag(System.Security.AccessControl.FileSystemRights::FullControl))
                {
                    if (fcAccessRule.get_AccessControlType() == System.Security.AccessControl.AccessControlType::Allow)
                    {
                        hasAccess = true;
                    }
                    else
                    {
                        hasAccess = false;
                    }
                }
                if (fileSystemRights.HasFlag(System.Security.AccessControl.FileSystemRights::Write))
                {
                    if (fcAccessRule.get_AccessControlType() == System.Security.AccessControl.AccessControlType::Allow)
                    {
                        hasAccess = true;
                    }
                    else
                    {
                        hasAccess = false;
                    }
                }
                if (fileSystemRights.HasFlag(System.Security.AccessControl.FileSystemRights::Modify))
                {
                    if (fcAccessRule.get_AccessControlType() == System.Security.AccessControl.AccessControlType::Allow)
                    {
                        hasAccess = true;
                    }
                    else
                    {
                        hasAccess = false;
                    }
                }
            }
        }
    
        return hasAccess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileExtension</Name>
				<Source><![CDATA[
    public static String30 getFileExtension(Filename _filename)
    {
        Filename        onlyname;
        str 1           dummy;
        str             ext;
    
        [dummy, onlyname, ext] = fileNameSplit(_filename);
    
        return Global::strReplace(ext, ".", "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileLocked</Name>
				<Source><![CDATA[
    public static boolean isFileLocked(Filename _filename)
    {
        System.IO.FileStream stream = null;
    
        try
        {
            stream = System.IO.File::Open(_filename, System.IO.FileMode::Open, System.IO.FileAccess::ReadWrite, System.IO.FileShare::None);
        }
        catch
        {
            return true;
        }
    
        if (stream != null)
            stream.Close();
    
    
        //file is not locked
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilenameOk</Name>
				<Source><![CDATA[
    public static boolean isFilenameOk(Filename _filename)
    {
        Filename    onlyname;
        str 1       dummy;
        str         ext;
    
        [dummy, onlyname, ext] = fileNameSplit(_filename);
    
        return onlyname != '' && ext != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFileTypeOk</Name>
				<Source><![CDATA[
    public static boolean isFileTypeOk(Filename _filename)
    {
        DocuFileTypes   docuFileTypes;
        Filename        onlyname;
        str 1           dummy;
        str             ext;
    
        [dummy, onlyname, ext] = fileNameSplit(_filename);
    
        return !docuFileTypes.isEnabled(Global::strReplace(ext, ".", ""));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>