<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMAssignPoolToClaimMultiThreadBatchJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMAssignPoolToClaimMultiThreadBatchJob extends RunBaseBatch implements BatchRetryable
{
    QueryRun            gQueryRun;
    BatchHeader         batchHeader;
    HMNumberOfThreads   numberOfThreads;
    DialogField         dlgHMNumberOfThreads;
    DialogRunbase       dlg;

    #OCCRetryCount
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        numberOfThreads
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the class
    /// </summary>
    /// <returns>Return the class object</returns>
    public server static HMAssignPoolToClaimMultiThreadBatchJob construct()
    {
        return new HMAssignPoolToClaimMultiThreadBatchJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@MAZ:CalculateClaimPoolMultipleThreadBatchJobs";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void run()
    {
        HMDataPrepForCalcClaimPoolMultiThreadBatchJob   hmDataPrepForCalcClaimPoolMultiThreadBatchJob;
        HMCalculateClaimPoolMultiThreadBatchJob         hmCalculateClaimPoolMultiThreadBatchJob;
        int                                             recordsToProcess, perThreadRecordsRound, additionalRecordsRound;
        HMOneDecimal                                    additionalRecords;
        real                                            perThreadRecords, diffPerThread;
        RecId                                           hmClaimBatchJobLogsHeader, hmClaimBatchJobLogsHeaderDataPrep, batchJobId;
        HMClaimQualifiedForPoolAssignment               hmClaimQualifiedForPoolAssignment;

        try
        {
            delete_from hmClaimQualifiedForPoolAssignment
                where hmClaimQualifiedForPoolAssignment.CreatedDateTime <= DateTimeUtil::addDays(DateTimeUtil::utcNow(), -2);
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@MAZ:FailedToDeleteDataFromTmpTable", "HMClaimQualifiedForPoolAssignment"));
            }
            else
            {
                retry;
            }
        }
        catch
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw error(strFmt("@MAZ:FailedToDeleteDataFromTmpTable", "HMClaimQualifiedForPoolAssignment"));
            }
            else
            {
                retry;
            }
        }

        try
        {
            if(this.isInBatch())
            {
                numberOfThreads = numberOfThreads == 0 ? 1 : numberOfThreads < 0 ? numberOfThreads * -1 : numberOfThreads;

                recordsToProcess = SysQuery::countLoops(gQueryRun);
                
                Info(strFmt("@MAZ:NoOfRecordsPicked", recordsToProcess));

                if(recordsToProcess <= numberOfThreads)
                {
                    numberOfThreads = 1;

                    Info("@MAZ:RecordsLesserThanNumberOfThreads");
                }

                perThreadRecords        = recordsToProcess / numberOfThreads;
                perThreadRecordsRound   = perThreadRecords;
                diffPerThread           = perThreadRecords - perThreadRecordsRound;
                additionalRecords       = diffPerThread * numberOfThreads;
                additionalRecords       = roundUp(additionalRecords, 1);
                additionalRecordsRound  = additionalRecords;

                if(!batchHeader)
                {
                    batchJobId = this.parmCurrentBatch().BatchJobId;

                    batchHeader = BatchHeader::construct(batchJobId);

                    batchHeader.parmRetriesOnFailure(5);
                }

                hmClaimBatchJobLogsHeaderDataPrep = HMClaimBatchJobLogsHeader::insertData(HMClaimJobType::PoolDataPrep
                                                                                    , batchJobId
                                                                                    , recordsToProcess
                                                                                    , numberOfThreads);

                hmClaimBatchJobLogsHeader = HMClaimBatchJobLogsHeader::insertData(HMClaimJobType::Pool
                                                                                    , batchJobId
                                                                                    , recordsToProcess
                                                                                    , numberOfThreads);

                
                if(perThreadRecordsRound + additionalRecordsRound > 0)
                {

                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob = HMDataPrepForCalcClaimPoolMultiThreadBatchJob::construct();
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmQueryRun(gQueryRun);
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmNumberOfThreads(numberOfThreads);
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmPerThreadRecordsRound(perThreadRecordsRound);
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmAdditionalRecords(additionalRecordsRound);
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmTaskDescription("@MAZ:DataPreparation");
                    hmDataPrepForCalcClaimPoolMultiThreadBatchJob.parmHMClaimBatchJobLogsHeader(hmClaimBatchJobLogsHeaderDataPrep);

                    hmCalculateClaimPoolMultiThreadBatchJob = HMCalculateClaimPoolMultiThreadBatchJob::construct();
                    hmCalculateClaimPoolMultiThreadBatchJob.parmNumberOfThreads(numberOfThreads);
                    hmCalculateClaimPoolMultiThreadBatchJob.parmTaskDescription("@MAZ:AssignmentOfPoolsOnClaim");
                    hmCalculateClaimPoolMultiThreadBatchJob.parmHMClaimBatchJobLogsHeaderDataPrep(hmClaimBatchJobLogsHeaderDataPrep);
                    hmCalculateClaimPoolMultiThreadBatchJob.parmHMClaimBatchJobLogsHeader(hmClaimBatchJobLogsHeader);


                    batchHeader.addRuntimeTask(hmDataPrepForCalcClaimPoolMultiThreadBatchJob, this.parmCurrentBatch().RecId);
                    batchHeader.addRuntimeTask(hmCalculateClaimPoolMultiThreadBatchJob, this.parmCurrentBatch().RecId);

                    batchHeader.addDependency(hmCalculateClaimPoolMultiThreadBatchJob, hmDataPrepForCalcClaimPoolMultiThreadBatchJob);
                }
                else
                {
                    Info("@MAZ:NoRecordsFoundForProcessing");
                }

            }
            else
            {
                // execute your code here when not running in batch
                try
                {
                    HMDataPrepForCalcClaimPoolBusinessLogic hmDataPrepForCalcClaimPoolBusinessLogic = HMDataPrepForCalcClaimPoolBusinessLogic::construct();
                    HMCalculateClaimPoolBusinessLogic       hmCalculateClaimPoolBusinessLogic = HMCalculateClaimPoolBusinessLogic::construct();


                    hmClaimBatchJobLogsHeaderDataPrep = HMClaimBatchJobLogsHeader::insertData(HMClaimJobType::PoolDataPrep
                                                                                    , 0
                                                                                    , recordsToProcess
                                                                                    , numberOfThreads);

                    hmDataPrepForCalcClaimPoolBusinessLogic.processInit(gQueryRun, 0, hmClaimBatchJobLogsHeaderDataPrep);

                    hmClaimBatchJobLogsHeader = HMClaimBatchJobLogsHeader::insertData(HMClaimJobType::Pool
                                                                                    , 0
                                                                                    , recordsToProcess
                                                                                    , numberOfThreads);

                    hmCalculateClaimPoolBusinessLogic.processInit(0, hmClaimBatchJobLogsHeader, hmClaimBatchJobLogsHeaderDataPrep);
                }
                catch
                {
                    warning(strFmt("%1",xSession::xppCallStack()));
                }
            }

            if(batchHeader)
            {
                // save the batchheader with added tasks
                batchHeader.save();//BatchStatus::Hold);
            }

        }
        catch
        {
            throw error(strFmt("@MAZ:BatchJobInitiationFailed",xSession::xppCallStack()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    //Needs to be set to true so class can be ran in a batch
    boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    //Stores parameters of the batch
    public container pack()
    {
        container pack = conNull();
        if (gQueryRun)
        {
            pack = gQueryRun.pack();
        }
        return [#CurrentVersion] + [pack] + [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    //Returns the stored object for the batch to use
    public boolean unpack(container packedClass)
    {
        boolean                 ret         = false;
        int                     version     = RunBase::getVersion(packedClass);
        container               packedQuery = conNull();
        Query                   query;
        QueryBuildDataSource    qbds;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    query = new Query(packedQuery);
                    qbds = query.dataSourceTable(tableNum(HMClaimTable));
                    qbds.addRange(fieldNum(HMClaimTable, RecId)).value(strFmt('(%1.%2 == 1) || (%1.%3 == 0)',
                                                                        qbds.name(),
                                                                        fieldStr(HMClaimTable, IsClaimModified),
                                                                        fieldStr(HMClaimTable, ClaimPool)));
                    
                    gQueryRun   = new QueryRun(query);
                    ret         = true;
                }
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    //Determines whether to run on server or client
    //True - Server; False - Client
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name = "args"></param>
    public static void main(Args args)
    {
        HMAssignPoolToClaimMultiThreadBatchJob hmAssignPoolToClaimMultiThreadBatchJob = HMAssignPoolToClaimMultiThreadBatchJob::construct();

        hmAssignPoolToClaimMultiThreadBatchJob.caption();
        hmAssignPoolToClaimMultiThreadBatchJob.initQueryRun();

        if (hmAssignPoolToClaimMultiThreadBatchJob.prompt())
        {
            hmAssignPoolToClaimMultiThreadBatchJob.run();
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return gQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    public void initQueryRun()
    {
        Query   query;
        
        query = new Query (queryStr(HMCalculateClaimPoolQuery));

        gQueryRun = new QueryRun(query);
        gQueryRun.saveUserSetup(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    public void initParmDefault()
    {
        this.initQueryRun();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// </summary>
    /// <returns></returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgHMNumberOfThreads = dialog.addFieldValue(extendedTypeStr(HMNumberOfThreads), numberOfThreads);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        numberOfThreads = dlgHMNumberOfThreads.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Wrappable(true), Replaceable(true)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>