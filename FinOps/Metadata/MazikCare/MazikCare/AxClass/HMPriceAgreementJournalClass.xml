<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPriceAgreementJournalClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMPriceAgreementJournalClass
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPriceFromTradeAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Zain
    /// </summary>
    /// <returns></returns>
    public static Price getPriceFromTradeAgreement(ItemId _itemId,
                                           TransDate _discDate,
                                           ModuleInventCustVend _module = ModuleInventCustVend::Cust,
                                           InventDimId _inventDimId = '',
                                           UnitOfMeasureSymbol _unitId = '',
                                           RecId _networkLevel = 0,
                                           RecId _contractId = 0,
                                           RecId _planId = 0,
                                           HMCaseType _caseType = HMCaseType::All,
                                           RecId _revenueCode = 0,
                                           RecId _CPTCode = 0,
                                           RecId _modifier1 = 0,
                                           RecId _modifier2 = 0,
                                           RecId _modifier3 = 0,
                                           RecId _modifier4 = 0)
    {
        Query                       query;
        QueryBuildDataSource        qbds;
        QueryBuildRange             qbr;
        QueryRun                    qr;
        AmountMST                   price;
        PriceDiscAdmTrans  priceDiscAdmTrans;
        PriceDiscAdmTable  priceDiscAdmTable;

        query = new query();

        qbds = query.addDataSource(tableNum(PriceDiscAdmTrans));
        qbds.addSortField(fieldNum(PriceDiscAdmTrans, JournalNum), SortOrder::Descending);

        qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, ItemRelation));
        qbr.value(queryValue(_itemId));

        //qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, FromDate ));
        //qbr.value(strFmt('(FromDate > %1)', _discDate));

        //qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, ToDate ));
        //qbr.value(strFmt('(ToDate < %1)', _discDate));

        qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, Module));
        qbr.value(enum2Str(_module));

        if(_inventDimId != 'AllBlank')
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, InventDimId));
            qbr.value(_inventDimId);
        }

        qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, UnitId));
        qbr.value(_unitId);

        if(_networkLevel > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMInsuranceNetwork));
            qbr.value(SysQuery::value(_networkLevel));
        }

        if(_contractId > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMInsuranceContract));
            qbr.value(SysQuery::value(_contractId));
        }

        if(_planId > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMInsuranceContractClassOrPlans));
            qbr.value(SysQuery::value(_planId));
        }

        if(_caseType !=HMCaseType ::All)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMCaseType));
            qbr.value(enum2Str(_caseType));
        }

        if(_revenueCode > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMRevenueCode));
            qbr.value(SysQuery::value(_revenueCode));
        }

        if(_CPTCode > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, HMCPTHCPCCode));
            qbr.value(SysQuery::value(_CPTCode));
        }

        if(_modifier1 > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, Modifier1));
            qbr.value(SysQuery::value(_modifier1));
        }

        if(_modifier2 > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, Modifier2));
            qbr.value(SysQuery::value(_modifier2));
        }

        if(_modifier3 > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, Modifier3));
            qbr.value(SysQuery::value(_modifier3));
        }

        if(_modifier4 > 0)
        {
            qbr   = qbds.addRange(fieldnum(PriceDiscAdmTrans, Modifier4));
            qbr.value(SysQuery::value(_modifier4));
        }

        qr = new QueryRun(query);
        qr.next();
        priceDiscAdmTrans = qr.getNo(1);

        priceDiscAdmTable = PriceDiscAdmTable::find(priceDiscAdmTrans.JournalNum);
        price = (priceDiscAdmTable.Posted == NoYes::Yes) ? priceDiscAdmTrans.Amount : 0;

        return price;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>