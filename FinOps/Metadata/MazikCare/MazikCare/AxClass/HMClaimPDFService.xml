<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimPDFService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMClaimPDFService
{
    List                    gfiles, sfiles, sfiles_proforma, sfilesdcaf, sfilesucaf, sfilesucaf1, sfilesProfroma;
    str                     originalfilename_ucaf, originalfilename_dcaf, originalfilename_proforma, proformafilename;
    HMBillParameters        hMBillParameters;
    FilePath                filepath;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreatePDF_DCAF</Name>
				<Source><![CDATA[
    public str CreatePDF_DCAF(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract)
    {
        FilePath                sFilePath;
        System.IO.DirectoryInfo directoryInfo;
        System.IO.FileInfo[]    arrFileInfo;
        System.IO.FileInfo      fileInfo;
    
        int                     i, length;
        str                     fullfilename,listdetails;
        boolean                 isFirst = true;
    
        sFilePath       = strReplace(_HMClaimPDFServiceDataContract.parmUCAFDirPath()," ","%20");
        directoryInfo   = new System.IO.DirectoryInfo(sFilePath);
        sfilesucaf1          = new List(Types::String);
        arrFileInfo     = directoryInfo.GetFiles();
        length          = arrFileInfo.get_Length();
    
    
    
        for (i = 0; i < length; i++)
        {
            fileInfo = arrFileInfo.GetValue(i);
            if(subStr(fileInfo.get_Name(),1,4)=='dcaf')
            {
            fullfilename=fileInfo.get_FullName();
            listdetails = fullFileName;
            sfilesdcaf.addEnd(listdetails);
            //info(strFmt("dcaf-%1",listdetails));
            }
         }
    
         return fullfilename;
     }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePDF_Proforma</Name>
				<Source><![CDATA[
    public str CreatePDF_Proforma(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract)
     {
        FilePath                sFilePath;
        int pk;
        System.IO.DirectoryInfo di;
        System.IO.FileInfo[]    fis;
        System.IO.FileInfo      fi;
        int                     i;
        int                     l;
        str                     fullfilename,listdetails;
        boolean                 isFirst=true;
    
        sFilePath   = strReplace(_HMClaimPDFServiceDataContract.parmProformaDirPath()," ","%20");
        di          = new System.IO.DirectoryInfo(sFilePath);
        gfiles      = new List(Types::String);
        fis         = di.GetFiles();
        l           = fis.get_Length();
    
        for (i = 0; i < l; i++)
        {
            fi = fis.GetValue(i);
            fullfilename=fi.get_FullName();
            listdetails = fullfilename;
            gfiles.addEnd(listdetails);
        }
    
        return fullfilename;
     }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePDF_UCAF</Name>
				<Source><![CDATA[
    public str CreatePDF_UCAF(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract)
    {
        FilePath                sFilePath;
        System.IO.DirectoryInfo directoryInfo;
        System.IO.FileInfo[]    arrFileInfo;
        System.IO.FileInfo      fileInfo;
        ListIterator            literator;
        int                     i, length;
        str                     fullfilename,listdetails;
        boolean                 isFirst=true;
        ListEnumerator          listEnumerator;
    
        sFilePath       = strReplace(_HMClaimPDFServiceDataContract.parmUCAFDirPath(), " ", "%20");
        directoryInfo   = new System.IO.DirectoryInfo(sFilePath);
        sfilesucaf1     = new List(Types::String);
        arrFileInfo     = directoryInfo.GetFiles();
        length          = arrFileInfo.get_Length();
    
        for (i = 0; i < length; i++)
        {
            fileInfo = arrFileInfo.GetValue(i);
            fullfilename=fileInfo.get_FullName();
            listdetails = fullFileName;
            sfilesucaf.addEnd(listdetails);
        }
    
        return fullfilename;
     }

]]></Source>
			</Method>
			<Method>
				<Name>GeneratePDF</Name>
				<Source><![CDATA[
    public void GeneratePDF(RecId _appointmentrecid, HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract, RecId _caseRecId)
    {
        HMClaimAdministrationFormController      controller;
        HMClaimAdministrationFormContract        contract;
        HMResourceSchedulingAppointment          claimAppointment;
        HMCase                                   claimCase;
        HMResourceSchedulingPlanningObject       planning;
        HMOrganizationalUnit                     organizationalUnit;
        HMSpecialtyCode                          specialtyCode;
        str                                      ucaffilepath;
    
        SrsPrintMgmtExecutionInfo   reportExecutionInfo;
        Args                        args = new Args();
        SrsReportRunImpl            srsReportRun;
    
        controller = new hMClaimAdministrationFormController();
    
        if (_appointmentrecid)
        {
            claimAppointment    = HMResourceSchedulingAppointment::find(_appointmentrecid);
            planning            = HMResourceSchedulingPlanningObject::find(claimAppointment.HMResourceSchedulingPlanningObject);
            organizationalUnit  = HMOrganizationalUnit::find(planning.HMOrganizationalUnit);
    
            args.record(claimAppointment);
    
            ucaffilepath=strReplace(_HMClaimPDFServiceDataContract.parmUcafdirpath()," ","%20")+"\\"+int642str(claimAppointment.RecId)+".pdf";
            info("appointment");
    
        }
        else if (_caseRecId)
        {
            claimCase           = HMCase::find(_caseRecId);
            organizationalUnit  = HMOrganizationalUnit::find(planning.HMOrganizationalUnit);
    
            args.record(claimCase);
    
            ucaffilepath=strReplace(_HMClaimPDFServiceDataContract.parmUcafdirpath()," ","%20")+"\\"+int642str(claimCase.RecId)+".pdf";
            info("Case");
        }
    
        if (claimAppointment.HMPatientInsurance || claimCase.HMPatientInsurance)
        {
            info("test");
            specialtyCode       = HMSpecialtyCode::find(organizationalUnit.HMSpecialtyCode);
    
            if (specialtyCode.HMClaimFormTemplate == HMClaimFormTemplate::DCAF)
            {
                controller.parmReportName(ssrsReportStr(HMClaimAdministrationReport, DCAF));
                sfilesdcaf.addEnd(ucaffilepath);
            }
            else
            {
                controller.parmReportName(ssrsReportStr(HMClaimAdministrationReport, UCAF));
                sfilesucaf.addEnd(ucaffilepath);
            }
    
            reportExecutionInfo = controller.parmReportContract().parmReportExecutionInfo() as SrsPrintMgmtExecutionInfo;
    
            if (!reportExecutionInfo)
            {
               reportExecutionInfo = new SrsPrintMgmtExecutionInfo();
            }
    
            reportExecutionInfo.parmOriginalDestinationFileName(ucaffilepath);
    
            contract = controller.parmReportContract().parmRdpContract();
    
            contract.parmAppointmentRecId(_appointmentrecid);
            contract.parmCaseRecId(_caseRecId);
    
            controller.parmArgs(args);
            srsReportRun = controller.parmReportRun() as SrsReportRunImpl;
            controller.parmReportRun(srsReportRun);
            controller.parmReportContract().parmReportExecutionInfo(reportExecutionInfo);
            controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
            controller.parmReportContract().parmPrintSettings().overwriteFile(true);
            controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
            controller.parmReportContract().parmPrintSettings().fileName(ucaffilepath);
            controller.runReport();
    
            info('Report exported to file');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneratePDF_GSS</Name>
				<Source><![CDATA[
    public void GeneratePDF_GSS(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract,Recid _hminsurance)
    {
        HMGSSController            controller = new HMGSSController();
        HMClaimTable               claim;
        HMGSSContract              HMGSSContract;
        SrsPrintMgmtExecutionInfo  reportExecutionInfo;
        Args                       args = new Args();
        SrsReportRunImpl            srsReportRun;
    
        controller.parmArgs(args);
        controller.parmReportName(ssrsReportStr(HMGSS, Design));
        reportExecutionInfo = controller.parmReportContract().parmReportExecutionInfo() as SrsPrintMgmtExecutionInfo;
        if (!reportExecutionInfo)
        {
            reportExecutionInfo = new SrsPrintMgmtExecutionInfo();
        }
    
        reportExecutionInfo.parmOriginalDestinationFileName(_HMClaimPDFServiceDataContract.parmGSS()+"\\GSS-"+_HMClaimPDFServiceDataContract.parmBatchNumber()+".pdf");
        HMGSSContract =controller.parmReportContract().parmRdpContract();
        HMGSSContract.parmBatchNumber(_HMClaimPDFServiceDataContract.parmBatchNumber());
        HMGSSContract.parmInsuranceCarrier(int642str(_hminsurance));
        controller.parmArgs(args);
        srsReportRun = controller.parmReportRun() as SrsReportRunImpl;
        controller.parmReportRun(srsReportRun);
        controller.parmReportContract().parmReportExecutionInfo(reportExecutionInfo);
        controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
        controller.parmReportContract().parmPrintSettings().overwriteFile(true);
        controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        controller.parmReportContract().parmPrintSettings().fileName(_HMClaimPDFServiceDataContract.parmGSS()+"\\GSS-"+_HMClaimPDFServiceDataContract.parmBatchNumber()+".pdf");
        controller.runReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneratePDF_PGS</Name>
				<Source><![CDATA[
    public void GeneratePDF_PGS(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract,Recid _hminsurance )
    {
        HMPGSController            controller = new HMPGSController();
        HMClaimTable               claim;
        HMPGSContract              HMPGSContract;
        SrsPrintMgmtExecutionInfo  reportExecutionInfo;
        Args                        args = new Args();
        SrsReportRunImpl            srsReportRun;
        controller.parmArgs(args);
        controller.parmReportName(ssrsReportStr(HMPGS, Design));
        reportExecutionInfo = controller.parmReportContract().parmReportExecutionInfo() as SrsPrintMgmtExecutionInfo;
    
        if (!reportExecutionInfo)
        {
           reportExecutionInfo = new SrsPrintMgmtExecutionInfo();
        }
    
        reportExecutionInfo.parmOriginalDestinationFileName(_HMClaimPDFServiceDataContract.parmPgs()+"\\PGS-"+_HMClaimPDFServiceDataContract.parmBatchNumber()+".pdf");
        HMPGSContract =controller.parmReportContract().parmRdpContract();
        HMPGSContract.parmBatchNumber(_HMClaimPDFServiceDataContract.parmBatchNumber());
        HMPGSContract.parmInsuranceCarrier(int642str(_hminsurance));
        controller.parmArgs(args);
        srsReportRun = controller.parmReportRun() as SrsReportRunImpl;
        controller.parmReportRun(srsReportRun);
        controller.parmReportContract().parmReportExecutionInfo(reportExecutionInfo);
        controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
        controller.parmReportContract().parmPrintSettings().overwriteFile(true);
        controller.parmReportContract().parmPrintSettings().printLandscape(true);
        controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        controller.parmReportContract().parmPrintSettings().fileName(_HMClaimPDFServiceDataContract.parmPgs()+"\\PGS-"+_HMClaimPDFServiceDataContract.parmBatchNumber()+".pdf");
        controller.runReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneratePDF_Proforma</Name>
				<Source><![CDATA[
    public void GeneratePDF_Proforma(RecId _claimrecid,HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract )
    {
        HMProformaInvoiceController    controller = new HMProformaInvoiceController();
        HMClaimTable                   claim;
        HMProformaInvoiceContract      hMProformaInvoiceContract;
        SrsPrintMgmtExecutionInfo      reportExecutionInfo;
    
        Args                        args = new Args();
        SrsReportRunImpl            srsReportRun;
        claim = HMClaimTable::find(_claimrecid);
        args.record(claim);
    
        controller.parmReportName(ssrsReportStr(HMProformaInvoiceReport, Design));
        reportExecutionInfo = controller.parmReportContract().parmReportExecutionInfo() as SrsPrintMgmtExecutionInfo;
    
        if (!reportExecutionInfo)
        {
            reportExecutionInfo = new SrsPrintMgmtExecutionInfo();
        }
    
        reportExecutionInfo.parmOriginalDestinationFileName(_HMClaimPDFServiceDataContract.parmProformaDirPath()+"\\"+int642str(claim.RecId)+".pdf");
        hMProformaInvoiceContract =controller.parmReportContract().parmRdpContract();
        hMProformaInvoiceContract.parmClaimTableRecId(claim.RecId);
    
        controller.parmArgs(args);
    
        sfilesProfroma.addEnd(_HMClaimPDFServiceDataContract.parmProformaDirPath()+"\\"+int642str(claim.RecId)+".pdf");
    
        srsReportRun = controller.parmReportRun() as SrsReportRunImpl;
    
        controller.parmReportRun(srsReportRun);
        controller.parmReportContract().parmReportExecutionInfo(reportExecutionInfo);
        controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::File);
        controller.parmReportContract().parmPrintSettings().overwriteFile(true);
        controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        controller.parmReportContract().parmPrintSettings().fileName(_HMClaimPDFServiceDataContract.parmProformaDirPath()+"\\"+int642str(claim.RecId)+".pdf");
        controller.runReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>MergePDF</Name>
				<Source><![CDATA[
    public void MergePDF(List _invoicelist,str _filename)
    {
        iTextSharp.text.pdf.PdfReader        pdfReader ;
        InteropPermission                    permission;
        ListEnumerator                       listEnumerator;
        iTextSharp.text.Document             document,document1;
        iTextSharp.text.pdf.PdfWriter        pdfWriter, pdfWriter1;
        iTextSharp.text.PageSize             pageSize;
        iTextSharp.text.pdf.PdfImportedPage  page;
        str                                  originalfilename1,ucaf;
        str                                  invoiceFileName;
        int                                  i, numberOfPages;
    
        List readerList = new List(Types::Class);
        iTextSharp.text.Paragraph paragraph1 = new iTextSharp.text.Paragraph();
    
        try
        {
            listEnumerator = _invoiceList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
               invoiceFileName = listEnumerator.current();
               pdfReader = new iTextSharp.text.pdf.PdfReader(invoicefilename);
               readerList.addEnd(pdfReader);
            }
    
            document = new iTextSharp.text.Document(iTextSharp.text.PageSize::GetRectangle("A4"),0, 0, 0, 0);
            pdfWriter = iTextSharp.text.pdf.PdfWriter::GetInstance(document, new System.IO.FileStream(_filename, System.IO.FileMode::OpenOrCreate));
            document.Open();
            listEnumerator = readerList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
               pdfReader = listEnumerator.current();
               numberOfPages = pdfReader.get_NumberOfPages();
    
               for (i = 1; i <= numberOfPages; i++)
               {
                   page = pdfWriter.GetImportedPage(pdfReader,i);
                   document.Add(iTextSharp.text.Image::GetInstance(Page));
               }
            }
    
            document.Close();
    
            listEnumerator = _invoiceList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
                System.IO.File::Delete(listEnumerator.current());
            }
        }
        catch
        {
            info(CLRInterop::getLastException().ToString());
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>MergePDF_dcaf</Name>
				<Source><![CDATA[
    public void MergePDF_dcaf(List _invoicelist,str _filename)
    {
        iTextSharp.text.pdf.PdfReader         pdfReader ;
        InteropPermission                     permission;
        ListEnumerator                        listEnumerator;
        iTextSharp.text.Document              document;
        iTextSharp.text.PageSize              pageSize;
        iTextSharp.text.pdf.PdfImportedPage   page;
    
        str     originalfilename1, invoiceFileName;
        int     i, numberOfPages;
    
        List readerList = new List(Types::Class);
        iTextSharp.text.pdf.PdfWriter pdfWriter;
    
        try
        {
            listEnumerator = _invoiceList.getEnumerator();
            //WinAPIServer::copyFile(originalfilename_dcaf,_filename);
         //   pdfReader = new iTextSharp.text.pdf.PdfReader(_fileName);
    
            while (listEnumerator.moveNext())
            {
                invoiceFileName = listEnumerator.current();
                pdfReader = new iTextSharp.text.pdf.PdfReader(invoicefilename);
                readerList.addEnd(pdfReader);
            }
    
            document = new iTextSharp.text.Document(iTextSharp.text.PageSize::GetRectangle("A4"),0, 0, 0, 0);
            pdfWriter = iTextSharp.text.pdf.PdfWriter::GetInstance(document, new System.IO.FileStream(_filename, System.IO.FileMode::OpenOrCreate));
            document.Open();
            listEnumerator = readerList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
                pdfReader = listEnumerator.current();
                numberOfPages = pdfReader.get_NumberOfPages();
                for (i = 1; i <= numberOfPages; i++)
                {
                    page = pdfWriter.GetImportedPage(pdfReader,i);
                    document.Add(iTextSharp.text.Image::GetInstance(Page));
                }
            }
    
            document.Close();
    
            listEnumerator = _invoiceList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
                System.IO.File::Delete(listEnumerator.current());
            }
        }
        catch
        {
            info(CLRInterop::getLastException().ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MergePDF_Proforma</Name>
				<Source><![CDATA[
    public void MergePDF_Proforma(List _invoicelist,str _filename)
    {
        iTextSharp.text.pdf.PdfReader           pdfReader ;
        InteropPermission                       permission;
        ListEnumerator                          listEnumerator;
        iTextSharp.text.Document                document;
        iTextSharp.text.PageSize                pageSize;
        iTextSharp.text.pdf.PdfImportedPage     page;
        str                                     filename;
        str                                     invoiceFileName;
        int                                     i, numberOfPages;
        iTextSharp.text.pdf.PdfWriter           pdfWriter;
    
        List readerList = new List(Types::Class);
    
        try
        {
            listEnumerator = _invoiceList.getEnumerator();
            //WinAPIServer::copyFile(proformafilename,_filename);
          //  pdfReader = new iTextSharp.text.pdf.PdfReader(_fileName);
    
            while (listEnumerator.moveNext())
            {
                invoiceFileName = listEnumerator.current();
                pdfReader = new iTextSharp.text.pdf.PdfReader(invoicefilename);
                readerList.addEnd(pdfReader);
            }
    
            document = new iTextSharp.text.Document(iTextSharp.text.PageSize::GetRectangle("A4"),0, 0, 0, 0);
            pdfWriter = iTextSharp.text.pdf.PdfWriter::GetInstance(document, new System.IO.FileStream(_fileName, System.IO.FileMode::OpenOrCreate));
            document.Open();
    
            listEnumerator = readerList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
                pdfReader = listEnumerator.current();
                numberOfPages = pdfReader.get_NumberOfPages();
                for (i = 1; i <= numberOfPages; i++)
                {
                    page = pdfWriter.GetImportedPage(pdfReader,i);
                    document.Add(iTextSharp.text.Image::GetInstance(Page));
                }
            }
    
            document.Close();
    
            listEnumerator = _invoiceList.getEnumerator();
    
            while (listEnumerator.moveNext())
            {
                System.IO.File::Delete(listEnumerator.current());
            }
        }
        catch
        {
            info(CLRInterop::getLastException().ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process(HMClaimPDFServiceDataContract _HMClaimPDFServiceDataContract)
    {
        HMResourceSchedulingAppointment hMResourceSchedulingAppointment;
        HMPatientChargeEntryTable       hMPatientChargeEntryTable;
        HMPatientChargeEntryLine        hMPatientChargeEntryLine;
        HMInsuranceCarrierBatchDetails  hMInsuranceCarrierBatchDetails,hMInsuranceCarrierBatchDetails1;
    
        HMClaimTableDetails hMClaimTableDetails;
        HMClaimTable  hMClaimTable;
        HMClaimVersion claimVersion;
    
        str FileA, FileB, FileC, FileD;
    
        select hMBillParameters;
    
        if (WinAPIServer::pathExists(_HMClaimPDFServiceDataContract.parmProformaDirPath()) && WinAPIServer::pathExists(_HMClaimPDFServiceDataContract.parmUCAFDirPath()) && WinAPIServer::pathExists(_HMClaimPDFServiceDataContract.parmGSS()) && WinAPIServer::pathExists(_HMClaimPDFServiceDataContract.parmGSS()))
        {
            sfilesProfroma = new List(Types::String);
            sfilesdcaf          = new List(Types::String);
            sfilesucaf          = new List(Types::String);
    
            select hMInsuranceCarrierBatchDetails where hMInsuranceCarrierBatchDetails.BatchNumber==_HMClaimPDFServiceDataContract.parmBatchNumber();
    
            while select hMClaimTable
                join hMPatientChargeEntryTable
               where hmclaimtable.HMPatientChargeEntryTable==hMPatientChargeEntryTable.RecId
                exists join claimVersion
                   where claimVersion.HMClaimTable == hMClaimTable.RecId
                       && claimVersion.Status == HMClaimStatus::Submitted
               exists join   hMPatientChargeEntryLine
                   where hMPatientChargeEntryLine.HMPatientChargeEntryTable==hMPatientChargeEntryTable.RecId
                    && hMPatientChargeEntryLine.HMInsuranceCarrierBatchDetails==hMInsuranceCarrierBatchDetails.RecId
            {
                this.GeneratePDF(hMPatientChargeEntryTable.HMResourceSchedulingAppointment, _HMClaimPDFServiceDataContract, hMPatientChargeEntryTable.HMCase);
            }
    
            if(sfilesucaf!=null && !sfilesucaf.empty())
            {
               // originalfilename_ucaf=this.CreatePDF_UCAF(_HMClaimPDFServiceDataContract);
                 //if(!sfilesucaf.empty())
                // {
                  //   if(strLen(originalfilename_ucaf)>0)
                   ///  {
                       FileB= _HMClaimPDFServiceDataContract.parmUcafdirpath() + "\\UCAF-"+_HMClaimPDFServiceDataContract.parmBatchNumber() + ".pdf";
                       this.MergePDF(sfilesucaf,FileB);
                   //  }
    
                // }
            }
    
           if(sfilesdcaf!=null && !sfilesdcaf.empty())
           {
             //   originalfilename_dcaf=this.CreatePDF_DCAF(_HMClaimPDFServiceDataContract);
               // if(!sfilesdcaf.empty())
             //  {
                 //    if(strLen(originalfilename_dcaf)>0)
                 //    {
                        FileC= _HMClaimPDFServiceDataContract.parmUcafdirpath() + "\\DCAF-"+_HMClaimPDFServiceDataContract.parmBatchNumber() + ".pdf";
                        this.MergePDF_dcaf(sfilesdcaf,FileC);
                   //  }
             //  }
           }
    
        while select hMClaimTable
            join hMClaimTableDetails
            where hMClaimTableDetails.BatchNumber==_HMClaimPDFServiceDataContract.parmBatchNumber() && hMClaimTableDetails.HMClaimTable==hMClaimTable.RecId
            exists join claimVersion
            where claimVersion.HMClaimTable == hMClaimTable.RecId
            && claimVersion.Status == HMClaimStatus::Submitted
        {
            this.GeneratePDF_Proforma(hMClaimTable.RecId,_HMClaimPDFServiceDataContract);
        }
    
          //  proformafilename=this.CreatePDF_Proforma(_HMClaimPDFServiceDataContract);
          //  if(strLen(proformafilename)>0)
            if(sfilesProfroma!=null && !sfilesProfroma.empty())
            {
                FileD = _HMClaimPDFServiceDataContract.parmProformaDirPath()+"\\Proforma-"+_HMClaimPDFServiceDataContract.parmBatchNumber() + ".pdf";
                this.MergePDF_Proforma(sfilesProfroma,FileD);
            }
    
        this.GeneratePDF_GSS(_HMClaimPDFServiceDataContract,hMInsuranceCarrierBatchDetails.HMInsuranceCarrier);
        this.GeneratePDF_PGS(_HMClaimPDFServiceDataContract,hMInsuranceCarrierBatchDetails.HMInsuranceCarrier);
    
        }
        else
        {
            warning("@MAZ13615");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>