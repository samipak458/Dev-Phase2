<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMChargeEntryClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMChargeEntryClass
{
    #define.Diagnosis1("Diagnosis1")
    #define.Diagnosis2("Diagnosis2")
    #define.Diagnosis3("Diagnosis3")
    #define.Diagnosis4("Diagnosis4")

    InventTable                 InventTable;
    CustAccount                 custAccount;
    RecId                       PatientId,EcounterId;
    PriceGroupId                    PriceGroupId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isChargeEntryPerformed</Name>
				<Source><![CDATA[
    public boolean isChargeEntryPerformed(RecId _chargeEntryTable)
    {
        HMPatientChargeEntryLine        hmPatientChargeEntryLineLocal;
    
        select count(RecId) from hmPatientChargeEntryLineLocal
            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntryTable;
    
        if(hmPatientChargeEntryLineLocal.RecId > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveLeft</Name>
				<Source><![CDATA[
    private void moveLeft(String30 _parm, HMPatientChargeEntryLine _record)
    {
        List li = new List(Types::String);
        Enumerator enum;
        String30 fieldName;
        RecId   fieldValue;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        li = strSplit(_parm,',');
    
        enum = li.getEnumerator();
        enum.moveNext();
        fieldName = enum.current();
        enum.moveNext();
        fieldValue = enum.current();
    
        ttsBegin;
    
        select forUpdate * from hmPatientChargeEntryLineLocal
            where hmPatientChargeEntryLineLocal.RecId == _record.RecId;
    
        switch (fieldName)
        {
            case #Diagnosis2:
            hmPatientChargeEntryLineLocal.Diagnosis2 = hmPatientChargeEntryLineLocal.Diagnosis1;
            hmPatientChargeEntryLineLocal.Diagnosis1 = fieldValue;
            break;
    
            case #Diagnosis3:
            hmPatientChargeEntryLineLocal.Diagnosis3 = hmPatientChargeEntryLineLocal.Diagnosis2;
            hmPatientChargeEntryLineLocal.Diagnosis2 = fieldValue;
            break;
    
            case #Diagnosis4:
            hmPatientChargeEntryLineLocal.Diagnosis4 = hmPatientChargeEntryLineLocal.Diagnosis3;
            hmPatientChargeEntryLineLocal.Diagnosis3 = fieldValue;
            break;
        }
    
        if (hmPatientChargeEntryLineLocal.validateWrite())
        {
            hmPatientChargeEntryLineLocal.update();
            ttsCommit;
        }
        else
        {
            ttsAbort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRight</Name>
				<Source><![CDATA[
    private void moveRight(String30 _parm, HMPatientChargeEntryLine _record)
    {
        List li = new List(Types::String);
        Enumerator enum;
        String30 fieldName;
        RecId   fieldValue;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        li = strSplit(_parm,',');
    
        enum = li.getEnumerator();
        enum.moveNext();
        fieldName = enum.current();
        enum.moveNext();
        fieldValue = enum.current();
    
        ttsBegin;
    
        select forUpdate * from hmPatientChargeEntryLineLocal
            where hmPatientChargeEntryLineLocal.RecId == _record.RecId;
    
        switch (fieldName)
        {
            case #Diagnosis1:
            hmPatientChargeEntryLineLocal.Diagnosis1 = hmPatientChargeEntryLineLocal.Diagnosis2;
            hmPatientChargeEntryLineLocal.Diagnosis2 = fieldValue;
            break;
    
            case #Diagnosis2:
            hmPatientChargeEntryLineLocal.Diagnosis2 = hmPatientChargeEntryLineLocal.Diagnosis3;
            hmPatientChargeEntryLineLocal.Diagnosis3 = fieldValue;
            break;
    
            case #Diagnosis3:
            hmPatientChargeEntryLineLocal.Diagnosis3 = hmPatientChargeEntryLineLocal.Diagnosis4;
            hmPatientChargeEntryLineLocal.Diagnosis4 = fieldValue;
            break;
        }
    
        if (hmPatientChargeEntryLineLocal.validateWrite())
        {
            hmPatientChargeEntryLineLocal.update();
            ttsCommit;
        }
        else
        {
            ttsAbort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount  _custAccount = custAccount)
    {
        custAccount = _custAccount;
        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable  _inventtable = InventTable)
    {
        InventTable = _inventtable;
        return InventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientEncounterId</Name>
				<Source><![CDATA[
    public RecId parmPatientEncounterId(RecId  _EcounterId = EcounterId)
    {
        EcounterId = _EcounterId;
        return EcounterId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientId</Name>
				<Source><![CDATA[
    public RecId parmPatientId(RecId  _patientId = PatientId)
    {
        PatientId = _patientId;
        return PatientId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceGroupId</Name>
				<Source><![CDATA[
    public PriceGroupId parmPriceGroupId(PriceGroupId  _priceGroupId = PriceGroupId)
    {
        PriceGroupId = _priceGroupId;
        return PriceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCharges</Name>
				<Source><![CDATA[
    private void postCharges(RecId _chargeEntryTable)
    {
        HMPatientChargeEntryLine        hmPatientChargeEntryLineLocal;
        boolean                         isFirst = true;
        HMSalesOrderInvoiceGenerator    invoiceGenerator;
    
        while select * from hmPatientChargeEntryLineLocal
            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntryTable
        {
            if(isFirst)
            {
                ttsBegin;
    
                invoiceGenerator = new HMSalesOrderInvoiceGenerator();
    
                invoiceGenerator.parmCustAccount(HMPatient::find(HMPatientChargeEntryTable::find(_chargeEntryTable).HMPatient).getMRN());
    
                invoiceGenerator.createSalesHeader();
    
                isFirst = false;
            }
    
            invoiceGenerator.createSalesLine(hmPatientChargeEntryLineLocal.InventTable,hmPatientChargeEntryLineLocal.Units,hmPatientChargeEntryLineLocal.Fee,hmPatientChargeEntryLineLocal.Charge);
        }
    
        if(!isFirst)
        {
            invoiceGenerator.createAndPostInvoice();
    
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeEntryLine</Name>
				<Source><![CDATA[
    public void reverseChargeEntryLine(HMPatientChargeEntryLine _hmPatientChargeEntryLine)
    {
        List                CaseTranslist;
        HMCaseTransDetail   hmCaseTransDetail;
        hmCaseTrans         hmCaseTrans = hmCaseTrans::find(_hmPatientChargeEntryLine.hmcaseTrans, false, ConcurrencyModel::Auto);
        if(hmChargeEntryClass::isEligibleForBatchChange(_hmPatientChargeEntryLine.RecId,true))
        {
            if(Box::yesNo("@MAZ13599",DialogButton::No,"@MAZ7757") == DialogButton::Yes)
            {
                CaseTranslist = new List(Types::Record);
                CaseTranslist.addEnd(hmCaseTrans);
                HMAccrueRevenueJournalClass::createJournalLines(CaseTranslist,true);
    
                select RecId from hmCaseTransDetail
                where hmCaseTransDetail.HMCaseTrans == hmCaseTrans.RecId
                && hmCaseTransDetail.TransactionType == HMCaseTransDetailTransactionType::AccrueRevenueReturned;
    
                if(hmCaseTransDetail)
                {
                    ttsBegin;
                    hmCaseTrans.selectForUpdate(true);
                    hmCaseTrans.BillingStatus = HMBillStatus::Reveresed;
                    hmCaseTrans.update();
                    ttsCommit;
                    info("@MAZ13600");
                }
                else
                {
                    warning("@MAZ13601");
                }
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAppointmentServiceToCaseTrans</Name>
				<Source><![CDATA[
    public static void copyAppointmentServiceToCaseTrans(RecId _apptRecId)
    {
        hmcasetrans hmcaseTrans;
        HMCaseService hmcaseService = new HMCaseService();
        while select RecId from hmcaseTrans
            where hmcaseTrans.HMResourceSchedulingAppointment == _apptRecId
        {
            hmcaseService.createChargeEntryLine(hmcaseTrans.RecId);
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChargeEntryTable</Name>
				<Source><![CDATA[
    public static boolean createChargeEntryTable(RecId _hmPatient, recid _hmClinicStaff,
                                            recid _hmAppointment,HMCaseType _caseType,
                                            RecId _hmcaseRecid = 0 )
    {
        HMPatientChargeEntryTable       hmPatientChargeEntryTable;
        boolean ret = true;
    
        try
        {
            hmPatientChargeEntryTable.initValue();
    
            hmPatientChargeEntryTable.HMPatient = _hmPatient;
          //  hmPatientChargeEntryTable.HMClinicStaff = _hmClinicStaff;
            hmPatientChargeEntryTable.HMResourceSchedulingAppointment = _hmAppointment;
            hmPatientChargeEntryTable.CaseType = _caseType;
            hmPatientChargeEntryTable.Status = HMBillStatus::NotPosted;
            hmPatientChargeEntryTable.HMCase = _hmcaseRecId;
            hmPatientChargeEntryTable.ChargeEntrydate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            if(hmPatientChargeEntryTable.validateWrite())
            {
                hmPatientChargeEntryTable.insert();
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            ret= false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importOutpatientAppointmentServices</Name>
				<Source><![CDATA[
    public static boolean importOutpatientAppointmentServices(recid _chargeEntryRecId)
    {
        HMCaseTrans                     hmCaseTrans;
        HMPatientChargeEntryLine        hmPatientChargeEntryLineLocal, hmPatientChargeEntryLineNew;
    
        int counts = 0;
        HMPatientChargeEntryTable HMPatientChargeEntryTable = HMPatientChargeEntryTable::find(_chargeEntryRecId);
    
        try
        {
            while select * from hmCaseTrans
                where hmCaseTrans.HMResourceSchedulingAppointment == HMPatientChargeEntryTable.HMResourceSchedulingAppointment
            {
                select count (RecId) from hmPatientChargeEntryLineLocal
                    where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == HMPatientChargeEntryTable.RecId
                    && hmPatientChargeEntryLineLocal.HMCaseTrans == hmCaseTrans.RecId;
    
                // If encounter procedure is not already added in charge entry
                if (hmPatientChargeEntryLineLocal.RecId == 0)
                {
                    hmPatientChargeEntryLineNew.HMCaseTrans = hmCaseTrans.RecId;
                    hmPatientChargeEntryLineNew.HMPatientChargeEntryTable = _chargeEntryRecId;
                    //hmPatientChargeEntryLineNew.initValue();
                    //
                    //
    //
                    //hmPatientChargeEntryLineNew.Units           = 1;
                    //hmPatientChargeEntryLineNew.Charge          = hmPatientChargeEntryLineNew.Units * hmPatientChargeEntryLineNew.Fee;
    //
                    //hmPatientChargeEntryLineNew.HMPatientChargeEntryTable     = HMPatientChargeEntryTable.RecId;
                    //hmPatientChargeEntryLineNew.InventTable     = hmResourceSchedulingAppointmentInvent.InventTable;
                    //hmPatientChargeEntryLineNew.ProcedureOrder  = HMPatientChargeEntryTable::getNextInventOrderNumber(HMPatientChargeEntryTable.RecId);
                    //hmPatientChargeEntryLineNew.FromDate        = HMResourceSchedulingAppointment::find(HMPatientChargeEntryTable.HMResourceSchedulingAppointment).AppointmentDate;
                    //hmPatientChargeEntryLineNew.TODate          = hmPatientChargeEntryLineNew.FromDate;
                    //hmPatientChargeEntryLineNew.TypeOfService   = HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).HMTypeOfService != 0 ?
                    //HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).HMTypeOfService : HMBillParameters::find().HMTypeOfService;
                    //hmPatientChargeEntryLineNew.PlaceOfService  = HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).HMPlaceOfService != 0 ?
                    //HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).HMPlaceOfService : HMBillParameters::find().HMPlaceOfService;
    
                    //while select HMPatientEncounter, RecId, HMDiagnosisDictionary from hmPatientEncounterDiagnosis order by HMPatientEncounterDiagnosisPriority
                        //where hmPatientEncounterDiagnosis.HMPatientEncounter == HMPatientChargeEntryTable.HMPatientEncounter
                    //{
                        //if(hmPatientEncounterDiagnosis.RecId > 0 && counts == 0)
                        //{
                            //hmPatientChargeEntryLineNew.Diagnosis1 = hmPatientEncounterDiagnosis.HMDiagnosisDictionary;
                            //counts = 1;
                            //continue;
                        //}
                        //else if (hmPatientEncounterDiagnosis.RecId > 0 && counts == 1)
                        //{
                            //hmPatientChargeEntryLineNew.Diagnosis2 = hmPatientEncounterDiagnosis.HMDiagnosisDictionary;
                            //counts = 2;
                            //continue;
                        //}
                        //else if (hmPatientEncounterDiagnosis.RecId > 0 && counts == 2)
                        //{
                            //hmPatientChargeEntryLineNew.Diagnosis3 = hmPatientEncounterDiagnosis.HMDiagnosisDictionary;
                            //counts = 3;
                            //continue;
                        //}
                        //else if (hmPatientEncounterDiagnosis.RecId > 0 && counts == 3)
                        //{
                           //hmPatientChargeEntryLineNew.Diagnosis4 = hmPatientEncounterDiagnosis.HMDiagnosisDictionary;
                           //break;
                        //}
                    //}
                    counts = 0;
    
                    if (hmPatientChargeEntryLineNew.validateWrite())
                    {
                        hmPatientChargeEntryLineNew.write();
                    }
                    hmPatientChargeEntryLineNew = null;
                   // info(hmProcedureCodeLocal.Description);
                }
            }
    
            return true;
        }
        catch
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForBatchChange</Name>
				<Source><![CDATA[
    public static boolean isEligibleForBatchChange(RecId _chargeEntryLineRecId, boolean _showError = false)
    {
        HMPatientChargeEntryLine chargeEntryLine = HMPatientChargeEntryLine::find(_chargeEntryLineRecId);
        HMCaseTrans hmCaseTrans = HMCaseTrans::find(chargeEntryLine.HMCaseTrans, false, ConcurrencyModel::Auto);
        HMCaseTransDetail       hmCaseTransDetail;
        boolean ret = true;
        if(hmCaseTrans.BillingStatus == HMBillStatus::Posted
        || hmCaseTrans.BillingStatus == HMBillStatus::Settled
        || hmCaseTrans.BillingStatus == HMBillStatus::Reveresed)
        {
            ret = false;
            if(_showError)
            {
                throw error("Line with posted, settled status cannot be reveresed");
            }
        }
    
        select count(RecId) from hmCaseTransDetail
        where hmCaseTransDetail.HMCaseTrans == hmCaseTrans.RecId
        && (hmCaseTransDetail.TransactionType == HMCaseTransDetailTransactionType::WriteOff
        || hmCaseTransDetail.TransactionType == HMCaseTransDetailTransactionType::Discount);
    
        if(hmCaseTransDetail.RecId > 0)
        {
            ret = false;
            if(_showError)
            {
                throw error("@MAZ13603");
            }
        }
    
        if(hmCaseTrans.isCaseTransClaimGenerated())
        {
            ret = false;
            if(_showError)
            {
                throw error("@MAZ13604");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        HMChargeEntryClass  hmChargeEntryClass = new HMChargeEntryClass();
        Object              formRunObject;
        FormRun             formRun;
    
        if( _args.menuItemName() == menuitemActionStr(HMChargeEntryPost) )
        {
            hmChargeEntryClass.postCharges(_args.record().RecId);
        }
        else if(_args.menuItemName() == menuitemActionStr(HMChargeEntryReverseLine))
        {
            if(_args.record().TableId == tableNum(HMPatientChargeEntryLine))
            {
                hmChargeEntryClass.reverseChargeEntryLine(_args.record());
            }
        }
        else
        {
            switch (_args.menuItemName())
            {
                case menuitemActionStr(HMProcedureDiagnosisReorderUp):
                HMChargeEntryClass::moveUp(_args.parm(), _args.record());
                //hmChargeEntryClass.moveUp(_args.parm(), _args.record());
                break;
    
                case menuitemActionStr(HMProcedureDiagnosisReorderDown):
                HMChargeEntryClass::moveDown(_args.parm(), _args.record());
                //hmChargeEntryClass.moveDown(_args.parm(), _args.record());
                break;
    
                case menuitemActionStr(HMProcedureDiagnosisReorderLeft):
                hmChargeEntryClass.moveLeft(_args.parm(), _args.record());
                break;
    
                case menuitemActionStr(HMProcedureDiagnosisReorderRight):
                hmChargeEntryClass.moveRight(_args.parm(), _args.record());
                break;
            }
    
            formRun = _args.caller();
    
            if (formHasMethod(formRun,identifierstr(refreshCallerFormData)))
            {
                 formRunObject = formRun;
                 formRunObject.refreshCallerFormData();
            }
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    private static server void moveDown(String30 _parm, HMPatientChargeEntryLine _record)
    {
        UnitofWork  uow = new UnitofWork();
        List        li = new List(Types::String);
        Enumerator enum;
        String30 fieldName;
        RecId   fieldValue;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        li = strSplit(_parm,',');
    
        enum = li.getEnumerator();
        enum.moveNext();
        fieldName = enum.current();
        enum.moveNext();
        fieldValue = enum.current();
    
        select * from hmPatientChargeEntryLineLocal order by ProcedureOrder
            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == _record.HMPatientChargeEntryTable
            && hmPatientChargeEntryLineLocal.ProcedureOrder == (_record.ProcedureOrder)+1;
    
        switch (fieldName)
        {
            case #Diagnosis1:
            _record.Diagnosis1 =  hmPatientChargeEntryLineLocal.Diagnosis1;
            hmPatientChargeEntryLineLocal.Diagnosis1 = fieldValue;
            break;
    
            case #Diagnosis2:
            _record.Diagnosis2 =  hmPatientChargeEntryLineLocal.Diagnosis2;
            hmPatientChargeEntryLineLocal.Diagnosis2 = fieldValue;
            break;
    
            case #Diagnosis3:
            _record.Diagnosis3 =  hmPatientChargeEntryLineLocal.Diagnosis3;
            hmPatientChargeEntryLineLocal.Diagnosis3 = fieldValue;
            break;
    
            case #Diagnosis4:
            _record.Diagnosis4 =  hmPatientChargeEntryLineLocal.Diagnosis4;
            hmPatientChargeEntryLineLocal.Diagnosis4 = fieldValue;
            break;
        }
    
        if (hmPatientChargeEntryLineLocal.validateWrite() && _record.validateWrite())
        {
            uow.updateonSaveChanges(hmPatientChargeEntryLineLocal);
            uow.updateonSaveChanges(_record);
            uow.saveChanges();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    private static server void moveUp(String30 _parm, HMPatientChargeEntryLine _record)
    {
        UnitofWork  uow = new UnitofWork();
        List        li  = new List(Types::String);
        Enumerator  enum;
        String30    fieldName;
        RecId       fieldValue;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        li = strSplit(_parm,',');
    
        enum = li.getEnumerator();
        enum.moveNext();
        fieldName = enum.current();
        enum.moveNext();
        fieldValue = enum.current();
    
        select * from hmPatientChargeEntryLineLocal order by ProcedureOrder
            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == _record.HMPatientChargeEntryTable
            && hmPatientChargeEntryLineLocal.ProcedureOrder == (_record.ProcedureOrder) -1;
    
        switch (fieldName)
        {
            case #Diagnosis1:
            _record.Diagnosis1 =  hmPatientChargeEntryLineLocal.Diagnosis1;
            hmPatientChargeEntryLineLocal.Diagnosis1 = fieldValue;
            break;
    
            case #Diagnosis2:
            _record.Diagnosis2 =  hmPatientChargeEntryLineLocal.Diagnosis2;
            hmPatientChargeEntryLineLocal.Diagnosis2 = fieldValue;
            break;
    
            case #Diagnosis3:
            _record.Diagnosis3 =  hmPatientChargeEntryLineLocal.Diagnosis3;
            hmPatientChargeEntryLineLocal.Diagnosis3 = fieldValue;
            break;
    
            case #Diagnosis4:
            _record.Diagnosis4 =  hmPatientChargeEntryLineLocal.Diagnosis4;
            hmPatientChargeEntryLineLocal.Diagnosis4 = fieldValue;
            break;
        }
    
        if (hmPatientChargeEntryLineLocal.validateWrite() && _record.validateWrite())
        {
            uow.updateonSaveChanges(hmPatientChargeEntryLineLocal);
            uow.updateonSaveChanges(_record);
            uow.saveChanges();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>