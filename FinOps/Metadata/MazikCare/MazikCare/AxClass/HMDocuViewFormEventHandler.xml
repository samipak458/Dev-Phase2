<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMDocuViewFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMDocuViewFormEventHandler
{
    

    
    

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DocuView_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(DocuView), formMethodStr(DocuView, init))]
    public static void DocuView_Post_init(XppPrePostArgs args)
    {
        FormRun Formrun= args.getThis();
        FormControl formcontrol;

        if(formrun.args().dataset() == tableNum(HMPatientChargeEntryLine) || Formrun.args().dataset() == tableNum(HMClaimTable))
        {
            Formrun.design(0).controlName('HMDocumentType').visible(true);
            formcontrol = Formrun.design(0).controlName('HMDocumentType');
            //info(int2Str(tableNum(HMPatientChargeEntryLine)));
        }
       
        


    }

]]></Source>
			</Method>
			<Method>
				<Name>HMDocumentType_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating lookup for hmDocumentType
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(DocuView, HMDocumentType), FormControlEventType::Lookup)]
    public static void HMDocumentType_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        FormRun formrun = sender.formRun();
        SysTableLookup  lookup;
        Query           query;
        QueryBuildDataSource dataSource, dataSourceJoin;
        RecId insuranceCarrierRecId;

        HMPatientChargeEntryLine chargeEntryLine;
        HMPatientChargeEntryTable chargeEntryTable;
        HMCaseInsurance caseInsurance;
        HMClaimTable                claimTable;
        HMPatientInsurance          patientInsurance;
        HMInsuranceCarrier          insuranceCarrier;
            /*
        if(formrun.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogClaim))
        {
            claimTable = formrun.args().record();
            insuranceCarrierRecId = claimTable.HMInsuranceCarrier;
        }
        else */
        //if(formrun.args().menuItemName() == menuItemDisplayStr(HMUploadFileDialogChargeEntryLine))
        if(formrun.args().dataset() == tableNum(HMPatientChargeEntryLine))
        {
            chargeEntryLine = formrun.args().record();

                    
            select firstonly * from chargeEntryTable
                    where chargeEntryTable.RecId == chargeEntryLine.HMPatientChargeEntryTable
                    join * from caseInsurance where caseInsurance.HMCase == chargeEntryTable.HMCase
                    join * from patientInsurance where patientInsurance.RecId == caseInsurance.HMPatientInsurance
                    join * from insuranceCarrier where insuranceCarrier.COde == patientInsurance.InsuranceCarrier;

            insuranceCarrierRecId = insuranceCarrier.RecId;
        }
        else if(Formrun.args().dataset() == tableNum(HMClaimTable))
        {
            claimTable = Formrun.args().record();
            insuranceCarrierRecId = claimTable.HMInsuranceCarrier;
        }

        query       = new Query();
        dataSource  = query.addDataSource(tablenum(HMRequiredDocuments), tablestr(HMRequiredDocuments));

        dataSourceJoin = dataSource.addDataSource(tableNum(HMRequiredDocumentsInsuranceCarrier));
        dataSourceJoin.relations(true);

        dataSourceJoin.addRange(fieldnum(HMRequiredDocumentsInsuranceCarrier, HMInsuranceCarrier)).value(queryValue(insuranceCarrierRecId));

        lookup = SysTableLookup::newParameters(tablenum(HMRequiredDocuments), sender);
        lookup.parmQuery(query);
        lookup.addLookupfield(fieldnum(HMRequiredDocuments, Code), true);
        lookup.addLookupfield(fieldnum(HMRequiredDocuments, Description));

        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRef_OnWritten</Name>
				<Source><![CDATA[
    /*
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(DocuView, DocuRef), FormDataSourceEventType::Created)]
    public static void DocuRef_OnCreated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formrun = sender.formRun();
        str     DocumentType = Formrun.design(0).controlName('HMDocumentType').valueStr();
        var args = e as FormDataSourceCancelEventArgs;
        if(formrun.args().dataset() == tableNum(HMPatientChargeEntryLine))
        {
            HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocument;
            HMClaimTable claimTable;
            HMPatientChargeEntryLine chargeEntryLine = formrun.args().record() as HMPatientChargeEntryLine;
               
           

            if(DocumentType)
            {
                ttsbegin;
                hmClaimChargeEntryRequireDocument.initValue();

                hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine = chargeEntryLine.RecId;
                hmClaimChargeEntryRequireDocument.DocuRef = sender.cursor().RecId;
                hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;

                hmClaimChargeEntryRequireDocument.HMClaimTable = (select RecId from HMClaimTable where HMClaimTable.HMPatientChargeEntryTable == chargeEntryLine.HMPatientChargeEntryTable).RecId;
                                       
                hmClaimChargeEntryRequireDocument.insert();
                ttscommit;
            }
            else
            {
                boolean doCancel = !checkFailed("Doument type must be filled in. created");
                //args.cancel(doCancel);
                //throw warning ('Document type must be filled in.');

            }
            
        }
    }
    */
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(DocuView, DocuRef), FormDataSourceEventType::Written)]
    public static void DocuRef_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formrun = sender.formRun();
        str     DocumentType = Formrun.design(0).controlName('HMDocumentType').valueStr();
        var args = e as FormDataSourceCancelEventArgs;
        HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocument;
        HMClaimTable claimTable;
        HMPatientChargeEntryLine chargeEntryLine; 
               
        if(formrun.args().dataset() == tableNum(HMPatientChargeEntryLine))
        {
            
            chargeEntryLine = formrun.args().record() as HMPatientChargeEntryLine;

            if(DocumentType)
            {
                select forupdate hmClaimChargeEntryRequireDocument
                    where hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine == chargeEntryLine.RecId
                    && hmClaimChargeEntryRequireDocument.DocuRef                  == sender.cursor().RecId;
                    
                ttsbegin;
                if (hmClaimChargeEntryRequireDocument)
                {
                    hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;
                    hmClaimChargeEntryRequireDocument.update();
                }
                else
                {
                    hmClaimChargeEntryRequireDocument.initValue();

                    hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine = chargeEntryLine.RecId;
                    hmClaimChargeEntryRequireDocument.DocuRef = sender.cursor().RecId;
                    hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;
                    hmClaimChargeEntryRequireDocument.HMClaimTable = (select RecId from HMClaimTable where HMClaimTable.HMPatientChargeEntryTable == chargeEntryLine.HMPatientChargeEntryTable).RecId;
                    hmClaimChargeEntryRequireDocument.insert();
                }
                ttscommit;
            }
            else
            {
                //boolean doCancel = !checkFailed("Doument type must be filled in. created");
                //args.cancel(doCancel);
                //throw warning ('Document type must be filled in.');

            }
            
        }
        else if(formrun.args().dataset() == tableNum(HMClaimTable))
        {
            claimTable = formrun.args().record() as HMClaimTable;

            if(DocumentType)
            {
                select forupdate hmClaimChargeEntryRequireDocument
                    where hmClaimChargeEntryRequireDocument.HMClaimTable == claimTable.RecId
                    && hmClaimChargeEntryRequireDocument.DocuRef                  == sender.cursor().RecId;
                    
                ttsbegin;
                if (hmClaimChargeEntryRequireDocument)
                {
                    hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;
                    hmClaimChargeEntryRequireDocument.update();
                }
                else
                {
                    select forupdate hmClaimChargeEntryRequireDocument
                    where hmClaimChargeEntryRequireDocument.HMClaimTable == claimTable.RecId
                        && hmClaimChargeEntryRequireDocument.HMRequiredDocument == (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;

                    if (hmClaimChargeEntryRequireDocument)
                    {
                        hmClaimChargeEntryRequireDocument.DocuRef   = sender.cursor().RecId;
                        hmClaimChargeEntryRequireDocument.update();
                    }
                    else
                    {
                        hmClaimChargeEntryRequireDocument.initValue();

                        hmClaimChargeEntryRequireDocument.HMClaimTable = claimTable.RecId;
                        hmClaimChargeEntryRequireDocument.DocuRef = sender.cursor().RecId;
                        hmClaimChargeEntryRequireDocument.HMRequiredDocument = (select RecID from HMRequiredDocuments where HMRequiredDocuments.Code == DocumentType).RecId;

                        hmClaimChargeEntryRequireDocument.insert();
                    }
                }
                ttscommit;

            }
            else
            {

            }
        }



    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRef_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
  /*  [FormDataSourceEventHandler(formDataSourceStr(DocuView, DocuRef), FormDataSourceEventType::ValidatingWrite)]
    public static void DocuRef_OnValidatingWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
      //  ValidateEventArgs ve = e as formdatasource;
        FormRun formrun = sender.formRun();
        
        var args = e as FormDataSourceCancelEventArgs;
        str     DocumentType = Formrun.design(0).controlName('HMDocumentType').valueStr();
        if(!DocumentType)
        {
            boolean doCancel = !checkFailed("Doument type must be filled in validate write.");
            args.cancel(doCancel);
        }
    }
*/
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(DocuView, DocuRef), FormDataSourceEventType::Activated)]
    public static void DocuRef_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun                             formrun = sender.formRun();
        FormStringControl                   formStringControl;
        HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocument;
        HMPatientChargeEntryLine            chargeEntryLine;
        HMRequiredDocuments                 HMRequiredDocuments;
        HMClaimTable                        claimtable;  


        if(formrun.args().dataset() == tableNum(HMPatientChargeEntryLine))
        {
            chargeEntryLine = formrun.args().record() as HMPatientChargeEntryLine;
            select * from hmClaimChargeEntryRequireDocument where hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine == chargeEntryLine.Recid
                && hmClaimChargeEntryRequireDocument.DocuRef == sender.cursor().RecId
                join HMRequiredDocuments 
                where HMRequiredDocuments.recid == hmClaimChargeEntryRequireDocument.HMRequiredDocument;
            if(hmClaimChargeEntryRequireDocument)
            { 
             
                formStringControl =  Formrun.design(0).controlName('HMDocumentType');
                formStringControl.text(HMRequiredDocuments.Code);
            }
            else
            {
                formStringControl =  Formrun.design(0).controlName('HMDocumentType');
                formStringControl.text('');
            }

        }
        else if(formrun.args().dataset() == tableNum(HMClaimTable))
        {
            claimtable = formrun.args().record() as HMClaimTable;
            select * from hmClaimChargeEntryRequireDocument where hmClaimChargeEntryRequireDocument.HMClaimTable == claimtable.Recid
                && hmClaimChargeEntryRequireDocument.DocuRef == sender.cursor().RecId
                join HMRequiredDocuments
                where HMRequiredDocuments.recid == hmClaimChargeEntryRequireDocument.HMRequiredDocument;
            if(hmClaimChargeEntryRequireDocument)
            {
             
                formStringControl =  Formrun.design(0).controlName('HMDocumentType');
                formStringControl.text(HMRequiredDocuments.Code);
            }
            else
            {
                formStringControl =  Formrun.design(0).controlName('HMDocumentType');
                formStringControl.text('');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DocuRef_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(DocuView, DocuRef), FormDataSourceEventType::InitValue)]
    public static void DocuRef_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormStringControl   formstringControl;
        formrun             formrun = sender.formRun();

        formstringControl =  Formrun.design(0).controlName('HMDocumentType');

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>