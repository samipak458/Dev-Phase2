<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReasonsformEventHandlerHM</Name>
	<SourceCode>
		<Declaration><![CDATA[
Public static class ReasonsformEventHandlerHM   
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCheckboxControl</Name>
				<Source><![CDATA[
    public static FormCheckBoxControl findCheckboxControl(ReasonCodeAccountTypeAll _accountType, ReasonFormTable _reasonFormTable)
    {
   
        FormControlId formControlId;

        switch (_accountType)
        {
            case ReasonCodeAccountTypeAll::FixedAssets:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Asset));
                break;

            case ReasonCodeAccountTypeAll::Cust:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Cust));
                break;

            case ReasonCodeAccountTypeAll::Bank:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Bank));
                break;

            case ReasonCodeAccountTypeAll::Vend:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Vend));
                break;

            case ReasonCodeAccountTypeAll::RCash:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RCash));
                break;

            case ReasonCodeAccountTypeAll::Amendment:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Amendment));
                break;

            case ReasonCodeAccountTypeAll::AmendmentDeny:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Amendment));
                break;

            case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_AppointmentCloseSchedule));
                break;

            case ReasonCodeAccountTypeAll::Appointments:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Appointments));
                break;

            case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_AppointmentSlotBlocking));
                break;

            case ReasonCodeAccountTypeAll::BillingReason:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_BillingReason));
                break;

            case ReasonCodeAccountTypeAll::Claim:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Claim));
                break;

            case ReasonCodeAccountTypeAll::CaseStatus:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CaseStatus));
                break;

            case ReasonCodeAccountTypeAll::CSSDEquipmentTest:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CSSDEquipmentTest));
                break;

            case ReasonCodeAccountTypeAll::CSSDRecallRequest:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_CSSDRecallRequest));
                break;

            case ReasonCodeAccountTypeAll::DischargeReason:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_DischargeReason));
                break;

            case ReasonCodeAccountTypeAll::EligibilityBypass:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_EligibilityBypass));
                break;

            case ReasonCodeAccountTypeAll::EncounterDisposition:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_EncounterDisposition));
                break;

            case ReasonCodeAccountTypeAll::Enquiry:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Enquiry));
                break;

            case ReasonCodeAccountTypeAll::ForceBookingCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ForceBookingCancel));
                break;

            case ReasonCodeAccountTypeAll::ImmunizationRefusal:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ImmunizationRefusal));
                break;

            case ReasonCodeAccountTypeAll::LabRadiologyCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_LabRadiologyCancel));
                break;

            case ReasonCodeAccountTypeAll::MedicationError:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MedicationError));
                break;

            case ReasonCodeAccountTypeAll::MedicationStopped:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MedicationStopped));
                break;

            case ReasonCodeAccountTypeAll::Movement:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Movement));
                break;

            case ReasonCodeAccountTypeAll::MovementCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementCancel));
                break;

            case ReasonCodeAccountTypeAll::MovementEdit:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementEdit));
                break;

            case ReasonCodeAccountTypeAll::MovementReject:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_MovementReject));
                break;

            case ReasonCodeAccountTypeAll::OnHoldSterileItem:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_OnHoldSterileItem));
                break;

            case ReasonCodeAccountTypeAll::Ordering:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Ordering));
                break;

            case ReasonCodeAccountTypeAll::PatientDeactivate:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_PatientDeactivate));
                break;
            case ReasonCodeAccountTypeAll::PatientMerge:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_PatientMerge));
                break;
            case ReasonCodeAccountTypeAll::Physiotherapy:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_Physiotherapy));
                break;
            case ReasonCodeAccountTypeAll::RegistrationRequestCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_RegistrationRequestCancel));
                break;
            case ReasonCodeAccountTypeAll::ServiceDone:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ServiceDone));
                break;
            case ReasonCodeAccountTypeAll::ServicePostponed:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_ServicePostponed));
                break;
            case ReasonCodeAccountTypeAll::TransportOrderCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_TransportOrderCancel));
                break;
            case ReasonCodeAccountTypeAll::WaitingListCancel:
                formControlId = _reasonFormTable.parmReasonFormInstance().controlId(formControlStr(Reasons, AccountType_WaitingListCancel));
                break;

        }
        FormCheckBoxControl checkboxControl = null;

        if (formControlId != 0)
        {
            checkboxControl = _reasonFormTable.parmReasonFormInstance().control(formControlId);
        }

        return checkboxControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Reasons_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(Reasons), FormEventType::Initialized)]
    public static void Reasons_OnInitialized(xFormRun sender, FormEventArgs e)
    {

        ReasonsIForm reasonForm = sender as ReasonsIForm;
        if (reasonForm)
        {
            ReasonFormTable reasonFormTable = reasonForm.getReasonFormTable();
            if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            {
                //todo: ax7 need to be done in resaon time 
                /*
            reasonFormTable.parmReasonGridAccountTypeMovementReject(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::MovementReject,reasonFormTable));
            reasonFormTable.parmReasonGridAccountTypeMovementCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::MovementCancel,reasonFormTable));
            reasonFormTable.parmReasonGridInPatientMaintain(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::InPatientMaintain,reasonFormTable));
            reasonFormTable.parmReasonGridMedicationStopped(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::MedicationStopped,reasonFormTable));
            reasonFormTable.parmReasonGridImmunizationRefusal(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::ImmunizationRefusal,reasonFormTable));
            reasonFormTable.parmReasonGridLabRadiologyCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::LabRadiologyCancel,reasonFormTable));
            reasonFormTable.parmReasonGridWriteOff(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::BillingReason,reasonFormTable));
            reasonFormTable.parmReasonGridAppointments(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Appointments,reasonFormTable));
            reasonFormTable.parmReasonGridOrdering(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Ordering,reasonFormTable));
            reasonFormTable.parmReasonGridClaim(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Claim,reasonFormTable));
            reasonFormTable.parmReasonGridMedicationError(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::MedicationError,reasonFormTable));
            reasonFormTable.parmReasonGridEncounterDisposition(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::EncounterDisposition,reasonFormTable));
            reasonFormTable.parmReasonGridPhysiotherapy(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Physiotherapy,reasonFormTable));
            reasonFormTable.parmReasonGridWaitingListCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::WaitingListCancel,reasonFormTable));
            reasonFormTable.parmReasonGridPatientMerge(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::PatientMerge,reasonFormTable));
            reasonFormTable.parmReasonGridMovementEdit(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::MovementEdit,reasonFormTable));
            reasonFormTable.parmReasonGridMovement(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Movement,reasonFormTable));
            reasonFormTable.parmReasonGridRegistrationRequestCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::RegistrationRequestCancel,reasonFormTable));
            reasonFormTable.parmReasonGridTransportOrderCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::TransportOrderCancel,reasonFormTable));
            reasonFormTable.parmReasonGridEnquiry(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Enquiry,reasonFormTable));
            reasonFormTable.parmReasonGridDischargeReason(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::DischargeReason,reasonFormTable));
            reasonFormTable.parmReasonGridOnHold(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::OnHoldSterileItem,reasonFormTable));
            reasonFormTable.parmReasonGridCSSDEquipmentTest(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::CSSDEquipmentTest,reasonFormTable));
            reasonFormTable.parmReasonGridCSSDRecallRequest(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::CSSDRecallRequest,reasonFormTable));
            reasonFormTable.parmReasonGridAmendment(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::Amendment,reasonFormTable));
            reasonFormTable.parmReasonGridAmendmentDeny(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::AmendmentDeny,reasonFormTable));
            reasonFormTable.parmReasonGridForceBookingCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::ForceBookingCancel,reasonFormTable));
            reasonFormTable.parmReasonGridPatientDeactivate(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::PatientDeactivate,reasonFormTable));
            reasonFormTable.parmAccountTypeAppointmentSlotBlocking(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::AppointmentSlotBlocking,reasonFormTable));
            reasonFormTable.parmAccountTypeAppointmentCloseSchedule(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::AppointmentCloseSchedule,reasonFormTable));
            reasonFormTable.parmAccountTypeServicePostponed(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::ServicePostponed,reasonFormTable));
            reasonFormTable.parmAccountTypeServiceDone(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::ServiceDone,reasonFormTable));
            reasonFormTable.parmReasonGridWaitingListCancel(ReasonsformEventHandlerHM::findCheckboxControl(ReasonCodeAccountTypeAll::EligibilityBypass,reasonFormTable));
            */
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(Reasons, ReasonTable), FormDataSourceEventType::Initialized)]
    public static void ReasonTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun element = sender.formRun();
        if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::MovementReject)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,MovementReject)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::MovementCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,MovementCancel)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::InPatientMaintain)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,InPatientMaintain)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::MedicationStopped)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,MedicationStopped)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::ImmunizationRefusal)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,ImmunizationRefusal)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::LabRadiologyCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,LabRadiologyCancel)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Appointments)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Appointments)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Ordering)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Ordering)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Claim)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Claim)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::CaseStatus)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,CaseStatus)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::MedicationError)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,MedicationError)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::EncounterDisposition)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,EncounterDisposition)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Physiotherapy)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Physiotherapy)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::WaitingListCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,WaitingListCancel)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::PatientMerge)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,PatientMerge)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::MovementEdit)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,MovementEdit)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Movement)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Movement)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::RegistrationRequestCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,RegistrationRequestCancel)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::TransportOrderCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,TransportOrderCancel)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Enquiry)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Enquiry)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::DischargeReason)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,DischargeReason)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::OnHoldSterileItem)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,OnHoldSterileItem)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::CSSDEquipmentTest)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,CSSDEquipmentTest)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::CSSDRecallRequest)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,CSSDRecallRequest)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::Amendment)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,Amendment)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::AmendmentDeny)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,AmendmentDeny)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::ForceBookingCancel)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,ForceBookingCancel)).value(SysQuery::value(NoYes::Yes));
            }

            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::PatientDeactivate)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,PatientDeactivate)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::AppointmentSlotBlocking)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,AppointmentSlotBlocking)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::AppointmentCloseSchedule)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,AppointmentCloseSchedule)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::ServiceDone)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,ServiceDone)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::ServicePostponed)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,ServicePostponed)).value(SysQuery::value(NoYes::Yes));
            }
            if (element.args().parmEnum() == ReasonCodeAccountTypeAll::EligibilityBypass)
            {
                sender.query().dataSourceTable(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable,EligibilityBypass)).value(SysQuery::value(NoYes::Yes));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReasonFormTable_Post_validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(ReasonFormTable), methodStr(ReasonFormTable, validateDelete))]
    public static void ReasonFormTable_Post_validateDelete(XppPrePostArgs args)
    {
        args.setReturnValue(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>