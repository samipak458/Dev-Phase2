<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPriceDiscAdm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class HMPriceDiscAdm_Extension
{
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InsuranceContractId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PriceDiscAdm, InsuranceContractId), FormControlEventType::Lookup)]
    public static void InsuranceContractId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        FormReferenceGroupControl InsuranceContractId = sender.formRun().control(sender.formRun().controlId(formControlStr(PriceDiscAdm, InsuranceContractId)));
        FormReferenceGroupControl ClassOrPlanId = sender.formRun().control(sender.formRun().controlId(formControlStr(PriceDiscAdm, ClassOrPlanId)));
        FormReferenceGroupControl PriceDiscAdmTrans_HMInsuranceNetwork = sender.formRun().control(sender.formRun().controlId(formControlStr(PriceDiscAdm, PriceDiscAdmTrans_HMInsuranceNetwork)));
        PriceDiscAdmTrans priceDiscAdmTransLocal = sender.formRun().dataSource().cursor() as PriceDiscAdmTrans;
        if(priceDiscAdmTransLocal.AccountCode == PriceDiscPartyCodeType::Table)
        {
            HMPriceDiscAdm_Extension::createContractIdLookup(sender, priceDiscAdmTransLocal.AccountRelation);
            InsuranceContractId.allowEdit(true);
            ClassOrPlanId.allowEdit(true);
            PriceDiscAdmTrans_HMInsuranceNetwork.allowEdit(true);
        }
        else
        {
            InsuranceContractId.allowEdit(false);
            ClassOrPlanId.allowEdit(false);
            PriceDiscAdmTrans_HMInsuranceNetwork.allowEdit(false);
        }

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        //cancel super() to prevent error.
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContractIdLookup</Name>
				<Source><![CDATA[
    private static void createContractIdLookup(FormReferenceGroupControl _ctrl, AccountNum _custAccount)
    {

        HMInsuranceCarrier insuranceCarrier = HMInsuranceCarrier::findByCustAccount(_custAccount, ConcurrencyModel::Auto);
        HMInsuranceContractCarrierCombination   hmInsuranceContractCarrierCombo = HMInsuranceContractCarrierCombination::findByInsCarrier(insuranceCarrier.RecId, ConcurrencyModel::Auto);
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(HMInsuranceContract), _ctrl);
        Query                   query = new Query();

        sysTableLookup.addLookupfield(fieldNum(HMInsuranceContract, HMContractNumber));
        sysTableLookup.addLookupfield(fieldNum(HMInsuranceContract, HMContractName));
   
        query.addDataSource(tablenum(HMInsuranceContract)).addRange(fieldNum(HMInsuranceContract, HMInsuranceContractCarrierCombination)).value(SysQuery::value(hmInsuranceContractCarrierCombo.RecId));//.addSortField(fieldNum(HMInsuranceContractClassOrPlans, HMContractClassId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ClassOrPlanId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PriceDiscAdm, ClassOrPlanId), FormControlEventType::Lookup)]
    public static void ClassOrPlanId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        PriceDiscAdmTrans priceDiscAdmTransLocal = sender.formRun().dataSource().cursor() as PriceDiscAdmTrans;
        HMPriceDiscAdm_Extension::createPlanLookup(sender, priceDiscAdmTransLocal.HMInsuranceContract);

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        //cancel super() to prevent error.
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlanLookup</Name>
				<Source><![CDATA[
    private static void createPlanLookup(FormReferenceGroupControl _ctrl, RecId _insuranceContractId)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(HMInsuranceContractClassOrPlans), _ctrl);
        Query                   query = new Query();

        sysTableLookup.addLookupfield(fieldNum(HMInsuranceContractClassOrPlans, HMContractClassId));
        sysTableLookup.addLookupfield(fieldNum(HMInsuranceContractClassOrPlans, HMContractClassName));
   
        query.addDataSource(tablenum(HMInsuranceContractClassOrPlans)).addRange(fieldNum(HMInsuranceContractClassOrPlans, HMInsuranceContract)).value(SysQuery::value(_insuranceContractId));//.addSortField(fieldNum(HMInsuranceContractClassOrPlans, HMContractClassId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PriceDiscAdmTrans_HMInsuranceNetwork_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PriceDiscAdm, PriceDiscAdmTrans_HMInsuranceNetwork), FormControlEventType::Lookup)]
    public static void PriceDiscAdmTrans_HMInsuranceNetwork_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        PriceDiscAdmTrans priceDiscAdmTransLocal = sender.formRun().dataSource().cursor() as PriceDiscAdmTrans;
        HMPriceDiscAdm_Extension::createNetworkLookup(sender, priceDiscAdmTransLocal.HMInsuranceContractClassOrPlans);

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        //cancel super() to prevent error.
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNetworkLookup</Name>
				<Source><![CDATA[
    private static void createNetworkLookup(FormReferenceGroupControl _ctrl, RecId _planId)
    {
        HMInsuranceContractClassOrPlans classPlanId = HMInsuranceContractClassOrPlans::find(_planId);
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(HMInsuranceNetwork), _ctrl);
        Query                   query = new Query();

        sysTableLookup.addLookupfield(fieldNum(HMInsuranceNetwork, NetworkId));
        sysTableLookup.addLookupfield(fieldNum(HMInsuranceNetwork, Name));
   
        query.addDataSource(tablenum(HMInsuranceNetwork)).addRange(fieldNum(HMInsuranceNetwork, NetworkId)).value(classPlanId.HMContractClassNetwork);//.addSortField(fieldNum(HMInsuranceContractClassOrPlans, HMContractClassId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public static display CostPrice costPrice(PriceDiscAdmTrans _this)
    {
        InventTable inventTable;
        
        select * from inventTable
            where inventTable.ItemId == _this.ItemRelation;               

        return inventTable.costPcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PriceDiscAdmTrans_HMCostOperator_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PriceDiscAdm, PriceDiscAdmTrans_HMCostOperator), FormControlEventType::Modified)]
    public static void PriceDiscAdmTrans_HMCostOperator_OnModified(FormControl sender, FormControlEventArgs e)
    {
        HMPriceDiscAdm_Extension::updateAmount(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PriceDiscAdmTrans_HMCostOperatorValue_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PriceDiscAdm, PriceDiscAdmTrans_HMCostOperatorValue), FormControlEventType::Modified)]
    public static void PriceDiscAdmTrans_HMCostOperatorValue_OnModified(FormControl sender, FormControlEventArgs e)
    {
        HMPriceDiscAdm_Extension::updateAmount(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmount</Name>
				<Source><![CDATA[
    public static void updateAmount(FormControl sender)
    {
        PriceDiscAdmTrans priceDiscAdmTransLocal = sender.formRun().dataSource().cursor() as PriceDiscAdmTrans;
        Amount priceTmp = HMPriceDiscAdm_Extension::costPrice(priceDiscAdmTransLocal);
        boolean     updateamt = true;

        switch(priceDiscAdmTransLocal.HMCostOperator)
        {
            case HMPriceOperator::Multiplication:
                priceTmp = priceTmp * priceDiscAdmTransLocal.HMCostOperatorValue;
                break;
            case HMPriceOperator::Division:
                priceTmp = priceTmp / priceDiscAdmTransLocal.HMCostOperatorValue;
                break;
            case HMPriceOperator::Minus:
                priceTmp -= priceDiscAdmTransLocal.HMCostOperatorValue;
                break;
            case HMPriceOperator::Plus:
                priceTmp += priceDiscAdmTransLocal.HMCostOperatorValue;
                break;
            case HMPriceOperator::Blank:
                updateamt = false;
                break;
        } 

        if(updateamt)
        {
            priceDiscAdmTransLocal.Amount = priceTmp;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>