<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CalculateDateTimeValue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CalculateDateTimeValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CheckWeekDays</Name>
				<Source><![CDATA[
    public boolean CheckWeekDays(str _dayName)
    {
        boolean ret;
    
        if (_dayName == enum2str(HMWeeksDay::Monday) || _dayName == enum2str(HMWeeksDay::Tuesday) || _dayName == enum2str(HMWeeksDay::Wednesday)|| _dayName == enum2str(HMWeeksDay::Thursday) ||
        _dayName == enum2str(HMWeeksDay::Friday))
        {
            ret = true;
        }
        else
        {
            ret= false;
        }
        return ret ;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckWeekDaysParamter</Name>
				<Source><![CDATA[
    public boolean CheckWeekDaysParamter(str _dayName)
    {
        HMParameters    hmParameter;
        boolean         ret;
    
        select * from hmParameter;
    
        if (_dayName == enum2str(WeekDays::Monday) && hmParameter.Monday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Tuesday) && hmParameter.Tuesday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Wednesday) && hmParameter.Wednesday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Thursday) && hmParameter.Thursday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Friday) && hmParameter.Friday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Saturday) && hmParameter.Saturday == NoYes::Yes)
        {
            ret = true;
        }
        else if (_dayName == enum2str(WeekDays::Sunday) && hmParameter.Sunday == NoYes::Yes)
        {
            ret = true;
        }
    
        return ret ;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DayName</Name>
				<Source><![CDATA[
    public str DayName(TransDate _date)
    {
        int day;
        str dayNamee;
    
        day = dayOfWk(_date);
        dayNamee = dayName(day);
    
        return dayNamee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DayNumber</Name>
				<Source><![CDATA[
    public Integer DayNumber(str month,str dayNames,str daySequences,str years)
    {
        CalculateDateTimeValue dateTimeValue = new CalculateDateTimeValue();
        int monthNumber,dayNumber;
        str newdatestr;
        date dates;
        date newDates;
        int counts;
        TransDate nextWeekDate;
    
        monthNumber = this.MonthNumber(month);
        newdatestr = '1/'+ int2str(monthNumber) + '/'+ years ;
        dates = str2DateDMY(newdatestr);
        newdates = nextMth(dates);
    
    
        while (dates < newDates)
        {
            if (dayNames == dateTimeValue.DayName(dates))
            {
                counts++;
                if(counts == dateTimeValue.MonthDaySequence(daySequences))
                {
                    dayNumber =  dayOfMth(dates);
                    break;
                }
                else if (counts == 4)
                {
                    nextWeekDate = dates + 7;
                    if (nextWeekDate >= newDates)
                    {
                        dayNumber = dayOfMth(dates);
                    }
                }
            }
            dates ++;
        }
        return dayNumber;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFirstWeekDay</Name>
				<Source><![CDATA[
    public boolean IsFirstWeekDay(TransDate _date,str _firstWeekdayName)
    {
        boolean ret;
        str dayNames;
    
            dayNames =  this.DayName(_date);
            if (dayNames == _firstWeekdayName)
            {
                ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsFriday</Name>
				<Source><![CDATA[
    public boolean IsFriday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Friday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsMonday</Name>
				<Source><![CDATA[
    public boolean IsMonday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if(dayNames == enum2str(WeekDays::Monday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSaturday</Name>
				<Source><![CDATA[
    public boolean IsSaturday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Saturday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSunday</Name>
				<Source><![CDATA[
    public boolean IsSunday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Sunday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsThursday</Name>
				<Source><![CDATA[
    public boolean IsThursday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Thursday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsTuesday</Name>
				<Source><![CDATA[
    public boolean IsTuesday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Tuesday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsWednesday</Name>
				<Source><![CDATA[
    public boolean IsWednesday(TransDate _date)
    {
        boolean ret;
        str dayNames;
    
          dayNames =  this.DayName(_date);
            if (dayNames == enum2str(WeekDays::Wednesday))
            {
            ret = true;
            }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MonthDaySequence</Name>
				<Source><![CDATA[
    public  Integer MonthDaySequence(str _dayCount)
    {
        Integer ret;
    
        if (_dayCount == enum2str(HMDaysNumber::first))
        {
            ret = 1;
        }
        else if (_dayCount == enum2str(HMDaysNumber::second))
        {
            ret = 2;
        }
        else if (_dayCount == enum2str(HMDaysNumber::third))
        {
            ret = 3;
        }
        else if (_dayCount == enum2str(HMDaysNumber::fourth))
        {
            ret = 4;
        }
        else if (_dayCount == enum2str(HMDaysNumber::last))
        {
            ret = 5;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MonthName</Name>
				<Source><![CDATA[
    public str MonthName(TransDate _date)
    {
        int month;
        str monthNamee;
    
        month = mthOfYr(_date);
        monthNamee = mthName(month);
    
        return monthNamee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MonthNumber</Name>
				<Source><![CDATA[
    public  Integer MonthNumber(str _monthName)
    {
        int number;
        if (_monthName == enum2str(MonthsOfYear::January))
        {
             number = 1;
        }
        else if (_monthName == enum2str( MonthsOfYear::February))
        {
            number= 2;
        }
        else if (_monthName == enum2str(MonthsOfYear::March))
        {
            number = 3;
        }
        else if (_monthName == enum2str(MonthsOfYear::April))
        {
            number = 4;
        }
        else if (_monthName == enum2str(MonthsOfYear::May))
        {
            number = 5;
        }
        else if (_monthName == enum2str(MonthsOfYear::June))
        {
            number = 6;
        }
        else if (_monthName == enum2str(MonthsOfYear::July))
        {
            number = 7;
        }
        else if (_monthName == enum2str(MonthsOfYear::August))
        {
            number= 8;
        }
        else if (_monthName == enum2str(MonthsOfYear::September))
        {
             number= 9;
        }
        else if (_monthName == enum2str(MonthsOfYear::October))
        {
            number = 10;
        }
        else if (_monthName == enum2str(MonthsOfYear::November))
        {
            number = 11;
        }
        else if (_monthName == enum2str(MonthsOfYear::December))
        {
            number  = 12;
        }
    
        return number;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>