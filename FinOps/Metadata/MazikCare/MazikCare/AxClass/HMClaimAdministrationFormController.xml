<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimAdministrationFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMClaimAdministrationFormController extends SrsReportRunController
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        HMResourceSchedulingAppointment     appointment;
        HMCase                              emergencyCase;
        HMClaimAdministrationFormContract   contract;
        AnyType      common;
    
        if (this.parmArgs() && this.parmArgs().record())
        {
            contract    = new HMClaimAdministrationFormContract();//this.parmReportContract().parmRdpContract() as HMClaimAdministrationFormContract;
            common    = this.parmReportContract().parmRdpContract() as HMClaimAdministrationFormContract;
    
            if (this.parmArgs().record().TableId == tableNum(HMResourceSchedulingAppointment))
            {
                appointment = this.parmArgs().record();
                contract.parmAppointmentRecId(appointment.RecId);
            }
    
            if (this.parmArgs().record().TableId == tableNum(HMCase))
            {
                emergencyCase = this.parmArgs().record();
                contract.parmCaseRecId(emergencyCase.RecId);
            }
    
            this.parmReportContract().parmRdpContract(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        HMClaimAdministrationFormController controller = new HMClaimAdministrationFormController();
        HMResourceSchedulingAppointment     appointment;
        HMResourceSchedulingPlanningObject  planning;
        HMOrganizationalUnit                organizationalUnit;
        HMSpecialtyCode                     specialtyCode;
        HMCase                              emergencyCase;
    
        if (_args.record())
        {
            if (_args.record().TableId == tableNum(HMResourceSchedulingAppointment))
            {
                appointment = _args.record() as HMResourceSchedulingAppointment;
            }
    
            if (_args.record().TableId == tableNum(HMCase))
            {
                emergencyCase = _args.record() as HMCase;
            }
    
            if (appointment)
            {
                if (appointment.HMPatientInsurance)
                {
                    planning            = HMResourceSchedulingPlanningObject::find(appointment.HMResourceSchedulingPlanningObject);
                    organizationalUnit  = HMOrganizationalUnit::find(planning.HMOrganizationalUnit);
                }
                else
                {
                    error("@MAZ13503");
                }
            }
    
            if (emergencyCase)
            {
                organizationalUnit  = HMOrganizationalUnit::find(emergencyCase.Clinic);
            }
    
            if (organizationalUnit)
            {
                specialtyCode       = HMSpecialtyCode::find(organizationalUnit.HMSpecialtyCode);
            }
    
            if (specialtyCode.HMClaimFormTemplate == HMClaimFormTemplate::DCAF)
            {
                controller.parmReportName(ssrsReportStr(HMClaimAdministrationReport, DCAF));
            }
            else
            {
                controller.parmReportName(ssrsReportStr(HMClaimAdministrationReport, UCAF));
            }
    
            controller.parmArgs(_args);
            controller.parmShowDialog(false);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>