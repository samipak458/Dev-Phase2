<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductCreateFormEventHandlerHM</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductCreateFormEventHandlerHM
{
    
    

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateMazikCareFields</Name>
				<Source><![CDATA[
     private void updateMazikCareFields(XppPrePostArgs args)
    {
        FormRun sender = args.getThis();
        FormCheckBoxControl IsRetailKitcheckbox = sender.design(0).controlName("IsRetailKit");
        if(sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseMedication))
        {
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareMedication)).visible(true);
            //todo: ax7
            // HMInventTable.HMDrugDatabase      = HMParameters::find().HMDrugDatabase;
        }
        
        else if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseLab))
        {
            sender.design().controlName(formControlStr(EcoResProductCreate,MazikCareLab)).visible(true);
        }
        else if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseRadiology))
        {
            sender.design().controlName(formControlStr(EcoResProductCreate,MazikCareRadiology)).visible(true);
        }
        
        else if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS))
        {
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure)).visible(true);
            sender.design().controlName(formControlStr(EcoResProductCreate, CategoryReferenceGroup)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, PdsCWProduct)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Status)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_AMADescription)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_ShortDescription)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Ancillary)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_AssessCopay)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Electronic)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_BillInsurance)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_BillPatient)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Tax)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_HMServiceIsBillable)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_ReqCLIA)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_OvrwriteExist)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_HMProcedureMasterCode)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_HMTypeOfService)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_HMPlaceOfService)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_RVU)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Units)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_Type)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_ChargeType)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_StandardClinicalProcedure)).visible(false);
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProcedure_AMADescription)).visible(false);
            /*
            MazikCareProcedure.visible(true);
            CategoryReferenceGroup.visible(false);
            PdsCWProduct.visible(false);
            MazikCareProcedure_Status.visible(false);
            MazikCareProcedure_AMADescription.visible(false);
            MazikCareProcedure_ShortDescription.visible(false);
            MazikCareProcedure_Ancillary.visible(false);
            MazikCareProcedure_AssessCopay.visible(false);
            MazikCareProcedure_Electronic.visible(false);
            MazikCareProcedure_BillInsurance.visible(false);
            MazikCareProcedure_BillPatient.visible(false);
            MazikCareProcedure_Tax.visible(false);
            MazikCareProcedure_HMServiceIsBillable.visible(false);
            MazikCareProcedure_ReqCLIA.visible(false);
            MazikCareProcedure_OvrwriteExist.visible(false);
            MazikCareProcedure_HMProcedureMasterCode.visible(false);
            MazikCareProcedure_HMTypeOfService.visible(false);
            MazikCareProcedure_HMPlaceOfService.visible(false);
            MazikCareProcedure_RVU.visible(false);
            MazikCareProcedure_Units.visible(false);
            MazikCareProcedure_Type.visible(false);
            MazikCareProcedure_ChargeType.visible(false);
            MazikCareProcedure_StandardClinicalProcedure.visible(false);
            MazikCareProcedure_AMADescription.visible(false);
            //Types.visible(false);
            //ProductNumberGroup.visible(false);
            //ItemIdentification_NameAlias.visible(false);
            */
        }
        /*else if(IsRetailKitcheckbox.checked())
        {
            
            createdEcoResProduct.hmproducttype = HMInventType::Set;
        }
        else if(sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleasePhysioHCPCS))
        {
            MazikCarePhysiotherapy.visible(true);
            PdsCWProduct.visible(false);
        }
        */

        else
        if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD))
        {
            sender.design().controlName(formControlStr(EcoResProductCreate, MazikcareCSSD)).visible(true);
            //MazikcareCSSD.visible(true);

            //PdsCWProductTab.visible(false);
        }
        else
        {
            if(sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateMedication)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateLab)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateRadiology)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateHCPCS)
           && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreatePhysioHCPCS)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleasePhysioHCPCS)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleaseMedication)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleaseLab)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleaseRadiology)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD)
            && sender.args().menuItemName() != menuitemDisplayStr(HMEcoResProductCreateCSSD))
            {
                sender.design().controlName(formControlStr(EcoResProductCreate, MazikCareProductType)).visible(true);
                //MazikCareProductType.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMInventTableFromHMEcoResProduct</Name>
				<Source><![CDATA[
        private void createHMInventTableFromHMEcoResProduct(ItemId itemId, HMInventTable _hmInventTable,XppPrePostArgs args) 
    {
        FormRun sender = Args.getThis();
        // as FormRun;
        FormCheckBoxControl checkbox = sender.design(0).controlName("MazikCareProcedure_HMIsAppointmentOnly");
        FormCheckBoxControl IsRetailKitcheckbox = sender.design(0).controlName("IsRetailKit");
  
        HMInventTable   hmInventTableLocal;
        InventTable     _inventtable;
        EcoResProduct   _ecoresproduct;
        if(itemId)
        {
            try
            {
                ttsbegin;
            select forUpdate hmInventTableLocal
           where hmInventTableLocal.InventTable == itemId;
            buf2Buf(_hmInventTable,hmInventTableLocal);
            hmInventTableLocal.InventTable = itemId;
            hmInventTableLocal.HMIsAppointmentOnly= checkbox.value();
            if(hmInventTableLocal.RecId == 0)
            {
                hmInventTableLocal.Status = NoYes::Yes;
                hmInventTableLocal.insert();
            }
            else
            {
                hmInventTableLocal.Status = NoYes::Yes;
                hmInventTableLocal.update();
            }
                if(IsRetailKitcheckbox)
                {
                    if(IsRetailKitcheckbox.checked())
                    {
                        while select Product from  _inventtable
                         where _inventtable.ItemId== ItemId
                        join forupdate _ecoresproduct  where _ecoresproduct.RecId == _inventtable.Product
                        {
                            _ecoresproduct.HMProductType = HMInventType::Set;
                            _ecoresproduct.update();
                        }
                    }
                }
                ttscommit;
            }
            catch
            {

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMazikCareEnums</Name>
				<Source><![CDATA[
    private void updateMazikCareEnums(FormRun _element, EcoResProduct createdEcoResProduct)
    {
        
        if(_element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateMedication) ||
        _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseMedication))
        {
            createdEcoResProduct.HMProductType = HMInventType::Medication;
        }
        else if ( _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateLab)||
         _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseLab))
        {
            createdEcoResProduct.HMProductType = HMInventType::Laboratory;
        }
        else if ( _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateRadiology)||
         _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseRadiology))
        {
            createdEcoResProduct.HMProductType = HMInventType::Radiology;
        }
        else if ( _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateHCPCS)||
         _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS))
        {
            createdEcoResProduct.HMProductType = HMInventType::HCPCS;
        }
        else if( _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreatePhysioHCPCS)||
         _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleasePhysioHCPCS))
        {
            createdEcoResProduct.HMProductType = HMInventType::Phsyiotherapy;
        }
       /* else if ( _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD) ||
         _element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateCSSD))
        {
            createdEcoResProduct.HMProductType = HMInventType::CSSD;
        }*/
       /* else
        {
            //todo ax7
            createdEcoResProduct.HMProductType = HMInventType::HCPCS;
            // createdEcoResProduct.HMProductType = MazikCareProductType.selection();
        }*/

        FormCheckBoxControl productIsRetailKit =  _element.control(_element.controlId(formControlStr(EcoResProductCreate, productIsRetailKit)));
        if (productIsRetailKit.checked())
        {
            createdEcoResProduct.HMProductType = HMInventType::Set;
        }      
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_parmProductType</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, parmProductType))]
    public static void EcoResProductCreate_Post_parmProductType(XppPrePostArgs args)
    {
        FormRun sender = args.getThis();
        FormComboBoxControl types_ProductType = sender.control(sender.controlId(formControlStr(EcoResProductCreate, Types_ProductType)));
        EcoResProductType _productType = args.getArg('_productType');

        _productType = types_ProductType.selection();

        args.setReturnValue(_productType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCrossTableManager_Pre_insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(classStr(EcoResProductCrossTableManager), staticMethodStr(EcoResProductCrossTableManager, insert))]
    public static void EcoResProductCrossTableManager_Pre_insert(XppPrePostArgs args)
    {
        EcoResProductCreateFormEventHandlerHM _this = new  EcoResProductCreateFormEventHandlerHM();
        FormRun sender = args.getArg('_productCreationData') as FormRun;
        EcoResProduct   ecoResProduct = args.getArg('_product');

        //<MazikCare>
        if(isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            //Commented by Zain for Preventice demo
            //_this.updateMazikCareEnums(sender, ecoResProduct);
        }
        //</MazikCare>
        args.setArg('_product', ecoResProduct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_initPdsVendorCheckFromInventModelGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, initPdsVendorCheckFromInventModelGroup))]
    public static void EcoResProductCreate_Post_initPdsVendorCheckFromInventModelGroup(XppPrePostArgs args)
    {
        /*
        EcoResProductCreateFormEventHandlerHM _this = new EcoResProductCreateFormEventHandlerHM();
        FormRun sender = args.getThis();
        HMInventTable hmInventTable = sender.dataSource(formDataSourceStr(EcoResProductCreate,HMInventTable)).cursor();
        boolean releaseProductToCompany;
        if (formHasMethod(sender, identifierStr('parmIsReleased')))
        {
            releaseProductToCompany = sender.parmIsReleased();
        }
        //inserting on inventtable insert
        if(isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && releaseProductToCompany)
        {
            //todo ax7
            /*(if(element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseMedication)
                || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseLab)
                || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseRadiology)
                || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS)
                || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleasePhysioHCPCS)
                || MazikCareProductType.selection() != HMInventType::None)
                {*/

                FormStringControl itemId = sender.control(sender.controlId(formControlStr(EcoResProductCreate, ItemIdentification_ItemId)));
            _this.createHMInventTableFromHMEcoResProduct(itemId.text(), hmInventTable);
        }
        */

    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, init))]
    public static void EcoResProductCreate_Post_init(XppPrePostArgs args)
    {
        FormRun sender = args.getThis();
       
        HMInventTable _hmInventTableLocal = sender.dataSource(formDataSourceStr(EcoResProductCreate,HMInventTable )).cursor();
        //todo: uncomment
        //_hmInventTableLocal.IsReadyToInsert =false;
        //sender.dataSource('HMinventtable').object(fieldnum(HMInventTable,IsReadyToInsert)).setValue(YesNo::No);



        EcoResProductCreateFormEventHandlerHM _this  = new EcoResProductCreateFormEventHandlerHM();
        boolean releaseProductToCompany;

        if (formHasMethod(sender, identifierStr('parmIsReleased')))
        {
            releaseProductToCompany = sender.parmIsReleased();
        }
        //<MazikCare>
        if(isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
        {
            _this.updateMazikCareFields(args);
        }

        sender.design().caption(
        releaseProductToCompany ? SysLabel::labelId2String2('@MAZ13244') : SysLabel::labelId2String2('@MAZ13244'));
        /*
        if (element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD)
        || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateCSSD))
        {
            isCSSD = true;
        }
        //</MazikCare>
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(EcoResProductCreate), FormEventType::Initialized)]
    public static void EcoResProductCreate_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        FormComboBoxControl types_ProductType = sender.control(sender.controlId(formControlStr(EcoResProductCreate, Types_ProductType)));
        if(sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS))
        {
            if(formHasMethod(sender,identifierStr('setComboSelection')))
            {
                formRun.setComboSelection(types_ProductType, EcoResProductType::Service);
            }
            
        }
        else
        {
            if(formHasMethod(sender,identifierStr('setComboSelection')))
            {
                formRun.setComboSelection(types_ProductType, EcoResProductType::Item);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_run</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, run))]
    public static void EcoResProductCreate_Post_run(XppPrePostArgs args)
    {
        FormRun sender = args.getThis() as FormRun;
        HMInventTable hmInventTable = sender.dataSource(formDataSourceStr(EcoResProductCreate,HMInventTable )).cursor();

        if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS))
        {
            hmInventTable.ChargeType = HMChargeType::Immediate;
        }
       
        /*if (isConfigurationkeyEnabled(configurationKeyNum(MazikCare)))
            if (element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD)
        || element.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateCSSD))
        {
            element.updateCSSDProductMasterField();

        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_updateCallers</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, updateCallers))]
    public static void EcoResProductCreate_Post_updateCallers(XppPrePostArgs args)
    {
        //todo
        /*
        if (isCSSD)
        {
            callerFormRun = element.args().caller() as FormRun;
            element.args().lookupRecord(recordToFind);
            callerFormRun.dataSource().research(true);
        }
        else
        {
            callerFormArgs = callerFormRun.args();
            if (callerFormArgs)
            {
                callerFormRun.args().lookupRecord(recordToFind);
                rootDataSource.research();
            }
        }
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, validateWrite))]
    public static void EcoResProductCreate_Post_validateWrite(XppPrePostArgs args)
    {
        FormRun sender = args.getThis();
        boolean ret = args.getReturnValue();
        boolean releaseProductToCompany;
        if (formHasMethod(sender, identifierStr('parmIsReleased')))
        {
            releaseProductToCompany = sender.parmIsReleased();
        }

        if (releaseProductToCompany)
        {
            FormStringControl modelGroupId = sender.control(sender.controlId(formControlStr(EcoResProductCreate, ModelGroupId)));
            ret = ret && modelGroupId.validate();
            FormStringControl itemGroupId = sender.control(sender.controlId(formControlStr(EcoResProductCreate, ItemGroupId)));
            ret = ret && ItemGroupId.validate();
            FormReferenceGroupControl StorageDimensionGroup = sender.control(sender.controlId(formControlStr(EcoResProductCreate, StorageDimensionGroup)));
            ret = ret && StorageDimensionGroup.validate();
            FormReferenceGroupControl TrackingDimensionGroup = sender.control(sender.controlId(formControlStr(EcoResProductCreate, TrackingDimensionGroup)));
            ret = ret && TrackingDimensionGroup.validate();
        }
        
        args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMIsAppointmentOnly_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(EcoResProductCreate, HMInventTable, HMIsAppointmentOnly), FormDataFieldEventType::Modified)]
    public static void HMIsAppointmentOnly_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataFieldCancelableSuperEventArgs ce = e as FormDataFieldCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EcoResProductCreate_Post_write</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(EcoResProductCreate), formMethodStr(EcoResProductCreate, write))]
    public static void EcoResProductCreate_Post_write(XppPrePostArgs args)
    {
        InventTable inventTable;
        
        EcoResProductCreateFormEventHandlerHM _this = new EcoResProductCreateFormEventHandlerHM();
        FormRun sender = args.getThis();
        HMInventTable hmInventTable = sender.dataSource(formDataSourceStr(EcoResProductCreate,HMInventTable)).cursor();
        boolean releaseProductToCompany;
        FormStringControl itemId = sender.control(sender.controlId(formControlStr(EcoResProductCreate, ItemIdentification_ItemId)));
        FormCheckBoxControl checkbox = sender.design(0).controlName("MazikCareProcedure_HMIsAppointmentOnly");
        FormComboBoxControl MazikCareProductType = sender.design(0).controlName("MazikCareProductType");
       
        //todo: uncomment
        //sender.dataSource('HMinventtable').object(fieldnum(HMInventTable,IsReadyToInsert)).setValue(YesNo::yes);
        if (formHasMethod(sender, identifierStr('parmIsReleased')))
        {
            releaseProductToCompany = sender.parmIsReleased();
        }
        //inserting on inventtable insert
        

        if(isConfigurationkeyEnabled(configurationKeyNum(MazikCare)) && releaseProductToCompany)
        {
            if(sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseMedication)
                || sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseLab)
                || sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseRadiology)
                || sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseHCPCS)
                || sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleasePhysioHCPCS)
                || MazikCareProductType.selection() != HMInventType::None)
            {

                _this.createHMInventTableFromHMEcoResProduct(itemId.text(),hmInventTable,Args);
            }

        }

      /*  if (sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateReleaseCSSD)
        || sender.args().menuItemName() == menuitemDisplayStr(HMEcoResProductCreateCSSD))
        {
            _this.createHMCSSDInventFromHMEcoResProduct(itemId.text(),Args);
        }*/
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>