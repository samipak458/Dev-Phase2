<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMFinancialDimensionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMFinancialDimensionHelper
{
    HMFinancialDimensionMapping             mapping;

    HMResourceSchedulingAppointment         appointment;
    HMBookingOrigin                         appointmentSource;
    HMCase                                  appointmentCase;
    HMResourceSchedulingTypeCode            appointmentType;
    HMResourceSchedulingPlanningObject      appointmentPlanningObject;
    HMResourceMaster                        appointmentDoctor;
    HMPatientInsurance                      appointmentPatientInsurance;
    HMInsuranceCarrier                      appointmentCarrier;
    HMInsuranceContract                     appointmentContract;
    HMInsuranceContractClassOrPlans         appointmentPlan;
    HMInsuranceContractCarrierCombination   appointmentCombination;
    HMSpecialtyCode                         appointmentSpecialty;
    HMBuildingUnit                          appointmentBuildingUnit;
    HMOrganizationalUnit                    appointmentOrganizationalUnit;
    HMPatient                               appointmentPatient;
    HMTPA                                   appointmentTPA;

    DimensionAttribute      dimensionAttribute;
    DimensionAttributeValue newDepartmentValue;
    container dimensionContainer, conAttr, conValue;
    int i, counter;
    RefRecId newDefualtDimension;
    str dimValue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillDimensionContainerForAdvanceInsPaym</Name>
				<Source><![CDATA[
    public void fillDimensionContainerForAdvanceInsPaym(CustAccount _hmInsuranceCompany, CustAccount _hmTPA, str _batchId)
    {
        if (!i)
        {
            i = 1;
        }
    
        while select mapping
        {
            dimensionAttribute = DimensionAttribute::find(mapping.DimensionAttribute);
    
            if (dimensionAttribute)
            {
                switch (mapping.HMFinancialDimensionType)
                {
                    case HMFinancialDimensionType::InsuranceId:
    
                        if(_hmInsuranceCompany)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, _hmInsuranceCompany);
                            i++;
                        }
                        break;
    
                    case HMFinancialDimensionType::TPA:
    
                        if (_hmTPA)
                        {
                            appointmentTPA = HMTPA::find(appointmentCombination.HMInsuranceTPA);
    
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, _hmTPA);
                            i++;
                        }
                        break;
    
                    case HMFinancialDimensionType::InsuranceBatchNumber:
                        conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                        conValue    = conIns(conValue, i, _batchId);
                        i++;
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDimensionContainerFromAppointment</Name>
				<Source><![CDATA[
    public void fillDimensionContainerFromAppointment(HMAppointmentNumber _appointmentNumber, HMInsuranceCarrierBatchNumber _batchNumber = '')
    {
        select firstOnly appointment
            where appointment.AppointmentNumber == _appointmentNumber;
    
        appointmentPlanningObject       = HMResourceSchedulingPlanningObject::find(appointment.HMResourceSchedulingPlanningObject);
        appointmentBuildingUnit         = HMBuildingUnit::find(appointmentPlanningObject.HMBuildingUnit);
        appointmentOrganizationalUnit   = HMOrganizationalUnit::find(appointmentPlanningObject.HMOrganizationalUnit);
        appointmentPatientInsurance     = HMPatientInsurance::find(appointment.HMPatientInsurance);
        appointmentPlan                 = HMInsuranceContractClassOrPlans::find(appointmentPatientInsurance.HMInsuranceContractClassOrPlans);
    
        if (!i)
        {
            i = 1;
        }
    
        while select mapping
        {
            dimensionAttribute = DimensionAttribute::find(mapping.DimensionAttribute);
    
            if (dimensionAttribute)
            {
                switch (mapping.HMFinancialDimensionType)
                {
                    case HMFinancialDimensionType::AppointmentSource:
    
                        appointmentSource = HMBookingOrigin::find(appointment.HMBookingOrigin);
    
                        if (appointmentSource)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentSource.Code);
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::Responsible:
    
                        if (appointment.HMPatientInsurance)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Insurance");
                            i++;
                        }
                        else
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Self");
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::AppointmentType:
    
                        appointmentType = HMResourceSchedulingTypeCode::find(appointment.HMResourceSchedulingTypeCode);
    
                        if (appointmentType)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentType.Code);
                            i++;
                        }
                        break;
    
                    case HMFinancialDimensionType::CaseNumber:
    
                        appointmentCase = HMCase::find(appointment.HMCase);
    
                        if (appointmentCase)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentCase.CaseNo);
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::DoctorId:
    
                        if (appointmentPlanningObject)
                        {
                            appointmentDoctor = HMResourceMaster::find(appointmentPlanningObject.HMResourceMaster);
    
                            if (appointmentDoctor)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentDoctor.Code);
                                i++;
                            }
                        }
                        break;
    
                    case HMFinancialDimensionType::InsuranceContract:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                    conValue    = conIns(conValue, i, appointmentContract.HMContractNumber);
                                    i++;
                                }
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::InsuranceId:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    appointmentCombination = HMInsuranceContractCarrierCombination::find(appointmentContract.HMInsuranceContractCarrierCombination);
    
                                    if (appointmentCombination)
                                    {
                                        appointmentCarrier = HMInsuranceCarrier::find(appointmentCombination.HMInsuranceCarrier);
    
                                        if (appointmentCarrier)
                                        {
                                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                            conValue    = conIns(conValue, i, appointmentCarrier.Code);
                                            i++;
                                        }
                                    }
                                }
                            }
                        }
                        break;
    
                    case HMFinancialDimensionType::InsurancePlan:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentPlan.HMContractClassId);
                                i++;
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::PatientId:
                        appointmentPatient  = HMPatient::find(appointment.HMPatient);
    
                        if (appointmentPatient)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentPatient.getMRN());
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::PaymentType:
                        //        appointment.cus
                        break;
    
                    case HMFinancialDimensionType::Speciality:
    
                        if (appointmentOrganizationalUnit)
                        {
                            appointmentSpecialty = HMSpecialtyCode::find(appointmentOrganizationalUnit.HMSpecialtyCode);
    
                            if (appointmentSpecialty)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentSpecialty.SpecialtyCodeId);
                                i++;
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::RoomId:
    
                        if (appointmentBuildingUnit)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentBuildingUnit.Code);
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::AppointmentNumber:
    
                        if (appointmentBuildingUnit)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, _appointmentNumber);
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::TPA:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    appointmentCombination = HMInsuranceContractCarrierCombination::find(appointmentContract.HMInsuranceContractCarrierCombination);
    
                                    if (appointmentCombination)
                                    {
                                        appointmentTPA = HMTPA::find(appointmentCombination.HMInsuranceTPA);
    
                                        conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                        conValue    = conIns(conValue, i, appointmentTPA.Code);
                                        i++;
                                    }
                                }
                            }
                        }
                        break;
    
                    case HMFinancialDimensionType::CaseType:
    
                        appointmentCase = HMCase::find(appointment.HMCase);
    
                        switch (appointmentCase.HMCaseType)
                        {
                            case HMCaseType::Emergency:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'ER');
                                i++;
                                break;
    
                            case HMCaseType::InPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'IP');
                                i++;
                                break;
    
                            case HMCaseType::OutPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'OP');
                                i++;
                                break;
    
                            default:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'DC');
                                i++;
                                break;
    
                        }
    
                        break;
    
                    case HMFinancialDimensionType::InsuranceBatchNumber:
                        conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                        conValue    = conIns(conValue, i, _batchNumber);
                        i++;
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDimensionContainerFromCaseTrans</Name>
				<Source><![CDATA[
    public void fillDimensionContainerFromCaseTrans(HMCaseTrans _caseTrans)
    {
        InventTable                     inventTable;
        HMPatientChargeEntryLine        chargeEntryLine;
        HMInsuranceCarrierBatchDetails  HMInsuranceCarrierBatchDetails;
        HMInventTable                   hmInventTable;
        HMPatientInsurance              hmPatientInsurance;
        HMInsuranceCarrier              HMInsuranceCarrier;
        HMCCHI                          CCHI;
        date                            batchDate;
    
        if (!i)
        {
            i = 1;
        }
        while select mapping
            where mapping.HMFinancialDimensionType == HMFinancialDimensionType::ServiceCode
                || mapping.HMFinancialDimensionType == HMFinancialDimensionType::ItemGroup
                || mapping.HMFinancialDimensionType == HMFinancialDimensionType::Responsible
                || mapping.HMFinancialDimensionType == HMFinancialDimensionType::InsuranceBatchNumber
                || mapping.HMFinancialDimensionType == HMFinancialDimensionType::CCHI
                || mapping.HMFinancialDimensionType == HMFinancialDimensionType::CaseType
        {
            dimensionAttribute = DimensionAttribute::find(mapping.DimensionAttribute);
    
            if (dimensionAttribute)
            {
                switch (mapping.HMFinancialDimensionType)
                {
                    case HMFinancialDimensionType::ServiceCode:
    
                        if (_caseTrans)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, _caseTrans.ItemId);
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::Responsible:
    
                        if (_caseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Insurance");
                            i++;
                        }
                        else if (_caseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Patient)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Self");
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::ItemGroup:
    
                        if (_caseTrans)
                        {
                            inventTable = InventTable::find(_caseTrans.ItemId);
    
                            if (inventTable)
                            {
                                if (inventTable.itemGroupId())
                                {
                                    conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                    conValue    = conIns(conValue, i, inventTable.itemGroupId());
                                    i++;
                                }
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::InsuranceBatchNumber:
    
                        if (_caseTrans)
                        {
                            select firstOnly chargeEntryLine
                                where chargeEntryLine.HMCaseTrans == _caseTrans.RecId;
    
                            if (chargeEntryLine.HMInsuranceCarrierBatchDetails)
                            {
                                select firstOnly HMInsuranceCarrierBatchDetails
                                    where HMInsuranceCarrierBatchDetails.RecId == chargeEntryLine.HMInsuranceCarrierBatchDetails;
                            }
                            else
                            {
                                HMInsuranceCarrierBatchDetails = this.getBatchDetailsByCase(_caseTrans.HMCase);
                            }
                        }
                        if (HMInsuranceCarrierBatchDetails)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, HMInsuranceCarrierBatchDetails.BatchNumber);
                            i++;
                        }
                        break;
    
                    case HMFinancialDimensionType::CCHI:
    
                        if (_caseTrans)
                        {
                            HMInventTable   = HMInventTable::findByItemId(_caseTrans.ItemId);
    
                            select firstOnly CCHI
                                where CCHI.RecId == hmInventTable.HMCCHI;
    
                            if (CCHI)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, HMInsuranceCarrierBatchDetails.BatchNumber);
                                i++;
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::CaseType:
    
                    switch (HMPatientStatusCaseType::findCaseByPatientStatus(_caseTrans.HMClaimTableSetup_PatientStatus))
                        {
                            case HMCaseType::Emergency:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'ER');
                                i++;
                                break;
    
                            case HMCaseType::InPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'IP');
                                i++;
                                break;
    
                            case HMCaseType::OutPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'OP');
                                i++;
                                break;
    
                            default:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'DC');
                                i++;
                                break;
    
                        }
    
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDimensionContainerFromDDimension</Name>
				<Source><![CDATA[
    public void fillDimensionContainerFromDDimension(RefRecId _defaultDimension, container _financialDimensionEnum = conNull())
    {
        DimensionAttributeValueSetStorage       dimStorage;
        Query                                   query;
        QueryBuildDataSource                    qbds;
        QueryRun                                queryRun;
        int                                     conCount;
        if (!i)
        {
            i = 1;
        }
    
        if (_defaultDimension)
        {
            dimStorage = DimensionAttributeValueSetStorage::find(_defaultDimension);
    
            /*for (i=1 ; i <= dimStorage.elements() ; i++)
            {
                conattr = conIns(conattr, i, (DimensionAttribute::find(dimStorage.getAttributeByIndex(i)).Name));
                conValue = conIns(conValue, i, dimStorage.getDisplayValueByIndex(i));
            }*/
            query = new query();
            qbds = query.addDataSource(tablenum(HMFinancialDimensionMapping));
            //if null initialize with default dimensions
            if(_financialDimensionEnum == conNull())
            {
                qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(HMFinancialDimensionType::BusinessUnit));
                qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(HMFinancialDimensionType::City));
                qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(HMFinancialDimensionType::CostCenter));
                qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(HMFinancialDimensionType::MgtStatAc));
                qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(HMFinancialDimensionType::Site));
            }
            else
            {
                for(conCount = 1 ; concount <= conLen(_financialDimensionEnum) ; conCount++)
                {
                    qbds.addRange(fieldNum(HMFinancialDimensionMapping,HMFinancialDimensionType)).value(SysQuery::value(conPeek(_financialDimensionEnum,conCount)));
                }
            }
            queryRun = new queryRun(query);
            while (queryRun.next())
            {
                mapping = queryRun.get(tableNum(HMFinancialDimensionMapping));
                dimensionAttribute = DimensionAttribute::find(mapping.DimensionAttribute);
    
                if (dimensionAttribute)
                {
                    if (dimStorage.containsDimensionAttribute(mapping.DimensionAttribute))
                    {
                        //   switch (mapping.HMFinancialDimensionType)
                        //  {
                        //   case HMFinancialDimensionType::CostCenter:
                        if(conFind(conAttr,dimensionAttribute.Name) == 0)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, dimStorage.getDisplayValueByDimensionAttribute(mapping.DimensionAttribute));
                        }
                        i++;
    
                        //     break;
                        //  }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDimensionContainerFromERCase</Name>
				<Source><![CDATA[
    public void fillDimensionContainerFromERCase(HMCase _hmcase, HMInsuranceCarrierBatchNumber _batchNumber = '')
    {
        HMOrganizationalBuildingUnit    orgBuildingUnit;
        appointmentOrganizationalUnit   = HMOrganizationalUnit::find(_hmcase.Clinic);
        appointmentPatientInsurance     = HMPatientInsurance::find(_hmcase.HMPatientInsurance);
        appointmentPlan                 = HMInsuranceContractClassOrPlans::find(appointmentPatientInsurance.HMInsuranceContractClassOrPlans);
    
    
        if (!i)
        {
            i = 1;
        }
    
        while select mapping
        {
            dimensionAttribute = DimensionAttribute::find(mapping.DimensionAttribute);
    
            if (dimensionAttribute)
            {
                switch (mapping.HMFinancialDimensionType)
                {
    
                    case HMFinancialDimensionType::CaseNumber:
    
                        appointmentCase = _hmcase;
    
                        if (appointmentCase)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentCase.CaseNo);
                            i++;
                        }
    
                        break;
                    case HMFinancialDimensionType::Responsible:
    
                        if (_hmcase.HMPatientInsurance)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Insurance");
                            i++;
                        }
                        else
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, "Self");
                            i++;
                        }
    
                        break;
                    case HMFinancialDimensionType::InsuranceContract:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                    conValue    = conIns(conValue, i, appointmentContract.HMContractNumber);
                                    i++;
                                }
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::InsuranceId:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    appointmentCombination = HMInsuranceContractCarrierCombination::find(appointmentContract.HMInsuranceContractCarrierCombination);
    
                                    if (appointmentCombination)
                                    {
                                        appointmentCarrier = HMInsuranceCarrier::find(appointmentCombination.HMInsuranceCarrier);
    
                                        if (appointmentCarrier)
                                        {
                                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                            conValue    = conIns(conValue, i, appointmentCarrier.Code);
                                            i++;
                                        }
                                    }
                                }
                            }
                        }
                        break;
    
                    case HMFinancialDimensionType::InsurancePlan:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentPlan.HMContractClassId);
                                i++;
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::PatientId:
                        appointmentPatient  = HMPatient::find(_hmcase.HMPatient);
    
                        if (appointmentPatient)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentPatient.getMRN());
                            i++;
                        }
    
                        break;
    
                    case HMFinancialDimensionType::PaymentType:
                        //        appointment.cus
                        break;
    
                    case HMFinancialDimensionType::Speciality:
    
                        if (appointmentOrganizationalUnit)
                        {
                            appointmentSpecialty = HMSpecialtyCode::find(appointmentOrganizationalUnit.HMSpecialtyCode);
    
                            if (appointmentSpecialty)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentSpecialty.SpecialtyCodeId);
                                i++;
                            }
                        }
    
                        break;
    
                    case HMFinancialDimensionType::TPA:
    
                        if (appointmentPatientInsurance)
                        {
                            if (appointmentPlan)
                            {
                                appointmentContract = HMInsuranceContract::find(appointmentPlan.HMInsuranceContract);
    
                                if (appointmentContract)
                                {
                                    appointmentCombination = HMInsuranceContractCarrierCombination::find(appointmentContract.HMInsuranceContractCarrierCombination);
    
                                    if (appointmentCombination)
                                    {
                                        appointmentTPA = HMTPA::find(appointmentCombination.HMInsuranceTPA);
    
                                        conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                        conValue    = conIns(conValue, i, appointmentTPA.Code);
                                        i++;
                                    }
                                }
                            }
                        }
                        break;
    
                    case HMFinancialDimensionType::CaseType:
    
                    switch (_hmcase.HMCaseType)
                        {
                            case HMCaseType::Emergency:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'ER');
                                i++;
                                break;
    
                            case HMCaseType::InPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'IP');
                                i++;
                                break;
    
                            case HMCaseType::OutPatient:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'OP');
                                i++;
                                break;
    
                            default:
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, 'DC');
                                i++;
                                break;
    
                        }
    
                        break;
                    case HMFinancialDimensionType::InsuranceBatchNumber:
                        conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                        conValue    = conIns(conValue, i, _batchNumber);
                        i++;
                        break;
    
                    case HMFinancialDimensionType::RoomId:
                        select firstonly orgBuildingUnit
                        join Code from appointmentBuildingUnit
                        where appointmentBuildingUnit.recid == orgbuildingUnit.HMBuildingUnit
                        && orgbuildingUnit.HMOrganizationalUnit == _hmcase.Clinic;
                        if (appointmentBuildingUnit)
                        {
                            conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                            conValue    = conIns(conValue, i, appointmentBuildingUnit.Code);
                            i++;
                        }
    
                        break;
                    case HMFinancialDimensionType::DoctorId:
                        if (_hmcase)
                        {
                            appointmentDoctor = HMResourceMaster::find(_hmcase.HMResourceMaster);
    
                            if (appointmentDoctor)
                            {
                                conattr     = conIns(conAttr , i, dimensionAttribute.Name);
                                conValue    = conIns(conValue, i, appointmentDoctor.Code);
                                i++;
                            }
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchDetailsByCase</Name>
				<Source><![CDATA[
    public HMInsuranceCarrierBatchDetails getBatchDetailsByCase(RecId _hmcase)
    {
        date batchDate;
        hmPatientInsurance hmPatientInsurance;
        HMInsuranceCarrier HMInsuranceCarrier;
        HMInsuranceCarrierBatchDetails HMInsuranceCarrierBatchDetails;
        if(!appointmentCase)
        {
            appointmentCase = HMCase::find(_hmcase);
        }
        if(appointmentCase)
        {
            if(appointmentCase.HMCaseType == HMCaseType::Emergency)
            {
                batchDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            else
            {
                batchDate = appointment.AppointmentDate;
            }
            if(batchDate)
            {
                hmPatientInsurance = hmPatientInsurance::find(appointmentCase.HMPatientInsurance);
                if(hmPatientInsurance)
                {
                    select RecId from HMInsuranceCarrier
                    where HMInsuranceCarrier.Code == hmPatientInsurance.InsuranceCarrier;
                    HMInsuranceCarrierBatchDetails = HMInsuranceCarrierBatchDetails::findRecIdByCarrierAndDate(HMInsuranceCarrier.RecId,batchDate);
                }
            }
        }
        return HMInsuranceCarrierBatchDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionFoCustomerInvoice</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionFoCustomerInvoice(HMCaseTrans _caseTrans, RefRecId _defaultDimension = 0)
    {
        DimensionAttributeValueSetStorage       dimStorage;
        HMResourceSchedulingAppointment         caseAppointment;
        HMResourceSchedulingPlanningObject      planningObject;
        HMOrganizationalUnit                    organizationalUnit;
        container                               financialDimContainer;
        HMCase                                  hmCase;
    
        dimensionContainer = [0];
    
        caseAppointment = HMResourceSchedulingAppointment::find(_caseTrans.HMResourceSchedulingAppointment);
        planningObject  = HMResourceSchedulingPlanningObject::find(caseAppointment.HMResourceSchedulingPlanningObject);
        hmCase          = hmCase::find(_caseTrans.HMCase);
    
        //if(hmCase.HMCaseType == HMCaseType::Emergency)
        //{
        organizationalUnit = HMOrganizationalUnit::find(hmCase.Clinic);
        //}
        //else
        //{
        //    if (planningObject)
        //    {
        //        organizationalUnit = HMOrganizationalUnit::find(planningObject.HMOrganizationalUnit);

        //    }
        //}
        if (organizationalUnit)
        {
            //if(_caseTrans.getCaseType() != HMCaseType::Emergency)
            {
                financialDimContainer = conIns(financialDimContainer,1,HMFinancialDimensionType::CostCenter);
                this.fillDimensionContainerFromDDimension(InventTable::find(_caseTrans.ItemId).DefaultDimension,financialDimContainer);
            }
    
            this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
        }
    
        if(caseAppointment)
        {
            this.fillDimensionContainerFromAppointment(caseAppointment.AppointmentNumber);
        }
        else
        {
            this.fillDimensionContainerFromERCase(hmCase::find(_caseTrans.HMCase));
        }
        if(_caseTrans)
        {
            this.fillDimensionContainerFromCaseTrans(_caseTrans);
        }
    
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForAccrueJournal</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForAccrueJournal(HMCaseTrans _caseTrans, RefRecId _defaultDimension = 0)
    {
        DimensionAttributeValueSetStorage       dimStorage;
        HMResourceSchedulingAppointment         caseAppointment;
        HMResourceSchedulingPlanningObject      planningObject;
        HMOrganizationalUnit                    organizationalUnit;
        container                               financialDimContainer;
        HMCase                                  hmCase;
        dimensionContainer = [0];
    
        caseAppointment = HMResourceSchedulingAppointment::find(_caseTrans.HMResourceSchedulingAppointment);
        planningObject  = HMResourceSchedulingPlanningObject::find(caseAppointment.HMResourceSchedulingPlanningObject);
        hmCase          = hmCase::find(_caseTrans.HMCase);
        if(hmCase.HMCaseType == HMCaseType::Emergency || !caseAppointment)
        {
            organizationalUnit = HMOrganizationalUnit::find(hmCase.Clinic);
        }
        else
        {
            if (planningObject)
            {
                organizationalUnit = HMOrganizationalUnit::find(planningObject.HMOrganizationalUnit);
    
            }
        }
        //if(_caseTrans.getCaseType() != HMCaseType::Emergency)
        {
            financialDimContainer = conIns(financialDimContainer,1,HMFinancialDimensionType::CostCenter);
            this.fillDimensionContainerFromDDimension(InventTable::find(_caseTrans.ItemId).DefaultDimension,financialDimContainer);
        }
    
        if (organizationalUnit)
        {
            this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
        }
    
    
        if(hmCase.HMCaseType == HMCaseType::Emergency || !caseAppointment)
        {
            this.fillDimensionContainerFromERCase(hmCase,'');
        }
        else
        {
            if(caseAppointment)
            {
                this.fillDimensionContainerFromAppointment(caseAppointment.AppointmentNumber);
            }
        }
        if(_caseTrans)
        {
            this.fillDimensionContainerFromCaseTrans(_caseTrans);
        }
    
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForAdvanceInsPayment</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForAdvanceInsPayment(RecId _defaultDimension, CustAccount _hmInsuranceCompany, CustAccount _hmTPA, str _batchId)
    {
        DimensionAttributeValueSetStorage       valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionAttributeValueSetStorage       dimStorage;
        HMOrganizationalUnit                    organizationalUnit;
    
        dimensionContainer = [0];
    
        if (_defaultDimension)
        {
            this.fillDimensionContainerFromDDimension(_defaultDimension);
        }
        this.fillDimensionContainerForAdvanceInsPaym(_hmInsuranceCompany,_hmTPA,_batchId);
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForAdvancePayment</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForAdvancePayment(HMAppointmentNumber _appointmentNumber,HMInsuranceCarrierBatchNumber _batchNumber = '')
    {
        DimensionAttributeValueSetStorage       valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionAttributeValueSetStorage       dimStorage;
        HMResourceSchedulingAppointment         appointmentTemp;
        HMResourceSchedulingPlanningObject      planningObject;
        HMOrganizationalUnit                    organizationalUnit;
    
        dimensionContainer = [0];
    
        appointment     = HMResourceSchedulingAppointment::find(HMResourceSchedulingAppointment::findRecIdByAppointmentNum(_appointmentNumber));
        planningObject  = HMResourceSchedulingPlanningObject::find(appointment.HMResourceSchedulingPlanningObject);
    
        if (appointment)
        {
            if (planningObject)
            {
                organizationalUnit = HMOrganizationalUnit::find(planningObject.HMOrganizationalUnit);
    
                if (organizationalUnit)
                {
                    this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
                }
            }
        }
        if(!_batchNumber)
        {
            _batchNumber = this.getBatchDetailsByCase(appointment.HMCase).BatchNumber;
        }
        this.fillDimensionContainerFromAppointment(_appointmentNumber, _batchNumber);
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForAdvancePaymentER</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForAdvancePaymentER(HMCase _hmCase, HMInsuranceCarrierBatchNumber _batchNumber = '')
    {
        DimensionAttributeValueSetStorage       valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionAttributeValueSetStorage       dimStorage;
        HMOrganizationalUnit                    organizationalUnit;
    
        dimensionContainer = [0];
    
        organizationalUnit = HMOrganizationalUnit::find(_hmCase.Clinic);
    
        if (organizationalUnit)
        {
            this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
        }
        if(!_batchNumber)
        {
            _batchNumber = this.getBatchDetailsByCase(_hmCase.RecId).BatchNumber;
        }
        this.fillDimensionContainerFromERCase(_hmCase, _batchNumber);
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForCustInvoiceHeader</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForCustInvoiceHeader(HMCase _hmCase, HMInsuranceCarrierBatchNumber _batchNumber = '')
    {
        DimensionAttributeValueSetStorage       valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionAttributeValueSetStorage       dimStorage;
        HMOrganizationalUnit                    organizationalUnit;
    
        dimensionContainer = [0];
    
        organizationalUnit = HMOrganizationalUnit::find(_hmCase.Clinic);
    
        if (organizationalUnit)
        {
            this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
        }
        //using ER method beccause of same FD's, Can be changed based on CR
        if(!_batchNumber)
        {
            _batchNumber = this.getBatchDetailsByCase(_hmCase.RecId).BatchNumber;
        }
        this.fillDimensionContainerFromERCase(_hmCase, _batchNumber);
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetDefaultDimensionForMovementJournal</Name>
				<Source><![CDATA[
    public RefRecId GetDefaultDimensionForMovementJournal(HMCaseTrans _caseTrans, RefRecId _defaultDimension = 0)
    {
        DimensionAttributeValueSetStorage       dimStorage;
        HMResourceSchedulingAppointment         caseAppointment;
        HMResourceSchedulingPlanningObject      planningObject;
        HMOrganizationalUnit                    organizationalUnit;
        container                               financialDimContainer;
        HMCase                                  hmCase;
        RecId                                   orgUnitRecId;
        dimensionContainer = [0];
    
        /* if (_defaultDimension)
        {
            dimStorage = DimensionAttributeValueSetStorage::find(_defaultDimension);
    
            for (i=1 ; i<= dimStorage.elements() ; i++)
            {
                conattr = conIns(conattr, i, (DimensionAttribute::find(dimStorage.getAttributeByIndex(i)).Name));
                conValue = conIns(conValue, i, dimStorage.getDisplayValueByIndex(i));
            }
        }*/
    
    
        IF(_caseTrans.getCaseType() == HMCaseType::Emergency)
        {
            select Clinic from hmCase
            where hmCase.RecId == _caseTrans.HMCase;
    
            orgUnitRecId = hmCase.Clinic;
        }
        else
        {
            caseAppointment = HMResourceSchedulingAppointment::find(_caseTrans.HMResourceSchedulingAppointment);
            if (caseAppointment)
            {
                planningObject  = HMResourceSchedulingPlanningObject::find(caseAppointment.HMResourceSchedulingPlanningObject);
                orgUnitRecId = planningObject.HMOrganizationalUnit;
            }
        }
    
        //if(_caseTrans.getCaseType() != HMCaseType::Emergency)
        {
            financialDimContainer = conIns(financialDimContainer,1,HMFinancialDimensionType::CostCenter);
            this.fillDimensionContainerFromDDimension(InventTable::find(_caseTrans.ItemId).DefaultDimension,financialDimContainer);
        }
    
        if (orgUnitRecId)
        {
            organizationalUnit = HMOrganizationalUnit::find(orgUnitRecId);
    
            if (organizationalUnit)
            {
                this.fillDimensionContainerFromDDimension(organizationalUnit.DefaultDimensionServiceType);
            }
        }
    
        if(caseAppointment)
        {
            this.fillDimensionContainerFromAppointment(caseAppointment.AppointmentNumber);
        }
        else
        {
            this.fillDimensionContainerFromERCase(hmCase::find(_caseTrans.HMCase));
        }
        this.fillDimensionContainerFromCaseTrans(_caseTrans);
    
    
        return this.insertValuesInDimensionSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValuesInDimensionSet</Name>
				<Source><![CDATA[
    public RefRecId insertValuesInDimensionSet()
    {
        DimensionAttributeValueSetStorage       valueSetStorage = new DimensionAttributeValueSetStorage();
    
        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::findByName(conPeek(conAttr,i));
    
            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }
    
            dimValue = conPeek(conValue,i);
    
            if (dimValue != "")
            {
                // _createIfNotFound is "true". A dimensionAttributeValue record will be created if not found.
                newDepartmentValue = dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue,true, true);
    
                // Add the dimensionAttibuteValue to the default dimension
                valueSetStorage.addItem(newDepartmentValue);
            }
        }
    
        return valueSetStorage.save();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>