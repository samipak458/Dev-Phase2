<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMHTMLClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMHTMLClass
{
    str _resNode;
    resourceNode resNode;
    str rightImgResourcePath,wrongImageResourcePath;
    container filenameLookupFilter;
    boolean modified;
    int getElementDetailsAttempt;
    COM doc;




    System.Text.StringBuilder       StartingHTML;
    System.Text.StringBuilder       ContentHTML;
    int                             ulCounter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBlankLine</Name>
				<Source><![CDATA[
    public void addBlankLine()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<br />');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addContextMenuCSS</Name>
				<Source><![CDATA[
    private void addContextMenuCSS()
    {
    StartingHTML.Append(@'<style type="text/css">
        A {
            font-size:15px;font-family:Calibri;
        }
    
    
        A:link      {}
    
        SPAN{
         font-family:callibri;
        }
        .rcMenuContainer {
            font-family:verdana, arial;
            position: absolute;
            border: 1px solid black;
            background: White;
            padding:2px;
            width:100px;
        }
        .rcMenuItem {
            font-size:11px;
            font-weight:normal;
            padding:3px;
            width:100%;
        }
        .rcMenuItemHover {
            font-size:11px;
            font-weight:normal;
            background:#b7e5fa;
            color:black;
            padding:3px;
        }
        .rcMenuItemText {
            font-size:11px;
            font-weight:normal;
            border:0px;
            padding:2px;
        }
        .rcMenuItemTextExt {
            font-size:11px;
            font-weight:normal;
            border:1px dotted grey;
            padding:2px;
        }
        .rcMenuSeparator{
            color:black;
            height:3px;
        }
        .rcImage {
            padding-right:4px;
        }
        .outerTable
            {
                width: 100%;
                border-collapse: collapse;
            }
        .innerTable
            {
                width: 80%;
                border-collapse: collapse;
            }
        .rigtinntertable
            {
                width: 100%;
                border-collapse: collapse;
            }
        .righttd
        {
            text-align: right;
            font-size: 12px;
            font-family:Calibri;
        }
        .lefttd
        {
    
            font-size: 12px;
            font-family:Calibri;
        }
        .tdheading
        {
            font-size: 12px;
            font-family:Calibri;
            font-weight:bold;
        }
        .headerInfo
        {
            text-align: center;
            font-family:Calibri;
            font-weight:bold;
            font-size: 22px;
        }
        .subHeaderInfo
        {
            text-align: center;
            font-family:Calibri;
            font-weight:bold;
            font-size: 14px;
        }
    </style>');
        StartingHTML.AppendLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addContextMenuOnLoad</Name>
				<Source><![CDATA[
    private void addContextMenuOnLoad()
    {
        StartingHTML.Append(@'<script type="text/javascript">
        var textboxinitvalue = "";
        function onescpress()
        {  debugger;
           var textbox = document.getElementsByTagName("INPUT").item(0);
            if(textbox != null)
            {
           if (window.event.keyCode == 13)
           {
    
             window.external.AddUpdateNotes(textbox.id,textbox.value);
               SaveTextToSpan(textbox.value);
           }
            else if(window.event.keyCode == 27)
            {
                textToSpan();
            }
            }
    
    
    
        };
    
    
        if (document.location.search.indexOf("trigger") > 0) {
            params = document.location.search.replace("?", "").split("=");
            RightContext.menuTriggerEvent = params[1].toUpperCase();
        }
    
        debugger;
    
        // define a menu
        menu1 = { attributes: "attr1,attr2,attr3,cond" ,
    
                  items: [
                         {type:RightContext.TYPE_MENU,
                          text:"Search for [attr2] on Google",
                          url:"http://www.google.com?q=[attr1]" },
    
                         {type:RightContext.TYPE_MENU,
                          text:"The second item in the menu. Will only show if cond eq Y (it is [cond])",
                          requires: ["cond", "Y"],
                          onclick:function() {alert("This is a custom javascript")} },
    
                         {type: RightContext.TYPE_SEPERATOR },
    
                         {type: RightContext.TYPE_TEXT,
                          text: "This is hardcoded, yet dynamic text: attr1=[attr1], attr2=[attr2] and 1 again is [attr1], attr3=[attr3]"} ,
    
                         {type: RightContext.TYPE_TEXT_EXT,
                          url: "external.html"}   ]
                 };
    
    
        // and another menu
        menu2 = { attributes: "x,y" ,
    
                  items: [
                         {type: RightContext.TYPE_TEXT,
                          text: "This is a new menu; menu2! Wow!"} ,
    
                         {type:RightContext.TYPE_MENU,
                          text:"Search for [y] on Yahoo (in new window)",
                          url:"http://search.yahoo.com/search?p=[x]",
                          frame:"_blank"},
    
                         {type:RightContext.TYPE_MENU,
                          text:"Search for [y] on Yahoo (in the frame below)",
                          url:"http://search.yahoo.com/search?p=[x]",
                          frame:"innerFrame"},
    
                         {type: RightContext.TYPE_SEPERATOR },
    
    
                         {type: RightContext.TYPE_TEXT_EXT,
                          url: "external.html"}   ]
                 };
    
        // and yet another menu
        menu3 = { attributes: "a,cond",
    
                  items:  [
                              {type:RightContext.TYPE_MENU,
                           text:"Yes",
                                  requires:["cond", "Y"],
                           onclick:function() {window.external.AlterFinding("[a]")},
                           align:"right" },
                           {type:RightContext.TYPE_MENU,
                           text:"No",
                               requires:["cond", "N"],
                           onclick:function() {window.external.AlterFinding("[a]")} },
                           {type:RightContext.TYPE_MENU,
                           text:"Edit Notes",
                           onclick:function () { spanToText("[a]");} },
                            {type:RightContext.TYPE_MENU,
                           text:"Delete Notes",
                           onclick:function () { window.external.DeleteFinding("[a]")} }
    
    
                          ]
        };
    
    // add menu1 as "one" to the menu collection
    RightContext.addMenu("one", menu1);
    // add menu2 as "two" to the menu collection
    RightContext.addMenu("two", menu2);
    // add menu3 as "actions" to the menu collection
    RightContext.addMenu("actions", menu3);
    // initialize RightContext
    RightContext.initialize();
    
    </script>');
            StartingHTML.AppendLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDivCSS</Name>
				<Source><![CDATA[
    public void addDivCSS(str _tddata, str _description)
    {
    
        ContentHTML.Append(@'<div ' + _tddata + '>' + _description);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImage</Name>
				<Source><![CDATA[
    public void addImage(String255 url)
    {
        //ContentHTML.AppendLine();
        ContentHTML.Append(@'<div><img src="' + url + '" alt="Pulpit rock" width="150" height="100">');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addingParentSpan</Name>
				<Source><![CDATA[
    public void addingParentSpan(str id)
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<span id="' + id + '">');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJavaScriptsAndCSS</Name>
				<Source><![CDATA[
    private void addJavaScriptsAndCSS()
    {
        this.contextMenuJS();
        this.addContextMenuCSS();
        this.addContextMenuOnLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParagraphCSS</Name>
				<Source><![CDATA[
    public void addParagraphCSS(str _tddata, str _description)
    {
    
        ContentHTML.Append(@'<p ' + _tddata + '>' + _description);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpan</Name>
				<Source><![CDATA[
    public void addSpan(str _content,int _size,str _fontWeight,str id = "")
    {
        ContentHTML.AppendLine();
        if(id == "")
        {
            ContentHTML.Append(@'<span style="font-size:'+int2str(_size)+'px;font-family:Calibri;font-weight:'+_fontWeight+';color:Black;">' + _content + '</span>');
        }
        else
        {
            ContentHTML.Append(@'<span id="S - ' + id + '" onclick="spanToText(\'S - '+id+'\')" style="font-size:'+int2str(_size)+'px;font-family:Calibri;font-weight:'+_fontWeight+';color:Black;">' + _content+ '</span>');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingPendingUL</Name>
				<Source><![CDATA[
    public void closingPendingUL(int _a)
    {
        int counter = ulCounter;
        counter = counter + _a;
        while(counter != 0 )
        {
            ContentHTML.AppendLine();
            ContentHTML.Append('</ul>');
            counter--;
            ulCounter--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenuJS</Name>
				<Source><![CDATA[
    private void contextMenuJS()
    {//if (document.getElementsByTagName("INPUT").length > 0) {
        StartingHTML.Append(@'<script type="text/javascript">');
        StartingHTML.Append(@'
        var RightContext = {
        //some final vars:
        TYPE_MENU: 0,       // menu item
        TYPE_TEXT: 1,       // inline text (non-mutable hard coded)
        TYPE_TEXT_EXT: 2,   // external text (retrived via rpc call)
        TYPE_SEPERATOR:3,   // separator line
        TYPE_ATTRIBUTES:4,  // menu attributes.
    
        // some simple browser detection
        browser: null,
    
        // set the event to trigger the menus: RIGHT,LEFT (right/left click) or mouse MOVE
        menuTriggerEvent: "RIGHT",
    
        // object to hold temp mouse position
        mousePos: {x:0, y:0},
    
        // offset for menu from mouse pointer
        rightOffset: 5,
    
        // kill menu timeout - sets the timeout from mouse out to menu dissapearing
        killMenuTimeout: 25,
    
        // type of html tags that can have context menus. You can edit this to
        // allow more tags into the party.
        allowedContexts: ["a","div","span","input"],
    
        // object to hold a collection of menus indexed by name
        menuCollection: new Object(),
    
        // the currently visible context menu DIV element
        contextMenu: null,
    
        // some state machine: is the menu showing (LEFT), and should killing it be aborted (MOVE)
        isShowing: false,
        abortKill: false,
    
        // image cache
        images: new Object(),
    
        // var to hold external requests
        req: null,
    
        // initialize RightContext object
        initialize: function () {
            this.browser = RightContext.detectBrowser();
            this.attachContextEvents();
        },// adds a menu to the menuCollection
        addMenu: function (n, m) {
            this.menuCollection[n] = m;
        },
    
        // return a menu from the menu collection
        getMenu: function (n) {
            return this.menuCollection[n];
        },');
    
    
        StartingHTML.Append(@'// loop all context allowed tags in the document and attach menu events to
        // those that contain the menu attribute
        attachContextEvents: function () {
            var tagContext, thisTag;
            for (var t=0; t<this.allowedContexts.length; t++) {
                tags = document.getElementsByTagName(this.allowedContexts[t]);
    
                for (e=0; e<tags.length; e++) {
                    thisTag = tags[e];
                    tagContext = thisTag.getAttribute("context");
                    if (tagContext!=null && tagContext != "undefined") {
                        this.bindEvent("mousemove", tags[e], function(e) { return RightContext.locateMousePos(e); });
                        if (this.menuTriggerEvent=="RIGHT") {
                            tags[e].oncontextmenu = function() {   return RightContext.render(this);   };
                        } else if (this.menuTriggerEvent=="LEFT") {
                            //this.bindEvent("click", tags[e],  function() {  return RightContext.render(this, tagContext);  });
                            tags[e].onclick = function(e) {
                                                            RightContext.killBubble(e);
                                                            return RightContext.render(this)
                                                        };
                            tags[e].onmouseout = function(e) { setTimeout("RightContext.killMenu()", 5000);};
                        } else if (this.menuTriggerEvent=="MOVE") {
                            if (!document.all) {
                                this.bindEvent("mouseover", tags[e], function(e) { RightContext.locateMousePos(e); return RightContext.render(this); });
                                this.bindEvent("mouseout",  tags[e], function(e) { setTimeout("RightContext.killMenu()", RightContext.killMenuTimeout); });
                            } else {
                                tags[e].onmouseover =  function(e) { RightContext.locateMousePos(e); return RightContext.render(this); };
                                tags[e].onmouseout = function(e) { setTimeout("RightContext.killMenu()", RightContext.killMenuTimeout); };
                            }
                        }
                    }
                }
            }
        },');
    
        StartingHTML.Append(@'killBubble: function(e) {
            if (!e) var e = window.event;
            e.cancelBubble = true;
            if (e.stopPropagation) e.stopPropagation();
        },
    
        // binds an event handler to an object
        bindEvent: function (evt, obj, act, bubble) {
            if (!bubble) bubble = false;
            if (obj.addEventListener) {
                obj.addEventListener(evt, act, bubble);
            } else if (obj.attachEvent) {
                obj.attachEvent("on"+evt, act);
            }
        },
        ');
    
        StartingHTML.Append(@'render: function (caller, name) {
            var url, title;
            // if name was not specified, grab it from the caller
            // v0.2 - changed to getAttribute (used direct nodeValue access before my mistake). pointed out by JDG.
            var name = name || caller.getAttribute("context");
    
            // get the requested menu
            var thisMenu = this.getMenu(name);
    
            // extracts this menus attributes list and items
            var attributes = thisMenu["attributes"].split(",");
            var items = thisMenu.items;
    
            // constructs a map from the callers attributes
            var objMap = this.buildAttributeMap(attributes, caller);
    
            // start building the menu itself, but first remove menu if visible
            this.killMenu();
            this.buildMenu(caller);
    
            // create a table to build the menu items in
            tbl = document.createElement("TABLE");
            tbl.id = "rcRightContextTable";
    
            // loop the menu items and render each according to its type
            for (var m=0; m<items.length; m++) {
                switch (items[m]["type"]) {
                    case this.TYPE_MENU:
                        // add the menu item
                        if (this.isDisplayed(items[m], objMap)) {
                            this.addMenuItem(items[m], objMap, tbl);
                        }
                        break;
    
                    case this.TYPE_TEXT:
                        // add fixed text
                        text = this.transform(items[m]["text"], objMap);
                        cell = this.addTableCell(tbl, "rcMenuItemText", text);
                        break;
    
                    case this.TYPE_TEXT_EXT:
                        cell = this.addTableCell(tbl, "rcMenuItemTextExt");
                        url = this.transform(items[m]["url"], objMap);
                        this.request(url, function() { if (RightContext.req.readyState == 4 && RightContext.req.status == 200) { cell.innerHTML = RightContext.req.responseText } });
                        break;
    
                    case this.TYPE_SEPERATOR:
                        cell = this.addTableCell(tbl);
                        cell.appendChild(this.getSeparator());
                        break;
    
                    default:
                        // no default behaviour
                        break;
                }
    
            }');
    
        StartingHTML.Append(@'this.contextMenu.appendChild(tbl);
    
            this.repositionMenu();
    
            if (this.menuTriggerEvent=="MOVE") {
                this.bindEvent("mouseout",  this.contextMenu, function(e) { RightContext.abortKill = false; setTimeout("RightContext.killMenu()", RightContext.killMenuTimeout); });
                this.bindEvent("mouseover", this.contextMenu, function(e) { RightContext.abortKill = true;  });
            } else if (this.menuTriggerEvent=="LEFT" || this.menuTriggerEvent=="RIGHT") {
                this.bindEvent("click", document.body, function(e) { setTimeout("RightContext.killMenu();", RightContext.killMenuTimeout); }, false);
            }
            this.isShowing = true;
    
            return false;
        },
    
        isDisplayed : function(item, objMap) {
            var reqVar, reqVal;
            var shown = true; // by default all items are shown, unless they require something
            // lets make sure this item does not require any condition to be true in order to display
            if (item["requires"] != null && item["requires"] != "undefined") {
                // yep, this one has a requirement...
                reqVar = item["requires"][0];
                reqVal = item["requires"][1];
                if (objMap[reqVar] != null && objMap[reqVar] != "undefined") {
                    // if the condition is not met, do not show this item.
                    if (objMap[reqVar] != reqVal) {
                        shown = false;
                    }
                } else {
                    // if the condition is not defined do not show the item
                    shown = false;
                }
            }
            return shown;
        },
    
        // check if the menu goes outside the window boundries and adjust its
        // location if so
        repositionMenu: function() {
            var mPos = this.findPosition(this.contextMenu);
            var mDim = this.getDimensions(this.contextMenu);
            var winHeight = this.getWindowHeight(); // window.innerHeight || document.body.clientHeight;
            var winWidth = window.innerWidth || document.body.clientWidth;
            if (mPos.y + mDim.height > winHeight-30 ) {
                this.position(this.contextMenu, mPos.x, mPos.y - mDim.height);
                mPos = this.findPosition(this.contextMenu);
            }
            if (mPos.x + mDim.width > winWidth - 30 ) {
                this.position(this.contextMenu, mPos.x-mDim.width, mPos.y);
            }
        },
    
        // returns an HR sepearator which uses the rcMenuSeparator style
        getSeparator: function () {
            var sep = document.createElement("HR");
            sep.className = "rcMenuSeparator";
            return sep;
        },
    
        // adds a table cell to the provided table and returns it.
        // attached a class if provided and initializes the cell with some content
        // where applicable
        addTableCell: function (table, className, content) {
            row = table.insertRow(-1);
            cell = row.insertCell(0);
            if (className) {
                cell.className = className;
                if (content) {
                    cell.innerHTML = content;
                }
            }
            return cell;
        },
    
        // adds a menu item to the provided table. transforms all data as defined
        // in the objMap argument
        addMenuItem: function (item, objMap, tbl) {
            var title = this.transform(item["text"], objMap);
            var url, frame, img, imgAlign, itemSrc, tmp, itemAction;
            var cell = this.addTableCell(tbl, "rcMenuItem", title);
            cell.style.cursor = document.all?"hand":"pointer";
            this.bindEvent("mouseover", cell, function(e) { cell.className="rcMenuItemHover";});
            this.bindEvent("mouseout",  cell, function(e) { cell.className="rcMenuItem";     });
    
            // deal with image if applicable
            if (item["image"]!=null && item["image"]!="undefined") {
                // get image alignment or default to absmiddle
                imgAlign = (item["align"]!=null && item["align"]!="undefined") ? item["align"] : "absmiddle";
                // load the image from the cache, or from disk (and then cache it)
                if (this.images[item["image"]] != null && this.images[item["image"]] != "undefined") {
                    img = this.images[item["image"]];
                } else {
                    img = this.loadImage(item["image"]);
                }
                // set image alignment
                img.align=imgAlign;
                // insert the image as first child of the cell
                cell.insertBefore(this.images[item["image"]], cell.childNodes[0]);
            }
    
            if (item["url"]!=null && item["url"] != "undefined") {
                url   = this.transform(item["url"],  objMap);
                frame = false;
                if (item["frame"] != null && item["frame"] != "undefined") {
                    frame = item["frame"];
                }
                cell.onclick = function () { RightContext.redirect(url, frame); }
            } else {
                // we first need to find out if the event handler contains a potential
                // tag. if so, we grab its source, transform it and re-evaluate it.
                // if this fails, the value reverts back to its original function
                itemAction = item["onclick"];
                try {
    
                    itemSrc = item["onclick"].toString();
                    if (itemSrc.indexOf("[")>-1) {
                            itemSrc = this.transform(itemSrc, objMap);
                            eval("itemAction = " + itemSrc);
                    }
    
                } catch (e) {
                    // nothing...
                }
    
                // set the cell onclick event handler.
                cell.onclick=itemAction;
            }
    
        },
        ');
    
        StartingHTML.Append(@'transform: function (str, map) {
            var tStr, tmp;
            tStr = str;
            for (p in map) {
                tmp = "[" + p + "]";
                while (tStr.indexOf(tmp) > -1) {
                    tStr = tStr.replace(tmp, map[p]);
                }
            }
            return tStr;
        },
    
        // returns the menu"s attributes collection that will be used to construct
        // the transformation map
        getMenuAttributeArray: function (menu) {
            for (var i=0; i<menu.length; i++) {
                if (menu[i].type == this.TYPE_ATTRIBUTES) {
                    return menu[i]["attributes"].split(",");
                }
            }
            return new Array(0);
        },
    
        // construct the transformation map for a given object based on the tags in
        // attribs
        buildAttributeMap: function (attribs, obj) {
            var thisAttr, thisValue;
            var attrMap = new Object();
    
            for (var a=0; a<attribs.length; a++) {
                thisAttr = attribs[a];
                thisValue = obj.getAttribute(attribs[a]);
                if (typeof thisValue != "undefined") {
                    attrMap[thisAttr] = thisValue;
                }
            }
            return attrMap;
        },
    
        // find the position of an element on the screen and returns an array of [x,y]
        findPosition: function (obj) {
            var lft = 0;
            var top = 0;
            if (obj.offsetParent) {
                lft = obj.offsetLeft
                top = obj.offsetTop
                while (obj = obj.offsetParent) {
                    lft += obj.offsetLeft
                    top += obj.offsetTop
                }
            }
            return {x:lft,y:top};
        },
    
        getWindowHeight: function() {
            if (this.browser.khtml || this.browser.safari) {
                return this.innerHeight;
            } else if (this.browser.opera) {
                return document.body.clientHeight;
            } else {
                return document.documentElement.clientHeight;
            }
        },
    
        // Returns the dimensions of an element on screen. Lifted from the wonderful
        // prototype framework
        getDimensions: function(obj) {
            //var display = obj.getStyle("display");
            //if (display != "none" && display != null) // Safari bug
            //  return {width: element.offsetWidth, height: element.offsetHeight};
    
            // All *Width and *Height properties give 0 on elements with display none,
            // so enable the element temporarily
            var objStyle = obj.style;
            var originalVisibility = objStyle.visibility;
            var originalPosition = objStyle.position;
            var originalDisplay = objStyle.display;
            objStyle.visibility = "hidden";
            objStyle.position = "absolute";
            objStyle.display = "block";
            var originalWidth = obj.clientWidth;
            var originalHeight = obj.clientHeight;
            objStyle.display = originalDisplay;
            objStyle.position = originalPosition;
            objStyle.visibility = originalVisibility;
            return {width: originalWidth, height: originalHeight};
        },
    
        // positions object at x,y coordinates
        // v0.2 - added px to the position coordinate (provided by JDG)
        position: function (obj, x, y) {
            obj.style.left = x + "px";
            obj.style.top  = y + "px";
        },
    
        // builds a menu for parent object
        buildMenu: function (parent) {
            var pos, dim, tbl;
            //document.onmousemove  = RightContext.getMousePos;
            this.contextMenu = document.createElement("DIV");
            this.contextMenu.id = "rcRightContext";
            this.contextMenu.className = "rcMenuContainer";
    
            // get the position and dimensions of the parent
            pos = this.findPosition(parent);
            dim = this.getDimensions(parent);
    
            // position the container to the bottom right of the element.
            this.position (this.contextMenu, this.mousePos.x + this.rightOffset, pos.y+dim.height);
    
            // set some event handlers
            // if the menu is triggered by a right click, disable the right click on the menu itself
            if (this.menuTriggerEvent == "RIGHT") {
                this.contextMenu.oncontextmenu = function () { return false; };
            }
    
            // add the container to the body of the document
            document.body.appendChild(this.contextMenu);
    
        },
    
    
        // kills the currently visible context menu
        killMenu: function () {
            if (!this.abortKill && this.isShowing) {
            try {
                rc = this.contextMenu;
                document.body.removeChild(rc);
            } catch (e) {
                // already removed?
            }
            this.contextMenu = null;
            this.isShowing = false;
            this.abortKill = false;
            }
        },
    
        // locate the mouse cursor position
        locateMousePos: function(e) {
            var posx = 0, posy =0;
            if(e==null) e=window.event;
            if(e.pageX || e.pageY) {
                posx=e.pageX; posy=e.pageY;
            } else if (e.clientX || e.clientY) {
                if(document.documentElement.scrollTop){
                    posx=e.clientX+document.documentElement.scrollLeft;
                    posy=e.clientY+document.documentElement.scrollTop;
                } else {
                    posx=e.clientX+document.body.scrollLeft;
                    posy=e.clientY+document.body.scrollTop;
                }
            }
            this.mousePos = {x:posx , y:posy};
    
        },
    
        // redirects the browser to given url
        // if frame!=false, it will open in provided frame (or new win if _blank)
        redirect: function (u, frame) {
            if (!frame) {
                document.location = u;
            } else {
                if (frame=="_blank") {
                    w = window.open(u, "w");
                } else {
                    window.frames[frame].document.location = u;
                }
            }
        },
    
        // performs a request - ajax style
        request: function (url, callBack) {
            if (window.XMLHttpRequest) { // native XMLHttpRequest
                this.req = new XMLHttpRequest();
                this.req.onreadystatechange =  callBack;
                this.req.open("GET", url, true);
                this.req.send(null);
            } else if (window.ActiveXObject) { // The M$ "standard"
                this.req = new ActiveXObject("Microsoft.XMLHTTP");
                if (this.req) {
                    this.req.onreadystatechange =   callBack;
                    this.req.open("GET", url, true);
                    this.req.send();
                }
            }
        },
    
        loadImage: function (url) {
            var img = new Image();
            img.src = url;
            img.className = "rcImage";
            this.images[url] = img;
            return img;
        },
    
        detectBrowser: function() {
            var ua = navigator.userAgent.toUpperCase();
            var up = navigator.platform.toUpperCase().substr(0,3);
            var isSafari  = (ua.indexOf("SAFARI"   )>0);
            var isKHTML   = (ua.indexOf("KONQUEROR")>0 || isSafari);
            var isFirefox = (ua.indexOf("FIREFOX"  )>0);
            var isOpera   = (ua.indexOf("OPERA"    )>=0);
            return { safari: isSafari, khtml: isKHTML, opera: isOpera, firefox: isFirefox, platform: up }
        }
    
    };');
            StartingHTML.Append('</script>');
            StartingHTML.AppendLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ending_StartingHtml</Name>
				<Source><![CDATA[
    private void ending_StartingHtml()
    {
        StartingHTML.AppendLine();
        this.addContextMenuOnLoad();
        StartingHTML.AppendLine();
        StartingHTML.Append(@'</head></body>');
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingAnchor</Name>
				<Source><![CDATA[
    public void endingAnchor()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append('</a>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingDiv</Name>
				<Source><![CDATA[
    public void endingDiv()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</div>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingLI</Name>
				<Source><![CDATA[
    public void endingLI()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</li>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingParagraph</Name>
				<Source><![CDATA[
    public void endingParagraph()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</p>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingSpan</Name>
				<Source><![CDATA[
    public void endingSpan()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</span>');
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingUL</Name>
				<Source><![CDATA[
    public void endingUL()
    {
        ContentHTML.AppendLine();
        ulCounter--;
        ContentHTML.Append(@'</ul>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTable</Name>
				<Source><![CDATA[
    public void endTable()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</table>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endTableCell</Name>
				<Source><![CDATA[
    public void endTableCell()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</td>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>endtableRow</Name>
				<Source><![CDATA[
    public void endtableRow()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'</tr>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstHeadingSpan</Name>
				<Source><![CDATA[
    public void firstHeadingSpan(str _content)
    {
    
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<span style="font-size:18px; font-weight:bold; font-family:Calibri;color:Black">' + _content);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHTML</Name>
				<Source><![CDATA[
    public System.String getHTML()
    {
        return StartingHTML.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadhrefJavaScript</Name>
				<Source><![CDATA[
    private void loadhrefJavaScript()
    {
        StartingHTML.Append(@'<script type="text/javascript">
        function loadhrefJavaScript(id){
            debugger;
    
    
        }
        </script>');
    
        //window.location=document.getElementById('foo').href;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergingHTML</Name>
				<Source><![CDATA[
    public void mergingHTML()
    {
        StartingHTML.Append(ContentHTML);
        this.ending_StartingHtml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    
    
        StartingHTML = new System.Text.StringBuilder();
        ContentHTML = new System.Text.StringBuilder();
    
        this.setSONotesRightImgPath();
        this.setSONotesWrongImgPath();
    
        StartingHTML.Append(@'<!doctype html><!-- saved from url=(0023)http://www.contoso.com/ -->');
        StartingHTML.Append(@'<html  oncontextmenu="return false" xmlns="http://www.w3.org/1999/xhtml"><head oncontextmenu="return false";><meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>Untitled</title>');
        //StartingHTML.Append(@'.paragraph { margin: 0px 0px 12px 0px;text-align: left;text-indent: 0pt;padding: 0px 0px 0px 0px; } ');
        //StartingHTML.Append(@'heading1 { font-family: &#39; Verdana     &#39; ;font-style: Normal;font-weight: normal;font-size: 16px;color: #000000; } ');
        //StartingHTML.Append(@'.subheading { font-family: &#39; Verdana     &#39; ;font-style: Normal;font-weight: normal;font-size: 16px;color: #000000; } ');
        //StartingHTML.Append(@'.text { font-family: &#39; Verdana     &#39; ;font-style: Normal;font-weight: normal;font-size: 16px;color: #000000; } ');
        StartingHTML.AppendLine();
            this.spanToTextJS();
            StartingHTML.AppendLine();
            this.contextMenuJS();
            //oncontextmenu="return false"
    
    
            StartingHTML.AppendLine();
            this.addContextMenuCSS();
            StartingHTML.AppendLine();
            this.textBoxExpandJS();
            StartingHTML.AppendLine();
            this.textToSpanJS();
            StartingHTML.AppendLine();
            this.refreshNotesJavaScript();
            StartingHTML.AppendLine();
            this.loadhrefJavaScript();
            StartingHTML.AppendLine();
            this.SavetextToSpanJS();
            StartingHTML.AppendLine();
            StartingHTML.Append(@'<body onKeyPress="onescpress()">');
            StartingHTML.AppendLine();
    
    
            //this.addJavaScriptsAndCSS();
            ulCounter = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalSpan</Name>
				<Source><![CDATA[
    public void normalSpan(str _content,str id = "")
    {
        ContentHTML.AppendLine();
        if(id == "")
        {
            ContentHTML.Append(@'<span style="font-size:15px;font-family:Calibri;color:Black">' + _content);
        }
        else
        {
            ContentHTML.Append(@'<span id="S - ' + id + '" onclick="spanToText(\'S - '+id+'\')" style="font-size:15px;font-family:Calibri;color:Black">' + _content);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshNotesJavaScript</Name>
				<Source><![CDATA[
    private void refreshNotesJavaScript()
    {
        StartingHTML.Append(@'<script type="text/javascript">
        function refreshSpan(notesid,cond,content){
            debugger;
        var notesspan = document.getElementById("Parent S - " + notesid);
        var newHTML = ');
        StartingHTML.Append('\'');
    
    
        StartingHTML.Append('<a href="#');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + notesid + ');
        StartingHTML.Append('\'');
        StartingHTML.Append(@'" id="');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + notesid + ');
        StartingHTML.Append('\'"');
        StartingHTML.Append(' onclick="return false"');
        ////StartingHTML.Append('\'');
        //StartingHTML.Append('\\\'\'');
        //StartingHTML.Append(@' + notesid + ');
        //StartingHTML.Append('\'\\\'');
        ////StartingHTML.Append('\'');
        //StartingHTML.Append(')"');
        StartingHTML.Append(' context="actions" a="S - ');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + notesid + ');
        StartingHTML.Append('\'');
        StartingHTML.Append('" cond = "');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + cond + ');
        StartingHTML.Append('\'');
        StartingHTML.Append('">\'');
        StartingHTML.Append(' + content + ');
        StartingHTML.Append('\' </a>');
        StartingHTML.Append('\'');
            //StartingHTML.Append('\'');
        //StartingHTML.Append(@' + textbox.id + ');
        //StartingHTML.Append('\'');
        StartingHTML.Append(';');
        StartingHTML.AppendLine();
            StartingHTML.Append('var span = document.getElementById("S - " + notesid);');
            StartingHTML.Append(@'if(span.value == "" || span.value == null)
            {
                newHTML = newHTML + "<span>&nbsp</span>";
            }');
        StartingHTML.Append(@'document.getElementById("Parent S - " + notesid).innerHTML = newHTML; RightContext.addMenu("actions", menu3);
        // initialize RightContext
        RightContext.initialize();');
            StartingHTML.Append(@'}');
        StartingHTML.Append(@'</script>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>SavetextToSpanJS</Name>
				<Source><![CDATA[
    private void SavetextToSpanJS()
    {
        StartingHTML.Append(@'<script type="text/javascript">
        function SaveTextToSpan(text){
            debugger;
        var textbox = document.getElementsByTagName("INPUT").item(0);
        var str = textbox.id;
        var strvalue = textbox.value;
        var strArray = new Array();
        strArray = str.split("-",2);
        str = strArray[1];
        str = str.replace(" ","");
        var anchorvalue = document.getElementById(str).innerHTML;
        if(anchorvalue.charAt(anchorvalue.length-2) == "." && textbox.value!="")
        {
             var indexToReplace = anchorvalue.length-2;
             var stringToPutIn= "";
             var temp = anchorvalue;
             var startString = temp.substr(0, indexToReplace);
             var endString = temp.substring(indexToReplace+1);
             anchorvalue = startString+stringToPutIn+endString;
    
    
        }
        if(text.charAt(text.length-1) != "." && text!="")
        {
                text = text + ".";
        }
    
        if(text == "")
            {
                if(anchorvalue.charAt(anchorvalue.length-2) != ".")
                {
                    var indexToReplace = anchorvalue.length-1;
                    var stringToPutIn= ".";
                    var temp = anchorvalue;
                    var startString = temp.substr(0, indexToReplace);
                    var endString = temp.substring(indexToReplace+1);
                    anchorvalue = startString+stringToPutIn+endString;
                }
                else
                {
                    var indexToReplace = anchorvalue.length-1;
                    var stringToPutIn= "";
                    var temp = anchorvalue;
                    var startString = temp.substr(0, indexToReplace);
                    var endString = temp.substring(indexToReplace+1);
                    anchorvalue = startString+stringToPutIn+endString;
                    var indexToReplace = anchorvalue.length;
                    var stringToPutIn= "";
                    var temp = anchorvalue;
                    var startString = temp.substr(0, indexToReplace);
                    var endString = temp.substring(indexToReplace+1);
                    anchorvalue = startString+stringToPutIn+endString;
                }
            }
        document.getElementById(str).innerHTML = anchorvalue;
        var newHTML = ');
        StartingHTML.Append('\'');
        StartingHTML.Append('<span id=');
        StartingHTML.Append('\\\'\'');
        StartingHTML.Append(@' + textbox.id + ');
        StartingHTML.Append('\'\\\'');
        StartingHTML.Append(@'onclick="spanToText(');
        StartingHTML.Append('\\\'\'');
        StartingHTML.Append(@' + textbox.id + ');
        StartingHTML.Append('\'\\\'');
    
            //StartingHTML.Append('\'');
        //StartingHTML.Append(@' + textbox.id + ');
        //StartingHTML.Append('\'');
        StartingHTML.Append(@')" style="font-size:15px;font-family:Calibri;color:Black">');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + text + ');
        StartingHTML.Append('\'');
        StartingHTML.Append(@'</span>');
    
        StartingHTML.Append('\';');
            StartingHTML.Append(@'newHTML = newHTML + "<span>&nbsp</span>"');
        StartingHTML.AppendLine();
        StartingHTML.Append(@'document.getElementById("ParentNotes " + textbox.id).innerHTML = newHTML;');
            StartingHTML.Append(@'}');
        StartingHTML.Append(@'</script>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondHeadingSpan</Name>
				<Source><![CDATA[
    public void secondHeadingSpan(str _content,int _size = 0)
    {
        ContentHTML.AppendLine();
        if(_size == 0)
        {
            ContentHTML.Append(@'<span style="font-size:15px; font-family:Calibri;color:Black;font-weight:bold;  ">' + _content);
        }
        else
        {
            ContentHTML.Append(@'<span style="font-size:'+int2str(_size)+'px; font-family:Calibri;color:Black;font-weight:bold;  ">' + _content);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSONotesRightImgPath</Name>
				<Source><![CDATA[
    private void setSONotesRightImgPath()
    {
        #AOT
        TreeNode resourcesNode;
        container dataContainer;
        resourcesNode = infolog.findNode(#ResourcesPath);
        if (resourcesNode)
        {
            //TODO: cannot implicitly convert TreeNode into ResourceNode
            //resNode = resourcesNode.AOTfindChild('HMSONotesRight_png');
            resNode.AOTload();
            dataContainer = SysResource::getResourceNodeData(resNode);
            if (conlen(dataContainer))
            {
                rightImgResourcePath = SysResource::saveToTempFile(resNode);
                resNode.AOTload();
                rightImgResourcePath = strReplace(rightImgResourcePath,@'\',@'\\');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSONotesWrongImgPath</Name>
				<Source><![CDATA[
    private void setSONotesWrongImgPath()
    {
        #AOT
        TreeNode resourcesNode;
        container dataContainer;
        resourcesNode = infolog.findNode(#ResourcesPath);
        if (resourcesNode)
        {
            //TODO: Cannot implicitly convert from type 'TreeNode' to type 'resourceNode'
            //resNode = resourcesNode.AOTfindChild('HMSONotesWrong_png');
            resNode.AOTload();
            dataContainer = SysResource::getResourceNodeData(resNode);
            if (conlen(dataContainer))
            {
                wrongImageResourcePath= SysResource::saveToTempFile(resNode);
                resNode.AOTload();
                wrongImageResourcePath = strReplace(wrongImageResourcePath,@'\',@'\\');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>spanToTextJS</Name>
				<Source><![CDATA[
    private void spanToTextJS()
    {
        StartingHTML.Append(@'<script type="text/javascript">');
    
        StartingHTML.Append(@'function spanToText(spanid) {
            debugger;
            if (document.getElementsByTagName("INPUT").length == 0) {
            if (document.getElementById(spanid).tagName == "SPAN") {
                var oldHTML = document.getElementById(spanid).innerHTML;
                var newstr = oldHTML.substring(0,oldHTML.length-2);
                textboxinitvalue = newstr;
    
                textboxinitvalue = textboxinitvalue + ". ";
                var newHTML = ');
                StartingHTML.Append('\'');
                StartingHTML.Append(@'<span style="color:Gray;">[</span><input onLoad="boxexpand()" onKeypress="boxexpand()" name="thebox" type="text" id=');
                StartingHTML.Append('"\'');
                StartingHTML.Append(@' + spanid + ');
                StartingHTML.Append('\'"');
                StartingHTML.Append('style=" color:Black;font-size:15px; font-family:Calibri; border:0" value="');
                StartingHTML.Append('\'');
                StartingHTML.Append(@' + newstr + ');
                StartingHTML.Append('\'');
                StartingHTML.Append(@'"></input><a style="text-decoration:none"');
                StartingHTML.Append('href="javascript:window.external.AddUpdateNotes(');
                StartingHTML.Append('\\\'\'');
                StartingHTML.Append(@' + spanid + ');
                StartingHTML.Append('\'\\\'');
                StartingHTML.Append(@',document.getElementById(');
                StartingHTML.Append('\\\'\'');
                StartingHTML.Append(@' + spanid + ');
                StartingHTML.Append('\'\\\'');
                StartingHTML.Append(@').value);" ');
                StartingHTML.Append(@'value="Done" ><img align="middle" BORDER="0" src="' + rightImgResourcePath) ;
                StartingHTML.Append(@'" width="12" height="12"/> </a>  ');
    
                StartingHTML.Append(@' <a href="javascript:textToSpan();" ><img align="middle" BORDER="0" src="' + wrongImageResourcePath + @'" width="12" height="12"/></a><span style="color:Gray;">]</span>&nbsp');
                StartingHTML.Append('\'');
                StartingHTML.Append(';');
                StartingHTML.AppendLine();
                StartingHTML.Append(@'document.getElementById("ParentNotes " + spanid).innerHTML = newHTML;
    
                var txtBox=document.getElementById(spanid);
    
            if (txtBox!=null ) {txtBox.focus();txtBox.value=txtBox.value;boxexpand();}
                }
        }} ');
        StartingHTML.Append(@'</script>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingAnchor</Name>
				<Source><![CDATA[
    public void startingAnchor(str _content, str id = "",str cond = "",boolean Hyperlink = true)
    {
        //ContentHTML.Append('<a href="#' + id +'" id="' + id + '" context="actions" a="S - ' + id + '" cond="' + cond + '">' + _content);
        if(Hyperlink)
        {
            ContentHTML.Append('<a href="#' + id +'" id="' + id + '" onclick="javascript:window.external.SelectTreeViewItem(\'' + id + '\')"  context="actions" a="S - ' + id + '" cond="' + cond + '">' + _content);
        }
        else
        {
            ContentHTML.Append('<a href="#' + id +'" id="' + id + '" context="actions" a="S - ' + id + '" cond="' + cond + '">' + _content);
        }
        ContentHTML.AppendLine();
        //ContentHTML.Append('<a href="javascript:window.external.SelectTreeViewItem(\'' + id + '\')" context="actions" a="S - ' + id + '" cond="' + cond + '">' + _content);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingDiv</Name>
				<Source><![CDATA[
    public void startingDiv(int _padding = 0)
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<div style="padding-left:'+int2str(_padding)+'px;">');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingLI</Name>
				<Source><![CDATA[
    public void startingLI()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<li>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingParagraph</Name>
				<Source><![CDATA[
    public void startingParagraph()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<p>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingUL</Name>
				<Source><![CDATA[
    public void startingUL(str type = "",int _padding = 0)
    {
        ContentHTML.AppendLine();
    
        if(_padding == 0)
        {
            if(type == 'Heading')
            {
                ContentHTML.Append(@'<ul start="1" style="list-style-type:none;margin-left:0;";>');
            }
            else
            {
                ContentHTML.Append(@'<ul start="1" style="list-style-type:none;";>');
            }
        }
        else
        {
            if(type == 'Heading')
            {
                ContentHTML.Append(@'<ul start="1" style="list-style-type:none;margin-left:0;padding-left:'+int2str(_padding)+'px;margin-top:0px";>');
            }
            else
            {
                ContentHTML.Append(@'<ul start="1" style="list-style-type:none;";>');
            }
        }
        ulCounter++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTable</Name>
				<Source><![CDATA[
    public void startTable()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<table style="border-width:1px;border-style:solid;border-collapse:collapse;border-color:black;">');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTableBlankCell</Name>
				<Source><![CDATA[
    public void startTableBlankCell(str _tddata = "", str _description = "")
    {
        ContentHTML.Append(@'<td ' + _tddata + '>' + _description);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTableCell</Name>
				<Source><![CDATA[
    public void startTableCell(str _content,int _size,str _fontWeight,str id = "")
    {
        ContentHTML.AppendLine();
        if(id == "")
        {
            ContentHTML.Append(@'<td style="border-width:1px;border-style:solid;padding:3px;border-color:black;font-size:'+int2str(_size)+'px;font-family:Calibri;font-weight:'+_fontWeight+';color:Black;">' + _content);
        }
        else
        {
            ContentHTML.Append(@'<td id="S - ' + id + '" onclick="spanToText(\'S - '+id+'\')" style="border-width:1px;border-style:solid;padding:3px;border-color:black;font-size:'+int2str(_size)+'px;font-family:Calibri;font-weight:'+_fontWeight+';color:Black;">' + _content);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTableCSS</Name>
				<Source><![CDATA[
    public void startTableCSS(str _css)
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<table class="' + _css + '";">');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTableRow</Name>
				<Source><![CDATA[
    public void startTableRow()
    {
        ContentHTML.AppendLine();
        ContentHTML.Append(@'<tr>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>textBoxExpandJS</Name>
				<Source><![CDATA[
    private void textBoxExpandJS()
    {
        StartingHTML.Append(@'<script type="text/javascript">');
    
    
        StartingHTML.Append(@'function boxexpand() {
    
    
    
            // Code to make the script easier to use //
    
            boxValue = document.all.thebox.value.length
    
            boxSize = document.all.thebox.size
    
            minNum = 0 // Set this to the MINIMUM size you want your box to be.
    
            maxNum = 200 // Set this to the MAXIMUM size you want your box to be.
    
    
    
            // Starts the main portion of the script //
    
            if (boxValue > maxNum) {
    
            }
    
            else {
    
    
    
                if (boxValue > minNum) {
    
                    document.all.thebox.size = boxValue
    
                }
    
                else if (boxValue < minNum || boxValue != minNum) {
    
                    document.all.thebox.size = minNum
    
                }
    
            }
    
        }');
        StartingHTML.Append('</script>');
    }

]]></Source>
			</Method>
			<Method>
				<Name>textToSpanJS</Name>
				<Source><![CDATA[
    private void textToSpanJS()
    {
        StartingHTML.Append(@'<script type="text/javascript">
        function textToSpan(){
            debugger;
        var textbox = document.getElementsByTagName("INPUT").item(0);
        if(textboxinitvalue == ". ")
            textboxinitvalue = "";
    
        var newHTML = ');
        StartingHTML.Append('\'');
        StartingHTML.Append('<span id=');
        StartingHTML.Append('\\\'\'');
        StartingHTML.Append(@' + textbox.id + ');
        StartingHTML.Append('\'\\\'');
        StartingHTML.Append(@'onclick="spanToText(');
        StartingHTML.Append('\\\'\'');
        StartingHTML.Append(@' + textbox.id + ');
        StartingHTML.Append('\'\\\'');
    
            //StartingHTML.Append('\'');
        //StartingHTML.Append(@' + textbox.id + ');
        //StartingHTML.Append('\'');
        StartingHTML.Append(@')" style="font-size:15px;font-family:Calibri;color:Black">');
        StartingHTML.Append('\'');
        StartingHTML.Append(@' + textboxinitvalue + ');
        StartingHTML.Append('\'');
        StartingHTML.Append(@'</span>');
        StartingHTML.Append('\';');
        StartingHTML.AppendLine();
        StartingHTML.Append(@'document.getElementById("ParentNotes " + textbox.id).innerHTML = newHTML;');
            StartingHTML.Append(@'}');
        StartingHTML.Append(@'</script>');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>