<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsPoolFormMZ_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
//class mzkCustCollectionsPoolEventHandlers
[ExtensionOf(formStr(CustCollectionsPool))]
final class CustCollectionsPoolFormMZ_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SelectCriteriaCopy1_OnClicked</Name>
				<Source><![CDATA[
        /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(CustCollectionsPool, SelectCriteriaCopy1), FormControlEventType::Clicked)]
    public static void SelectCriteriaCopy1_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        SysQueryRun queryRun;
        FormRun formRun = sender.formRun();
        //CustCollectionsPool  custCollectionsPool;
        FormDataSource custCollectionsPool_ds = formRun.dataSource(formDataSourceStr(CustCollectionsPool, CustCollectionsPool)) as FormDataSource;
        CustCollectionsPool custCollectionsPool = custCollectionsPool_ds.cursor();

        if (custCollectionsPool.RecId)
        {
            queryRun = new SysQueryRun(new Query(custCollectionsPool.ClaimQueryPacked));

            queryRun.args().caller(formRun); // if caller isn't a form, the title isn't displayed!
            queryRun.title("Claim criteria");
            queryRun.promptShowSorting(false);
            queryRun.promptShowReset(false);
            if (queryRun.prompt())
            {
                custCollectionsPool.ClaimQueryPacked = queryRun.query().pack();
            }
            FormDataSource custCollectionsTmpCriteriaClaim_ds = formRun.dataSource(formDataSourceStr(CustCollectionsPool, CustCollectionsTmpCriteriaClaim)) as FormDataSource;
            CustCollectionsTmpCriteriaClaim custCollectionsTmpCriteriaClaim = custCollectionsTmpCriteriaClaim_ds.cursor();
            CustCollectionsTmpCriteriaClaim::buildCustCollectionsTmpCriteriaClaim(custCollectionsPool.ClaimQueryPacked, custCollectionsTmpCriteriaClaim);
            custCollectionsTmpCriteriaClaim_ds.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustCollectionsPool_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustCollectionsPool, CustCollectionsPool), FormDataSourceEventType::Deleted)]
    public static void CustCollectionsPool_OnDeleted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource custCollectionsTmpCriteria_ds = sender.formRun().dataSource(formDataSourceStr(CustCollectionsPool, CustCollectionsTmpCriteriaClaim)) as FormDataSource;
        CustCollectionsTmpCriteriaClaim custCollectionsTmpCriteria = custCollectionsTmpCriteria_ds.cursor();
        custCollectionsTmpCriteria.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustCollectionsPool_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustCollectionsPool, CustCollectionsPool), FormDataSourceEventType::Activated)]
    public static void CustCollectionsPool_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource custCollectionsPool_ds = sender.formRun().dataSource(formDataSourceStr(CustCollectionsPool, CustCollectionsPool)) as FormDataSource;
        CustCollectionsPool custCollectionsPool = custCollectionsPool_ds.cursor();
        FormDataSource custCollectionsTmpCriteria_ds = sender.formRun().dataSource(formDataSourceStr(CustCollectionsPool, CustCollectionsTmpCriteriaClaim)) as FormDataSource;
        CustCollectionsTmpCriteriaClaim custCollectionsTmpCriteria = custCollectionsTmpCriteria_ds.cursor();
        CustCollectionsTmpCriteriaClaim::buildCustCollectionsTmpCriteriaClaim(custCollectionsPool.ClaimQueryPacked, custCollectionsTmpCriteria);
        custCollectionsTmpCriteria_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorting the grid based on sequence number and poolId.
    /// </summary>
    public void init()
    {
        next init();

        custCollectionsPool_ds.query().dataSourceTable(tableNum(CustCollectionsPool)).addSortField(fieldNum(CustCollectionsPool, HMSequenceNumber), SortOrder::Ascending);
        custCollectionsPool_ds.query().dataSourceTable(tableNum(CustCollectionsPool)).addSortField(fieldNum(CustCollectionsPool, Name));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>