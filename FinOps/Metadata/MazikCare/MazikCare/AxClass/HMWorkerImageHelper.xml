<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMWorkerImageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMWorkerImageHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ChangePatientImage</Name>
				<Source><![CDATA[
    static int ChangePatientImage(RecId _hMPatientRecid,str _imageFileData)
    {
        int width = 64 ;int height = 64;
        Filename saveTmpFileName;
        BinData binData = new BinData(), binDataOrig = new BinData();
        str tempBase64Encode= '';
        str tempPath;
        //DocuRef documentRef;
        str fileData;
        guid aNewGuid;
        //HMDocuActionArchiveServer docuActionArchive;
        HMPatient hmPatientNew = HMPatient::find(_hMPatientRecid);
        str filename;
        DocuType docutype;
        DocuRef docuRefUpdate;
        CustTable CustTable;
        System.Byte[] imgDocBuffer;
        System.IO.FileInfo fi_imgDoc;
        System.IO.FileStream fs;
    
        try
            {
            tempPath = System.IO.Path::GetTempPath();
    
            if(hmPatientNew && _imageFileData)
            {
                aNewGuid = newguid();
                saveTmpFileName   = tempPath + 'Patient Profile Image ' + strFmt('%1',aNewGuid) +  '.jpeg';
                filedata = _imageFileData;
                new InteropPermission(InteropKind::ClrInterop).assert();
                imgDocBuffer = System.Convert::FromBase64String(fileData);
                fi_imgDoc = new System.IO.FileInfo(saveTmpFileName);
                fs= new System.IO.FileStream(fi_imgDoc.get_FullName(), System.IO.FileMode::Create, System.IO.FileAccess::Write);
                fs.Write(imgDocBuffer, 0, imgDocBuffer.get_Length());
                fs.Close();
                CodeAccessPermission::revertAssert();
    
                select CustTable where CustTable.RecId == hmPatientNew.CustTable;
                docutype = DocuType::find(hmParameters::getPatientImageDocuTypeId());
    
                if(docutype.TypeId)
                    {
                        ttsBegin;
                        // Create DocuRef table record and set required values
                        //documentRef.initValue();
                        //documentRef.RefTableId = tableNum(CustTable); //TableId, for which the attachement should be attached.
                        //documentRef.RefRecId = hmPatientNew.CustTable; //RecId, for which the attachement should be attached.
                        //documentRef.RefCompanyId = CustTable.dataAreaId; //CompanyId
                        //documentRef.TypeId = docutype.TypeId;
                        //documentRef.Restriction = DocuRestriction::Internal;
                        //documentRef.smmTable = boolean::true;
                        //documentRef.Party = custTable.Party;
                        //documentRef.insert();
                        //filename= saveTmpFileName;

                        //documentRef.selectForUpdate(true);
                        //docuActionArchive = new HMDocuActionArchiveServer();
                        // This action first displays a file selection dialog.
                        // After the file is selected designates a number sequence and stores the file to document archive.
                        //docuActionArchive.setDocuType(docuRefUpdate.TypeId);
                        new InteropPermission(InteropKind::ClrInterop).assert();
                        //docuActionArchive.add(documentRef, filename);
                        CodeAccessPermission::revertAssert();
                        //docuRefUpdate = DocuRef::findRecId(documentRef.RecId, true);
                        //docuRefUpdate.HMAttachmentType = HMAttachmentDocType::Patient;
                        //docuRefUpdate.update();
    
                        hmPatientNew.selectForUpdate(true);
                        //hmPatientNew.DocuRef = documentRef.RecId;
                        hmPatientNew.update();
    
                        ttscommit;
    
                        new InteropPermission(InteropKind::ClrInterop).assert();
                        System.IO.File::Delete(saveTmpFileName);
                        CodeAccessPermission::revertAssert();
                    }
                return 1;
            }
            }
            catch(Exception::Error)
            {
                return 0;
            }
        return 0;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertImageToString</Name>
				<Source><![CDATA[
    static server str convertImageToString(Image _image)//,int _width = 64, int _height = 64)
    {
      //  BinData bd;
        str result;
    
        if (_image)
        {
         //   bd = new BinData();
         //   bd.setData(_image.getData());
         //   result = bd.base64Encode();
        }
        else
        {
            result = "";
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientImage</Name>
				<Source><![CDATA[
    static str getPatientImage(HMPatient patient)
    {
    
        int width = 64 ;int height = 64;
        HcmPersonImage                      personImage;
        container                           imageThumbnail;
        Filename                            completeFileName, saveThumbFileName,saveTmpFileName;
        BinData                             binData = new BinData(), binDataOrig = new BinData();
    
        System.IO.FileStream                imageStreamDecode;
        System.Drawing.Bitmap               img;
        System.Drawing.Image                thumbnail;
        System.Drawing.Imaging.ImageFormat  format;
         //HMPatient patient;
        System.IntPtr                       intPtr = new System.IntPtr(0);
        Image                               imagelocal;
        str                                 fileExtension = '';
        str                                 tempBase64Encode= '';
        str                                 tempPath;
        boolean                             fileFound = false;
        URL url;
    
        //DocuRef             documentRef;
        //DocuValue           docuValue;
    
    
    
    
        #define.ThumbFile("thumb")
        #define.TmpFile("tmp.jpg")
    
        tempPath = System.IO.Path::GetTempPath();
        saveThumbFileName = tempPath + #ThumbFile;
        saveTmpFileName   = tempPath + #TmpFile;
        try
    
        {
    
            if(patient.RecId)
            {
                //select documentRef
                //where documentRef.RecId == patient.DocuRef;
    
                //if (documentRef)
                //{
                //    select docuValue
                //    where docuValue.RecId == documentRef.ValueRecId;

                //}
    
                  //if(DocuType::find(documentRef.TypeId).FilePlace == DocuFilePlace::Database)
                  //{
                  //      if (docuValue.File)
                  //      {
                  //          binDataOrig.setData(docuValue.File);
                  //          fileFound = true;
                  //      }
                  //}
    
                  //else if(DocuType::find(documentRef.TypeId).FilePlace == DocuFilePlace::Archive)
                  //{
                  //    url = documentRef.completeFilename();

                  //    if(WinAPIServer::fileExists(url))
                  //    {   binDataOrig.loadFile(url);
                  //        fileFound = true;
                  //    }

                  //}
                if(fileFound == true)
                {
                    binDataOrig.saveFile(saveTmpFileName);
                    completeFileName = saveTmpFileName;
    
    
                    imageStreamDecode = new System.IO.FileStream(completeFileName, System.IO.FileMode::Open, System.IO.FileAccess::Read, System.IO.FileShare::ReadWrite); // For file stream
    
                    img = new System.Drawing.Bitmap(imageStreamDecode);
                    format = img.get_RawFormat();
    
    
                    if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Jpeg()))
                    {
                            fileExtension = '.jpeg';
                    }
                    else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Png()))
                    {
                            fileExtension = '.png';
                    }
                    else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Gif()))
                    {
                            fileExtension = '.gif';
                    }
                    else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Bmp()))
                    {
                            fileExtension = '.bmp';
                    }
    
                    fileExtension = fileExtension;
                    saveThumbFileName += fileExtension;
    
                    thumbnail = img.GetThumbnailImage(width, height, null,intPtr);
    
                    thumbnail.Save(saveThumbFileName, format);
    
                    binData.loadFile(saveThumbFileName);
                    imageThumbnail = binData.getData();
    
                    tempBase64Encode = binData.base64Encode();
    
                    imageStreamDecode.Close();
                    System.IO.File::Delete(saveThumbFileName);
                    System.IO.File::Delete(saveTmpFileName);
                }
    
        }
        }
        catch(Exception::Error)
        {
            return tempBase64Encode;
        }
    
        return tempBase64Encode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerImageBase64Encode</Name>
				<Source><![CDATA[
    static str getWorkerImageBase64Encode(RefRecId worker = 0 , int width = 64 ,int height = 64)
    {
    
        HcmPersonImage                      personImage;
        container                           imageThumbnail;
        Filename                            completeFileName, saveThumbFileName,saveTmpFileName;
        BinData                             binData = new BinData(), binDataOrig = new BinData();
    
        System.IO.FileStream                imageStreamDecode;
        System.Drawing.Bitmap               img;
        System.Drawing.Image                thumbnail;
        System.Drawing.Imaging.ImageFormat  format;
        HcmWorker                           hcmWorker;
        System.IntPtr                       intPtr = new System.IntPtr(0);
    
        str                                 fileExtension = '';
        str                                 tempBase64Encode= '';
        str                                 tempPath;
        #define.ThumbFile("thumb")
        #define.TmpFile("tmp.jpg")
    
        tempPath = System.IO.Path::GetTempPath();
        saveThumbFileName = tempPath + #ThumbFile;
        saveTmpFileName   = tempPath + #TmpFile;
    
        hcmWorker = HcmWorker::find(worker);
        personImage = HcmPersonImage::findByPerson(hcmWorker.Person);
    
    
        if (personImage.RecId)
        {
            if (personImage.Image)
            {
                binDataOrig.setData(personImage.Image);
                binDataOrig.saveFile(saveTmpFileName);
                completeFileName = saveTmpFileName;
    
    
                imageStreamDecode = new System.IO.FileStream(completeFileName, System.IO.FileMode::Open, System.IO.FileAccess::Read, System.IO.FileShare::ReadWrite); // For file stream
    
                img = new System.Drawing.Bitmap(imageStreamDecode);
                format = img.get_RawFormat();
    
    
                if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Jpeg()))
                {
                        fileExtension = '.jpeg';
                }
                else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Png()))
                {
                        fileExtension = '.png';
                }
                else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Gif()))
                {
                        fileExtension = '.gif';
                }
                else if (format.Equals(System.Drawing.Imaging.ImageFormat::get_Bmp()))
                {
                        fileExtension = '.bmp';
                }
    
                fileExtension = fileExtension;
                saveThumbFileName += fileExtension;
    
                thumbnail = img.GetThumbnailImage(width, height, null,intPtr);
    
                thumbnail.Save(saveThumbFileName, format);
    
                binData.loadFile(saveThumbFileName);
                imageThumbnail = binData.getData();
    
                tempBase64Encode = binData.base64Encode();
    
                imageStreamDecode.Close();
                System.IO.File::Delete(saveThumbFileName);
                System.IO.File::Delete(saveTmpFileName);
            }
        }
        return tempBase64Encode;
    
        return "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>