<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPharmacyClinicDataHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMPharmacyClinicDataHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delActiveMedications</Name>
				<Source><![CDATA[
    public static void delActiveMedications()
    {
        HMPatientMedications hmPatientActiveMedications;
    
        ttsBegin;
        while select forupdate hmPatientActiveMedications
        {
           hmPatientActiveMedications.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delAllergies</Name>
				<Source><![CDATA[
    public static void delAllergies()
    {
        HMAllergies hmAllergies;
    
        ttsBegin;
        while select forupdate hmAllergies
        {
           hmAllergies.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delDemographics</Name>
				<Source><![CDATA[
    public static void delDemographics()
    {
        HMDemographics hmDemographics;
    
        ttsBegin;
        while select forupdate hmDemographics
        {
           hmDemographics.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delDiagnosis</Name>
				<Source><![CDATA[
    public static void delDiagnosis()
    {
        HMPatientDiagnosis  hmPatientDiagnosis;
    
        ttsBegin;
        while select forupdate hmPatientDiagnosis
        {
           hmPatientDiagnosis.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delPastMedications</Name>
				<Source><![CDATA[
    public static void delPastMedications()
    {
        HMPatientPastMedications hmPatientPastMedications;
    
        ttsBegin;
        while select forupdate hmPatientPastMedications
        {
           hmPatientPastMedications.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delPatientProblems</Name>
				<Source><![CDATA[
    public static void delPatientProblems()
    {
        HMClinicalProblems hmPatientProblem;
    
        ttsBegin;
        while select forupdate hmPatientProblem
        {
           hmPatientProblem.doDelete();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPatientDemographics</Name>
				<Source><![CDATA[
    public static void fillPatientDemographics(HMResourceSchedulingAppointment _hmResourceSchedulingAppointment,str _guid)
    {
        HMPatient hmPatient;
        HMDemographics hmDemographics;
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conVitals;
        boolean ret,setHeight,setWeight;
        str credentials,VitalName,MeasurementValue,MeasurementUnit;
        int containerSize, counter = 3;
    
        HMPharmacyClinicDataHelper::delDemographics();
        hmPatient = HMPatient::find(_hmResourceSchedulingAppointment.HMPatient);
        if (hmPatient)
        {
            hmDemographics.Name = hmPatient.patientName();
            hmDemographics.Gender = hmPatient.Gender;
            hmDemographics.Age = hmPatient.patientAgeNew();
    
            /*credentials = HMParameters::find().Token;
            credentials = "Authorization: "+credentials;
    
            ret = appHelper.callPostWebAPI('api/patientchart/getPatientVitals', "{\"patientId\":\""+_guid+"\",\"currentPage\":\"1\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
            if(ret)
            {
                conResponse = appHelper.parmRecordsCon();
            }
    
            containerSize = conLen(conResponse);
    
            while (containerSize > counter)
            {
                counter += 1;
                conVitals = conPeek(conResponse,counter);
    
                VitalName = conPeek(conVitals,conFind(conVitals,"VitalName")+1);
                MeasurementValue = conPeek(conVitals,conFind(conVitals,"MeasurementValue")+1);
                MeasurementUnit = conPeek(conVitals,conFind(conVitals,"MeasurementUnit")+1);
                if (!setHeight && VitalName == 'Height')
                {
                    hmDemographics.Height = MeasurementValue +' '+ MeasurementUnit;
                    setHeight = true;
                }
                else if (!setWeight && VitalName == 'Weight')
                {
                    hmDemographics.Weight = MeasurementValue +' '+ MeasurementUnit;
                    setWeight = true;
                }
    
            }
            */
            hmDemographics.insert();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGuid</Name>
				<Source><![CDATA[
    public static str getGuid(str _patientRecId)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conComplaint;
    
        boolean ret;
        int     indexValue;
        str     retvalue,credentials;
    
        #define.indexOfComplaint(4);
    
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientCase/getPatient', "{\"patientRecId\":\""+_patientRecId+"\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
    
        retvalue = conPeek(conResponse, 1);
    
        return retvalue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPatientActiveMedication</Name>
				<Source><![CDATA[
    public static void setPatientActiveMedication(str _guid)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conMedication,conSubElements,conConceptIds;
        HMPatientMedications hmPatientActiveMedications;
        boolean ret;
        int         containerSize, counter = 3, indexValue;
        str     retvalue,credentials;
        str     MedicationName,Frequency,Duration,DoseUnit,Dose,OrderDate,FulfillmentDate,OrderStatusText
        #define.indexOfComplaint(4);
        HMPharmacyClinicDataHelper::delActiveMedications();
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientOrder/getPatientMedications', "{\"patientId\":\""+_guid+"\",\"currentPage\":\"1\",\"IsActive\":\"1\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
    
        containerSize = conLen(conResponse);
    
        if (conLen(conResponse) >= 4)
        {
            while (containerSize > counter)
            {
                counter += 1;
                conMedication = conPeek(conResponse,counter);
                MedicationName = conPeek(conMedication,conFind(conMedication,"MedicationName")+1);
                Frequency = conPeek(conMedication,conFind(conMedication,"Frequency")+1);
                Duration = conPeek(conMedication,conFind(conMedication,"Duration")+1);
                DoseUnit = conPeek(conMedication,conFind(conMedication,"DoseUnit")+1);
                Dose = conPeek(conMedication,conFind(conMedication,"Dose")+1);
                OrderDate = conPeek(conMedication,conFind(conMedication,"OrderDate")+1);
                FulfillmentDate = conPeek(conMedication,conFind(conMedication,"FulfillmentDate")+1);
                OrderStatusText = conPeek(conMedication,conFind(conMedication,"OrderStatusText")+1);
    
    
                hmPatientActiveMedications.Medications = MedicationName;
                hmPatientActiveMedications.Frequency = Frequency;
                hmPatientActiveMedications.Duration = Duration;
                hmPatientActiveMedications.DosageUnit = DoseUnit;
                hmPatientActiveMedications.Dosage = Dose;
                hmPatientActiveMedications.OrderDate = OrderDate;
                hmPatientActiveMedications.RefillDate = FulfillmentDate;
                hmPatientActiveMedications.Status = OrderStatusText;
                hmPatientActiveMedications.insert();
    
    
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPatientAllergies</Name>
				<Source><![CDATA[
    public static void setPatientAllergies(str _guid)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conAllergies,conSubElements,conConceptIds;
        HMAllergies hmAllergies;
        boolean ret;
        int         containerSize, counter = 3, indexValue;
        str     retvalue,credentials;
        str     onsetNotes,onsetDate,conceptId,conceptNumber,conceptType,name,icdCode,encounterId,allergyReviewedBy,patient,reactionText,status;
        #define.indexOfComplaint(4);
    
        HMPharmacyClinicDataHelper::delAllergies();
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientChart/getPatientAllergies', "{\"patientId\":\""+_guid+"\",\"currentPage\":\"1\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
        containerSize = conLen(conResponse);
    
        if (conLen(conResponse) >= 4)
        {
    
           while (containerSize > counter)
            {
                counter += 1;
                conAllergies = conPeek(conResponse,counter);
    
                conSubElements = conPeek(conAllergies,conFind(conAllergies,"allergen")+1);
                indexValue = conFind(conSubElements,"conceptId");
                conceptId = conPeek(conSubElements,indexValue+1);
                conceptNumber = conPeek(conSubElements,conFind(conSubElements,"conceptNumber")+1);
                conceptType = conPeek(conSubElements,conFind(conSubElements,"conceptType")+1);
                name = conPeek(conSubElements,conFind(conSubElements,"name")+1);
                icdCode = conPeek(conSubElements,conFind(conSubElements,"ICDCode")+1);
                encounterId  = conPeek(conSubElements,conFind(conSubElements,"EncounterId")+1);
                allergyReviewedBy = conPeek(conAllergies,conFind(conAllergies,"AllergyReviewedBy")+1);
                patient = conPeek(conAllergies,conFind(conAllergies,"Patient")+1);
                reactionText = conPeek(conAllergies,conFind(conAllergies,"reactionText")+1);
                status = conPeek(conAllergies,conFind(conAllergies,"statusText")+1);
                onsetDate = conPeek(conAllergies,conFind(conAllergies,"onsetDate")+1);
                onsetNotes = conPeek(conAllergies,conFind(conAllergies,"onsetNotes")+1);
    
                hmAllergies.ConceptId = conceptId;
                hmAllergies.ConceptNumber = conceptNumber;
                hmAllergies.ConceptType = conceptType;
                hmAllergies.Name = name;
                hmAllergies.ICDCode = icdCode;
                hmAllergies.AllergyReviewedBy = allergyReviewedBy;
                hmAllergies.Patient = patient;
                hmAllergies.reactionText = reactionText;
                hmAllergies.Status = status;
                hmAllergies.OnsetDate = strDel(onsetDate,11,10);
                hmAllergies.OnsetNotes = onsetNotes;
                hmAllergies.insert();
    
    
    
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPatientDiagnosis</Name>
				<Source><![CDATA[
    public static void setPatientDiagnosis(str _axAppoitnmentRefRecId)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conDiagnosis;
        HMPatientDiagnosis  hmPatientDiagnosis;
        boolean ret;
        int         containerSize, counter = 3, indexValue;
        str     retvalue,credentials;
        str     onsetNotes,icdCode;
        #define.indexOfComplaint(4);
    
        HMPharmacyClinicDataHelper::delDiagnosis();
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientEncounter/getpatientDiagnosis', "{\"AxAppoitnmentRefRecId\":\""+_axAppoitnmentRefRecId+"\",\"currentPage\":\"1\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
        containerSize = conLen(conResponse);
    
        if (conLen(conResponse) >= 4)
        {
    
           while (containerSize > counter)
            {
                counter += 1;
                conDiagnosis = conPeek(conResponse,counter);
    
                icdCode = conPeek(conDiagnosis,conFind(conDiagnosis,"ICDCode")+1);
                onsetNotes = conPeek(conDiagnosis,conFind(conDiagnosis,"DiagnosisName")+1);
    
                hmPatientDiagnosis.ICDCode = icdCode;
                hmPatientDiagnosis.Description = onsetNotes;
                hmPatientDiagnosis.insert();
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPatientPastMedication</Name>
				<Source><![CDATA[
    public static hmPatientPastMedications setPatientPastMedication(str _guid)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conMedication,conSubElements,conConceptIds;
        HMPatientPastMedications hmPatientPastMedications;
        boolean ret;
        int         containerSize, counter = 3, indexValue;
        str     retvalue,credentials;
        str     MedicationName,Frequency,Duration,DoseUnit,Dose,OrderDate,FulfillmentDate,OrderStatusText,IsActive;
        #define.indexOfComplaint(4);
        HMPharmacyClinicDataHelper::delPastMedications();
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientOrder/getPatientMedications', "{\"patientId\":\""+_guid+"\",\"currentPage\":\"1\",\"IsActive\":\"0\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
    
        containerSize = conLen(conResponse);
    
        if (conLen(conResponse) >= 4)
        {
            while (containerSize > counter)
            {
                counter += 1;
                conMedication = conPeek(conResponse,counter);
                MedicationName = conPeek(conMedication,conFind(conMedication,"MedicationName")+1);
                Frequency = conPeek(conMedication,conFind(conMedication,"Frequency")+1);
                Duration = conPeek(conMedication,conFind(conMedication,"Duration")+1);
                DoseUnit = conPeek(conMedication,conFind(conMedication,"DoseUnit")+1);
                Dose = conPeek(conMedication,conFind(conMedication,"Dose")+1);
                OrderDate = conPeek(conMedication,conFind(conMedication,"OrderDate")+1);
                FulfillmentDate = conPeek(conMedication,conFind(conMedication,"FulfillmentDate")+1);
                OrderStatusText = conPeek(conMedication,conFind(conMedication,"OrderStatusText")+1);
                IsActive = conPeek(conMedication,conFind(conMedication,"IsActive")+1);
    
                hmPatientPastMedications.Medications = MedicationName;
                hmPatientPastMedications.Frequency = Frequency;
                hmPatientPastMedications.Duration = Duration;
                hmPatientPastMedications.DosageUnit = DoseUnit;
                hmPatientPastMedications.Dosage = Dose;
                hmPatientPastMedications.OrderDate = OrderDate;
                hmPatientPastMedications.RefillDate = FulfillmentDate;
                hmPatientPastMedications.Status = OrderStatusText;
                hmPatientPastMedications.IsActive = IsActive;
                hmPatientPastMedications.insert();
    
    
    
            }
        }
        return hmPatientPastMedications;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPatientProblems</Name>
				<Source><![CDATA[
    public static void setPatientProblems(str _guid)
    {
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
        container           conResponse, conProblems,conSubElements,conConceptIds;
        HMClinicalProblems hmPatientProblem;
        boolean ret;
        int         containerSize, counter = 3, indexValue;
        str     retvalue,credentials;
        str     problem,onSetDate,resolutionDate,status;
        #define.indexOfComplaint(4);
    
        HMPharmacyClinicDataHelper::delPatientProblems();
        credentials = HMParameters::find().Token;
        credentials = "Authorization: "+credentials;
    
        ret = appHelper.callPostWebAPI('api/PatientChart/getPatientProblems', "{\"patientId\":\""+_guid+"\"}",credentials); //+ guid2str(CRMCaseId) + "\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
    
    
        containerSize = conLen(conResponse);
    
        if (conLen(conResponse) >= 4)
        {
    
           while (containerSize > counter)
            {
                counter += 1;
                conProblems = conPeek(conResponse,counter);
    
    
                problem = conPeek(conProblems,conFind(conProblems,"problemName")+1);
                onSetDate = conPeek(conProblems,conFind(conProblems,"onSetDate")+1);
                resolutionDate = conPeek(conProblems,conFind(conProblems,"onSetDate")+1);
                status = conPeek(conProblems,conFind(conProblems,"StatusText")+1);
    
                hmPatientProblem.Problems = problem;
                hmPatientProblem.OnSetDate = strDel(onSetDate,11,10);
                hmPatientProblem.ResolutionDate = strDel(resolutionDate,11,10);
                hmPatientProblem.Status = status;
                hmPatientProblem.insert();
    
    
            }
    
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>