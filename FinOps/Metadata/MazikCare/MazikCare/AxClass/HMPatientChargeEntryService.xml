<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientChargeEntryService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMPatientChargeEntryService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createChargeLine</Name>
				<Source><![CDATA[
    public void createChargeLine(str _caseNo, Description _location, date _performedDate, str _itemId, real _qty, real _amount)
    {
        HMCase                      hmCase = HMCase::findByCase(_caseNo);
        HMCaseTrans                 hmCaseTrans;
        RecId                       _caseTransRecId;
        HMPatientChargeEntryTable   hmPatientChargeEntryTable;
        HMPatientChargeEntryLine    hmPatientChargeEntryLine;
        hmorganizationalunit        orgUnit;
        InventDim                   inventDim;
        HMCaseChargeLineEntry       HMCaseChargeLineEntry;
        try
        {
            if(!hmCase)
            {
                HMCaseChargeLineEntry.HCSCaseNo = _caseNo;
            }
    
            HMCaseChargeLineEntry.HMCase = hmCase.RecId;
             select RecId, InventLocation from orgUnit
                    where orgUnit.Description == _location;
            HMCaseChargeLineEntry.HMOrganizationalUnit = orgUnit.RecId;
            HMCaseChargeLineEntry.ItemId = _itemid;
            HMCaseChargeLineEntry.Qty = _qty;
            HMCaseChargeLineEntry.Amount = _amount;
            HMCaseChargeLineEntry.PerformingDate = _performedDate;
            HMCaseChargeLineEntry.IsPharmacy = NoYes::Yes;
            HMCaseChargeLineEntry.insert();
    
        }
        catch
        {
            throw error("Error in creating case transaction");
        }
    
        /*if(hmCase)
        {
            ttsBegin;
            _caseTransRecId = HMCaseTrans::createCaseTrans(_itemId,'',HMServiceStatus::Ordered,HMPatientPaymentResponsibility::Client,'',HMPreAuthorizationStatus::None,today(),hmCase.RecId,0,0,_qty);
            if(_caseTransRecId)
            {
                hmCaseTrans = hmCaseTrans::find(_caseTransRecId,true);
                if(hmCase.getActivePatientInsuranceRecId_US() != 0)
                {
                    hmCaseTrans.InsuranceAmount = _amount;
                }
                else
                {
                    hmCaseTrans.CashAmount = _amount;
                }
                hmCaseTrans.TotalAmount = _amount;
                hmCaseTrans.RemainingBillAmount = _amount;
    
                select RecId, InventLocation from orgUnit
                where orgUnit.Description == _location;
    
                inventDim.clear();
                inventDim.InventLocationId = orgUnit.InventLocation;
                inventDim.InventSiteId = InventLocation::find(orgUnit.InventLocation).InventSiteId;
                inventDim = inventDim::findOrCreate(inventDim);
                hmCaseTrans.HMOrganizationalUnit = orgUnit.recid;
                hmCaseTrans.InventDim = inventDim.inventDimId;
                hmCaseTrans.update();
    
                select RecId from hmPatientChargeEntryTable
                where hmPatientChargeEntryTable.HMCase == hmCase.RecId;
    
                if(!hmPatientChargeEntryTable)
                {
                    throw error("No charge entry exist for this case");
                }
    
                hmPatientChargeEntryLine.initValue();
                hmPatientChargeEntryLine.HMCaseTrans = hmCaseTrans.RecId;
                hmPatientChargeEntryLine.PerformedDate = _performedDate;
                hmPatientChargeEntryLine.HMPatientChargeEntryTable = hmPatientChargeEntryTable.RecId;
                hmPatientChargeEntryLine.FromDate = _performedDate;
                hmPatientChargeEntryLine.insert();
                ttsCommit;
    
            }
            else
            {
                throw error("Error in creating case transaction");
            }
        }
        else
        {
            throw error("No visit found");
        }
        */
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>