<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientTransition</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMPatientTransition
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCorporateDetails</Name>
				<Source><![CDATA[
    public static boolean addCorporateDetails(RecId _patientRecId,
        CustAccount             _insuranceCarrier,
        HMPolicySubscriberID    _employeeId,
        HMCorporateCarrierEmployeeGrade      _employeeGrade,
        RecId                   _eligibleClass,
        string10                _corporatePlan,
        recid                   _designation = 0,
        HMInsuranceEndDate      planValidity = dateNull(),
        HMInsuranceCoPayAmount  _coPayAmount = 0,
        HMPatientInsuranceEligibilityAmount _eligibleAmount = 0,
        HMPatientInsuranceBalanceAmount     _balanceAmount = 0,
        HMPriorAuthorizationNumber      _authNumber = '',
        HMPatientInsAuthorizationDate   _authdate = dateNull()
        )
    {
       
        HMPatientInsurance  hmPatientInsurance;
    
        try
        {
            hmPatientInsurance.initValue();
    
            hmPatientInsurance.HMPatient = _patientRecId;
            hmPatientInsurance.InsuranceStatus = HMInsuranceStatus::Active;
            HMPatientInsurance.HMPayerType = HMPayerType::Corporate;
    
            hmPatientInsurance.HcmTitle = _designation;
    
            hmPatientInsurance.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            hmPatientInsurance.EndDate = planValidity;
            hmPatientInsurance.PolicyType = _coPayAmount? PolicyType::CoPay : PolicyType::None;
            hmPatientInsurance.CoPayAmount = _coPayAmount;
            hmPatientInsurance.EligibilityAmount = _eligibleAmount;
            hmPatientInsurance.BalanceAmount = _balanceAmount;
            hmPatientInsurance.PriorAuthorizationNumber = _authNumber;
            hmPatientInsurance.AuthorizationDate = _authdate;
            hmPatientInsurance.InsuranceCarrier = _insuranceCarrier;
            hmPatientInsurance.EmployeeID = _employeeId;
            hmPatientInsurance.EmployeeGrade = _employeeGrade;
            hmPatientInsurance.HMEligibleClass = _eligibleClass;
            hmPatientInsurance.HMCorporatePlan = _corporatePlan;
            hmPatientInsurance.PreauthorizationReqd = _authNumber? NoYes::Yes : NoYes::No;
    
            if(hmPatientInsurance.validateWrite())
            {
                hmPatientInsurance.insert();
                return true;
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            return false;
        }
        

    }

]]></Source>
			</Method>
			<Method>
				<Name>addInsuranceDetails</Name>
				<Source><![CDATA[
    public static boolean addInsuranceDetails(RecId _patientRecId,
        CustAccount             _insuranceCarrier,
        HMPolicyNumber          _policyNumber,
        HMInsuranceEndDate      _endDate,
        HMInsuranceCoPayAmount  _coPayAmount,
        HMPatientInsAuthorizationLimit _authLimit,
        HMPatientInsAuthorizationDate _authDate,
        HMInsurancePolicyType           _policyType,
        HMInsuranceCoInsurancePercentage    _coInsurance,
        RecId                   _eligibleClass,
        HMPriorAuthorizationNumber      _authNumber,
        HMInsuranceDeductibleAmount     _deductible,
        HMInsuranceCurrentDeductibleAmnt    _currentDeductible
        )
    {
        
        HMPatientInsurance  hmPatientInsurance;
    
        try
        {
            hmPatientInsurance.initValue();
    
            hmPatientInsurance.HMPatient = _patientRecId;
            hmPatientInsurance.InsuranceStatus = HMInsuranceStatus::Active;
            HMPatientInsurance.HMPayerType = HMPayerType::InsuranceCarrier;
    
            hmPatientInsurance.EffectiveDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            hmPatientInsurance.EndDate = _endDate;
            hmPatientInsurance.InsuranceCarrier = _insuranceCarrier;
            hmPatientInsurance.PolicyNumber = _policyNumber;
            hmPatientInsurance.AuthorizationLimit = _authLimit;
            hmPatientInsurance.AuthorizationDate = _authDate;
            hmPatientInsurance.PolicyType =_policyType;
            hmPatientInsurance.CoInsurance = _coInsurance;
            hmPatientInsurance.CoPayAmount = _coPayAmount;
            hmPatientInsurance.HMEligibleClass = _eligibleClass;
            hmPatientInsurance.PriorAuthorizationNumber = _authNumber;
            hmPatientInsurance.DeductibleAmount = _deductible;
            hmPatientInsurance.CurrentDeductibleAmount = _currentDeductible;
            hmPatientInsurance.PreauthorizationReqd = _authNumber? NoYes::Yes : NoYes::No;
    
            if(hmPatientInsurance.validateWrite())
            {
                hmPatientInsurance.insert();
                return true;
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            return false;
        }
        
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelationship</Name>
				<Source><![CDATA[
    public static boolean addRelationship(DirPartyRecId _parentParty, DirPartyRecId _childParty, DirRelationshipTypeId _relationshipType)
    
    {
        DirPartyRelationship        dirPartyRelationship;
    
        try
        {
            dirPartyRelationship.initValue();
    
            dirPartyRelationship.ValidFrom = DateTimeUtil::utcNow();
            dirPartyRelationship.ValidTo = DateTimeUtil::maxValue();
            dirPartyRelationship.ParentParty = _parentParty;
            dirPartyRelationship.ChildParty = _childParty;
            dirPartyRelationship.RelationshipTypeId = _relationshipType;
            dirPartyRelationship.LegalEntityDataAreaId = curext();
    
            if(dirPartyRelationship.validateWrite())
            {
                dirPartyRelationship.insert();
                return true;
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            return false;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCorporatePatient</Name>
				<Source><![CDATA[
    public static HMPatientRecId createCorporatePatient(
        HMPatientCategory       _category,
        DirPersonName           _dirPersonName,
        HMPatientId             _patientNumber,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        HMFinClassRefRecId      _financeClassRecId,
        CustAccount             _insuranceCarrier,
        HMPolicySubscriberID    _employeeId,
        HMCorporateCarrierEmployeeGrade      _employeeGrade,
        DirRelationshipTypeId _relationshipType,
        RecId                   _eligibleClass,
        string10                _corporatePlan,
        HMAgeValue              _AgeValue = 0,
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressFax = '',
        PhoneLocal                              _logisticsAddressphoneExt = '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' ,
        HMSocialSecurity                        _govId                        = '',
        boolean                                 _showInfo = true,
        PhoneMobile                             _phoneMobile = '',
        container                               _addresssPurpose = conNull(),
        HMAgeValue                             _ageInDays = 0,
        HMAgeValue                           _ageInMonths = 0,
        recid                   _designation = 0,
        HMInsuranceEndDate      planValidity = dateNull(),
        HMInsuranceCoPayAmount  _coPayAmount = 0,
        HMPatientInsuranceEligibilityAmount _eligibleAmount = 0,
        HMPatientInsuranceBalanceAmount     _balanceAmount = 0,
        HMPriorAuthorizationNumber      _authNumber = '',
        HMPatientInsAuthorizationDate   _authdate = dateNull(),
        NoYesId                                 _ramq = NoYes::No,
        NoYesId                                 _pilot = NoYes::No,
        NoYesId                                 _preEmployment = NoYes::No,
        NoYesId                                 _executive = NoYes::No,
        RecId                                   _executiveProtocol = 0,
        RecId                                   _preEmploymentProtocolRecId = 0,
        RecId                                   _clientRecId = 0,
        str                                     _languageCodeId = '',
        Recid                                   _clinicRecId= 0
        )
    {
        HMPatientRecId                  newHMPatientRecId = 0;
    
        try
        {
            ttsBegin;
    
            newHMPatientRecId = HMPatientTransition::createHMPatientLogisticsAddress(_category,_dirPersonName, _patientNumber,
                _birthDate, _gender, _salutation,  _nameSuffix, _financeClassRecId, _AgeValue,
                _LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, _logisticsAddressphone, _logisticsAddressEmail ,
                _logisticsAddressFax, _logisticsAddressphoneExt, _logisticsAddressBuildingCompliment, _logisticsAddressStreet ,
                _logisticsAddressStreetNumber, _logisticsAddressPostBox, _logisticsAddressDistrictName, _govId, _showInfo,_phoneMobile,_addresssPurpose,_ageInDays,_ageInMonths,
                _ramq,_pilot,_preEmployment,_executive,_executiveProtocol,_preEmploymentProtocolRecId,_clientRecId,_languageCodeId,"",_clinicRecId);
    
            if(newHMPatientRecId)
            {
                if(HMPatientTransition::addCorporateDetails(newHMPatientRecId, _insuranceCarrier, _employeeId, _employeeGrade, _eligibleClass,_corporatePlan,
                           _designation, planValidity, _coPayAmount, _eligibleAmount, _balanceAmount, _authNumber, _authdate))
                {
                    if(!HMPatientTransition::addRelationship(CustTable::find(_insuranceCarrier).Party, CustTable::findRecId(HMPatient::find(newHMPatientRecId).CustTable).Party, _relationshipType))
                    {
                        throw Exception::Error;
                    }
                }
                else
                {
                    throw Exception::Error;
                }
            }
            else
            {
                throw Exception::Error;
            }
    
            ttscommit;
        }
        catch
        {
            newHMPatientRecId = 0;
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMPatient</Name>
				<Source><![CDATA[
    public static HMPatientRecId createHMPatient(
        DirPersonName           _dirPersonName,
        HMPatientId             _patientNumber,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        HMFinClassRefRecId      _financeClassRecId,
        HMAgeValue              _AgeValue = 0)
    {
        HMPatient                       newHMPatient;
        DirPerson                       dirPerson;
        CustTable                       custTable;
        container                       addressBooks;
        HMPatientRecId                  newHMPatientRecId = 0;
        LogisticsLocation               logisticsLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
    
        //LogisticsLocationPostalAddress  logisticsLocationPostalAddress;Remove in 870 build
        CustGroupId                     custGroupId;
    
        custGroupId = HMParameters::find().CustGroup;
        if (!custGroupId)
        {
            info("@MAZ2917");
            return 0;
        }
    
        try
        {
            ttsbegin;
    
            if (_dirPersonName.Person == 0)
            {
                if (!newHMPatient)
                {
                    custTable.AccountNum = _patientNumber;
                    custTable.Currency = CompanyInfoHelper::standardCurrency();
                    custTable.CustGroup = custGroupId;
                    custTable.CustType  = CustType::Patient;
    
                    if (!_dirPersonName.MiddleName)
                    {
                        dirPerson.Name=_dirPersonName.FirstName + " " + _dirPersonName.LastName;
                    }
                    else
                    {
                        dirPerson.Name=_dirPersonName.FirstName + " " + _dirPersonName.MiddleName + " " + _dirPersonName.LastName;
                    }
                    custTable.insert(DirPartyType::Person,dirPerson.Name);
    
                    dirPerson = DirPerson::find(custTable.Party, true);
    
                    dirPerson.BirthDay = dayofmth(_birthDate);
                    dirPerson.BirthMonth = mthofyr(_birthDate);
                    dirPerson.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(_birthDate, 0));
    
                    newHMPatient.BirthDate = dirPerson.BirthDate();
                    newHMPatient.HMHijriDateOfBirth = HMHijriDateHelper::convertGeorgianToHijri(dirPerson.birthDate());
    
                    dirPerson.update();
    
                    newHMPatient.CustTable = custTable.RecId;
                    newHMPatient.Gender = _gender;
                    newHMPatient.Salutation = _salutation;
                    newHMPatient.NameSuffix = _nameSuffix;
                    newHMPatient.RegistrationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
    
                    if (newHMPatient.validateWrite())
                    {
                        //Create Patient's Employer LogisticsLocation
                        logisticsLocation = LogisticsLocation::create();
                        logisticsPostalAddress.Location = logisticsLocation.RecId;
                        logisticsPostalAddress.CountryRegionId = CompanyInfo::AddrFormat();//'US';
                        logisticsPostalAddress.insert();
                        //logisticsLocationPostalAddress.Location = logisticsLocation.RecId;
                        //logisticsLocationPostalAddress.PostalAddress = logisticsPostalAddress.RecId;
                        //logisticsLocationPostalAddress.insert();
    
                        newHMPatient.EmploymentLogisticsLocation = logisticsLocation.RecId;
                        newHMPatient.HMAgeValue = _AgeValue;        //added for assume birth date of a patient
                        newHMPatient.insert();
    
                        addressBooks = DirAddressBook::getDefaultAddressBooks();
    
                        DirAddressBookParty::createPartyRelations(custTable.Party, conpeek(addressBooks, 1));
    
                        //Record already created in DirPartyTable insert/
    
                      /*  _dirPersonName.Person = custTable.Party;
                        //ValidFrom and ValidTo are set in DirPartyTable in 870 build
                      //  _dirPersonName.ValidFrom =  DirUtility::getCurrentDateTime();
                      //  _dirPersonName.ValidTo = DateTimeUtil::maxValue();
    
                        if (_dirPersonName.validateWrite())
                        {
                            _dirPersonName.insert();
                        }*/
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                }
            }
    
            if (newHMPatient.RecId != 0)
            {
                // The creation was successful, so we need to store the HMPatientRecId
                newHMPatientRecId = newHMPatient.RecId;
            }
    
            ttscommit;
        }
        catch
        {
            checkFailed("@MAZ58");
        }
        catch (Exception::DuplicateKeyException)
        {
            checkFailed("@SYS78886");
        }
        catch (Exception::Error)
        {
            checkFailed("@SYS78886");
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMPatientForProspect</Name>
				<Source><![CDATA[
    public static HMPatientRecId createHMPatientForProspect(
        HMPatientCategory       _category,
        DirPersonName           _dirPersonName,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        HMFinClassRefRecId      _financeClassRecId,
        HMAgeValue              _AgeValue = 0,
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressFax = '',
        PhoneLocal                              _logisticsAddressphoneExt = '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' ,
        HMSocialSecurity                        _govId                        = '',
        boolean                                 _showInfo = true,
        PhoneMobile                             _phoneMobile = '',
        container                               _addresssPurpose = conNull(),
        HMAgeValue                              _ageInDays = 0,
        HMAgeValue                              _ageInMonths = 0,
        NoYesId                                 _ramq = NoYes::No,
        NoYesId                                 _pilot = NoYes::No,
        NoYesId                                 _preEmployment = NoYes::No,
        NoYesId                                 _executive = NoYes::No,
        RecId                                   _executiveProtocol = 0,
        RecId                                   _preEmploymentProtocolRecId = 0,
        RecId                                   _clientRecId = 0,
        str                                     _languageCodeId = '',
        Recid                                   _clinicRecId= 0,
        NoYes                                   _contactFirst = NoYes::No
    
        )
    {
        HMPatient                       newHMPatient;
    
        DirPerson                       dirPerson;
        DirPartyTable                   dirPartyTable;
        smmBusRelTable                  prospect;
        container                       addressBooks;
        HMPatientRecId                  newHMPatientRecId = 0;
        LogisticsLocation               logisticsLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        CustGroupId                     custGroupId;
        CustDlvModeId                   dlvMode;
        CustPaymMode                    paymentMode;
        int i;
        DirPartyLocationRole            dirPartyLocationRoleLocal;
        HMParameters                    hmParameters;
        DirPersonName                   dirPersonName;
    
        hmParameters = HMParameters::find();
    
        custGroupId = hmParameters.CustGroup;
        dlvMode     = hmParameters.SalesOrdDlvModeId;
        paymentMode = hmParameters.CustPaymModeTable;
        
        if (!custGroupId)
        {
            if(_showInfo)
            {
                info("@MAZ2917");
            }
            return 0;
        }
    
        if ((!dlvMode || !paymentMode) && isConfigurationkeyEnabled(configurationKeyNum(BillNClaimMgmt)))
        {
            if(_showInfo)
            {
                warning("@MAZ8568");
            }
        }
    
        try
        {
            ttsbegin;
    
            if (_dirPersonName.Person == 0)
            {
                if (!newHMPatient)
                {
                    prospect.clear();
                    //custTable.AccountNum = _patientNumber;
                    prospect.Currency   = CompanyInfoHelper::standardCurrency();
                    prospect.CustGroup  = custGroupId;
                    //custTable.CustType   = CustType::Patient;
                    //custTable.PaymMode   = paymentMode;
                    prospect.DlvMode    = dlvMode;
                    //custTable.InventSiteId = 'MPH';
                    //custTable.InventLocation = 'MPH-GW';
    
                    if (!_dirPersonName.MiddleName)
                    {
                        dirPerson.Name=_dirPersonName.FirstName + ' ' + _dirPersonName.LastName;
                    }
                    else
                    {
                        dirPerson.Name=_dirPersonName.FirstName + ' ' + _dirPersonName.MiddleName + ' ' + _dirPersonName.LastName;
                    }
    
                    dirPartyTable   = DirPartyTable::createNew(DirPartyType::Person, dirPerson.Name);
    
                    prospect.Party  = dirPartyTable.RecId;
                    
                    if (!hmParameters.smmBusRelTypeId)
                    {
                        error("There is no default prospect id assigend in the HM parameters.");
                    }
                    
                    prospect.BusRelTypeId   = hmParameters.smmBusRelTypeId;
                    prospect.BusRelAccount  = int642str(dirPartyTable.RecId);
                    prospect.insert();
    
                    //dirPartyTable = DirPartyTable::findRec(prospect.Party,true);
                    dirPartyTable.LanguageId = _languageCodeId;
                    dirPartyTable.update();
                    dirPerson = DirPerson::find(prospect.Party, true);
    
                    dirPerson.BirthDay = dayofmth(_birthDate);
                    dirPerson.BirthMonth = mthofyr(_birthDate);
                    dirPerson.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(_birthDate, 0));
                    newHMPatient.BirthDate = dirPerson.BirthDate();
                    newHMPatient.HMHijriDateOfBirth = HMHijriDateHelper::convertGeorgianToHijri(dirPerson.birthDate());
                    newHMPatient.smmBusRelTable     = prospect.BusRelAccount;
    
                    dirPerson.update();
    
                    newHMPatient.DirPartyTable = dirPartyTable.RecId;
                    newHMPatient.Gender = _gender;
                    newHMPatient.Salutation = _salutation;
                    newHMPatient.NameSuffix = _nameSuffix;
                    newHMPatient.RegistrationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
                    //newHMPatient.Category = _category;
                    // add by daniyal aslam
                    newHMPatient.SocialSecurityNumber = _govId;
                    if (newHMPatient.validateWrite())
                    {
                        //Create Patient's primary address LogisticsLocation
                        if(_LogisticsPostalAddressCountryRegionId && HMPatientTransition::validateAddress(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, _logisticsAddressBuildingCompliment, _logisticsAddressStreet ,
                _logisticsAddressStreetNumber, _logisticsAddressPostBox, _logisticsAddressDistrictName, false))
                        {
                            logisticsLocation = LogisticsLocation::create('Address');
                            if (logisticsLocation.RecId > 0)
                            {
                                logisticsPostalAddress.Location          = logisticsLocation.RecId;
                                logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                                logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                                logisticsPostalAddress.modifiedField(fieldNum(LogisticsPostalAddress, ZipCode));
                                logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                                logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                                logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                                logisticsPostalAddress.BuildingCompliment= _logisticsAddressBuildingCompliment;
                                logisticsPostalAddress.Street            = _logisticsAddressStreet;
                                logisticsPostalAddress.StreetNumber      = _logisticsAddressStreetNumber;
                                logisticsPostalAddress.PostBox           = _logisticsAddressPostBox;
                                logisticsPostalAddress.DistrictName      = _logisticsAddressDistrictName;
                                logisticsPostalAddress.LogisticsPostalAddressMap::formatAddress();
    
                                logisticsPostalAddress.insert();
    
                                dirPartyLocation.Location        = logisticsLocation.RecId;
                                dirPartyLocation.Party           = dirPerson.RecId;
                                dirPartyLocation.IsPostalAddress = NoYes::Yes;
                                dirPartyLocation.IsLocationOwner = NoYes::Yes;
                                dirPartyLocation.IsPrimary = NoYes::Yes;
                                //commented because the fields are deleted
                                //dirPartyLocation.ValidFrom       = DateTimeUtil::getSystemDateTime();
                                //dirPartyLocation.ValidTo         = DateTimeUtil::maxValue();
                                dirPartyLocation.insert();
    
                                RecordInsertList    dirPartyLocationRoleList =  new RecordInsertList(tableNum(DirPartyLocationRole));
                                for(i=1;i<=conLen(_addresssPurpose);i++)
                                {
                                    dirPartyLocationRoleLocal.initValue();
                                    dirPartyLocationRoleLocal.LocationRole = conPeek(_addresssPurpose,i);
                                    dirPartyLocationRoleLocal.PartyLocation = dirPartyLocation.RecId;
                                    dirPartyLocationRoleList.add(dirPartyLocationRoleLocal);
                                }
                                dirPartyLocationRoleList.insertDatabase();
                            }
                        }
    
                        if (_logisticsAddressphone != '')
                        {
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Phone';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressphone;
                            logisticsElectronicAddress.LocatorExtension = _logisticsAddressphoneExt;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
    
                            LogisticsElectronicAddressRole::createLocationRoles(logisticsElectronicAddress.RecId, [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home).RecId], true);
    
                        }
    
                        if (_phoneMobile != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Mobile';
                            logisticsElectronicAddress.IsPrimary        = NoYes::No;
                            logisticsElectronicAddress.Locator = _phoneMobile;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
    
                            LogisticsElectronicAddressRole::createLocationRoles(logisticsElectronicAddress.RecId, [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::SMS).RecId], true);
    
                        }
                        if (_logisticsAddressEmail != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation = LogisticsLocation::create('Email');
                            logisticsElectronicAddress.Description       = 'Email';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressEmail;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Email;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
    
                        }
                        if (_logisticsAddressFax != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation = LogisticsLocation::create('Fax');
                            logisticsElectronicAddress.Description       = 'Fax';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressFax;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Fax;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
    
                        }
    
                        //create employers location
                        logisticsLocation.clear();
                        logisticsPostalAddress.clear();
                        logisticsLocation = LogisticsLocation::create();
                        logisticsPostalAddress.Location = logisticsLocation.RecId;
                        logisticsPostalAddress.CountryRegionId = CompanyInfo::AddrFormat();
                        logisticsPostalAddress.insert();
                        newHMPatient.EmploymentLogisticsLocation = logisticsLocation.RecId;
    
                        newHMPatient.HMAgeValue = _AgeValue;        //added for assume birth date of a patient
                        newHMPatient.AgeInDays = _ageInDays;
                        newHMPatient.AgeInMonths = _ageInMonths;
    
                        //Medisys
                        newHMPatient.Pilot = _pilot;
                        newHMPatient.ramq = _ramq;
                        newHMPatient.PreEmployment = _preEmployment;
                        newHMPatient.Executive = _executive;
                        newHMPatient.ExecutiveProtocol = _executiveProtocol;
                        newHMPatient.PreEmploymentProtocol = _preEmploymentProtocolRecId;
                        newHMPatient.Client = _clientRecId;
    
                        newHMPatient.ContactFirst = _contactFirst;
                        if (_contactFirst)  // If patient is allowed to contact first
                        {
                            newHMPatient.RecallDate =  DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        }
    
                        newHMPatient.FileLocation = hmParameters.HMOrganizationalUnitVirtual;
                        //Medisys
    
                        newHMPatient.insert();
                        addressBooks = DirAddressBook::getDefaultAddressBooks();
                        DirAddressBookParty::createPartyRelations(prospect.Party, conpeek(addressBooks, 1));
                    }
    
                    else
                    {
                        throw Exception::Error;
                    }
                }
            }
    
            if (newHMPatient.RecId != 0)
            {
                // The creation was successful, so we need to store the HMPatientRecId
                newHMPatientRecId = newHMPatient.RecId;
            }
    
            ttscommit;
    
            dirPersonName  = DirPersonName::find(dirPerson.RecId, true);
    
            dirPersonName.validTimeStateUpdateMode(validTimeStateUpdate::Correction);
    
            dirPersonName.HMArabicFirstName     = _dirPersonName.HMArabicFirstName;
            dirPersonName.HMArabicMiddleName    = _dirPersonName.HMArabicMiddleName;
            dirPersonName.HMArabicLastName      = _dirPersonName.HMArabicLastName;
    
            dirPersonName.update();
    
        }
        catch
        {
            if(_showInfo)
            {
                checkFailed("@MAZ58");
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
        catch (Exception::Error)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHMPatientLogisticsAddress</Name>
				<Source><![CDATA[
    public static HMPatientRecId createHMPatientLogisticsAddress(
        HMPatientCategory       _category,
        DirPersonName           _dirPersonName,
        HMPatientId             _patientNumber,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        HMFinClassRefRecId      _financeClassRecId,
        HMAgeValue              _AgeValue = 0,
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressFax = '',
        PhoneLocal                              _logisticsAddressphoneExt = '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' ,
        HMSocialSecurity                        _govId                        = '',
        boolean                                 _showInfo = true,
        PhoneMobile                             _phoneMobile = '',
        container                               _addresssPurpose = conNull(),
        HMAgeValue                              _ageInDays = 0,
        HMAgeValue                              _ageInMonths = 0,
        NoYesId                                 _ramq = NoYes::No,
        NoYesId                                 _pilot = NoYes::No,
        NoYesId                                 _preEmployment = NoYes::No,
        NoYesId                                 _executive = NoYes::No,
        RecId                                   _executiveProtocol = 0,
        RecId                                   _preEmploymentProtocolRecId = 0,
        RecId                                   _clientRecId = 0,
        str                                     _languageCodeId = '',
        str                                     _arabicName='',
        Recid                                   _clinicRecId= 0,
        NoYes                                   _contactFirst = NoYes::No,
        HMNationalIdType                        _nationalIdType = HMNationalIdType::None,
        HMIdentificationNumber                  _identificationNumber = ''
        )
    {
        HMPatient                       newHMPatient;
    
        DirPerson                       dirPerson;
        DirPartyTable                   dirPartyTable;
        CustTable                       custTable;
        container                       addressBooks;
        HMPatientRecId                  newHMPatientRecId = 0;
        LogisticsLocation               logisticsLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        CustGroupId                     custGroupId;
        CustDlvModeId                   dlvMode;
        CustPriceGroup                  custpriceGroup;
        //Zain
        HMCustPriceDiscGroup            discGroup;
        //Zain
        CustPaymMode                    paymentMode;
        int i;
        DirPartyLocationRole            dirPartyLocationRoleLocal;
        HMParameters hmParameters;
        DirPersonName                   dirPersonName;
        //NS: Bug 3769:Estimated age isn't getting calculated on Operations in Connected mode
        HMAgeHelper                     ageHelper;
        container                       customerAgeCon;
        //NE: Bug 3769:Estimated age isn't getting calculated on Operations in Connected mode
       // DialogButton                    dialogButton;
    
        ageHelper = new HMAgeHelper(); 

        hmParameters = HMParameters::find();
    
        custGroupId = hmParameters.CustGroup;
        dlvMode     = hmParameters.SalesOrdDlvModeId;
        paymentMode = hmParameters.CustPaymModeTable;
        custpriceGroup = hmParameters.DefaultPriceGroup;
        //Zain
        discGroup = hmParameters.HMCustPriceDiscGroup;
        //Zain
        //NS: Bug 3769:Estimated age isn't getting calculated on Operations in Connected mode
        customerAgeCon = ageHelper.getYearsMonthsDaysFromDate(_birthDate);

        if (!_ageInDays)
        {
            _ageInDays = conPeek(customerAgeCon, 3);
        }

        if (!_ageInMonths)
        {
            _ageInMonths = conPeek(customerAgeCon, 2);
        }

        if (!_AgeValue)
        {
            _AgeValue = conPeek(customerAgeCon, 1);
        }
        //NE: Bug 3769:Estimated age isn't getting calculated on Operations in Connected mode
        
        if (!custGroupId)
        {
            if(_showInfo)
            {
                info("@MAZ2917");
            }
            return 0;
        }
    
        if ((!dlvMode || !paymentMode) && isConfigurationkeyEnabled(configurationKeyNum(BillNClaimMgmt)))
        {
            if(_showInfo)
            {
                warning("@MAZ8568");
            }
            //info("@MAZ8237");
            //dialogButton = Box::yesNo("@MAZ7454", DialogButton::No, "@SYS301622");
    //
            //if (dialogButton == DialogButton::No)
            //{
                //return 0;
            //}
        }
    
        try
        {
            ttsbegin;
    
            if (_dirPersonName.Person == 0)
            {
                if (!newHMPatient)
                {

                    custTable.AccountNum = _patientNumber;
                    custTable.Currency   = CompanyInfoHelper::standardCurrency();
                    custTable.CustGroup  = custGroupId;
                    custTable.CustType   = CustType::Patient;
                    custTable.PaymMode   = paymentMode;
                    custTable.DlvMode    = dlvMode;
                    custTable.InventSiteId = 'MPH';
                    custTable.InventLocation = 'MPH-GW';
                    custTable.PriceGroup = custpriceGroup;
                    //Zain
                    custTable.LineDisc = discGroup;
                    //Zain
    
                    if (!_dirPersonName.MiddleName)
                    {
                        dirPerson.Name=_dirPersonName.FirstName + ' ' + _dirPersonName.LastName;
                    }
                    else
                    {
                        dirPerson.Name=_dirPersonName.FirstName + ' ' + _dirPersonName.MiddleName + ' ' + _dirPersonName.LastName;
                    }
                    custTable.insert(DirPartyType::Person,dirPerson.Name);
                    dirPartyTable = DirPartyTable::findRec(custTable.Party,true);
                    dirPartyTable.LanguageId = _languageCodeId;
                    dirPartyTable.update();
                    dirPerson = DirPerson::find(custTable.Party, true);
    
                    dirPerson.BirthDay = dayofmth(_birthDate);
                    dirPerson.BirthMonth = mthofyr(_birthDate);
                    dirPerson.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(_birthDate, 0));
                    dirPerson.update();
                    
                    //CS: Bug 3766:In connected mode, DOB is not showing correctly on Patient List and Details page
                    //newHMPatient.BirthDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(dirPerson.BirthDate(), 0), DateTimeUtil::getUserPreferredTimeZone()));
                    newHMPatient.BirthDate = DateTimeUtil::date(DateTimeUtil::newDateTime(dirPerson.BirthDate(), 0, DateTimeUtil::getUserPreferredTimeZone()));
                    //CE: Bug 3766:In connected mode, DOB is not showing correctly on Patient List and Details page
                    newHMPatient.HMHijriDateOfBirth = HMHijriDateHelper::convertGeorgianToHijri(dirPerson.birthDate());
    
    
                    newHMPatient.DirPartyTable  = dirPartyTable.RecId;
                    newHMPatient.CustTable      = custTable.RecId;
                    newHMPatient.Gender         = _gender;
                    newHMPatient.Salutation     = _salutation;
                    newHMPatient.NameSuffix     = _nameSuffix;
                    newHMPatient.RegistrationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
                    //newHMPatient.Category = _category;
                    // add by daniyal aslam
                    newHMPatient.SocialSecurityNumber = _govId;
    
                    newHMPatient.HMNationalIdType = _nationalIdType;
                    newHMPatient.HMIdentificationNumber = _identificationNumber;
    
                    if (newHMPatient.validateWrite())
                    {
                        //Create Patient's primary address LogisticsLocation
                        if (_LogisticsPostalAddressCountryRegionId && HMPatientTransition::validateAddress(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                            _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, _logisticsAddressBuildingCompliment, _logisticsAddressStreet ,
                            _logisticsAddressStreetNumber, _logisticsAddressPostBox, _logisticsAddressDistrictName, false))
                        {
                            logisticsLocation = LogisticsLocation::create('Address');
                            if (logisticsLocation.RecId > 0)
                            {
                                logisticsPostalAddress.Location          = logisticsLocation.RecId;
                                logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                                logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                                logisticsPostalAddress.modifiedField(fieldNum(LogisticsPostalAddress, ZipCode));
                                logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                                logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                                logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                                logisticsPostalAddress.BuildingCompliment= _logisticsAddressBuildingCompliment;
                                logisticsPostalAddress.Street            = _logisticsAddressStreet;
                                logisticsPostalAddress.StreetNumber      = _logisticsAddressStreetNumber;
                                logisticsPostalAddress.PostBox           = _logisticsAddressPostBox;
                                logisticsPostalAddress.DistrictName      = _logisticsAddressDistrictName;
                                logisticsPostalAddress.LogisticsPostalAddressMap::formatAddress();
    
                                logisticsPostalAddress.insert();
    
                                dirPartyLocation.Location        = logisticsLocation.RecId;
                                dirPartyLocation.Party           = dirPerson.RecId;
                                dirPartyLocation.IsPostalAddress = NoYes::Yes;
                                dirPartyLocation.IsLocationOwner = NoYes::Yes;
                                dirPartyLocation.IsPrimary = NoYes::Yes;
                                //commented because the fields are deleted
                                //dirPartyLocation.ValidFrom       = DateTimeUtil::getSystemDateTime();
                                //dirPartyLocation.ValidTo         = DateTimeUtil::maxValue();
                                dirPartyLocation.insert();
    
                                RecordInsertList dirPartyLocationRoleList =  new RecordInsertList(tableNum(DirPartyLocationRole));
                                for(i=1;i<=conLen(_addresssPurpose);i++)
                                {
                                    dirPartyLocationRoleLocal.initValue();
                                    dirPartyLocationRoleLocal.LocationRole = conPeek(_addresssPurpose,i);
                                    dirPartyLocationRoleLocal.PartyLocation = dirPartyLocation.RecId;
                                    dirPartyLocationRoleList.add(dirPartyLocationRoleLocal);
                                }

                                dirPartyLocationRoleList.insertDatabase();
                            }
                        }
    
                        if (_logisticsAddressphone != '')
                        {
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Phone';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressphone;
                            logisticsElectronicAddress.LocatorExtension = _logisticsAddressphoneExt;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
    
                            LogisticsElectronicAddressRole::createLocationRoles(logisticsElectronicAddress.RecId, [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home).RecId], true);
    
                            //dirPartyLocation.Location   = logisticsLocation.RecId;
                            //dirPartyLocation.Party      = dirPerson.RecId;
                            ////todo: fields removed in r2
                            ////commented due to fields removed
                            ////dirPartyLocation.ValidFrom  = DateTimeUtil::getSystemDateTime();
                            ////dirPartyLocation.ValidTo    = DateTimeUtil::maxValue();
                            //dirPartyLocation.insert();
                        }
    
                        if (_phoneMobile != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Mobile';
                            logisticsElectronicAddress.IsPrimary        = NoYes::No;
                            logisticsElectronicAddress.Locator = _phoneMobile;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
    
                            LogisticsElectronicAddressRole::createLocationRoles(logisticsElectronicAddress.RecId, [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::SMS).RecId], true);
    
                            //dirPartyLocation.Location   = logisticsLocation.RecId;
                            //dirPartyLocation.Party      = dirPerson.RecId;
                            ////todo: fields removed in r2
                            ////commented due to fields removed
                            ////dirPartyLocation.ValidFrom  = DateTimeUtil::getSystemDateTime();
                            ////dirPartyLocation.ValidTo    = DateTimeUtil::maxValue();
                            //dirPartyLocation.insert();
                        }
                        if (_logisticsAddressEmail != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation = LogisticsLocation::create('Email');
                            logisticsElectronicAddress.Description       = 'Email';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressEmail;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Email;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
    
                            //dirPartyLocation.Location  = logisticsLocation.RecId;
                            //dirPartyLocation.Party   = dirPerson.RecId;
                            ////todo: fields removed in r2
                            ////commented due to fields removed
                            ////dirPartyLocation.ValidFrom = DateTimeUtil::getSystemDateTime();
                            ////dirPartyLocation.ValidTo = DateTimeUtil::maxValue();
                            //dirPartyLocation.insert();
                        }
                        if (_logisticsAddressFax != '')
                        {
                            logisticsElectronicAddress.clear();
                            //logisticsLocation = LogisticsLocation::create('Fax');
                            logisticsElectronicAddress.Description       = 'Fax';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressFax;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Fax;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
    
                            //dirPartyLocation.Location  = logisticsLocation.RecId;
                            //dirPartyLocation.Party   = dirPerson.RecId;
                            ////todo: fields removed in r2
                            ////commented due to fields removed
                            ////dirPartyLocation.ValidFrom = DateTimeUtil::getSystemDateTime();
                            ////dirPartyLocation.ValidTo = DateTimeUtil::maxValue();
                            //dirPartyLocation.insert();
                        }
    
                        //create employers location
                        logisticsLocation.clear();
                        logisticsPostalAddress.clear();
                        logisticsLocation = LogisticsLocation::create();
                        logisticsPostalAddress.Location = logisticsLocation.RecId;
                        logisticsPostalAddress.CountryRegionId = CompanyInfo::AddrFormat();
                        logisticsPostalAddress.insert();
                        newHMPatient.EmploymentLogisticsLocation = logisticsLocation.RecId;
    
                        newHMPatient.HMAgeValue = _AgeValue;        //added for assume birth date of a patient
                        newHMPatient.AgeInDays = _ageInDays;
                        newHMPatient.AgeInMonths = _ageInMonths;
    
                        //Medisys
                        newHMPatient.Pilot = _pilot;
                        newHMPatient.ramq = _ramq;
                        newHMPatient.PreEmployment = _preEmployment;
                        newHMPatient.Executive = _executive;
                        newHMPatient.ExecutiveProtocol = _executiveProtocol;
                        newHMPatient.PreEmploymentProtocol = _preEmploymentProtocolRecId;
                        newHMPatient.Client = _clientRecId;
    
                        newHMPatient.ContactFirst = _contactFirst;
                        if (_contactFirst)  // If patient is allowed to contact first
                        {
                            newHMPatient.RecallDate =  DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        }
    
    
                        newHMPatient.FileLocation = hmParameters.HMOrganizationalUnitVirtual;
                        //Medisys
    
                        newHMPatient.insert();
                        addressBooks = DirAddressBook::getDefaultAddressBooks();
                        DirAddressBookParty::createPartyRelations(custTable.Party, conpeek(addressBooks, 1));
                    }
    
                    else
                    {
                        throw Exception::Error;
                    }
                }
            }
    
            if (newHMPatient.RecId != 0)
            {
                // The creation was successful, so we need to store the HMPatientRecId
                newHMPatientRecId = newHMPatient.RecId;
                _arabicName = _dirPersonName.HMArabicFirstName+" "+ _dirPersonName.HMArabicMiddleName+" "+_dirPersonName.LastName;
                if(hmParameters.ServiceIntegrateEnable && !HMPatientTransition::updateAccountInCRM(newHMPatientRecId, dirPerson.Name, custTable.AccountNum,dirPerson.birthDate(), _gender,_arabicName))
                {
                    throw Exception::Error;
                }
            }
    
            dirPersonName  = DirPersonName::find(dirPerson.RecId, true);
    
            dirPersonName.validTimeStateUpdateMode(validTimeStateUpdate::Correction);
    
            dirPersonName.HMArabicFirstName     = _dirPersonName.HMArabicFirstName;
            dirPersonName.HMArabicMiddleName    = _dirPersonName.HMArabicMiddleName;
            dirPersonName.HMArabicLastName      = _dirPersonName.HMArabicLastName;
    
            dirPersonName.update();
    
            ttscommit;
        }
        catch
        {
            if(_showInfo)
            {
                checkFailed("@MAZ58");
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
        catch (Exception::Error)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsurancePatient</Name>
				<Source><![CDATA[
    public static HMPatientRecId createInsurancePatient(
        HMPatientCategory       _category,
        DirPersonName           _dirPersonName,
        HMPatientId             _patientNumber,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        HMFinClassRefRecId      _financeClassRecId,
        CustAccount             _insuranceCarrier,
        HMPolicyNumber          _policyNumber,
        HMInsuranceEndDate      _endDate,
        HMInsuranceCoPayAmount  _coPayAmount,
        HMPatientInsAuthorizationLimit _authLimit,
        HMPatientInsAuthorizationDate _authDate,
        DirRelationshipTypeId _relationshipType,
        HMInsurancePolicyType           _policyType,
        HMInsuranceCoInsurancePercentage    _coInsurance,
        RecId                   _eligibleClass,
        HMPriorAuthorizationNumber      _authNumber,
        HMInsuranceDeductibleAmount     _deductible,
        HMInsuranceCurrentDeductibleAmnt    _currentDeductible,
        HMAgeValue              _AgeValue = 0,
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressFax = '',
        PhoneLocal                              _logisticsAddressphoneExt = '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' ,
        HMSocialSecurity                        _govId                        = '',
        PhoneMobile                             _phoneMobile = '',
        container                               _addresssPurpose = conNull(),
        HMAgeValue                             _ageInDays = 0,
        HMAgeValue                              _ageInMonths = 0,
        NoYesId                                 _ramq = NoYes::No,
        NoYesId                                 _pilot = NoYes::No,
        NoYesId                                 _preEmployment = NoYes::No,
        NoYesId                                 _executive = NoYes::No,
        RecId                                   _executiveProtocol = 0,
        RecId                                   _preEmploymentProtocolRecId = 0,
        RecId                                   _clientRecId = 0,
        str                                     _languageCodeId = '',
        Recid                                   _clinicRecId= 0
        )
    {
        HMPatientRecId                  newHMPatientRecId = 0;
    
        try
        {
            ttsBegin;
    
            newHMPatientRecId = HMPatientTransition::createHMPatientLogisticsAddress(_category,_dirPersonName, _patientNumber,
                _birthDate, _gender, _salutation,  _nameSuffix, _financeClassRecId, _AgeValue,
                _LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, _logisticsAddressphone, _logisticsAddressEmail ,
                _logisticsAddressFax, _logisticsAddressphoneExt, _logisticsAddressBuildingCompliment, _logisticsAddressStreet ,
                _logisticsAddressStreetNumber, _logisticsAddressPostBox, _logisticsAddressDistrictName, _govId,true,_phoneMobile,_addresssPurpose,_ageInDays,_ageInMonths,
                _ramq,_pilot,_preEmployment,_executive,_executiveProtocol,_preEmploymentProtocolRecId,_clientRecId,_languageCodeId,"",_clinicRecId);
    
            if(newHMPatientRecId)
            {
                if(HMPatientTransition::addInsuranceDetails(newHMPatientRecId, _insuranceCarrier, _policyNumber, _endDate,
                                                        _coPayAmount, _authLimit, _authDate, _policyType, _coInsurance, _eligibleClass, _authNumber,
                                                        _deductible, _currentDeductible))
                {
                    if(!HMPatientTransition::addRelationship(CustTable::find(_insuranceCarrier).Party, CustTable::findRecId(HMPatient::find(newHMPatientRecId).CustTable).Party,  _relationshipType))
                    {
                        throw Exception::Error;
                    }
                }
                else
                {
                    throw Exception::Error;
                }
            }
            else
            {
                throw Exception::Error;
            }
    
            ttscommit;
        }
        catch
        {
            newHMPatientRecId = 0;
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMedisysHMPatientLogisticsAddress</Name>
				<Source><![CDATA[
    public static HMPatientRecId createMedisysHMPatientLogisticsAddress(
        DirPersonName           _dirPersonName,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        str                     _jobTitle = '',
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressBusinessphone = '',
        PhoneLocal                              _logisticsAddressBusinessphoneExt = '',
        PhoneMobile                             _phoneMobile = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressSecondaryEmail = '',
        LanguageId                              _languageId = '',
        PatientStatus                           _patientstatus = PatientStatus::Active
        )
    {
        HMPatient                       newHMPatient;
    
        DirPerson                       dirPerson;
        CustTable                       custTable;
        container                       addressBooks;
        HMPatientRecId                  newHMPatientRecId = 0;
        LogisticsLocation               logisticsLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        CustGroupId                     custGroupId;
        CustDlvModeId                   dlvMode;
        CustPaymMode                    paymentMode;
        int                             i;
        DirPartyLocationRole            dirPartyLocationRoleLocal;
        HMParameters                    hmParameters;
        DirPartyTable                   dirPartyTable;
    
    
        hmParameters = HMParameters::find();
    
        custGroupId = hmParameters.CustGroup;
        dlvMode     = hmParameters.SalesOrdDlvModeId;
        paymentMode = hmParameters.CustPaymModeTable;
    
        try
        {
            ttsbegin;
    
            if (_dirPersonName.Person == 0)
            {
                if (!newHMPatient)
                {
                    custTable.AccountNum = NumberSeq::newGetNum(hmParameters::numRefPatientId()).num();
                    custTable.Currency   = CompanyInfoHelper::standardCurrency();
                    custTable.CustGroup  = custGroupId;
                    custTable.CustType   = CustType::Patient;
                    custTable.PaymMode   = paymentMode;
                    custTable.DlvMode    = dlvMode;
                    if (!_dirPersonName.MiddleName)
                    {
                        dirPerson.Name=_dirPersonName.FirstName + " " + _dirPersonName.LastName;
                    }
                    else
                    {
                        dirPerson.Name=_dirPersonName.FirstName + " " + _dirPersonName.MiddleName + " " + _dirPersonName.LastName;
                    }
    
                    custTable.insert(DirPartyType::Person,dirPerson.Name);
                    if(_languageId)
                    {
                        dirPartyTable = DirPartyTable::findRec(custTable.Party,true,DirPartyType::Person);
                        if(dirPartyTable)
                        {
                            dirPartyTable.LanguageId = _languageId;
                            dirPartyTable.update();
                        }
                    }
                    dirPerson = DirPerson::find(custTable.Party, true);
    
                    dirPerson.BirthDay  = dayofmth(_birthDate);
                    dirPerson.BirthMonth = mthofyr(_birthDate);
                    dirPerson.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(_birthDate, 0));
                    newHMPatient.BirthDate = dirPerson.BirthDate();
                    newHMPatient.HMHijriDateOfBirth = HMHijriDateHelper::convertGeorgianToHijri(dirPerson.birthDate());
    
                    dirPerson.update();
    
                    newHMPatient.CustTable = custTable.RecId;
                    newHMPatient.Gender = _gender;
                    newHMPatient.RegistrationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
                    newHMPatient.Status = _patientstatus;
                    newHMPatient.Jobtitle = _jobTitle;
    
                    if (newHMPatient.validateWrite())
                    {
                        //Create Patient's primary address LogisticsLocation
                        if(_LogisticsPostalAddressCountryRegionId && HMPatientTransition::validateAddress(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                        _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, '', _logisticsAddressStreet ,
                        '', '','' , false))
                        {
                            logisticsLocation = LogisticsLocation::create('Address');
                            if (logisticsLocation.RecId > 0)
                            {
                                logisticsPostalAddress.Location          = logisticsLocation.RecId;
                                logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                                logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                                logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                                logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                                logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                                logisticsPostalAddress.Street            = _logisticsAddressStreet;
                                logisticsPostalAddress.LogisticsPostalAddressMap::formatAddress();
    
                                logisticsPostalAddress.insert();
    
                                dirPartyLocation.Location        = logisticsLocation.RecId;
                                dirPartyLocation.Party           = dirPerson.RecId;
                                dirPartyLocation.IsPostalAddress = NoYes::Yes;
                                dirPartyLocation.IsLocationOwner = NoYes::Yes;
                                dirPartyLocation.IsPrimary = NoYes::Yes;
                                dirPartyLocation.insert();
    
                                dirPartyLocationRoleLocal.initValue();
                                dirPartyLocationRoleLocal.LocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home).RecId;
                                dirPartyLocationRoleLocal.PartyLocation = dirPartyLocation.RecId;
                                dirPartyLocationRoleLocal.insert();
                            }
                        }
    
                        if (_logisticsAddressBusinessphone != '')
                        {
                            logisticsElectronicAddress.clear();
                            logisticsElectronicAddress.Description = 'Business phone';
                            logisticsElectronicAddress.IsPrimary = NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressBusinessphone;
                            logisticsElectronicAddress.LocatorExtension = _logisticsAddressBusinessphoneExt;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::BusinessPhone;
                            logisticsElectronicAddress.insert();
                        }
    
                        if (_logisticsAddressphone != '')
                        {
                            logisticsElectronicAddress.clear();
                            logisticsElectronicAddress.Description = 'Home phone';
                            logisticsElectronicAddress.IsPrimary = _logisticsAddressBusinessphone != '' ? NoYes::No : NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressphone;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::HomePhone;
                            logisticsElectronicAddress.insert();
                        }
    
                        if (_phoneMobile != '')
                        {
                            logisticsElectronicAddress.clear();
                            logisticsElectronicAddress.Description = 'Mobile';
                            logisticsElectronicAddress.IsPrimary= NoYes::No;
                            logisticsElectronicAddress.Locator = _phoneMobile;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::MobilePhone;
                            logisticsElectronicAddress.insert();
                        }
    
                        if (_logisticsAddressEmail != '')
                        {
                            logisticsElectronicAddress.clear();
                            logisticsElectronicAddress.Description = 'Primary email';
                            logisticsElectronicAddress.IsPrimary = NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressEmail;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Email;
                            logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::PrimaryEmail;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
                        }
    
                        if (_logisticsAddressSecondaryEmail != '')
                        {
                            logisticsElectronicAddress.clear();
                            logisticsElectronicAddress.Description = 'Secondary email';
                            logisticsElectronicAddress.IsPrimary = _logisticsAddressEmail != '' ? NoYes::No : NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressSecondaryEmail;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type = LogisticsElectronicAddressMethodType::Email;
                            logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::SecondaryEmail;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
                        }
    
                        //create employers location
                        logisticsLocation.clear();
                        logisticsPostalAddress.clear();
                        logisticsLocation = LogisticsLocation::create();
                        logisticsPostalAddress.Location = logisticsLocation.RecId;
                        logisticsPostalAddress.CountryRegionId = CompanyInfo::AddrFormat();
                        logisticsPostalAddress.insert();
                        newHMPatient.EmploymentLogisticsLocation = logisticsLocation.RecId;
                        newHMPatient.insert();
                        addressBooks = DirAddressBook::getDefaultAddressBooks();
                        DirAddressBookParty::createPartyRelations(custTable.Party, conpeek(addressBooks, 1));
                    }
    
                    else
                    {
                        throw Exception::Error;
                    }
                }
            }
    
            if (newHMPatient.RecId != 0)
            {
                // The creation was successful, so we need to store the HMPatientRecId
                newHMPatientRecId = newHMPatient.RecId;
            }
    
            ttscommit;
        }
        catch
        {
    
        }
        catch (Exception::DuplicateKeyException)
        {
    
        }
        catch (Exception::Error)
        {
    
        }
    
        return newHMPatientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddress</Name>
				<Source><![CDATA[
    public static  Description255 getAddress(LogisticsAddressCountryRegionId _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' )
    {
        Description255 addressLocation;
    
        addressLocation =  _LogisticsPostalAddressCity + ' ' + _LogisticsPostalAddressState + _LogisticsPostalAddressZipCode + _LogisticsPostalAddressCountryRegionId + ' ' + _logisticsAddressBuildingCompliment + ' ' + _logisticsAddressStreet + ' ' +_logisticsAddressStreetNumber + ' ' + _logisticsAddressPostBox + ' ' +  _logisticsAddressDistrictName;
        return addressLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewNumSeqForAdmissionOrderNumber</Name>
				<Source><![CDATA[
    public static Num getNewNumSeqForAdmissionOrderNumber(RecId _operatingUnit)
    {
        NumberSequenceReference         admissionOrderNumberSeqReference;
        NumberSequenceTable             admissionOrderNumberSeqTable;
        NumberSeq                       admissionOrderNumberSeq;
        SysLastValue                    nextNumSeq;
        Num                             number;
    
        admissionOrderNumberSeqReference  = HMParameters::numRefAdmissionOrderNoId(_operatingUnit);
        admissionOrderNumberSeqTable      = NumberSequenceTable::find(admissionOrderNumberSeqReference.NumberSequenceId);
    
        if (admissionOrderNumberSeqTable)
        {
            // generate admission order number if number sequence code is created.
            admissionOrderNumberSeq = NumberSeq::newGetNumFromId(admissionOrderNumberSeqTable.RecId, true, true, nextNumSeq, true);
    
            if (admissionOrderNumberSeq)
            {
                [number] = nextNumSeq.value;
            }
        }
    
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewNumSeqForCaseNumber</Name>
				<Source><![CDATA[
    public static Num getNewNumSeqForCaseNumber(RecId _operatingUnit)
    {
        NumberSequenceReference         caseNumberSeqReference;
        NumberSequenceTable             caseNumberSeqTable;
        NumberSeq                       caseNumberSeq;
        SysLastValue                    nextNumSeq;
        Num                             number;
    
        caseNumberSeqReference  = HMParameters::numRefEncounterId(_operatingUnit);
    
        if (caseNumberSeqReference)
        {
            caseNumberSeqTable      = NumberSequenceTable::find(caseNumberSeqReference.NumberSequenceId);
            if (caseNumberSeqTable)
            {
                // generate case number if number sequence code is created.
                caseNumberSeq = NumberSeq::newGetNumFromId(caseNumberSeqTable.RecId, true, true, nextNumSeq, true);
    
                if (caseNumberSeq)
                {
                    [number] = nextNumSeq.value;
                }
            }
        }
        else
        {
            error(strFmt("@MAZ8512","@MAZ1375","@MAZ3138"));
        }
    
    
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientMRN</Name>
				<Source><![CDATA[
    public static Num getPatientMRN()
    {
        Num                     number;
        NumberSequenceReference         numberSeqReference;
        NumberSequenceTable             numberSeqTable;
        NumberSeq                       numberSeq;
    
        numberSeqReference  = HMParameters::numRefPatientId();
        numberSeqTable      = NumberSequenceTable::find(numberSeqReference.NumberSequenceId);
    
        if(numberSeqTable)
        {
    
            numberSeq = NumberSeq::newGetNum(numberSeqReference,true);
    
            if(numberSeq)
            {
                number = numberSeq.num();
            }
        }
    
        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountInCRM</Name>
				<Source><![CDATA[
    public static boolean updateAccountInCRM(RecId _patientRecId, Name _patientName, HMPatientId _patientMRN,DirPersonBirthDate _patientDob= dateNull(), HcmPersonGender _gender = HcmPersonGender::None,str arabicName='')
    {
        boolean ret;
       
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
      
        container conValues;
    
        ret = appHelper.callPostWebAPI('api/patientchart/createAccount', "{'patientId':'" + int642str(_patientRecId) +"','name':'" + _patientName +"','mrn':'" + _patientMRN  +"','arabicName':'"+arabicName +"','gender':'"+int2str(_gender)+"','dob':'" + date2str( _patientDob,321,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4) +"'}");
    
        if(ret)
        {
            conValues = appHelper.parmRecordsCon();
    
            if(con2Str(conValues) == 'True')
            {
                ret = true;
            }
            else
            {
                ret = checkFailed("Error creating patient in Application");
            }
        }
        else
        {
            if(appHelper.parmErrorMessage())
            {
                checkFailed(appHelper.parmErrorMessage());
            }
    
            ret = checkFailed("Error creating patient in Application");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorporateAndRelation</Name>
				<Source><![CDATA[
    public static boolean updateCorporateAndRelation(RecId _patientRecId,
        CustAccount             _insuranceCarrier,
        HMPolicySubscriberID    _employeeId,
        HMCorporateCarrierEmployeeGrade      _employeeGrade,
        RecId                   _eligibleClass,
        string10                _corporatePlan,
        DirRelationshipTypeId _relationshipType)
    {
        HMPatientInsurance          hmPatientInsurance;
        DirPartyRelationship        dirPartyRelationship;
        RecId                       childPartyRecId;
        boolean ret;
        boolean found;
    
        try
        {
            ttsBegin;
    
            select forUpdate * from hmPatientInsurance
                where hmPatientInsurance.HMPayerType == HMPayerType::Corporate
                && hmPatientInsurance.HMPatient == _patientRecId;
    
            if(hmPatientInsurance)
            {
                while(hmPatientInsurance)
                {
                    if(hmPatientInsurance.InsuranceCarrier == _insuranceCarrier)
                    {
                        found = true;
    
                        hmPatientInsurance.InsuranceStatus = HMInsuranceStatus::Active;
    
                        hmPatientInsurance.EmployeeID = _employeeId;
                        hmPatientInsurance.EmployeeGrade = _employeeGrade;
                        hmPatientInsurance.HMEligibleClass = _eligibleClass;
                        hmPatientInsurance.HMCorporatePlan = _corporatePlan;
    
                        if(hmPatientInsurance.validateWrite())
                        {
                            hmPatientInsurance.update();
                        }
                        else
                        {
                            throw Exception::Error;
                        }
                    }
                    else
                    {
                        if(hmPatientInsurance.validateDelete())
                        {
                            hmPatientInsurance.delete();
                        }
                        else
                        {
                            throw Exception::Error;
                        }
                    }
    
                    next hmPatientInsurance;
                }
            }
            else
            {
                if(HMPatientTransition::addCorporateDetails(_patientRecId, _insuranceCarrier, _employeeId, _employeeGrade, _eligibleClass,_corporatePlan))
                {
                    found = true;
                }
                else
                {
                    throw Exception::Error;
                }
            }
    
            if(!found)
            {
                if(HMPatientTransition::addCorporateDetails(_patientRecId, _insuranceCarrier, _employeeId, _employeeGrade, _eligibleClass,_corporatePlan))
                {
                    found = true;
                }
                else
                {
                    throw Exception::Error;
                }
            }
    
            if(found)
            {
                childPartyRecId = CustTable::findRecId(HMPatient::find(_patientRecId).CustTable).Party;
    
                if(DirPartyRelationship::exist(_relationshipType,CustTable::find(_insuranceCarrier).Party,childPartyRecId))
                {
                    ret = true;
                }
                else
                {
                    if(HMPatientTransition::addRelationship(CustTable::find(_insuranceCarrier).Party,childPartyRecId, _relationshipType))
                    {
                        ret = true;
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                }
            }
    
            ttsCommit;
        }
        catch
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCorporatePatient</Name>
				<Source><![CDATA[
    public static boolean updateCorporatePatient(
        RecId                   _hmPatientRecId,
        FirstName               _firstName,
        MiddleName              _middleName,
        LastName                _lastName,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HRMSalutation           _salutation,
        HRMNameSuffix           _nameSuffix,
        CustAccount             _insuranceCarrier,
        HMPolicySubscriberID    _employeeId,
        HMCorporateCarrierEmployeeGrade      _employeeGrade,
        DirRelationshipTypeId _relationshipType,
        RecId                   _eligibleClass,
        string10                _corporatePlan,
        HMAgeValue              _AgeValue = 0,
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressFax = '',
        PhoneLocal                              _logisticsAddressphoneExt = '',
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment = '',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber = '',
        LogisticsAddressPostBox                 _logisticsAddressPostBox = '',
        LogisticsAddressDistrictName            _logisticsAddressDistrictName = '' ,
        HMSocialSecurity                        _govId                        = '',
        PhoneMobile                             _phoneMobile = '',
        boolean                                 _showInfo = true
        )
    {
        HMPatient                       hmPatient;
        DirPerson                       dirPerson;
        CustTable                       custTable;
        DirPersonName                   dirPersonName;
        boolean                         ret;
        //container                       addressBooks;
        LogisticsLocation               logisticsLocation;
        LogisticsPostalAddress          logisticsPostalAddress;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        DirPartyLocationRole            dirPartyLocationRoleLocal;
    
        try
        {
            ttsbegin;
    
            hmPatient = HMPatient::find(_hmPatientRecId, true);
    
            if (hmPatient)
            {
                custTable = CustTable::findRecId(hmPatient.CustTable);
    
                dirPerson = DirPerson::find(custTable.Party, true);
    
                dirPerson.BirthDay = dayofmth(_birthDate);
                dirPerson.BirthMonth = mthofyr(_birthDate);
                dirPerson.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(_birthDate, 0));
                hmPatient.BirthDate = dirPerson.BirthDate();
                dirPerson.update();
    
                dirPersonName = DirPersonName::find(dirPerson.RecId, true);
                dirPersonName.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
    
                dirPersonName.FirstName = _firstName;
                dirPersonName.MiddleName = _middleName;
                dirPersonName.LastName = _lastName;
    
                dirPersonName.update();
    
                hmPatient.Gender = _gender;
                hmPatient.SocialSecurityNumber = _govId;
                hmPatient.Salutation = _salutation;
                hmPatient.NameSuffix = _nameSuffix;
    
    
                if (hmPatient.validateWrite())
                {
                    if(_LogisticsPostalAddressCountryRegionId && HMPatientTransition::validateAddress(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressZipCode, _LogisticsPostalAddressCity,
                    _LogisticsPostalAddressState, _LogisticsPostalAddressCounty, _logisticsAddressBuildingCompliment, _logisticsAddressStreet ,
                    _logisticsAddressStreetNumber, _logisticsAddressPostBox, _logisticsAddressDistrictName, false))
                    {
                        dirPartyLocation = dirPartyLocation::findByPartyLocationRoleType(dirPerson.RecId,LogisticsLocationRoleType::Communicated);
    
                        if(dirPartyLocation)
                        {
                            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(dirPartyLocation.Location,true);
    
                            logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                            logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                            logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                            logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                            logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                            logisticsPostalAddress.BuildingCompliment= _logisticsAddressBuildingCompliment;
                            logisticsPostalAddress.Street            = _logisticsAddressStreet;
                            logisticsPostalAddress.StreetNumber      = _logisticsAddressStreetNumber;
                            logisticsPostalAddress.PostBox           = _logisticsAddressPostBox;
                            logisticsPostalAddress.DistrictName      = _logisticsAddressDistrictName;
                            logisticsPostalAddress.Address           = HMPatientTransition::getAddress(_LogisticsPostalAddressCountryRegionId,_LogisticsPostalAddressZipCode,_LogisticsPostalAddressCity,_LogisticsPostalAddressState,_logisticsAddressBuildingCompliment,_logisticsAddressStreet,_logisticsAddressStreetNumber,_logisticsAddressPostBox,_logisticsAddressDistrictName);
    
                            logisticsPostalAddress.update();
                        }
                        else
                        {
                            logisticsLocation = LogisticsLocation::create('Address');
                            if (logisticsLocation.RecId > 0)
                            {
                                logisticsPostalAddress.Location          = logisticsLocation.RecId;
                                logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                                logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                                logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                                logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                                logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                                logisticsPostalAddress.BuildingCompliment= _logisticsAddressBuildingCompliment;
                                logisticsPostalAddress.Street            = _logisticsAddressStreet;
                                logisticsPostalAddress.StreetNumber      = _logisticsAddressStreetNumber;
                                logisticsPostalAddress.PostBox           = _logisticsAddressPostBox;
                                logisticsPostalAddress.DistrictName      = _logisticsAddressDistrictName;
                                logisticsPostalAddress.Address           = HMPatientTransition::getAddress(_LogisticsPostalAddressCountryRegionId,_LogisticsPostalAddressZipCode,_LogisticsPostalAddressCity,_LogisticsPostalAddressState,_logisticsAddressBuildingCompliment,_logisticsAddressStreet,_logisticsAddressStreetNumber,_logisticsAddressPostBox,_logisticsAddressDistrictName);
    
                                logisticsPostalAddress.insert();
    
                                dirPartyLocation.Location        = logisticsLocation.RecId;
                                dirPartyLocation.Party           = dirPerson.RecId;
                                dirPartyLocation.IsPostalAddress = NoYes::Yes;
                                dirPartyLocation.IsLocationOwner = NoYes::Yes;
                                dirPartyLocation.IsPrimary = NoYes::Yes;
                                //commented because the fields are deleted
                                //dirPartyLocation.ValidFrom       = DateTimeUtil::getSystemDateTime();
                                //dirPartyLocation.ValidTo         = DateTimeUtil::maxValue();
                                dirPartyLocation.insert();
    
                                dirPartyLocationRoleLocal.initValue();
                                dirPartyLocationRoleLocal.LocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Communicated).RecId;
                                dirPartyLocationRoleLocal.PartyLocation = dirPartyLocation.RecId;
                                dirPartyLocationRoleLocal.insert();
                            }
                        }
                    }
    
                    if (_logisticsAddressphone != '')
                    {
                        select forUpdate * from logisticsElectronicAddress
                            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Phone
                                && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
                            && dirPartyLocation.Party == dirPerson.RecId;
    
                        if(logisticsElectronicAddress)
                        {
                            logisticsElectronicAddress.Locator = _logisticsAddressphone;
                            logisticsElectronicAddress.LocatorExtension = _logisticsAddressphoneExt;
                            logisticsElectronicAddress.update();
                        }
                        else
                        {
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Phone';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator = _logisticsAddressphone;
                            logisticsElectronicAddress.LocatorExtension = _logisticsAddressphoneExt;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
                        }
    
                        //dirPartyLocation.Location   = logisticsLocation.RecId;
                        //dirPartyLocation.Party      = dirPerson.RecId;
                        ////todo: fields removed in r2
                        ////commented due to fields removed
                        ////dirPartyLocation.ValidFrom  = DateTimeUtil::getSystemDateTime();
                        ////dirPartyLocation.ValidTo    = DateTimeUtil::maxValue();
                        //dirPartyLocation.insert();
                    }
    
                    if (_phoneMobile != '')
                    {
                        select forUpdate * from logisticsElectronicAddress
                            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Phone
                                && logisticsElectronicAddress.Description == 'Mobile'
                        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
                            && dirPartyLocation.Party == dirPerson.RecId;
    
                        if(logisticsElectronicAddress)
                        {
                            logisticsElectronicAddress.Locator = _phoneMobile;
                            logisticsElectronicAddress.update();
                        }
                        else
                        {
                            //logisticsLocation   = LogisticsLocation::create('Phone');
                            logisticsElectronicAddress.Description       = 'Mobile';
                            logisticsElectronicAddress.IsPrimary        = NoYes::No;
                            logisticsElectronicAddress.Locator = _phoneMobile;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                            logisticsElectronicAddress.insert();
                        }
    
                        //dirPartyLocation.Location   = logisticsLocation.RecId;
                        //dirPartyLocation.Party      = dirPerson.RecId;
                        ////todo: fields removed in r2
                        ////commented due to fields removed
                        ////dirPartyLocation.ValidFrom  = DateTimeUtil::getSystemDateTime();
                        ////dirPartyLocation.ValidTo    = DateTimeUtil::maxValue();
                        //dirPartyLocation.insert();
                    }
                    if (_logisticsAddressEmail != '')
                    {
                        select forUpdate * from logisticsElectronicAddress
                            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Email
                                && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
                            && dirPartyLocation.Party == dirPerson.RecId;
    
                        if(logisticsElectronicAddress)
                        {
                            logisticsElectronicAddress.Locator = _logisticsAddressEmail;
                            logisticsElectronicAddress.update();
                        }
                        else
                        {
                             //logisticsLocation = LogisticsLocation::create('Email');
                            logisticsElectronicAddress.Description       = 'Email';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressEmail;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Email;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
                        }
    
                        //dirPartyLocation.Location  = logisticsLocation.RecId;
                        //dirPartyLocation.Party   = dirPerson.RecId;
                        ////todo: fields removed in r2
                        ////commented due to fields removed
                        ////dirPartyLocation.ValidFrom = DateTimeUtil::getSystemDateTime();
                        ////dirPartyLocation.ValidTo = DateTimeUtil::maxValue();
                        //dirPartyLocation.insert();
                    }
                    if (_logisticsAddressFax != '')
                    {
                        select forUpdate * from logisticsElectronicAddress
                            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Fax
                                && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
                            && dirPartyLocation.Party == dirPerson.RecId;
    
                        if(logisticsElectronicAddress)
                        {
                            logisticsElectronicAddress.Locator = _logisticsAddressFax;
                            logisticsElectronicAddress.update();
                        }
                        else
                        {
                            //logisticsLocation = LogisticsLocation::create('Fax');
                            logisticsElectronicAddress.Description       = 'Fax';
                            logisticsElectronicAddress.IsPrimary        = NoYes::Yes;
                            logisticsElectronicAddress.Locator          = _logisticsAddressFax;
                            logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(dirPerson.RecId, logisticsElectronicAddress.Location).Location;
                            logisticsElectronicAddress.Type             = LogisticsElectronicAddressMethodType::Fax;
                            logisticsElectronicAddress.LocatorExtension = '';
                            logisticsElectronicAddress.insert();
                        }
    
                        //dirPartyLocation.Location  = logisticsLocation.RecId;
                        //dirPartyLocation.Party   = dirPerson.RecId;
                        ////todo: fields removed in r2
                        ////commented due to fields removed
                        ////dirPartyLocation.ValidFrom = DateTimeUtil::getSystemDateTime();
                        ////dirPartyLocation.ValidTo = DateTimeUtil::maxValue();
                        //dirPartyLocation.insert();
                    }
    
                    hmPatient.HMAgeValue = _AgeValue;        //added for assume birth date of a patient
                    hmPatient.update();
    
                    if(HMPatientTransition::updateCorporateAndRelation(hMPatient.RecId, _insuranceCarrier, _employeeId, _employeeGrade, _eligibleClass,_corporatePlan,_relationshipType))
                    {
                        ret = true;
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                }
                else
                {
                    throw Exception::Error;
                }
            }
    
            ttscommit;
        }
        catch
        {
            if(_showInfo)
            {
                checkFailed("@MAZ8860");
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
        catch (Exception::Error)
        {
            if(_showInfo)
            {
                checkFailed("@SYS78886");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMedisysHMPatientLogisticsAddress</Name>
				<Source><![CDATA[
    public static boolean updateMedisysHMPatientLogisticsAddress(
        RecId                   _patientRecId,
        HcmPersonGender         _gender,
        str                     _jobTitle = '',
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId = '',
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode = '',
        LogisticsAddressCityName                    _LogisticsPostalAddressCity = '',
        LogisticsAddressStateId                 _LogisticsPostalAddressState= '',
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty ='',
        LogisticsAddressStreet                  _logisticsAddressStreet = '',
        LogisticsElectronicAddressLocator       _logisticsAddressphone = '',
        LogisticsElectronicAddressLocator       _logisticsAddressBusinessphone = '',
        PhoneLocal                              _logisticsAddressBusinessphoneExt = '',
        PhoneMobile                             _phoneMobile = '',
        LogisticsElectronicAddressLocator       _logisticsAddressEmail = '',
        LogisticsElectronicAddressLocator       _logisticsAddressSecondaryEmail = '',
        LanguageId                              _languageId = '',
        PatientStatus                           _patientstatus = PatientStatus::Active
        )
    {
    
        HMPatient                   hmPatient;
        DirPartyPostalAddressView   dirPartyPostalAddressView;
        CustTable                   custTable;
        LogisticsPostalAddress      logisticsPostalAddress;
        LogisticsLocation           logisticsLocation;
        DirPartyLocation            dirPartyLocation;
        DirPartyContactInfoView     dirPartyContactInfoView;
        LogisticsElectronicAddress  logisticsElectronicAddress;
        DirPartyLocationRole            dirPartyLocationRoleLocal;
    
        try
        {
            ttsBegin;
            hmPatient = hmPatient::find(_patientRecId, true);
            hmPatient.Gender = hmPatient.Gender!= HcmPersonGender::None ? hmPatient.Gender : _gender;
            hmPatient.Jobtitle = hmPatient.Jobtitle ? hmPatient.Jobtitle : _jobTitle;
    
            select AccountNum,party from custTable where custTable.RecId == hmPatient.CustTable;
    
            select Location from dirPartyPostalAddressView where dirPartyPostalAddressView.Party == custTable.Party
            && dirPartyPostalAddressView.IsPrimary == NoYes::Yes;
    
            if(dirPartyPostalAddressView.Location)
            {
                logisticsPostalAddress = LogisticsPostalAddress::findByLocation(dirPartyPostalAddressView.Location,true);
                logisticsPostalAddress.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
                logisticsPostalAddress.ValidFrom = DateTimeUtil::utcNow();
    
                logisticsPostalAddress.CountryRegionId   = (_LogisticsPostalAddressCountryRegionId != "") ? _LogisticsPostalAddressCountryRegionId : logisticsPostalAddress.CountryRegionId;
                logisticsPostalAddress.State             = (_LogisticsPostalAddressState != "") ? _LogisticsPostalAddressState : logisticsPostalAddress.State;
                logisticsPostalAddress.City              = (_LogisticsPostalAddressCity != "") ? _LogisticsPostalAddressCity : logisticsPostalAddress.City ;
                logisticsPostalAddress.ZipCode           = (_LogisticsPostalAddressZipCode != "") ? _LogisticsPostalAddressZipCode : logisticsPostalAddress.ZipCode;
                logisticsPostalAddress.County            = (_LogisticsPostalAddressCounty != "") ? _LogisticsPostalAddressCounty : logisticsPostalAddress.Street;
                logisticsPostalAddress.Street            = (_logisticsAddressStreet != "") ? _logisticsAddressStreet : logisticsPostalAddress.Street;
                logisticsPostalAddress.LogisticsPostalAddressMap::formatAddress();
                logisticsPostalAddress.insert();
            }
            else
            {
                logisticsLocation = LogisticsLocation::create('Address');
                if (logisticsLocation.RecId > 0)
                {
                    logisticsPostalAddress.Location          = logisticsLocation.RecId;
                    logisticsPostalAddress.CountryRegionId   = _LogisticsPostalAddressCountryRegionId;
                    logisticsPostalAddress.State             = _LogisticsPostalAddressState;
                    logisticsPostalAddress.City              = _LogisticsPostalAddressCity;
                    logisticsPostalAddress.ZipCode           = _LogisticsPostalAddressZipCode;
                    logisticsPostalAddress.County            = _LogisticsPostalAddressCounty;
                    logisticsPostalAddress.Street            = _logisticsAddressStreet;
                    logisticsPostalAddress.Address           = HMPatientTransition::getAddress(_LogisticsPostalAddressCountryRegionId,_LogisticsPostalAddressZipCode,_LogisticsPostalAddressCity,_LogisticsPostalAddressState,'',_logisticsAddressStreet,'','','');
    
                    logisticsPostalAddress.insert();
    
                    dirPartyLocation.Location        = logisticsLocation.RecId;
                    dirPartyLocation.Party           = custTable.Party;
                    dirPartyLocation.IsPostalAddress = NoYes::Yes;
                    dirPartyLocation.IsLocationOwner = NoYes::Yes;
                    dirPartyLocation.IsPrimary = NoYes::Yes;
                    dirPartyLocation.insert();
    
                    dirPartyLocationRoleLocal.initValue();
                    dirPartyLocationRoleLocal.LocationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home).RecId;
                    dirPartyLocationRoleLocal.PartyLocation = dirPartyLocation.RecId;
                    dirPartyLocationRoleLocal.insert();
                }
            }
    
            if (_logisticsAddressBusinessphone != '')
            {
                select Location from dirPartyContactInfoView
                where dirPartyContactInfoView.Party == custTable.Party
                && dirPartyContactInfoView.MedisysContactType == HMMedisysContactType::BusinessPhone;
    
                select forupdate logisticsElectronicAddress where
                logisticsElectronicAddress.Location == dirPartyContactInfoView.Location;
    
                if(LogisticsElectronicAddress)
                {
                    if(logisticsElectronicAddress.Locator != _logisticsAddressBusinessphone
                    || logisticsElectronicAddress.LocatorExtension != _logisticsAddressBusinessphoneExt)
                    {
                        logisticsElectronicAddress.Locator = _logisticsAddressBusinessphone != '' ? _logisticsAddressBusinessphone : logisticsElectronicAddress.Locator;
                        logisticsElectronicAddress.LocatorExtension = _logisticsAddressBusinessphoneExt != '' ? _logisticsAddressBusinessphoneExt : logisticsElectronicAddress.LocatorExtension;
                        logisticsElectronicAddress.update();
                    }
                }
                else
                {
                    logisticsElectronicAddress.clear();
    
                    logisticsElectronicAddress.Description = 'Business phone';
                    logisticsElectronicAddress.IsPrimary = NoYes::Yes;
                    logisticsElectronicAddress.Locator = _logisticsAddressBusinessphone;
                    logisticsElectronicAddress.LocatorExtension = _logisticsAddressBusinessphoneExt;
                    logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(custTable.Party, logisticsElectronicAddress.Location).Location;
                    logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                    logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::BusinessPhone;
                    logisticsElectronicAddress.insert();
                }
            }
    
            if (_logisticsAddressphone != '')
            {
    
                select Location from dirPartyContactInfoView
                where dirPartyContactInfoView.Party == custTable.Party
                && dirPartyContactInfoView.MedisysContactType == HMMedisysContactType::HomePhone;
    
                select forupdate logisticsElectronicAddress where
                logisticsElectronicAddress.Location == dirPartyContactInfoView.Location;
    
                if(LogisticsElectronicAddress)
                {
                    if(logisticsElectronicAddress.Locator != _logisticsAddressphone)
                    {
                        logisticsElectronicAddress.Locator = _logisticsAddressphone;
                        logisticsElectronicAddress.update();
                    }
                }
                else
                {
                    logisticsElectronicAddress.clear();
                    logisticsElectronicAddress.Description = 'Home phone';
                    logisticsElectronicAddress.Locator = _logisticsAddressphone;
                    logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(custTable.Party, logisticsElectronicAddress.Location).Location;
                    logisticsElectronicAddress.IsPrimary = logisticsElectronicAddress::findPrimary(logisticsElectronicAddress.Location, LogisticsElectronicAddressMethodType::Phone).RecId ? NoYes::No : NoYes::Yes;
                    logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                    logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::HomePhone;
                    logisticsElectronicAddress.insert();
                }
            }
    
            if (_phoneMobile != '')
            {
    
                select Location from dirPartyContactInfoView
                where dirPartyContactInfoView.Party == custTable.Party
                && dirPartyContactInfoView.MedisysContactType == HMMedisysContactType::MobilePhone;
    
                select forupdate logisticsElectronicAddress where
                logisticsElectronicAddress.Location == dirPartyContactInfoView.Location;
    
                if(LogisticsElectronicAddress)
                {
                    if(logisticsElectronicAddress.Locator != _phoneMobile)
                    {
                        logisticsElectronicAddress.Locator = _phoneMobile;
                        logisticsElectronicAddress.update();
                    }
                }
                else
                {
                    logisticsElectronicAddress.clear();
                    logisticsElectronicAddress.Description = 'Mobile';
                    logisticsElectronicAddress.IsPrimary= NoYes::No;
                    logisticsElectronicAddress.Locator = _phoneMobile;
                    logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(custTable.Party, logisticsElectronicAddress.Location).Location;
                    logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Phone;
                    logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::MobilePhone;
                    logisticsElectronicAddress.insert();
                }
            }
    
            if (_logisticsAddressEmail != '')
            {
                select Location from dirPartyContactInfoView
                where dirPartyContactInfoView.Party == custTable.Party
                && dirPartyContactInfoView.MedisysContactType == HMMedisysContactType::PrimaryEmail;
    
                select forupdate logisticsElectronicAddress where
                logisticsElectronicAddress.Location == dirPartyContactInfoView.Location;
    
                if(LogisticsElectronicAddress)
                {
                    if(logisticsElectronicAddress.Locator != _logisticsAddressEmail)
                    {
                        logisticsElectronicAddress.Locator = _logisticsAddressEmail;
                        logisticsElectronicAddress.update();
                    }
                }
                else
                {
                    logisticsElectronicAddress.clear();
                    logisticsElectronicAddress.Description = 'Primary email';
                    logisticsElectronicAddress.IsPrimary = NoYes::Yes;
                    logisticsElectronicAddress.Locator = _logisticsAddressEmail;
                    logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(custTable.Party, logisticsElectronicAddress.Location).Location;
                    logisticsElectronicAddress.Type  = LogisticsElectronicAddressMethodType::Email;
                    logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::PrimaryEmail;
                    logisticsElectronicAddress.insert();
                }
            }
    
            if (_logisticsAddressSecondaryEmail != '')
            {
                select Location from dirPartyContactInfoView
                where dirPartyContactInfoView.Party == custTable.Party
                && dirPartyContactInfoView.MedisysContactType == HMMedisysContactType::SecondaryEmail;
    
                select forupdate logisticsElectronicAddress where
                logisticsElectronicAddress.Location == dirPartyContactInfoView.Location;
    
                if(LogisticsElectronicAddress)
                {
                    if(logisticsElectronicAddress.Locator != _logisticsAddressSecondaryEmail)
                    {
                        logisticsElectronicAddress.Locator = _logisticsAddressSecondaryEmail;
                        logisticsElectronicAddress.update();
                    }
                }
                else
                {
                    logisticsElectronicAddress.clear();
                    logisticsElectronicAddress.Description = 'Secondary email';
                    logisticsElectronicAddress.Locator = _logisticsAddressSecondaryEmail;
                    logisticsElectronicAddress.Location = DirPartyLocation::findOrCreate(custTable.Party, logisticsElectronicAddress.Location).Location;
                    logisticsElectronicAddress.IsPrimary = logisticsElectronicAddress::findPrimary(logisticsElectronicAddress.Location, LogisticsElectronicAddressMethodType::Email).RecId ? NoYes::No : NoYes::Yes;
                    logisticsElectronicAddress.Type = LogisticsElectronicAddressMethodType::Email;
                    logisticsElectronicAddress.MedisysContactType = HMMedisysContactType::SecondaryEmail;
                    logisticsElectronicAddress.LocatorExtension = '';
                    logisticsElectronicAddress.insert();
                }
            }
    
            ttscommit;
            return true;
        }
        catch
        {
            return false;
        }
        catch (Exception::DuplicateKeyException)
        {
            return false;
        }
        catch (Exception::Error)
        {
            return false;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddress</Name>
				<Source><![CDATA[
    public static boolean validateAddress(
        LogisticsAddressCountryRegionId         _LogisticsPostalAddressCountryRegionId,
        LogisticsAddressZipCodeId               _LogisticsPostalAddressZipCode,
        LogisticsAddressCityName              _LogisticsPostalAddressCity,
        LogisticsAddressStateId                 _LogisticsPostalAddressState,
        LogisticsAddressCountyId                _LogisticsPostalAddressCounty,
        LogisticsAddressBuildingCompliment      _logisticsAddressBuildingCompliment,
        LogisticsAddressStreet                  _logisticsAddressStreet,
        LogisticsAddressStreetNumber            _logisticsAddressStreetNumber,
        LogisticsAddressPostBox                 _logisticsAddressPostBox,
        LogisticsAddressDistrictName            _logisticsAddressDistrictName,
        boolean _showWarning = true)
    {
        boolean ret = true;
        LogisticsAddressDistrict    district;
    
        if(!_LogisticsPostalAddressCountryRegionId)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS7437"));
            }
            ret = false;
        }
    
        if(_LogisticsPostalAddressCountryRegionId && !LogisticsAddressCountryRegion::exist(_LogisticsPostalAddressCountryRegionId))
        {
            if(_showWarning)
            {
                warning(strFmt("@MAZ8861","@SYS7437"));
            }
            ret = false;
        }
    
        //if(_LogisticsPostalAddressCountryRegionId && _LogisticsPostalAddressZipCode && !LogisticsAddressZipCode::findZipCodeCountryRegion(_LogisticsPostalAddressZipCode,_LogisticsPostalAddressCountryRegionId).RecId)
        //{
            //if(_showWarning)
            //{
                //warning(strFmt("@MAZ8861","@SYS12463"));
            //}
            //ret = false;
        //}
    //
        //if(_LogisticsPostalAddressCountryRegionId && _LogisticsPostalAddressState && !LogisticsAddressState::exist(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressState))
        //{
            //if(_showWarning)
            //{
                //warning(strFmt("@MAZ8861","@SYS303358"));
            //}
            //ret = false;
        //}
    //
        //if(_LogisticsPostalAddressCountryRegionId && _LogisticsPostalAddressCity && !LogisticsAddresssCity::findCityCountryRegion(_LogisticsPostalAddressCity,_LogisticsPostalAddressCountryRegionId).RecId)
        //{
            //if(_showWarning)
            //{
                //warning(strFmt("@MAZ8861","@SYS22249"));
            //}
            //ret = false;
        //}
    //
        //if(_logisticsAddressDistrictName)
        //{
            //select firstonly district
                //where  district.Name  == _logisticsAddressDistrictName;
            //
            //if(!district.RecId)
            //{
                //if(_showWarning)
                //{
                    //warning(strFmt("@MAZ8861","@MAZ8862"));
                //}
                //ret = false;
            //}
        //}
    //
        //if(_LogisticsPostalAddressCountryRegionId && _LogisticsPostalAddressState && _LogisticsPostalAddressCounty && !LogisticsAddressCounty::exist(_LogisticsPostalAddressCountryRegionId, _LogisticsPostalAddressState, _LogisticsPostalAddressCounty))
        //{
            //if(_showWarning)
            //{
                //warning(strFmt("@MAZ8861","@SYS13522"));
            //}
            //ret = false;
        //}
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalutationRules</Name>
				<Source><![CDATA[
    public static boolean validateSalutationRules(
        HRMSalutation _salutation,
        HcmPersonGender _gender,
        DirPersonMaritalStatus _maritalStatus,
        HMAgeValue  _age,
        boolean _showWarning = true)
    {
        boolean ret = true;
        HMSalutation hmSalutation = HMSalutation::findBySalutation(_salutation);
    
        if(!hmSalutation)
        {
            return true;
        }
    
        if(_gender && conLen(hmSalutation.Gender) != 0 && !conFind(hmSalutation.Gender,enum2Symbol(enumNum(HcmPersonGender),_gender)))
        {
            if(_showWarning)
            {
                warning(strFmt("@MAZ8982"));
            }
            ret = false;
        }
    
        if(_maritalStatus && conLen(hmSalutation.MaritalStatus) != 0 && !conFind(hmSalutation.MaritalStatus,enum2Symbol(enumNum(DirPersonMaritalStatus),_maritalStatus)))
        {
            if(_showWarning)
            {
                warning(strFmt("@MAZ8983"));
            }
            ret = false;
        }
    
        if(_age)
        {
            if(hmSalutation.AgeMin &&  hmSalutation.AgeMax && !(_age >= hmSalutation.AgeMin && _age <= hmSalutation.AgeMax))
            {
                if(_showWarning)
                {
                    warning(strFmt("@MAZ8984"));
                }
                ret = false;
            }
            else if(hmSalutation.AgeMin && _age < hmSalutation.AgeMin )
            {
                if(_showWarning)
                {
                    warning(strFmt("@MAZ8985"));
                }
                ret = false;
            }
            else if(hmSalutation.AgeMax && _age > hmSalutation.AgeMax)
            {
                if(_showWarning)
                {
                    warning(strFmt("@MAZ8986"));
                }
                ret = false;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCorporatePatient</Name>
				<Source><![CDATA[
    public static boolean validateCorporatePatient(
        FirstName               _firstName,
        LastName                _lastName,
        HcmPersonBirthDate      _birthDate,
        HcmPersonGender         _gender,
        HMFinClassRefRecId      _financeClassRecId,
        CustAccount             _insuranceCarrier ,
        HMPolicySubscriberID    _employeeId,
        HMCorporateCarrierEmployeeGrade      _employeeGrade,
        DirRelationshipTypeId _relationshipType,
        RecId                   _eligibleClass,
        string10                _corporatePlan,
        HRMSalutation _salutation = 0,
        DirPersonMaritalStatus _maritalStatus =0,
        HMAgeValue  _age =0,
        boolean _showWarning = true)
    {
        boolean ret = true;
    
        if(!_firstName)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS32695"));
            }
            ret = false;
        }
    
        if(!_lastName)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@MAZ8808"));
            }
            ret = false;
        }
    
        if(_birthDate == dateNull())
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS78855"));
            }
            ret = false;
        }
    
        if(_birthDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            if(_showWarning)
            {
                warning(strFmt("@MAZ8981"));
            }
            ret = false;
        }
    
        if(_gender == HcmPersonGender::None)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS9284"));
            }
            ret = false;
        }
    
        if(!_financeClassRecId)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@MAZ5776"));
            }
            ret = false;
        }
        //todo: ax 7 new patient registration ... open after patient insurance have been moved
        /*
        if(!_insuranceCarrier)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@MAZ6619"));
            }
            ret = false;
        }
    */
        if(!_relationshipType)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS135665"));
            }
            ret = false;
        }
    
        if(!_employeeId)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS14981"));
            }
            ret = false;
        }
    
        if(!_employeeGrade)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@SYS116553"));
            }
            ret = false;
        }
    
        if(!_eligibleClass)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@MAZ8839"));
            }
            ret = false;
        }
    
        if(!_corporatePlan)
        {
            if(_showWarning)
            {
                warning(strFmt("@SYS84753","@MAZ8836"));
            }
            ret = false;
        }
    
        if(ret)
        {
            ret = HMPatientTransition::validateSalutationRules(_salutation,_gender,_maritalStatus,_age,_showWarning);
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>