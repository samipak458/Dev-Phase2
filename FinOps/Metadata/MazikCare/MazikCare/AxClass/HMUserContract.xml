<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMUserContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContractAttribute]
class HMUserContract
{
    str         userId, domain, image, title, organization, name, designation,userType,drResourceMasterID,workerOrVendorRecid;
    RefRecId    recId;
    boolean     isWorker,isDefault;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDrResourceMasterID</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("drResourceMasterID"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmDrResourceMasterID(str _drResourceMasterID = drResourceMasterID)
    {
        drResourceMasterID = _drResourceMasterID;
    
        return drResourceMasterID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDefault</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("isDefault")]
    boolean parmIsDefault(boolean _isDefault = isDefault)
    {
        isDefault = _isDefault;
    
        return isDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsWorker</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("isWorker")]
    boolean parmIsWorker(boolean _isWorker = isWorker)
    {
        isWorker = _isWorker;
    
        return isWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("Name"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmName(str _name = name)
    {
        name = _name;
    
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("UserRecId")]
    RefRecId parmRecId(RefRecId _recId = recId)
    {
        recId = _recId;
    
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserDesignation</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("UserDesignation")]
    str parmUserDesignation(str _userDesignation = Designation)
    {
        Designation = _userDesignation;
    
        return Designation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("UserId"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmUserId(str _userId = userId)
    {
        userId = _userId;
    
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserImage</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("UserImage"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmUserImage(str _image = image)
    {
        image = _image;
    
        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserOrganization</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("UserOrganization")]
    str parmUserOrganization(str _userOrganization = Organization)
    {
        Organization = _userOrganization;
    
        return Organization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserType</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("userType"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmUserType(str _userType = userType)
    {
        userType = _userType;
    
        return userType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerOrVendorRecid</Name>
				<Source><![CDATA[
    [ DataMemberAttribute("workerOrVendorRecid"),
    AifCollectionTypeAttribute('return', Types::String)]
    str parmWorkerOrVendorRecid(str _workerOrVendorRecid = workerOrVendorRecid)
    {
        workerOrVendorRecid = _workerOrVendorRecid;
    
        return workerOrVendorRecid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateUserContract</Name>
				<Source><![CDATA[
    public void populateUserContract(string50 _userName)
    {
        DirPerson           dirPerson;
        DirPartyTable       dirPartyTable;
        DirPersonUser       dirPersonUser;
        UserExternalParty   externalParty;
        UserInfo            userInfo;
        VendTable           vendTable;
        HcmWorker           hcmWorker;
        HcmWorker           hcmWorkerAsPhysician;
        DirPartyTable       party;
        str                 hcmWorkerTitle;
        HMResourceMaster    hMResourceMaster;
    
    
        //Dr. & vendor case
        select externalParty
            join UserInfo
            join party
                where
                UserInfo.Id  == externalParty.User &&
                party.RecId     == externalParty.ExternalParty &&
                userInfo.networkAlias == _userName
                && externalParty.ExternalEntityType ==UserExternalPartyEntityType::Vendor
                join dirPartyTable
                where dirPartyTable.RecId == externalParty.ExternalParty;
    
    
        if(UserInfo)
        {
            this.parmName(party.Name);
            this.parmUserId(userInfo.networkAlias);
            this.parmRecId(UserInfo.RecId);
            this.parmUserType('Physician');
            select hMResourceMaster
            where hMResourceMaster.Type == HMResourceType::Vendor
            join vendTable
            where vendTable.RecId == hMResourceMaster.RefRecId
            && vendTable.Party == dirPartyTable.RecId;
            this.parmDrResourceMasterID(int642str(hMResourceMaster.RecId));
            this.parmIsWorker(false);
            this.parmWorkerOrVendorRecid(strFmt('%1',vendTable.RecId));
        }
        else // Dr and Worker case + Nurse and worker case + Receptionist and worker case
        {
            select id from userInfo
            where userInfo.networkAlias == _userName
    
            join PersonParty from dirPersonUser
                where dirPersonUser.User == userInfo.id
    
            join PersonnelNumber, RecId, Person from hcmWorker
                where hcmWorker.Person ==  DirPersonUser.PersonParty;
         if(UserInfo)
        {
            this.parmName(hcmWorker.name());
            this.parmUserId(userInfo.networkAlias);
            this.parmRecId(UserInfo.RecId);
            this.parmUserImage(HMWorkerImageHelper::getWorkerImageBase64Encode(hcmWorker.RecId));
            hcmWorkerTitle = hcmWorker.title();
            this.parmIsWorker(true);
            this.parmWorkerOrVendorRecid(strFmt('%1',hcmWorker.RecId));
            if(hcmWorkerTitle != '')
            {
                if(hcmWorkerTitle == 'Physician')
                {
            this.parmUserType('Physician');
            select hMResourceMaster
            where hMResourceMaster.Type == HMResourceType::Employee
            join hcmWorkerAsPhysician
            where hcmWorkerAsPhysician.RecId == hMResourceMaster.RefRecId
            && hcmWorkerAsPhysician.RecId == hcmWorker.RecId;
    
            this.parmDrResourceMasterID(int642str(hMResourceMaster.RecId));
                }
                else  if(hcmWorkerTitle == 'Nurse')
                {
            this.parmUserType('Nurse');
    
                }
                 else  if(hcmWorkerTitle == 'Receptionist')
                {
            this.parmUserType('Receptionist');
    
                }
            }
        }
    
    
        }
    
    
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>