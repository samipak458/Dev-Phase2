<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TestRunClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;

using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;
class TestRunClass
{ 
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {        
       /* 
        CustTable custTable;
        try
        {
          
            MemoryStream memoryStream = new MemoryStream();
            using (var package = new ExcelPackage(memoryStream))
            {
                var CurrentRow = 1;
                /* var worksheets = package.get_Workbook().get_Worksheets();
                worksheets =package.get_Workbook().get_Worksheets();
                var ClaimWorkSheet = worksheets.Add('ClaimWorksheet');
                var cells = ClaimWorkSheet.get_Cells();


                package.Save();
                */
                var worksheets = package.get_Workbook().get_Worksheets();
                var CustTableWorksheet = worksheets.Add("Export");
                var cells = CustTableWorksheet.get_Cells();
                OfficeOpenXml.ExcelRange cell = cells.get_Item(currentRow, 1);
                System.String value = "Account Number";
                cell.set_Value(value);
                cell = null;
                value = "Currency";
                cell = cells.get_Item(currentRow, 2);
                cell.set_Value(value);

                while select CustTable
                {
                    currentRow ++;
                    cell = null;

                    cell = cells.get_Item(currentRow, 1);
                    cell.set_Value(CustTable.AccountNum);
                    cell = null;

                    cell = cells.get_Item(currentRow, 2);
                    cell.set_Value(CustTable.Currency);
                }
                package.Save();
                file::SendFileToUser(memoryStream, "Test");
            }
            memoryStream.Seek(0, SeekOrigin::Begin);
            //return memoryStream;
        }
        catch(Exception::CLRError)
        {
            // if the statement can't be generated, report an error and return null
            error("@SYS135884");
            //return null;
        }
        */
        /*
        CustTable custTable;
        // Defines the columns of the spreadsheet
        #define.MedicalAdjudicator          (1)
        #define.ClaimSequenceNumber         (2)
        #define.CardIssueNumber             (3)
        #define.PatientRegistrationNumber   (4)
        #define.PatientNumber               (5)
        #define.PatientName                 (6)
        #define.InvoiceNumber               (7)
        #define.InvoiceDate                 (8)
        #define.PreAuthID                   (9)
        #define.DoctorName                  (10)
        #define.Specialty                   (11)
        #define.ClinicalData                (12)
        #define.DiagnosisData               (13)
        #define.CLIIMTYPE                   (14)
        #define.Reference                   (15)
        #define.Emergency                   (16)
        #define.Discount                    (17)
        #define.Deductible                  (18)
        #define.SubmittedBy                 (19)
        #define.PayTo                       (20)
        #define.BenHead                     (21)
        #define.ToothNumber                 (22)
        #define.MediCode                    (23)
        #define.SVCode                      (24)
        #define.ServiceDescription          (25)
        #define.RadiologyDate               (26)
        #define.RadiologyClinicalData       (27)
        #define.RadiologyReportText         (28)
        #define.IncurDateFrom               (29)
        #define.IncurDateTo                 (30)
        #define.Quantity                    (31)
        #define.Pres_Amt                    (32)
        #define.LineItemDiscount            (33)
        #define.Notes                       (34)
        #define.Temperature                 (35)
        #define.RespiratoryRate             (36)
        #define.BloodPressure               (37)
        #define.Height                      (38)
        #define.Weight                      (39)
        #define.Pulse                       (40)
        #define.RejectQuantity              (41)
        #define.RejectAmount                (42)
        #define.RejectCode                  (43)
        #define.RejectionBox1               (44)
        try
        {
          
            MemoryStream memoryStream = new MemoryStream();
            using (var package = new ExcelPackage(memoryStream))
            {
                HMExcelWorkSheetHelper _this = new HMExcelWorkSheetHelper();
                var currentRow = 1;
                var worksheets = package.get_Workbook().get_Worksheets();
                var ClaimWorkSheet = worksheets.add("@SYS135880");
                //var CustTableWorksheet = worksheets.Add("Export");
                //var cells = CustTableWorksheet.get_Cells();
                var cells = ClaimWorkSheet.get_cells();
                //OfficeOpenXml.ExcelRange cell = cells.get_Item(currentRow, 1);
                _this.setColumnFromTableField(cells.get_Item(currentRow,#MedicalAdjudicator)         , tablenum(CustTable)          , fieldnum(CustTable, AccountNum));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#ClaimSequenceNumber)        , tablenum(HMClaimTable)       , fieldnum(HMClaimTable, ClaimId));
                _this.setColumn               (cells.get_Item(currentRow,#CardIssueNumber)            , "Card Issue number"          , Types::String);
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientRegistrationNumber)  , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, HMInsuranceMembershipId));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientNumber)              , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientAccountNum));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientName)                , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientName));
                _this.setColumn               (cells.get_Item(currentRow,#InvoiceNumber)              , 'Invoice number'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#InvoiceDate)                , 'Invoice date'               , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#PreAuthID)                  , 'Pre Authorization Id'       , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#DoctorName)                 , 'Doctor'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Specialty)                  , 'Specialty'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#ClinicalData)               , 'Clinical data'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#DiagnosisData)              , 'Diagnosis data'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#CLIIMTYPE)                  , 'Clim type'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Reference)                  , 'Refer Ind'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Emergency)                  , 'Emergency Ind'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Deductible)                 , 'VO deductible amount'       , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#SubmittedBy)                , 'Submitted by'               , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#PayTo)                      , 'Pay to'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#BenHead)                    , 'Ben head'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#ToothNumber)                , 'Tooth no'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#MediCode)                   , 'Medicore'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#SVCode)                     , 'SV code'                    , Types::String );
                _this.setColumnFromTableField (cells.get_Item(currentRow,#ServiceDescription)         , tablenum(HMClaimChargeLine)  , fieldnum(HMClaimChargeLine, InventTable));
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyDate)              , 'Radiology date'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyClinicalData)      , 'Radiology clinical data'    , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyReportText )       , 'Radiology report text'      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#IncurDateFrom)              , 'Incur date from'            , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#IncurDateTo)                , 'Incur date to'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Quantity)                   , 'Quantity'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Pres_Amt)                   , 'Present Amount'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#LineItemDiscount)           , 'Line Item discount'         , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Notes)                      , 'Notes'                      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Temperature)                , 'Temperature'                , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RespiratoryRate )           , 'Respiratory rate'           , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#BloodPressure )             , 'Blood pressure'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Height)                     , 'Height'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Weight)                     , 'Weight'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Pulse )                     , 'Pulse'                      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectQuantity)          , 'Reject quantity'            , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectAmount)               , 'Reject amount'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectCode)                , 'Reject code'                , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectionBox1)              , 'Rejection box'              , Types::String );
                while select CustTable
                {
                    currentRow ++;

                    _this.setCellValue(cells.get_Item(currentRow,#MedicalAdjudicator),CustTable.accountnum);
                    
                }
 
                package.Save();
                file::SendFileToUser(memoryStream, "Test.xlsx");
            }
            memoryStream.Seek(0, SeekOrigin::Begin);
            //return memoryStream;
        }
        catch(Exception::CLRError)
        {
            // if the statement can't be generated, report an error and return null
            error("@SYS135884");
            //return null;
        }
        */
        /*
        #define.outputFileName("ClaimGenerated")
        iTextSharp.text.pdf.PdfReader       pdfReader;
        iTextSharp.text.pdf.PdfStamper      pdfStamper;
        iTextSharp.text.Document            pdfDocument;
        iTextSharp.text.pdf.PdfSmartCopy    pdfCopy;
        System.IO.MemoryStream              pdfStream;
        iTextSharp.text.pdf.AcroFields  acroFields;
        boolean isfirst;
        TableId             tableid;
        FieldId             fieldid;
        Common              common;
        DictTable           dictTable;
        str value;
        str outputFile= xInfo::directory(DirectoryType::Log) + #outputFileName + '.pdf';
      
        str inputFile;
        HMClaimTemplateFieldSchema      hmClaimTemplateFieldSchema;
        HMClaimTemplateField            hmClaimTemplateField;
    
        if(!isFirst)
        {
            pdfCopy = new iTextSharp.text.pdf.PdfSmartCopy(pdfDocument, new System.IO.FileStream(
                            outputFile,System.IO.FileMode::Create));
    
            pdfDocument.Open();
    
            isFirst = true;
        }
    
        pdfReader = new iTextSharp.text.pdf.PdfReader(inputFile);
        pdfStream = new System.IO.MemoryStream();
        pdfStamper = new iTextSharp.text.pdf.PdfStamper(pdfReader, pdfStream);
    
        acroFields = pdfStamper.get_AcroFields();
    
        tableid = tableName2Id(hmClaimTemplate.TableName);
        dictTable = new DictTable(tableid);
        common = dictTable.makeRecord();
    
        select common where common.RecId == recordRecId;
    
        while select * from hmClaimTemplateFieldSchema
            where hmClaimTemplateFieldSchema.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldSchema.HMClaimTemplateField != 0
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldSchema.HMClaimTemplateField
        {
            fieldid = fieldName2id(tableid,hmClaimTemplateFieldSchema.ClaimTemplateFieldName);
            value = common.(fieldid);
            acroFields.SetField(hmClaimTemplateField.FieldName,value);
        }
    
        pdfStamper.set_FormFlattening(true);
    
        pdfStamper.Close();
    
        pdfReader = new iTextSharp.text.pdf.PdfReader(pdfStream.ToArray());
        pdfCopy.AddPage(pdfCopy.GetImportedPage(pdfReader, 1));
        */
    }

    //}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>