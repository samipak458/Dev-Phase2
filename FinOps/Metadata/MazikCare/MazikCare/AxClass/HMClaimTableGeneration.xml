<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimTableGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;

using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;

class HMClaimTableGeneration
{
    #define.outputFileName("ClaimGenerated")

    HMClaimTableDetailTmp       hmClaimTableDetailTmp;
    HMClaimChargeLineTmp        hmClaimChargeLineTmp;
    HmClaimConditionCodeTmp     hmConditionCodeTmp;
    HMClaimPIEProcedureInfoTmp  hmPIEProcedureInfoTmp;
    HmClaimCodesDetailTmp       hmClaimCodesDetailTmp;
    HMResourceSchedulingAppointment     appointment;

    TransDate                       fromDate, toDate;
    HMClaimTemplate                 hmClaimTemplate;
    HMClaimTableDetails             hmclaimTableMain;
    HMPatientChargeEntryTable       hmPatientChargeEntryTableMain;
    HMCase                          claimCase;

    boolean     HMServiceStatus;//=HMServiceStatus::Complete;
    boolean     HMBillStatus;//=HMBillStatus::Paid;

    RecId               claimRecId;
    RecId               patientRecId;
    RecId               physicianRecId;
    RecId               insuranceRecId;
    RecId               chargeEntryRecId;
    map                 diagnosisMap;
    
    str                 batchNumber;
    int                 pageNo, totalPages, totalLinesCount;
    int                 totalLinesLocal, lastValue;

    str inputFile;
    str outputFile;

    iTextSharp.text.pdf.PdfReader       pdfReader;
    iTextSharp.text.pdf.PdfStamper      pdfStamper;
    iTextSharp.text.Document            pdfDocument;
    iTextSharp.text.pdf.PdfSmartCopy    pdfCopy;
    System.IO.MemoryStream              pdfStream;
    MemoryStream output;

    boolean isFirst;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmServiceStatus</Name>
				<Source><![CDATA[
    public boolean parmServiceStatus(boolean _HMServiceStatus = HMServiceStatus)
    {
        HMServiceStatus=_HMServiceStatus;
        return HMServiceStatus;

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHMBillStatus</Name>
				<Source><![CDATA[
    public boolean parmHMBillStatus(boolean _HMBillStatus = HMBillStatus)
    {
        HMBillStatus=_HMBillStatus;
        return HMBillStatus;

    }

]]></Source>
			</Method>
			<Method>
				<Name>closePDFWriter</Name>
				<Source><![CDATA[
    public void closePDFWriter()
    {
        if(pdfDocument && pdfDocument.IsOpen())
        {
            pdfDocument.Close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateFormatCMS1450</Name>
				<Source><![CDATA[
    public str dateFormatCMS1450(date _date, boolean _fullYear)
    {
        str dayOfDate, monthOfDate, yearOfDate;
    
        dayOfDate = dayOfMth(_date) > 9 ? int2str(dayOfMth(_date)) : strFmt('0%1', dayOfMth(_date));
        monthOfDate = mthOfYr(_date) > 9 ?  int2str(mthOfYr(_date)) : strFmt('0%1', mthOfYr(_date));
    
        if (_fullYear)
        {
            yearOfDate = int2str(year(_date));
        }
        else
        {
            yearOfDate = subStr(int2str(year(_date)), 3, 2);
        }
    
        return strFmt('%1%2%3', monthOfDate, dayOfDate, yearOfDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    public RecId generate(
        RecId _patientRecId,
        RecId _physicianRecId,
        RecId _patientInsuranceRecId,
        RecId _chargeEntryRecId,
        str   _batchNumber,
        RecId _caseInsuranceRecId)
    {
        HMClaimTable        hmclaimTable;
        HMClaimVersion      hmclaimVersion;
        HMClaimChargeLine   hmClaimChargeLine;
        HMClaimChargeLine   hmClaimChargeLineLocal;
        HMClaimDiagnosis    hmClaimDiagnosis;
        HMPatient           hmPatient;
        DirPerson           person;

        Query                   query           = new Query();
        QueryRun                localQueryRun;
        QueryBuildDataSource    qbds1;
        QueryBuildDataSource    qbds2;
        QueryBuildDataSource    qbds3;
    
        HMPatientChargeEntryLine            hmPatientChargeEntryLine;
        HMPatientChargeEntryLine            hmChargeEntryLineBatchNo;
        HMInsuranceCarrierBatchDetails      hmChargeEntryLineBatchDetails;
        HMPatientChargeEntryTable           chargeEntryTable;
        HmCodingStructure                   codingStructure;
        HMInventTable                       HMInventTable;
        HMCategoryCodeTable                 categoryCode;
        HMOrganizationalUnit                organizationalUnit;
        HMInsuranceCarrierBatchDetails      batchDetails;
    
        HMPatientInsurance                      hmPatientInsurance;
        HMInsuranceCarrier                      hmInsuranceCarrier;
        HMInsuranceContract                     hmInsuranceContract;
        HMInsuranceContractCarrierCombination   hmInsuranceCombination;
        HMInsuranceContractClassOrPlans         hmInsurancePlan;
        HMTPA                                   hmTPA;
        HMCaseTrans                             hmCaseTrans;
        HMCase                                  hmCase;
        HMResourceSchedulingTypeCode            HMScheduleType;

        str     chiefComplaint;    
        boolean ret;
        boolean ignoreBatchNumber = true;
        boolean ignoreServiceStatus;
        int     counter = 0;
    
        HMNumberSequenceHandler hmNumberSequenceHandler;
        HMResourceMaster        hmResourceMaster;
        RecId                   record;
        //Zain
        List                CaseTranslist;
        ListIterator        iterator;
        HMCaseTrans         hmCaseTransLocal;
        HMCaseTransDetail   hmCaseTransDetail;
        //Zain
       
    
        // Pinncale:Start
        if (!_patientInsuranceRecId)
        {
            _patientInsuranceRecId = HMCaseInsurance::find(_caseInsuranceRecId).HMPatientInsurance;
        }

        if (!_physicianRecId)
        {
            _physicianRecId = hmCase::find(HMCaseInsurance::find(_caseInsuranceRecId).HMCase).HMResourceMaster;
        }

        if (_batchNumber == '')
        {
            select firstOnly1 HMInsuranceCarrierBatchDetails
                from hmChargeEntryLineBatchNo
                    where hmChargeEntryLineBatchNo.HMPatientChargeEntryTable == _chargeEntryRecId
                join BatchNumber
                    from hmChargeEntryLineBatchDetails
                        where hmChargeEntryLineBatchDetails.RecId == hmChargeEntryLineBatchNo.HMInsuranceCarrierBatchDetails;
    
            _batchNumber = hmChargeEntryLineBatchDetails.BatchNumber;
        }

        // Pinncale:End
        // Modified By: Waqas Anwer
    
        if (_patientInsuranceRecId)
        {
            hmPatientInsurance  = HMPatientInsurance::find(_patientInsuranceRecId);
    
            if (hmPatientInsurance)
            {
                HMInsuranceCarrier  = hmPatientInsurance.getCarrier_US();
    
                if (HMInsuranceCarrier)
                {
                    hmInsurancePlan = HMInsuranceContractClassOrPlans::find(hmPatientInsurance.HMInsuranceContractClassOrPlans);
    
                    if (hmInsurancePlan)
                    {
                        hmInsuranceContract = HMInsuranceContract::find(hmInsurancePlan.HMInsuranceContract);
    
                        if (hmInsuranceContract)
                        {
                            hmInsuranceCombination = HMInsuranceContractCarrierCombination::find(hmInsuranceContract.HMInsuranceContractCarrierCombination);
    
                            hmTPA = hmTPA::find(hmInsuranceCombination.HMInsuranceTPA);
                        }
                    }
                }
            }
        }
    
        this.parmChargeEntryRecId(_chargeEntryRecId);
        this.parmInsuranceRecId(HMInsuranceCarrier.RecId);
        this.parmPatientRecId(_patientRecId);
        this.parmPhysicianRecId(_physicianRecId);
        this.parmBatchNumber(_batchNumber);

		if(claimCase)
        {
            organizationalUnit = HMOrganizationalUnit::find(claimCase.Clinic);
        }
    
        batchDetails	= HMInsuranceCarrierBatchDetails::findbByBatchNumber(_batchNumber);
    
        try
        {
            ttsBegin;
    
            hmNumberSequenceHandler = new hmNumberSequenceHandler();
            diagnosisMap = new Map(Types::Integer,Types::Int64);
    
            hmclaimTable.initValue();    
            hmclaimTable.ClaimID					= hmNumberSequenceHandler.generateNumberSequenceDataArea(extendedtypenum(HMClaimNumber));    
            hmclaimTable.HMPatient					= _patientRecId;
            hmclaimTable.HMResourceMaster			= _physicianRecId;
            hmclaimTable.HMInsuranceCarrier			= HMInsuranceCarrier.RecId;
            hmclaimTable.HMPatientChargeEntryTable	= _chargeEntryRecId;    
            hmclaimTable.insert();
    
            hmclaimVersion.initValue();    
            hmclaimVersion.HMClaimTable	= hmclaimTable.RecId;
            hmclaimVersion.Status		= HMClaimStatus::Generated;
            hmclaimVersion.ValidFrom	= DateTimeUtil::utcNow();
            hmclaimVersion.ValidTo		= DateTimeUtil::maxValue();    
            hmclaimVersion.insert();
    
            hmclaimTableMain.initValue();    
            hmclaimTableMain.HMClaimTable					= hmclaimTable.RecId;    
            hmclaimTableMain.InsuranceIDNumber              = hmInsuranceCarrier.Code;
            hmclaimTableMain.InsuranceCarrierName           = hmInsuranceCarrier.Name;
            hmclaimTableMain.InsuranceCarrierAddress        = hmInsuranceCarrier.postalAddress();
            hmclaimTableMain.InsuranceCarrierContractNumber = hmInsuranceContract.HMContractNumber;
            hmclaimTableMain.InsuranceCarrierContractName   = hmInsuranceContract.HMContractName;
            hmclaimTableMain.InsuranceCarrierPlanId         = hmInsurancePlan.HMContractClassId;
            hmclaimTableMain.InsuranceCarrierPlanName       = hmInsurancePlan.HMContractClassName;
            hmclaimTableMain.InsuranceCarrierTPANumber      = hmTPA.Code;
            hmclaimTableMain.InsuranceCarrierTPAName        = hmTPA.Name;
            hmclaimTableMain.HMInsuranceMembershipId        = hmPatientInsurance.HMPatientInsuranceMembershipId;
            hmclaimTableMain.SpecialtyDescription           = organizationalUnit.Description;
            hmclaimTableMain.HMCardIssueNumber              = hmPatientInsurance.HMCardIssueNumber;
    
    
            if (batchDetails)
            {
                hmclaimTableMain.BatchNumber    = batchDetails.BatchNumber;
                ignoreBatchNumber = false;
            }   
    
            HMPatient = HMPatient::find(_patientRecId);
    
            if (HMPatient)
            {
                person = DirPerson::find(hmPatient.DirPartyTable);
    
                if (person)
                {
                    hmclaimTableMain.isPatientMarried   = (person.MaritalStatus == DirPersonMaritalStatus::Married);
                    hmclaimTableMain.isPatientSingle    = (person.MaritalStatus == DirPersonMaritalStatus::Single);
                }
            }
            
            if (claimCase)
            {
                hmclaimTableMain.VisitDate			= DateTimeUtil::date(claimCase.createdDateTime);
                hmclaimTableMain.isReferral			= false;
                hmclaimTableMain.isNewVisit         = true;
                hmclaimTableMain.isFollowUpOrRefill = false;
                hmclaimTableMain.CaseType			= enum2str(claimCase.HMCaseType);
            }           
    
            hmResourceMaster = hmResourceMaster::find(_physicianRecId);
    
            hmclaimTableMain.ReferringProvider      = hmResourceMaster.Description;
            hmclaimTableMain.ReferringProviderNPI   = hmResourceMaster.code;
    
            hmPatientChargeEntryTableMain = hmPatientChargeEntryTable::find(_chargeEntryRecId);
    
            this.loadPatientData();
            this.loadInsuredData();
            this.loadOtherInsuredData();
    
            select sum(TotalAmount), sum(InsuranceAmount) from HMCaseTrans
                where hmCaseTrans.HMServiceStatus == HMServiceStatus::Complete
                    join hmPatientChargeEntryLine
                        where hmPatientChargeEntryLine.HMPatientChargeEntryTable        == hmPatientChargeEntryTableMain.RecId
                            && HMPatientChargeEntryLine.HMCaseTrans                     == HMCaseTrans.RecId
                            && hmCaseTrans.PatientResponsibility                        == HMPatientPaymentResponsibility::Client
                            && (hmPatientChargeEntryLine.HMInsuranceCarrierBatchDetails  == batchDetails.RecId || ignoreBatchNumber);
    
            hmclaimTableMain.totalChargeEdit(true,HMCaseTrans.TotalAmount);
            hmclaimTableMain.balanceDueEdit(true,HMCaseTrans.InsuranceAmount);
    
            hmclaimTableMain.ValidFrom      = DateTimeUtil::utcNow();
            hmclaimTableMain.ValidTo        = DateTimeUtil::maxValue();
    
            //   hmClaimTableMain.ChiefComplaint = HMClaimClinicalDataHelper::getCheifComplaintFromCase(hmCase.CRMCaseRefID);
    
            hmclaimTableMain.insert();
    
            //   this.insertClaimDiagnosis(hmclaimTable.RecId, appointment.RecId);
            /*
            if(this.parmServiceStatus()==HMServiceStatus::Complete)
            {
                ignoreServiceStatus=true;
            }
            else
            {
                ignoreServiceStatus= false;

            }
            */
            /*
                while select * from hmPatientChargeEntryLine
                    join ItemId, recId, InsuranceAmount, Qty, PatientResponsibility,HMServiceStatus from hmCaseTrans
                        order by hmPatientChargeEntryLine.ProcedureOrder
                            where hmPatientChargeEntryLine.HMPatientChargeEntryTable == hmPatientChargeEntryTableMain.RecId
                                && hmPatientChargeEntryLine.HMCaseTrans == hmCaseTrans.RecId && (hmCaseTrans.HMServiceStatus == HMServiceStatus::Complete )//|| ignoreServiceStatus)
                                //&& hmCaseTrans.PatientResponsibility == HMPatientPaymentResponsibility::Client
                                && (hmPatientChargeEntryLine.HMInsuranceCarrierBatchDetails == batchDetails.RecId || ignoreBatchNumber)
                                    notExists join hmClaimChargeLineLocal
                                        where hmClaimChargeLineLocal.HMPatientChargeEntryLine == hmPatientChargeEntryLine.RecId
                                && hmClaimChargeLineLocal.IsRejected == NoYes::No   */

            qbds2=query.addDataSource(tableNum(hmCaseTrans));
            if(this.parmServiceStatus()==true)
            {
                qbds2.addRange(fieldNum(hmCaseTrans,HMServiceStatus)).value(queryValue(HMServiceStatus::Complete));
            }
            // qbds1=query.addDataSource(tableNum(hmPatientChargeEntryLine));
            qbds1=qbds2.addDataSource(tableNum(hmPatientChargeEntryLine));
            qbds1.addOrderByField(fieldNum(hmPatientChargeEntryLine,ProcedureOrder));
            qbds1.addRange(fieldNum(hmPatientChargeEntryLine,HMPatientChargeEntryTable)).value(queryValue(hmPatientChargeEntryTableMain.RecId));
            qbds1.relations(false);
            qbds1.joinMode(joinmode::InnerJoin);
            qbds1.addLink(fieldNum(hmCaseTrans,Recid),fieldNum(hmPatientChargeEntryLine,HMCaseTrans));
            if(!ignoreBatchNumber)
            {
                qbds1.addRange(fieldNum(hmPatientChargeEntryLine,HMInsuranceCarrierBatchDetails)).value(queryValue(batchDetails.RecId));
            }
            /*
            qbds2=qbds1.addDataSource(tableNum(hmCaseTrans));
            qbds2.joinMode(JoinMode::InnerJoin);
            qbds2.relations(false);
            //qbds2.addLink(fieldNum(hmPatientChargeEntryLine,HMCaseTrans),fieldNum(hmCaseTrans,Recid));
            if(ignoreServiceStatus)
            {
                qbds2.addRange(fieldNum(hmCaseTrans,HMServiceStatus)).value(queryValue(HMServiceStatus::Complete));
            }
    */
            qbds3=qbds1.addDataSource(tableNum(HMClaimChargeLine));
            qbds3.joinMode(JoinMode::NoExistsJoin);
            qbds3.relations(true);
            qbds3.addRange(fieldNum(HMClaimChargeLine,IsRejected)).value(queryValue(NoYes::No));
    
            localQueryRun = new QueryRun(query);
            
            while(localQueryRun.next())
            {
                counter++;
                hmPatientChargeEntryLine = localQueryRun.get(tablenum(hmPatientChargeEntryLine));
                hmcasetrans=localQueryRun.get(tablenum(hmCaseTrans));
                hmClaimChargeLineLocal=localQueryRun.get(tablenum(HMClaimChargeLine));

                hmClaimChargeLine.clear();
                hmClaimChargeLine.HMClaimTable = hmclaimTable.RecId;
                hmClaimChargeLine.initValue();
    
                hmClaimChargeLine.HMPatientChargeEntryLine  = hmPatientChargeEntryLine.RecId;
                //hmClaimChargeLine.fromDateEdit(true,hmPatientChargeEntryLine.FromDate);
                //hmClaimChargeLine.toDateEdit(true,hmPatientChargeEntryLine.TODate);
                //hmClaimChargeLine.chargeEdit(true,hmCaseTrans.InsuranceAmount);
    
                hmClaimChargeLine.HMPlaceOfService              = HMPlaceOfService::find(hmPatientChargeEntryLine.PlaceOfService).Code;
                hmClaimChargeLine.InventTable                   = hmCaseTrans.ItemId;
                hmClaimChargeLine.HMProcedureMasterCode         = hmPatientChargeEntryLine.displayCPTcode();
                hmClaimChargeLine.HMProcedureModifier1          = HMProcedureModifier::find(hmPatientChargeEntryLine.Modifier1).Code;
                hmClaimChargeLine.HMProcedureModifier2          = HMProcedureModifier::find(hmPatientChargeEntryLine.Modifier2).Code;
                hmClaimChargeLine.HMProcedureModifier3          = HMProcedureModifier::find(hmPatientChargeEntryLine.Modifier3).Code;
                hmClaimChargeLine.HMProcedureModifier4          = HMProcedureModifier::find(hmPatientChargeEntryLine.Modifier4).Code;
                hmClaimChargeLine.DiagnosisPointer              = this.getChargeEntryDiagnosisPointer(hmPatientChargeEntryLine);
                hmClaimChargeLine.Units                         = hmPatientChargeEntryLine.Units;
                hmClaimChargeLine.NPI                           = hmclaimTableMain.ReferringProviderNPI;
                hmClaimChargeLine.HMCaseTrans                   = hmCaseTrans.RecId;
                hmClaimChargeLine.IsImportedFromChargeEntryLine = NoYes::Yes;
    
                hmclaimTableMain.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
    
                switch (counter)
                {
                    case 1:
    
                        hmclaimTableMain.ItemCode1          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription1   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity1      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, CategoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory1 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 2:
    
                        hmclaimTableMain.ItemCode2          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription2   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity2      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, CategoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory2 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    //TODO: this is the extra method.
                    //case 2:

                    //hmclaimTableMain.ItemCode2          = hmCaseTrans.ItemId;
                    //hmclaimTableMain.ItemDescription2   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                    //hmclaimTableMain.ItemQuantity2      = int2str(hmCaseTrans.Qty);

                    //HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);

                    //select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;

                    //hmclaimTableMain.ItemCategory2 = codingStructure.CategoryName;
                    //hmclaimTableMain.update();

                    //break;
    
                    case 3:
    
                        hmclaimTableMain.ItemCode3          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription3   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity3      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory3 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 4:
    
                        hmclaimTableMain.ItemCode4          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription4   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity4      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory4 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 5:
    
                        hmclaimTableMain.ItemCode5          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription5   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity5      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory5 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 6:
    
                        hmclaimTableMain.ItemCode6          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription6   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity6      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory6 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 7:
    
                        hmclaimTableMain.ItemCode7          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription7   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity7      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory7 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 8:
    
                        hmclaimTableMain.ItemCode8          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription8   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity8      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory8 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 9:
    
                        hmclaimTableMain.ItemCode9          = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription9   = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity9      = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory9 = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 10:
    
                        hmclaimTableMain.ItemCode10         = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription10  = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity10     = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory10     = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
    
                    case 11:
    
                        hmclaimTableMain.ItemCode11         = hmCaseTrans.ItemId;
                        hmclaimTableMain.ItemDescription11  = InventTable::find(hmCaseTrans.ItemId).itemDescriptionOrName();
                        hmclaimTableMain.ItemQuantity11     = int2str(hmCaseTrans.Qty);
    
                        HMInventTable = HMInventTable::findByItemId(hmCaseTrans.ItemId);
    
                        select RecId, categoryName from codingStructure where codingStructure.RecId == HMInventTable.codingStructure;
    
                        hmclaimTableMain.ItemCategory11     = codingStructure.CategoryName;
                        hmclaimTableMain.update();
    
                        break;
                }
    
                hmClaimChargeLine.insert();
                //Zain
                //if(HMChargeEntryClass::isEligibleForBatchChange(hmPatientChargeEntryLine.RecId, false))
                //{
                //Not required here
                //hmCaseTransLocal = HMCaseTrans::find(hmPatientChargeEntryLine.HMCaseTrans);
                //CaseTranslist = new List(Types::Record);
                //CaseTransList.addEnd(hmCaseTransLocal);
                ////}
                //Zain
            }

            //Zain
            //Not required anymore
            //if(CaseTransList.elements())
            //{
            //    HMAccrueRevenueJournalClass::createJournalLines(CaseTranslist,true);

            //    iterator = new ListIterator(CaseTransList);

            //    while(iterator.more())
            //    {
            //        select RecId from hmCaseTransDetail
            //            where hmCaseTransDetail.HMCaseTrans == hmCaseTrans.RecId;
            //            //&& hmCaseTransDetail.TransactionType == HMCaseTransDetailTransactionType::AccrueRevenueReturned;

            //        if(hmCaseTransDetail)
            //        {
            //            ttsBegin;
            //            hmCaseTrans.selectForUpdate(true);
            //            hmCaseTrans.BillingStatus = HMBillStatus::Reveresed;
            //            hmCaseTrans.update();
            //            ttsCommit;
            //            info("@MAZ13600");
            //        }
            //        else
            //        {
            //            warning("@MAZ13601");
            //        }

            //        iterator.next();
            //    }

            //}
            
            //Zain
            chargeEntryTable = HMPatientChargeEntryTable::find(_chargeEntryRecId);

            
    
            if(chargeEntryTable.RecId != 0)
            {
                //TODO :To be replaced by "CaseTransDetail" logic.
    
                //HMCaseTracking::insert(chargeEntryTable.HMResourceSchedulingAppointment, chargeEntryTable.HMResourceSchedulingAppointment, //HMCaseTrackingLineTransactionType::Claim
                //0,today(),NoYes::Yes,hmclaimTable.RecId,tableNum(hmclaimTable));
   
            }
/*
            //Nazim
            str patientMRN = "";
            HMPatient hmpatientlocal;
            hmpatientlocal = HMPatient::find(_patientRecId);
            if(hmpatientlocal)
            {
            CustTable ct = CustTable::findRecId(hmpatientlocal.CustTable);
            if(ct)
            {
            patientMRN = ct.AccountNum;
            }
                    
            }
            AmountMST totAmt = hmclaimTableMain.TotalChargeLeft; // HMCaseTrans.TotalAmount;
            int intTotAmt = real2int(totAmt);
            str strTotAmt = int2Str(intTotAmt);
            //info('updating claim in crm');
           // HMClaimTableGeneration::updateClaimInCRM(patientMRN,hmclaimTable.ClaimID,hmclaimTableMain.ValidFrom,hmclaimTableMain.ValidTo, strTotAmt);
           this.updateClaimInCRM(patientMRN,hmclaimTable.ClaimID,hmclaimTableMain.ValidFrom,hmclaimTableMain.ValidTo, strTotAmt);
           // info('updated claim in crm');
    */
            ttsCommit;
    
            ret = true;
            record = hmclaimTable.RecId;
            hmNumberSequenceHandler.commitNewNumSeq();
    
            HMX12EDIMessage::generateERA(hmclaimTable.RecId);

        }
        catch
        {
            hmNumberSequenceHandler.deleteNewNumSeq();
            ret = false;
            record = 0;
        }

        if(record)
        {
            this.updateRequiredDocuments(record, hmclaimTable.HMInsuranceCarrier);
        }
    
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClaimInCRM</Name>
				<Source><![CDATA[
    public  boolean updateClaimInCRM(HMPatientId _patientMRN ,HMClaimNumber _hMClaimNumber,ValidFromDateTime _fromDT , ValidToDateTime _toDT,str _amountMST)
    {
        try{
  
        boolean ret;
       
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
      
        container conValues;
        //date fromd1 = datetime2Str( _fromDT;
           // date tod1 = _toDT;
            str callingparam = "{'mrn':'" + _patientMRN  +"','claimid':'"+_hMClaimNumber +"','validfrom':'" + datetime2Str( _fromDT) +"','validto':'" + datetime2Str( _toDT) +"','total':'" + _amountMST  +"'}";
            
           // str callingparam = "{'mrn':'" + _patientMRN  +"','claimid':'"+_hMClaimNumber +"','validfrom':'" + date2str( fromd1,321,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4) +"','validto':'" + date2str( _toDT,321,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4) +"','total':'" + _amountMST  +"'}";
            //str callingparam = "{'mrn':'" + _patientMRN  +"','claimid':'"+_hMClaimNumber +"','validfrom':'" +  '01/01/2018' +"','validto':'" +  '01/01/2019' +"','total':'" + _amountMST  +"'}";
    
        ret = appHelper.callPostWebAPI('/patientcase/createClaim',callingparam );
    
        if(ret)
        {
            conValues = appHelper.parmRecordsCon();
    
            if(con2Str(conValues) == 'True')
            {
                ret = true;
            }
            else
            {
                ret = checkFailed("Error creating claim in CRM");
            }
        }
        else
        {
            if(appHelper.parmErrorMessage())
            {
                checkFailed(appHelper.parmErrorMessage());
            }
    
            ret = checkFailed("Error creating claim in CRM");
        }
        
        return ret;
    }
    catch(Exception::Error)
    {
        throw Exception::Error;
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBatchClaims</Name>
				<Source><![CDATA[
    public List generateBatchClaims(HMInsuranceCarrierCode _InsuranceCarrier, TransDate  _fromDate, TransDate _toDate)
    {
        HMPatientChargeEntryTable           hmChargeEntryTableLocal;
        HMCase                              hmCaseLocal,hmCaseLocal1;
        HMCaseInsurance                     hmCaseInsuranceLocal;
        HMPatientInsurance                  hmPatientInsuranceLocal;
        HMInsuranceCarrier                  hmInsuranceCarrierLocal;
        Args                                args = new Args();
        HMResourceSchedulingPlanningObject  planningObject;
        List                                caseTransList = new List(Types::Int64);
        RecId                               record;
        utcDateTime                         utcFromDate, utcToDate;
        HMBillPaymentPosting                posting;
    
        utcFromDate = DateTimeUtil::newDateTime(_fromDate,0);
        utcToDate = DateTimeUtil::newDateTime(_toDate,timeMax());
    
        while select hmChargeEntryTableLocal
            join hmCaseLocal
                where hmChargeEntryTableLocal.HMCase == hmCaseLocal.RecId
                    && (hmChargeEntryTableLocal.createdDateTime >=  utcfromDate && hmChargeEntryTableLocal.createdDateTime <= utcToDate)
            join hmCaseInsuranceLocal
                where hmCaseInsuranceLocal.HMCase == hmCaseLocal.RecId
                    && hmCaseInsurancelocal.IsActive == NoYes::Yes
            join hmPatientInsuranceLocal
                where hmPatientInsuranceLocal.RecId == hmCaseInsuranceLocal.HMPatientInsurance
            join hmInsuranceCarrierLocal
                where hmInsuranceCarrierLocal.Code == hmPatientInsuranceLocal.InsuranceCarrier
                    && hmInsuranceCarrierLocal.Code == _InsuranceCarrier
        {
            try
            {
                ttsBegin;
                if (this.validateChargeEntry(hmChargeEntryTableLocal))
                {                    
                    if (!hmCaseInsuranceLocal.IsActive)
                    {
                        info(strFmt("Claim against case no %1 cannot be generated, No active insurance selected", hmCaseLocal.CaseNo));
                    }
    
                    if (!PhysicianRecId)
                    {
                        PhysicianRecId = HMCase::find(hmCaseInsuranceLocal.HMCase).HMResourceMaster;
                    }
    
                    record = HMClaimTable::findbyChargeEntry(hmChargeEntryTableLocal.RecId).RecId;
    
                    if (!record)
                    {
                        record = this.generate(hmChargeEntryTableLocal.HMPatient, PhysicianRecId, 0, hmChargeEntryTableLocal.RecId, '', hmCaseInsuranceLocal.RecId);
    
                        if (record)
                        {
                            if (this.validateInvoiceandClaimData(hmChargeEntryTableLocal))
                            {
                                caseTransList.addEnd(record);
    
                                args.record(hmChargeEntryTableLocal);
                                posting = new HMBillPaymentPosting(null,null,null,'','','');
                                posting.postChargeEntry(args);
    
                                select forUpdate CaseStatus from hmcaselocal1
                                    where hMCaselocal1.RecId == hmChargeEntryTableLocal.HMCase;
    
                                if(hmcaselocal1)
                                {
                                    hmcaselocal1.CaseStatus=HMCaseStatus::Billed;
                                    hMCaselocal1.update();
                                }
    
    
                                info(strFmt("Claim against case number %1 generated successfully", hmCaseLocal.CaseNo));
                            }
                        }
                        else
                        {
                            error("@MAZ9738");
                        }
                    }
                    else
                    {
                        caseTransList.addEnd(record);
                    }
                }
                ttsCommit;
            }
            catch
            {
                ttsAbort;
            }
        }
    
        return caseTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateClaims</Name>
				<Source><![CDATA[
    public void generateClaims(date _fromDOS, date _toDOS, container _patientCon, recid _physicianRecId, String100 _TPACode, container _carrierCon, container _batchNumbers)
    {
        int			counter = 0, success = 0, failures = 0, batchNumberCount, i;
        container	CarrierCon;

        RefRecId	resourceMasterRecId;
        RecId		templateRecId,patientInsuranceRecId;
        
        Query					qry = new Query(queryStr(HMChargeEntryBatchProcess));
        QueryRun				qryRun;
        QueryBuildDataSource    qbdChargeEntry, qbdPlanningObject;

        HMCaseTrans						caseTrans;
        HMPatientChargeEntryTable       hmPatientChargeEntryTableLocal;
        HMPatientChargeEntryLine        hmPatientChargeEntryLineLocal;
        HMClaimChargeLine               claimChargeLineLocal;
        Set                             batchSet;
        SetEnumerator                   batchSetEnumerator;
        HMInsuranceCarrierBatchDetails  batchDetails;
        HMTpaDetails                    TPADetails;
        HMTPA                           TPA;
        HMCaseInsurance					caseInsurance;
        //CS: Batch number validation by Ammar.Ali for MazikCare
        HMPatientChargeEntryLine            chargeEntryLine;
        HMInsuranceCarrier                  insuranceCarrier;
        //CE: Batch number validation by Ammar.Ali for MazikCare
    
        qbdChargeEntry      = qry.dataSourceTable(tableNum(HMPatientChargeEntryTable));
        qbdPlanningObject   = qry.dataSourceTable(tableNum(HMResourceSchedulingPlanningObject));
    
        for(i = 1; i <= conLen(_patientCon);i++)
        {
            qbdChargeEntry.addRange(fieldNum(HMPatientChargeEntryTable, HMPatient)).value(SysQuery::value(conPeek(_patientCon,i)));
        }
    
        if (_physicianRecId)
        {
            qbdPlanningObject.addRange(fieldNum(HMResourceSchedulingPlanningObject, HMResourceMaster)).value(SysQuery::value(_physicianRecId));
        }
    
        qryRun = new QueryRun(qry);
    
        while (qryRun.next())
        {
            hmPatientChargeEntryTableLocal	= qryRun.get(tableNum(HMPatientChargeEntryTable));
            chargeEntryLine					= qryRun.get(tableNum(HMPatientChargeEntryLine));

			claimCase				= HMCase::find(hmPatientChargeEntryTableLocal.HMCase);
            caseInsurance			= HMCaseInsurance::findByCase(hmPatientChargeEntryTableLocal.HMCase);   
            patientInsuranceRecId	= caseInsurance.HMPatientInsurance;

            //CS: Batch number validation by Ammar.Ali for MazikCare
            //if (!hmPatientChargeEntryTableLocal.isChargeEntryInsured())
            if (!caseInsurance)
            {
                continue;
            }
            
            insuranceCarrier = HMInsuranceCarrier::findByCode(HMPatient::find(hmPatientChargeEntryTableLocal.HMPatient).getPrimaryPatientInsurance().InsuranceCarrier);
            
			if (insuranceCarrier.UseInsuranceBatch && !chargeEntryLine.HMInsuranceCarrierBatchDetails)
            {
				//failures++;
                continue;
            }
            //CE: Batch number validation by Ammar.Ali for MazikCare
    
            /*     if (!hmPatientChargeEntryTableLocal.getPrimaryInsurance())
            {
                continue;
            }
    
            if (conLen(_carrierCon) > 0)
            {
                if(conFind(_carrierCon, hmPatientChargeEntryTableLocal.getPrimaryInsurance()) != 1)
                {
                    continue;
                }
            }*/
            if (!hmPatientChargeEntryTableLocal.containsChargeEntryLinesForClaim())
            {
                continue;
            }
    
            templateRecId = HMInsuranceCarrier::find(hmPatientChargeEntryTableLocal.getPrimaryInsurance()).HMClaimTemplate;
    
            if (counter == 0)
            {
                // this.initializePDFWriter(HMClaimTemplate::find(templateRecId));
                ttsBegin;
            }
    
            counter++;


            batchSet = new Set(Types::String);
    
            for (i=1; i <= conlen(_batchNumbers); i++)
            {
                //       info(strFmt("%1 - CustTrans RecId: %2", i));
    
                batchDetails = HMInsuranceCarrierBatchDetails::findbByBatchNumber(conpeek(_batchNumbers, i));
    
                claimChargeLineLocal.clear();
    
                select firstOnly hmPatientChargeEntryLineLocal
                    where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == hmPatientChargeEntryTableLocal.RecId
                        && hmPatientChargeEntryLineLocal.HMInsuranceCarrierBatchDetails == batchDetails.RecId
                        notExists join claimChargeLineLocal
                            where claimChargeLineLocal.HMPatientChargeEntryLine ==  hmPatientChargeEntryLineLocal.RecID
                                && claimChargeLineLocal.IsRejected == NoYes::No;
    
                if (hmPatientChargeEntryLineLocal)
                {
                    batchSet.add(batchDetails.BatchNumber);
                }
                else
                {
                    continue;
                }
            }
    
            if (conlen(_batchNumbers) == 0)
            {
                if (conLen(_carrierCon) == 0)
                {
                    if (_TPACode == '')
                    {
                        while select hmPatientChargeEntryLineLocal
                            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == hmPatientChargeEntryTableLocal.RecId
                                notExists join claimChargeLineLocal where claimChargeLineLocal.HMPatientChargeEntryLine == hmPatientChargeEntryLineLocal.RecId
                                        && claimChargeLineLocal.IsRejected == NoYes::No
                        {
                            batchDetails = HMInsuranceCarrierBatchDetails::find(hmPatientChargeEntryLineLocal.HMInsuranceCarrierBatchDetails);
                            batchSet.add(batchDetails.BatchNumber);
                        }
                    }
                    else
                    {
                        select firstOnly TPA
                        where TPA.Code == _TPACode;
    
                        if (TPA)
                        {
                            i = 1;
    
                            while select TPADetails
                                where TPADetails.Tpa == TPA.RecId
                            {
                                carrierCon = conIns(carrierCon, i, TPADetails.HMInsuranceCarrier);
                                i++;
                            }
    
                            if (i > 1)
                            {
                                while select hmPatientChargeEntryLineLocal
                                where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == hmPatientChargeEntryTableLocal.RecId
                                    notExists join claimChargeLineLocal where claimChargeLineLocal.HMPatientChargeEntryLine == hmPatientChargeEntryLineLocal.RecId
                                            && claimChargeLineLocal.IsRejected == NoYes::No
                                {
                                    batchDetails = HMInsuranceCarrierBatchDetails::find(hmPatientChargeEntryLineLocal.HMInsuranceCarrierBatchDetails);
    
                                    if (conFind(carrierCon, batchDetails.HMInsuranceCarrier))
                                    {
                                        batchSet.add(batchDetails.BatchNumber);
                                    }
                                }
                            }
                            CarrierCon = _carrierCon;
                        }
                    }
                }
                else
                {
                    while select hmPatientChargeEntryLineLocal
                            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == hmPatientChargeEntryTableLocal.RecId
                                notExists join claimChargeLineLocal where claimChargeLineLocal.HMPatientChargeEntryLine == hmPatientChargeEntryLineLocal.RecId
                                        && claimChargeLineLocal.IsRejected == NoYes::No
                    {
                        batchDetails = HMInsuranceCarrierBatchDetails::find(hmPatientChargeEntryLineLocal.HMInsuranceCarrierBatchDetails);
    
                        if (conFind(_carrierCon, batchDetails.HMInsuranceCarrier))
                        {
                            batchSet.add(batchDetails.BatchNumber);
                        }
                    }
                }
            }
            batchSetEnumerator  = batchSet.getEnumerator();
    
            while (batchSetEnumerator.moveNext())
            {
                if (this.generate(hmPatientChargeEntryTableLocal.HMPatient, claimCase.HMResourceMaster, patientInsuranceRecId, hmPatientChargeEntryTableLocal.RecId, batchSetEnumerator.current(), caseInsurance.RecId))
                {
                    success++;
                }
                else
                {
                    failures++;
                }
            }
            
            for (int x = 1; x <= conLen(_carrierCon); x++)
            {
                RefRecId			carrierRecId	= conPeek(_carrierCon, x);
                HMInsuranceCarrier	carrier			= HMInsuranceCarrier::find(carrierRecId);
					
                if (carrier.UseInsuranceBatch == NoYes::No)
                {     
                    if (this.generate(hmPatientChargeEntryTableLocal.HMPatient, claimCase.HMResourceMaster, patientInsuranceRecId, hmPatientChargeEntryTableLocal.RecId, '', caseInsurance.RecId))
					{
					    success++;
					}
					else
					{
					    failures++;
					}
				}
			}    
        }
        if(counter > 0)
        {
            ttsCommit;
            // this.closePDFWriter();
        }
        //if(success > 0)
        //{
        //// this.openClaimPDF();
        //}
        //    info(strFmt("@MAZ7169",counter));
        info(strFmt("@MAZ7170",success));
        info(strFmt("@MAZ7171",failures));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateExcelFileForClaims</Name>
				<Source><![CDATA[
    public void generateExcelFileForClaims()
    {
        
        /*
        HMClaimTable            claimTable;
        HMClaimTableDetails     claimTableDetails;
        HMResourceMaster        HMResourceMaster;
        HMClaimChargeLine       claimChargeLine;
    
        // todo: ax7 to be fixed later
        SysExcelWorksheetHelper worksheetHelper;
        //SysExcelHelper          sysExcelHelper;
        //SysExcelWorksheet       worksheet;
        int                     currentRow = 1;
        str                     worksheetName;
        //SysExcelRange           range;
        str                     fileName;
        str attachmentPath      = "C:\\";
    
        // todo: ax7 to be fixed later
        // Sets the font color for a range of cells
        
        void setRangeFont(int _fromColumn, int _fromRow, int _toColumn, int _toRow, int _rgbIntColor)
        {
            range = worksheetHelper.getWorksheetRange(_fromColumn, _fromRow, _toColumn, _toRow);
            worksheetHelper.setFontColor(range, _rgbIntColor);
        }
    
        // Defines the columns of the spreadsheet
        #define.MedicalAdjudicator          (1)
        #define.ClaimSequenceNumber         (2)
        #define.CardIssueNumber             (3)
        #define.PatientRegistrationNumber   (4)
        #define.PatientNumber               (5)
        #define.PatientName                 (6)
        #define.InvoiceNumber               (7)
        #define.InvoiceDate                 (8)
        #define.PreAuthID                   (9)
        #define.DoctorName                  (10)
        #define.Specialty                   (11)
        #define.ClinicalData                (12)
        #define.DiagnosisData               (13)
        #define.CLIIMTYPE                   (14)
        #define.Reference                   (15)
        #define.Emergency                   (16)
        #define.Discount                    (17)
        #define.Deductible                  (18)
        #define.SubmittedBy                 (19)
        #define.PayTo                       (20)
        #define.BenHead                     (21)
        #define.ToothNumber                 (22)
        #define.MediCode                    (23)
        #define.SVCode                      (24)
        #define.ServiceDescription          (25)
        #define.RadiologyDate               (26)
        #define.RadiologyClinicalData       (27)
        #define.RadiologyReportText         (28)
        #define.IncurDateFrom               (29)
        #define.IncurDateTo                 (30)
        #define.Quantity                    (31)
        #define.Pres_Amt                    (32)
        #define.LineItemDiscount            (33)
        #define.Notes                       (34)
        #define.Temperature                 (35)
        #define.RespiratoryRate             (36)
        #define.BloodPressure               (37)
        #define.Height                      (38)
        #define.Weight                      (39)
        #define.Pulse                       (40)
        #define.RejectQuantity              (41)
        #define.RejectAmount                (42)
        #define.RejectCode                  (43)
        #define.RejectionBox1               (44)
    
        worksheetName = "@SYS135880";
    
        sysExcelHelper = SysExcelHelper::construct();
        sysExcelHelper.initialize();
    
        worksheet           = sysExcelHelper.addWorksheet(worksheetName);
        worksheetHelper     = SysExcelWorksheetHelper::construct(worksheet);
    
        // Populate the header row with the appropriate field labels and format the columns
        worksheetHelper.addColumnFromTableField (#MedicalAdjudicator         , tablenum(CustTable)          , fieldnum(CustTable, AccountNum));
        worksheetHelper.addColumnFromTableField (#ClaimSequenceNumber        , tablenum(HMClaimTable)       , fieldnum(HMClaimTable, ClaimId));
        worksheetHelper.addColumn               (#CardIssueNumber            , "Card Issue number"          , Types::String);
        worksheetHelper.addColumnFromTableField (#PatientRegistrationNumber  , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, HMInsuranceMembershipId));
        worksheetHelper.addColumnFromTableField (#PatientNumber              , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientAccountNum));
        worksheetHelper.addColumnFromTableField (#PatientName                , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientName));
        worksheetHelper.addColumn               (#InvoiceNumber              , 'Invoice number'             , Types::String );
        worksheetHelper.addColumn               (#InvoiceDate                , 'Invoice date'               , Types::String );
        worksheetHelper.addColumn               (#PreAuthID                  , 'Pre Authorization Id'       , Types::String );
        worksheetHelper.addColumn               (#DoctorName                 , 'Doctor'                     , Types::String );
        worksheetHelper.addColumn               (#Specialty                  , 'Specialty'                  , Types::String );
        worksheetHelper.addColumn               (#ClinicalData               , 'Clinical data'              , Types::String );
        worksheetHelper.addColumn               (#DiagnosisData              , 'Diagnosis data'             , Types::String );
        worksheetHelper.addColumn               (#CLIIMTYPE                  , 'Clim type'                  , Types::String );
        worksheetHelper.addColumn               (#Reference                  , 'Refer Ind'                  , Types::String );
        worksheetHelper.addColumn               (#Emergency                  , 'Emergency Ind'              , Types::String );
        worksheetHelper.addColumn               (#Discount                   , 'VO Disccount amount'        , Types::String );
        worksheetHelper.addColumn               (#Deductible                 , 'VO deductible amount'       , Types::String );
        worksheetHelper.addColumn               (#SubmittedBy                , 'Submitted by'               , Types::String );
        worksheetHelper.addColumn               (#PayTo                      , 'Pay to'                     , Types::String );
        worksheetHelper.addColumn               (#BenHead                    , 'Ben head'                   , Types::String );
        worksheetHelper.addColumn               (#ToothNumber                , 'Tooth no'                   , Types::String );
        worksheetHelper.addColumn               (#MediCode                   , 'Medicore'                   , Types::String );
        worksheetHelper.addColumn               (#SVCode                     , 'SV code'                    , Types::String );
        worksheetHelper.addColumnFromTableField (#ServiceDescription         , tablenum(HMClaimChargeLine)  , fieldnum(HMClaimChargeLine, InventTable));
        worksheetHelper.addColumn               (#RadiologyDate              , 'Radiology date'             , Types::String );
        worksheetHelper.addColumn               (#RadiologyClinicalData      , 'Radiology clinical data'    , Types::String );
        worksheetHelper.addColumn               (#RadiologyReportText        , 'Radiology report text'      , Types::String );
        worksheetHelper.addColumn               (#IncurDateFrom              , 'Incur date from'            , Types::String );
        worksheetHelper.addColumn               (#IncurDateTo                , 'Incur date to'              , Types::String );
        worksheetHelper.addColumn               (#Quantity                   , 'Quantity'                   , Types::String );
        worksheetHelper.addColumn               (#Pres_Amt                   , 'Present Amount'             , Types::String );
        worksheetHelper.addColumn               (#LineItemDiscount           , 'Line Item discount'         , Types::String );
        worksheetHelper.addColumn               (#Notes                      , 'Notes'                      , Types::String );
        worksheetHelper.addColumn               (#Temperature                , 'Temperature'                , Types::String );
        worksheetHelper.addColumn               (#RespiratoryRate            , 'Respiratory rate'           , Types::String );
        worksheetHelper.addColumn               (#BloodPressure              , 'Blood pressure'             , Types::String );
        worksheetHelper.addColumn               (#Height                     , 'Height'                     , Types::String );
        worksheetHelper.addColumn               (#Weight                     , 'Weight'                     , Types::String );
        worksheetHelper.addColumn               (#Pulse                      , 'Pulse'                      , Types::String );
        worksheetHelper.addColumn               (#RejectQuantity             , 'Reject quantity'            , Types::String );
        worksheetHelper.addColumn               (#RejectAmount               , 'Reject amount'              , Types::String );
        worksheetHelper.addColumn               (#RejectCode                 , 'Reject code'                , Types::String );
        worksheetHelper.addColumn               (#RejectionBox1              , 'Rejection box'              , Types::String );
    
        while select claimChargeLine
            join claimTableDetails
                where claimChargeLine.HMClaimTable == claimTableDetails.HMClaimTable
                    && claimTableDetails.HMClaimTable == claimRecId
        {
            claimTable = HMClaimTable::find(claimTableDetails.HMClaimTable);
            HMResourceMaster    = HMResourceMaster::find(claimTable.HMResourceMaster);
    
            currentRow ++;
            worksheetHelper.setCellValue(#MedicalAdjudicator         , currentRow, '');
            worksheetHelper.setCellValue(#ClaimSequenceNumber        , currentRow, claimTable.ClaimID);
            worksheetHelper.setCellValue(#CardIssueNumber            , currentRow, claimTableDetails.HMCardIssueNumber);
            worksheetHelper.setCellValue(#PatientRegistrationNumber  , currentRow, claimTableDetails.HMInsuranceMembershipId);
            worksheetHelper.setCellValue(#PatientNumber              , currentRow, claimTableDetails.PatientAccountNum);
            worksheetHelper.setCellValue(#PatientName                , currentRow, claimTableDetails.PatientName);
            worksheetHelper.setCellValue(#InvoiceNumber              , currentRow, '');
            worksheetHelper.setCellValue(#InvoiceDate                , currentRow, '');
            worksheetHelper.setCellValue(#PreAuthID                  , currentRow, '');
            worksheetHelper.setCellValue(#DoctorName                 , currentRow, HMResourceMaster.Description);
            worksheetHelper.setCellValue(#Specialty                  , currentRow, claimTableDetails.SpecialtyDescription);
            worksheetHelper.setCellValue(#ClinicalData               , currentRow, '');
            worksheetHelper.setCellValue(#DiagnosisData              , currentRow, '');
            worksheetHelper.setCellValue(#CLIIMTYPE                  , currentRow, '');
            worksheetHelper.setCellValue(#Reference                  , currentRow, '');
            worksheetHelper.setCellValue(#Emergency                  , currentRow, '');
            worksheetHelper.setCellValue(#Discount                   , currentRow, '');
            worksheetHelper.setCellValue(#Deductible                 , currentRow, '');
            worksheetHelper.setCellValue(#SubmittedBy                , currentRow, '');
            worksheetHelper.setCellValue(#PayTo                      , currentRow, '');
            worksheetHelper.setCellValue(#BenHead                    , currentRow, '');
            worksheetHelper.setCellValue(#ToothNumber                , currentRow, '');
            worksheetHelper.setCellValue(#MediCode                   , currentRow, '');
            worksheetHelper.setCellValue(#SVCode                     , currentRow, '');
            worksheetHelper.setCellValue(#ServiceDescription         , currentRow, '');
            worksheetHelper.setCellValue(#RadiologyDate              , currentRow, '');
            worksheetHelper.setCellValue(#RadiologyClinicalData      , currentRow, '');
            worksheetHelper.setCellValue(#RadiologyReportText        , currentRow, '');
            worksheetHelper.setCellValue(#IncurDateFrom              , currentRow, '');
            worksheetHelper.setCellValue(#IncurDateTo                , currentRow, '');
            worksheetHelper.setCellValue(#Quantity                   , currentRow, '');
            worksheetHelper.setCellValue(#Pres_Amt                   , currentRow, '');
            worksheetHelper.setCellValue(#LineItemDiscount           , currentRow, '');
            worksheetHelper.setCellValue(#Notes                      , currentRow, '');
            worksheetHelper.setCellValue(#Temperature                , currentRow, '');
            worksheetHelper.setCellValue(#RespiratoryRate            , currentRow, '');
            worksheetHelper.setCellValue(#BloodPressure              , currentRow, '');
            worksheetHelper.setCellValue(#Height                     , currentRow, '');
            worksheetHelper.setCellValue(#Weight                     , currentRow, '');
            worksheetHelper.setCellValue(#Pulse                      , currentRow, '');
            worksheetHelper.setCellValue(#RejectQuantity             , currentRow, '');
            worksheetHelper.setCellValue(#RejectAmount               , currentRow, '');
            worksheetHelper.setCellValue(#RejectCode                 , currentRow, '');
            worksheetHelper.setCellValue(#RejectionBox1              , currentRow, '');
        }
      /*  if (currentRow > 1)
        {
            sumRow = currentRow + 2;
    
            worksheetHelper.setCellValue(#BalanceMST, sumRow, "@SYS58659");
    
            worksheetHelper.sumRange(worksheetHelper.getWorksheetRange(#BalanceMST, 2, #BalanceMST, currentRow), #BalanceMST, sumRow);
    
            setRangeFont(#BalanceMST, 2, #BalanceMST, currentRow, redColor);
    
            cellValue = worksheet.cells().item(sumRow, #BalanceMST).value();
            if (cellValue.currency() > 0)
            {
            setRangeFont(#BalanceMST, sumRow, #BalanceMST, sumRow, redColor);
            }
        }*/
        worksheetHelper.autoFitColumns();
        worksheetHelper.formatWorksheetTableStyle(sysExcelHelper.getOfficeVersion());
    
        // Generate the file using the current UTC date time (without the ‘:’ character)
        // since it is not allowed for file names.
        fileName = strfmt('%1%2%3', attachmentPath, strReplace(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':', ''), sysExcelHelper.getFileExtension());
    
        sysExcelHelper.save(filename);
        sysExcelHelper.launchExcel();
        */



        HMClaimTable            claimTable;
        HMClaimTableDetails     claimTableDetails;
        HMResourceMaster        HMResourceMaster;
        HMClaimChargeLine       claimChargeLine;
        str                     fileName;
        str attachmentPath      = "C:\\";

        int                     sumRow;

        CustTable custTable;
        // Defines the columns of the spreadsheet
        #define.MedicalAdjudicator          (1)
        #define.ClaimSequenceNumber         (2)
        #define.CardIssueNumber             (3)
        #define.PatientRegistrationNumber   (4)
        #define.PatientNumber               (5)
        #define.PatientName                 (6)
        #define.InvoiceNumber               (7)
        #define.InvoiceDate                 (8)
        #define.PreAuthID                   (9)
        #define.DoctorName                  (10)
        #define.Specialty                   (11)
        #define.ClinicalData                (12)
        #define.DiagnosisData               (13)
        #define.CLIIMTYPE                   (14)
        #define.Reference                   (15)
        #define.Emergency                   (16)
        #define.Discount                    (17)
        #define.Deductible                  (18)
        #define.SubmittedBy                 (19)
        #define.PayTo                       (20)
        #define.BenHead                     (21)
        #define.ToothNumber                 (22)
        #define.MediCode                    (23)
        #define.SVCode                      (24)
        #define.ServiceDescription          (25)
        #define.RadiologyDate               (26)
        #define.RadiologyClinicalData       (27)
        #define.RadiologyReportText         (28)
        #define.IncurDateFrom               (29)
        #define.IncurDateTo                 (30)
        #define.Quantity                    (31)
        #define.Pres_Amt                    (32)
        #define.LineItemDiscount            (33)
        #define.Notes                       (34)
        #define.Temperature                 (35)
        #define.RespiratoryRate             (36)
        #define.BloodPressure               (37)
        #define.Height                      (38)
        #define.Weight                      (39)
        #define.Pulse                       (40)
        #define.RejectQuantity              (41)
        #define.RejectAmount                (42)
        #define.RejectCode                  (43)
        #define.RejectionBox1               (44)
        try
        {
          
            MemoryStream memoryStream = new MemoryStream();
            using (var package = new ExcelPackage(memoryStream))
            {
                HMExcelWorkSheetHelper _this = new HMExcelWorkSheetHelper();
                var currentRow = 1;
                var worksheets = package.get_Workbook().get_Worksheets();
                var ClaimWorkSheet = worksheets.add("@SYS135880");
                //var CustTableWorksheet = worksheets.Add("Export");
                //var cells = CustTableWorksheet.get_Cells();
                var cells = ClaimWorkSheet.get_cells();
                //OfficeOpenXml.ExcelRange cell = cells.get_Item(currentRow, 1);
                _this.setColumnFromTableField(cells.get_Item(currentRow,#MedicalAdjudicator)         , tablenum(CustTable)          , fieldnum(CustTable, AccountNum));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#ClaimSequenceNumber)        , tablenum(HMClaimTable)       , fieldnum(HMClaimTable, ClaimId));
                _this.setColumn               (cells.get_Item(currentRow,#CardIssueNumber)            , "Card Issue number"          , Types::String);
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientRegistrationNumber)  , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, HMInsuranceMembershipId));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientNumber)              , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientAccountNum));
                _this.setColumnFromTableField (cells.get_Item(currentRow,#PatientName)                , tablenum(HMClaimTableDetails), fieldnum(HMClaimTableDetails, PatientName));
                _this.setColumn               (cells.get_Item(currentRow,#InvoiceNumber)              , 'Invoice number'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#InvoiceDate)                , 'Invoice date'               , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#PreAuthID)                  , 'Pre Authorization Id'       , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#DoctorName)                 , 'Doctor'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Specialty)                  , 'Specialty'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#ClinicalData)               , 'Clinical data'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#DiagnosisData)              , 'Diagnosis data'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#CLIIMTYPE)                  , 'Clim type'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Reference)                  , 'Refer Ind'                  , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Emergency)                  , 'Emergency Ind'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Deductible)                 , 'VO deductible amount'       , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#SubmittedBy)                , 'Submitted by'               , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#PayTo)                      , 'Pay to'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#BenHead)                    , 'Ben head'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#ToothNumber)                , 'Tooth no'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#MediCode)                   , 'Medicore'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#SVCode)                     , 'SV code'                    , Types::String );
                _this.setColumnFromTableField (cells.get_Item(currentRow,#ServiceDescription)         , tablenum(HMClaimChargeLine)  , fieldnum(HMClaimChargeLine, InventTable));
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyDate)              , 'Radiology date'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyClinicalData)      , 'Radiology clinical data'    , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RadiologyReportText )       , 'Radiology report text'      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#IncurDateFrom)              , 'Incur date from'            , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#IncurDateTo)                , 'Incur date to'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Quantity)                   , 'Quantity'                   , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Pres_Amt)                   , 'Present Amount'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#LineItemDiscount)           , 'Line Item discount'         , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Notes)                      , 'Notes'                      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Temperature)                , 'Temperature'                , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RespiratoryRate )           , 'Respiratory rate'           , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#BloodPressure )             , 'Blood pressure'             , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Height)                     , 'Height'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Weight)                     , 'Weight'                     , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#Pulse )                     , 'Pulse'                      , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectQuantity)          , 'Reject quantity'            , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectAmount)               , 'Reject amount'              , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectCode)                , 'Reject code'                , Types::String );
                _this.setColumn               (cells.get_Item(currentRow,#RejectionBox1)              , 'Rejection box'              , Types::String );
                while select claimChargeLine
            join claimTableDetails
                where claimChargeLine.HMClaimTable == claimTableDetails.HMClaimTable
                    && claimTableDetails.HMClaimTable == claimRecId
                {
                    claimTable = HMClaimTable::find(claimTableDetails.HMClaimTable);
                    HMResourceMaster    = HMResourceMaster::find(claimTable.HMResourceMaster);
    
                    currentRow ++;
                    _this.setCellValue(cells.get_Item(currentRow,#MedicalAdjudicator),  '');
                    _this.setCellValue(cells.get_Item(currentRow,#ClaimSequenceNumber), claimTable.ClaimID);
                    _this.setCellValue(cells.get_Item(currentRow,#CardIssueNumber), claimTableDetails.HMCardIssueNumber);
                    _this.setCellValue(cells.get_Item(currentRow,#PatientRegistrationNumber), claimTableDetails.HMInsuranceMembershipId);
                    _this.setCellValue(cells.get_Item(currentRow,#PatientNumber), claimTableDetails.PatientAccountNum);
                    _this.setCellValue(cells.get_Item(currentRow,#PatientName), claimTableDetails.PatientName);
                    _this.setCellValue(cells.get_Item(currentRow,#InvoiceNumber), '');
                    _this.setCellValue(cells.get_Item(currentRow,#InvoiceDate), '');
                    _this.setCellValue(cells.get_Item(currentRow,#PreAuthID), '');
                    _this.setCellValue(cells.get_Item(currentRow,#DoctorName), HMResourceMaster.Description);
                    _this.setCellValue(cells.get_Item(currentRow,#Specialty), claimTableDetails.SpecialtyDescription);
                    _this.setCellValue(cells.get_Item(currentRow,#ClinicalData), '');
                    _this.setCellValue(cells.get_Item(currentRow,#DiagnosisData), '');
                    _this.setCellValue(cells.get_Item(currentRow,#CLIIMTYPE), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Reference), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Emergency), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Discount), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Deductible), '');
                    _this.setCellValue(cells.get_Item(currentRow,#SubmittedBy), '');
                    _this.setCellValue(cells.get_Item(currentRow,#PayTo), '');
                    _this.setCellValue(cells.get_Item(currentRow,#BenHead), '');
                    _this.setCellValue(cells.get_Item(currentRow,#ToothNumber) , '');
                    _this.setCellValue(cells.get_Item(currentRow,#MediCode), '');
                    _this.setCellValue(cells.get_Item(currentRow,#SVCode), '');
                    _this.setCellValue(cells.get_Item(currentRow,#ServiceDescription), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RadiologyDate), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RadiologyClinicalData), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RadiologyReportText), '');
                    _this.setCellValue(cells.get_Item(currentRow,#IncurDateFrom), '');
                    _this.setCellValue(cells.get_Item(currentRow,#IncurDateTo), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Quantity), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Pres_Amt), '');
                    _this.setCellValue(cells.get_Item(currentRow,#LineItemDiscount), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Notes), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Temperature), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RespiratoryRate), '');
                    _this.setCellValue(cells.get_Item(currentRow,#BloodPressure), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Height), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Weight), '');
                    _this.setCellValue(cells.get_Item(currentRow,#Pulse), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RejectQuantity), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RejectAmount), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RejectCode), '');
                    _this.setCellValue(cells.get_Item(currentRow,#RejectionBox1), '');
                }
                /*
                if (currentRow > 1)
                {
                    sumRow = currentRow + 2;
   
                    _this.setCellValue(cells.get_Item(sumRow,#BalanceMST),"@SYS58659");
    
                    worksheetHelper.sumRange(worksheetHelper.getWorksheetRange(#BalanceMST, 2, #BalanceMST, currentRow), #BalanceMST, sumRow);
    
                    setRangeFont(#BalanceMST, 2, #BalanceMST, currentRow, redColor);
    
                    cellValue = worksheet.cells().item(sumRow, #BalanceMST).value();
                    if (cellValue.currency() > 0)
                    {
                        setRangeFont(#BalanceMST, sumRow, #BalanceMST, sumRow, redColor);
                    }
                }
                */
 
                package.Save();
                fileName = strfmt('%1%2%3', attachmentPath, strReplace(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':', ''),'xlsx');
                file::SendFileToUser(memoryStream,fileName);
            }
            
            memoryStream.Seek(0, SeekOrigin::Begin);
            //return memoryStream;
        }
        catch(Exception::CLRError)
        {
            // if the statement can't be generated, report an error and return null
            error("@SYS135884");
            //return null;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaperClaim</Name>
				<Source><![CDATA[
    public boolean generatePaperClaim(RecId _claimRecid, Recid _templateRecId, RecId _carrier, boolean _inBatch = false)
    {
        boolean ret;
    
        try
        {
            hmClaimTemplate = HMClaimTemplate::find(_templateRecId);
            claimRecId = _claimRecid;
    
            if(hmClaimTemplate)
            {
                //if(this.validateClaim(true))
                if(true)
                {
                    if(!_inBatch)
                    {
                        this.initializePDFWriter();
                    }
    
                    this.generatePdf();
    
                    if(!_inBatch)
                    {
                        //this.closePDFWriter();

                        pdfDocument.close();
                        var PdfStreamToArry = output.ToArray();
                        pdfStream.close();
                        using(System.IO.MemoryStream  TempSteam = New MemoryStream(PdfStreamToArry))
                        {
                
                            Dynamics.AX.Application.File::SendFileToUser(TempSteam,'PDF.pdf',CLassstr(FileUploadTemporaryStorageStrategy));
                        }
                        
                        //Dynamics.AX.Application.File::SendFileToUser(fileStream,'input.pdf',CLassstr(FileUploadTemporaryStorageStrategy));
                        //new Browser().navigate(otpt, true);

                        //this.openClaimPDF();
                    }
    
                    ret = true;
                }
                else
                {
    
                    ret = false;
                }
            }
            else //template not found
            {
                if(!HMClaimTable::find(claimRecId).HMInsuranceCarrier)
                {
                    info("@MAZ7548");
                }
                else
                {
                    info("@MAZ7549");
                }
                ret = false;
            }
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePdf</Name>
				<Source><![CDATA[
    private void generatePdf()
    {
        iTextSharp.text.pdf.AcroFields  acroFields;
     
        FieldId             fieldid;
        str value;
        HMClaimTemplateFieldMapping     hmClaimTemplateFieldMapping;
        HMClaimTemplateField            hmClaimTemplateField;
        int                             fieldCounter;
        int i = 1;
        hmClaimChargeLine   hmClaimChargeLine;
        HMClaimTableDetails             hmClaimTableDetails;
        HMCaseTrans             hmCaseTransClaim;
        HMPatientChargeEntryLine    hmPatientChargeEntryLineClaim;
    
        pageNo++;
        this.getTotalNumberofPages();
    
        if (totalLinesLocal == 0)
        {
            this.insertCMS1450TmpTable(totalPages);
            totalLinesLocal = totalLinesCount;
        }
    
    
        if(!isFirst)
        {
            output = new MemoryStream();
            {
                
                pdfCopy = new iTextSharp.text.pdf.PdfSmartCopy(pdfDocument, output);
                pdfCopy.set_CloseStream(false);
                pdfDocument.Open();
            }
            isFirst = true;
        }
    
        pdfReader = new iTextSharp.text.pdf.PdfReader(inputFile);
        pdfStream = new System.IO.MemoryStream();
        pdfStamper = new iTextSharp.text.pdf.PdfStamper(pdfReader, pdfStream);
        
        
        //Dynamics.AX.Application.File::SendFileToUser(pdfStream,'PDF.pdf',CLassstr(FileUploadTemporaryStorageStrategy));
      
        
    
        acroFields = pdfStamper.get_AcroFields();
    
        // Pinncale:Start
        select forUpdate hmClaimTableDetailTmp
            where hmClaimTableDetailTmp.HMClaimTable == claimRecId;
    
        hmClaimTableDetailTmp.PDFCurrentPageNo = pageNo;
        ttsBegin;
        hmClaimTableDetailTmp.doUpdate();
        ttsCommit;
        //select hmClaimTableDetails where hmClaimTableDetails.HMClaimTable == claimRecId;
    
        while select * from hmClaimTemplateFieldMapping
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && (hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Patient ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Physician ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::ProcedureLineTotal ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Case)
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            fieldid = fieldName2id(tableNum(HmClaimTableDetailTmp) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
            value = hmClaimTableDetailTmp.(fieldid);
            acroFields.SetField(hmClaimTemplateField.FieldName,value);
        }
        // Pinncale:End
        // ModifiedBy: Waqas Anwer
    
        //Noman
    
        select hmClaimCodesDetailTmp
            where hmClaimCodesDetailTmp.HMClaimTable == claimRecId;
        //select hmClaimTableDetails where hmClaimTableDetails.HMClaimTable == claimRecId;
    
        while select * from hmClaimTemplateFieldMapping
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && (hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseOccurrence ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseOccurrenceSpan ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseValue ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Diagnosis ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseProcedure ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CCQualifier ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseCondition)
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            fieldid = fieldName2id(tableNum(hmClaimCodesDetailTmp) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
            value = hmClaimCodesDetailTmp.(fieldid);
            acroFields.SetField(hmClaimTemplateField.FieldName,value);
        }
    
        //Noman
    
        
    
    
        /*
        while select * from hmClaimTemplateFieldMapping
            order by hmClaimTemplateFieldMapping.Number
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Diagnosis
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            select hmClaimDiagnosis where hmClaimDiagnosis.HMClaimTable == claimRecId
                    && hmClaimDiagnosis.Priority == hmClaimTemplateFieldMapping.Number;
    
            if(hmClaimDiagnosis)
            {
                acroFields.SetField(hmClaimTemplateField.FieldName,HMDiagnosisDictionary::find(hmClaimDiagnosis.HMDiagnosisDictionary).ICD9Code);
            }
        }
     */
    
        select hmPIEProcedureInfoTmp where hmPIEProcedureInfoTmp.HMClaimTable == claimRecId;
        //select hmClaimTableDetails where hmClaimTableDetails.HMClaimTable == claimRecId;
    
        while select * from hmClaimTemplateFieldMapping
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && (hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Carrier ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseDiagnosis ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CasePayer ||
            hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CasePPS)
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            //fieldid = fieldName2id(tableNum(HMClaimTableDetails) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
            fieldid = fieldName2id(tableNum(HMClaimPIEProcedureInfoTmp) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
            //value = hmClaimTableDetails.(fieldid);
    
            value = hmPIEProcedureInfoTmp.(fieldid);
            acroFields.SetField(hmClaimTemplateField.FieldName,value);
        }
    
        // Pinncale:Start
        while select * from hmClaimTemplateFieldMapping
            order by hmClaimTemplateFieldMapping.Number
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Procedure
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            select firstOnly forUpdate hmClaimChargeLineTmp
                order by hmClaimChargeLineTmp.RecId
                where hmClaimChargeLineTmp.HMClaimTable == claimRecId
                    && hmClaimChargeLineTmp.Priority == hmClaimTemplateFieldMapping.Number
                    && HMClaimChargeLinetmp.isClaimGenerated == 0
                    ;
    
            if(hmClaimChargeLineTmp)
            {
                fieldid = fieldName2id(tableNum(HmClaimChargeLineTmp), hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
                value = hmClaimChargeLineTmp.(fieldid);
                acroFields.SetField(hmClaimTemplateField.FieldName,value);
    
    
                fieldcounter ++;
    
                if (lastValue != hmClaimTemplateFieldMapping.Number)
                {
                    lastvalue = hmClaimTemplateFieldMapping.Number;
                }
    
                if (fieldCounter == 7)
                {
                    hmClaimChargeLineTmp.isClaimGenerated = 1;
                    ttsBegin;
                    hmClaimChargeLineTmp.doUpdate();
                    totalLinesLocal = totalLinesLocal - 1;
                    ttsCommit;
                    fieldcounter =0;
                }
            }
        }
        // Pinncale:End
        // ModifiedBy: Waqas Anwer
    
        //while select * from hmClaimTemplateFieldMapping
        //order by hmClaimTemplateFieldMapping.Number
        //where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
        //&& hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
        //&& hmClaimTemplateFieldMapping.Entity == HMClaimEntity::Diagnosis
        //join * from hmClaimTemplateField
        //where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        //{
        //select hmDiagnosisTmp where hmDiagnosisTmp.HMClaimTable == claimRecId
        //&& hmDiagnosisTmp.Priority == hmClaimTemplateFieldMapping.Number;
        //
        //if(hmDiagnosisTmp)
        //{
        //fieldid = fieldName2id(tableNum(HMClaimDiagnosisTmp) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
        //value = hmDiagnosisTmp.(fieldid);
        //acroFields.SetField(hmClaimTemplateField.FieldName,value);
        //}
        //}
    
        while select * from hmClaimTemplateFieldMapping
            order by hmClaimTemplateFieldMapping.Number
            where hmClaimTemplateFieldMapping.HMClaimTemplate == hmClaimTemplate.RecId
            && hmClaimTemplateFieldMapping.HMClaimTemplateField != 0
            && hmClaimTemplateFieldMapping.Entity == HMClaimEntity::CaseCondition
            join * from hmClaimTemplateField
            where hmClaimTemplateField.RecId == hmClaimTemplateFieldMapping.HMClaimTemplateField
        {
            select hmConditionCodeTmp where hmConditionCodeTmp.HMClaimTable == claimRecId
                    && hmConditionCodeTmp.Priority == hmClaimTemplateFieldMapping.Number;
    
            if(hmConditionCodeTmp)
            {
                fieldid = fieldName2id(tableNum(HmClaimConditionCodeTmp) ,hmClaimTemplateFieldMapping.ClaimTemplateFieldName);
                value = hmConditionCodeTmp.(fieldid);
                acroFields.SetField(hmClaimTemplateField.FieldName,value);
            }
        }

        if(hmClaimTemplate.Code == '1500')
        {
            select * from hmClaimTableDetails where hmClaimTableDetails.HMClaimTable == claimRecId;

            while select hmClaimChargeLine 
                order by hmClaimChargeLine.Priority
                where hmClaimChargeLine.HMClaimTable == claimRecId 
               join * from hmPatientChargeEntryLineClaim
                    where hmPatientChargeEntryLineClaim.RecId == hmClaimChargeLine.HMPatientChargeEntryLine
            {                
                acroFields.SetField("Form[0].Fields[0].DOSToYearLine" + int2str(i) + "[0]",int2str(year(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].DOSToDayLine" + int2str(i) + "[0]",int2str(dayOfMth(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].DOSToMonthLine" + int2str(i) + "[0]",int2str(mthOfYr(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].DOSFromYearLine" + int2str(i) + "[0]",int2str(year(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].DOSFromDayLine" + int2str(i) + "[0]",int2str(dayOfMth(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].DOSFromMonthLine" + int2str(i) + "[0]",int2str(mthOfYr(hmPatientChargeEntryLineClaim.FromDate)));
                acroFields.SetField("Form[0].Fields[0].PlaceOfServiceLine" + int2str(i) + "[0]",HMPlaceOfService::find(hmPatientChargeEntryLineClaim.PlaceOfService).Code);
                acroFields.SetField("Form[0].Fields[0].CPTHCPCSLine" + int2str(i) + "[0]",HMProcedureCodeMaster::find(hmPatientChargeEntryLineClaim.CPTCodes).Code);
                acroFields.SetField("Form[0].Fields[0].Modifier1Line" + int2str(i) + "[0]",HMProcedureModifier::find(hmPatientChargeEntryLineClaim.Modifier1).Code);
                acroFields.SetField("Form[0].Fields[0].Modifier2Line" + int2str(i) + "[0]",HMProcedureModifier::find(hmPatientChargeEntryLineClaim.Modifier2).Code);
                acroFields.SetField("Form[0].Fields[0].Modifier3Line" + int2str(i) + "[0]",HMProcedureModifier::find(hmPatientChargeEntryLineClaim.Modifier3).Code);
                acroFields.SetField("Form[0].Fields[0].Modifier4Line" + int2str(i) + "[0]",HMProcedureModifier::find(hmPatientChargeEntryLineClaim.Modifier4).Code);
                acroFields.SetField("Form[0].Fields[0].ChargesRightLine" + int2str(i) + "[0]",num2expstr(hmClaimChargeLine.ChargeRight));
                acroFields.SetField("Form[0].Fields[0].ChargesLeftLine" + int2str(i) + "[0]",num2expstr(hmClaimChargeLine.ChargeLeft));
                acroFields.SetField("Form[0].Fields[0].DaysUnitLine" + int2str(i) + "[0]",num2expstr(hmPatientChargeEntryLineClaim.Units));

                i++;
            }

            

            acroFields.SetField("Form[0].Fields[0].TotalChargeLeft[0]",num2expstr(hmClaimTableDetails.TotalChargeLeft));
            acroFields.SetField("Form[0].Fields[0].TotalChargeRight[0]",num2expstr(hmClaimTableDetails.TotalChargeRight));
            acroFields.SetField("Form[0].Fields[0].AmountPaidLeft[0]",num2expstr(hmClaimTableDetails.AmountPaidLeft));
            acroFields.SetField("Form[0].Fields[0].AmountPaidRight[0]",num2expstr(hmClaimTableDetails.AmountPaidRight));
            acroFields.SetField("Form[0].Fields[0].BalanceDueRight[0]",num2expstr(hmClaimTableDetails.BalanceDueRight));
            acroFields.SetField("Form[0].Fields[0].BalanceDueLeft[0]",num2expstr(hmClaimTableDetails.BalanceDueLeft));

            acroFields.SetField("Form[0].Fields[0].PatientDOBDay[0]",int2str(hmClaimTableDetails.PatientBirthDay));
            acroFields.SetField("Form[0].Fields[0].PatientDOBMonth[0]",int2str(hmClaimTableDetails.PatientBirthMonth));
            acroFields.SetField("Form[0].Fields[0].PatientDOBYear[0]",int2str(hmClaimTableDetails.PatientBirthYear));
            
            acroFields.SetField("Form[0].Fields[0].ReferringProviderName[0]",hmClaimTableDetails.ReferringProvider);
            
            acroFields.SetField("Form[0].Fields[0].InsuredCity[0]",hmClaimTableDetails.InsuredCity);
            acroFields.SetField("Form[0].Fields[0].InsuredDOBDay[0]",int2str(hmClaimTableDetails.InsuredBirthDay));
            acroFields.SetField("Form[0].Fields[0].InsuredDOBMonth[0]",int2str(hmClaimTableDetails.InsuredBirthMonth));
            acroFields.SetField("Form[0].Fields[0].InsuredDOBYear[0]",int2str(hmClaimTableDetails.InsuredBirthYear));
            acroFields.SetField("Form[0].Fields[0].InsuredName[0]",hmClaimTableDetails.InsuredName);
            acroFields.SetField("Form[0].Fields[0].InsuredInsurancePlanName[0]",hmClaimTableDetails.InsuredPlanProgramName);
            acroFields.SetField("Form[0].Fields[0].InsuredIDNumber[0]",hmClaimTableDetails.InsuredPolicyGroupNumber);
            acroFields.SetField("Form[0].Fields[0].InsCompanyAddress1[0]",hmClaimTableDetails.InsuranceCarrierAddress);            
            acroFields.SetField("Form[0].Fields[0].InsCompanyAddress2[0]",hmClaimTableDetails.InsuranceCarrierContractNumber);

            acroFields.SetField("Form[0].Fields[0].InsuredState[0]",hmClaimTableDetails.InsuredState);
            acroFields.SetField("Form[0].Fields[0].InsuredZip[0]",hmClaimTableDetails.InsuredZipCode);
            acroFields.SetField("Form[0].Fields[0].InsuredGender[0]",int2str(hmClaimTableDetails.InsuredGender));
            acroFields.SetField("Form[0].Fields[0].InsuredStreetNo[0]",hmClaimTableDetails.InsuredStreet);
            acroFields.SetField("Form[0].Fields[0].InsuredEmployerName[0]",hmClaimTableDetails.InsuredEmployersSchoolName);
            

        }
    
        pdfStamper.set_FormFlattening(true);
    
        pdfStamper.Close();
    
        pdfReader = new iTextSharp.text.pdf.PdfReader(pdfStream.ToArray());
        pdfCopy.AddPage(pdfCopy.GetImportedPage(pdfReader, 1));
    
        if (totalLinesLocal > 0)
        {
           // this.generatePdf();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseBilledAmount</Name>
				<Source><![CDATA[
    public AmountMST getCaseBilledAmount(HMPatientChargeEntryTable _chargeEntryTable)
    {
        real                  amount;
        HMPatientChargeEntryTable  chargeEntryTable;
        HMCaseTrans                caseTrans;
        HMPatientChargeEntryLine   chargeEntryLine;
    
        chargeEntryTable = _chargeEntryTable;
    
        if (chargeEntryTable)
        {
            select sum(insuranceAmount) from caseTrans
                where casetrans.HMCase == chargeEntryTable.HMCase && caseTrans.HMServiceStatus == HMServiceStatus::Complete
            join chargeEntryLine
                where chargeEntryLine.HMCaseTrans == casetrans.RecId
                    && chargeEntryLine.HMPatientChargeEntryTable == chargeEntryTable.RecId;
    
            amount = casetrans.InsuranceAmount;
        }
    
        return  amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChargeEntryDiagnosisPointer</Name>
				<Source><![CDATA[
    public String10 getChargeEntryDiagnosisPointer(HMPatientChargeEntryLine hmPatientChargeEntryLineLocal)
    {
        String10 value;
    
        switch(hmPatientChargeEntryLineLocal.Diagnosis1)
        {
            case diagnosisMap.elements() == 1 && diagnosisMap.lookup(1):
                value += '1';
                break;
            case diagnosisMap.elements() == 2 && diagnosisMap.lookup(2):
                value += '2';
                break;
            case diagnosisMap.elements() == 3 && diagnosisMap.lookup(3):
                value += '3';
                break;
            case diagnosisMap.elements() == 4 && diagnosisMap.lookup(4):
                value += '4';
                break;
        }
    
        if(hmPatientChargeEntryLineLocal.Diagnosis2)
        {
            switch(hmPatientChargeEntryLineLocal.Diagnosis2)
            {
                case diagnosisMap.elements() == 1 && diagnosisMap.lookup(1):
                    value += '1';
                    break;
                case diagnosisMap.elements() == 2 && diagnosisMap.lookup(2):
                    value += '2';
                    break;
                case diagnosisMap.elements() == 3 && diagnosisMap.lookup(3):
                    value += '3';
                    break;
                case diagnosisMap.elements() == 4 && diagnosisMap.lookup(4):
                    value += '4';
                    break;
            }
        }
    
        if(hmPatientChargeEntryLineLocal.Diagnosis3)
        {
            switch(hmPatientChargeEntryLineLocal.Diagnosis3)
            {
                case diagnosisMap.elements() == 1 && diagnosisMap.lookup(1):
                    value += '1';
                    break;
                case diagnosisMap.elements() == 2 && diagnosisMap.lookup(2):
                    value += '2';
                    break;
                case diagnosisMap.elements() == 3 && diagnosisMap.lookup(3):
                    value += '3';
                    break;
                case diagnosisMap.elements() == 4 && diagnosisMap.lookup(4):
                    value += '4';
                    break;
            }
        }
    
        if(hmPatientChargeEntryLineLocal.Diagnosis4)
        {
            switch(hmPatientChargeEntryLineLocal.Diagnosis4)
            {
                case diagnosisMap.elements() == 1 && diagnosisMap.lookup(1):
                    value += '1';
                    break;
                case diagnosisMap.elements() == 2 && diagnosisMap.lookup(2):
                    value += '2';
                    break;
                case diagnosisMap.elements() == 3 && diagnosisMap.lookup(3):
                    value += '3';
                    break;
                case diagnosisMap.elements() == 4 && diagnosisMap.lookup(4):
                    value += '4';
                    break;
            }
        }
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInsPaymentDetail</Name>
				<Source><![CDATA[
    public real getInsPaymentDetail(HMPatientChargeEntryTable _chargeEntryTable,
                                    CustAccount _insuranceCarrierCode,
                                    CustAccount _insuranceCarrierCodeScdry,
                                    CustAccount _insuranceCarrierCodeTry,
                                    boolean _isPrimary = false)
    {
        real                  amount;
        HMPatientChargeEntryTable  chargeEntryTable;
        HMCasePaymtReceivedDetails paymtReceivedDetails;
        HMCaseTransDetail          caseTransDetail;
        LedgerJournalTrans         ledgerJournalTrans;
        CustTrans                  custTrans;
        HMCaseTrans                caseTrans;
    
        chargeEntryTable = _chargeEntryTable;
    
        if (chargeEntryTable)
        {
            select sum(AmountPaid) from paymtReceivedDetails
                where paymtReceivedDetails.HMCase == chargeEntryTable.HMCase
                    && paymtReceivedDetails.LedgerJournalTrans != 0;
    
            amount = paymtReceivedDetails.AmountPaid;
            if(!_isPrimary)
            {
                if (_insuranceCarrierCodeTry)
                {
                    select caseTransDetail
                        where caseTransDetail.TransactionType == HMCaseTransDetailTransactionType::InsurancePayment
                    join caseTrans
                        where caseTrans.RecId == caseTransDetail.HMCaseTrans
                            && caseTrans.HMCase == chargeEntryTable.HMCase
                            && caseTrans.HMServiceStatus == HMServiceStatus::Complete
                    join sum(AmountCurCredit) from ledgerJournalTrans
                        where ledgerJournalTrans.RecId == caseTransDetail.RefRecId
                            && ledgerJournalTrans.TableId == caseTransDetail.RefTableId
                    join custTrans
                        where ledgerJournalTrans.CustTransId == custTrans.RecId
                            && (custTrans.AccountNum == _insuranceCarrierCode
                                || custTrans.AccountNum == _insuranceCarrierCodeScdry
                                || custTrans.AccountNum == _insuranceCarrierCodeTry);
    
                    amount = amount + ledgerJournalTrans.AmountCurCredit;
                }
                else if (_insuranceCarrierCodeScdry)
                {
                    select caseTransDetail
                        where caseTransDetail.TransactionType == HMCaseTransDetailTransactionType::InsurancePayment
                    join caseTrans
                        where caseTrans.RecId == caseTransDetail.HMCaseTrans
                            && caseTrans.HMCase == chargeEntryTable.HMCase
                            && caseTrans.HMServiceStatus == HMServiceStatus::Complete
                    join sum(AmountCurCredit) from ledgerJournalTrans
                        where ledgerJournalTrans.RecId == caseTransDetail.RefRecId
                            && ledgerJournalTrans.TableId == caseTransDetail.RefTableId
                    join custTrans
                        where ledgerJournalTrans.CustTransId == custTrans.RecId
                            && (custTrans.AccountNum == _insuranceCarrierCode
                                || custTrans.AccountNum == _insuranceCarrierCodeScdry);
    
                    amount = amount + ledgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    select caseTransDetail
                        where caseTransDetail.TransactionType == HMCaseTransDetailTransactionType::InsurancePayment
                    join caseTrans
                        where caseTrans.RecId == caseTransDetail.HMCaseTrans
                            && caseTrans.HMCase == chargeEntryTable.HMCase
                            && caseTrans.HMServiceStatus == HMServiceStatus::Complete
                    join sum(AmountCurCredit) from ledgerJournalTrans
                        where ledgerJournalTrans.RecId == caseTransDetail.RefRecId
                            && ledgerJournalTrans.TableId == caseTransDetail.RefTableId
                    join custTrans
                        where ledgerJournalTrans.CustTransId == custTrans.RecId
                            && custTrans.AccountNum == _insuranceCarrierCode;
    
                    amount = amount + ledgerJournalTrans.AmountCurCredit;
                }
            }
        }
    
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostalAddressByType</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress getPostalAddressByType(DirPartyRecId _party, LogisticsLocationRoleType _type)
    {
        DirPartyLocation partyLocation;
        DirPartyLocationRole partyLocationRole;
        LogisticsLocation location;
        LogisticsLocationRole locationRole;
        LogisticsPostalAddress postalAddress;
        ;
        select firstonly postalAddress
    exists join location
    where location.RecId == postalAddress.Location
    exists join locationRole
    where locationRole.Type == _type
    exists join partyLocation
    where partyLocation.Location == location.RecId
    && partyLocation.Party == _party
    exists join partyLocationRole
    where partyLocationRole.PartyLocation == partyLocation.RecId
    && partyLocationRole.LocationRole == locationRole.RecId;
    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberofPages</Name>
				<Source><![CDATA[
    public void getTotalNumberofPages()
    {
        HMPatientChargeEntryLine    HMPatientChargeEntryLine;
        hmPatientChargeEntryTable   hmChargeEntryTable;
        HMClaimTable                hmClaimTable;
        int                         totalRecords;
    
        select firstOnly hmClaimTable
            where hmClaimTable.RecId == claimRecId
        join hmChargeEntryTable
            where hmChargeEntryTable.RecId == hmClaimTable.HMPatientChargeEntryTable;
    
    
        while select hmPatientChargeEntryLine
            group by hmPatientChargeEntryLine.RevenueCode, hmPatientChargeEntryLine.FromDate, CPTCodes
                where hmPatientChargeEntryLine.HMPatientChargeEntryTable == hmChargeEntryTable.RecId
                    && hmPatientChargeEntryLine.HMCaseTrans != 0
        {
            totalRecords = totalRecords + 1;
        }
        //intentionaly used integer type
        if (totalRecords < 22)
        {
            totalPages = 1;
        }
        else
        {
            totalPages =  totalRecords/22 + 1;
        }
    
        totalLinesCount = totalRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePDFWriter</Name>
				<Source><![CDATA[
    public void initializePDFWriter(HMClaimTemplate _hmClaimTemplateLocal = hmClaimTemplate)
    {
        // todo: ax7 to be fixed later
        DocuValue _DocuValue;
        DocuRef docuRefLocal;
        System.IO.Stream    fileStream;
        FileUploadTemporaryStorageResult result ;
      
        HMDocuAction action = new HMDocuAction();
    
        select * from docuRefLocal
            where docuRefLocal.RefRecId == _hmClaimTemplateLocal.RecId
            && docuRefLocal.RefTableId == _hmClaimTemplateLocal.TableId
            && docuRefLocal.RefCompanyId == _hmClaimTemplateLocal.dataAreaId;
    
        if(DocuType::find(docuRefLocal.TypeId).FilePlace == DocuFilePlace::Database)
        {
            //inputFile = action.getDBFileTempPath(docuRefLocal);
        }
        else
        {
            fileStream=  DocumentManagement::getAttachmentStream(docuRefLocal);
            inputFile = Dynamics.AX.Application.File::SendFileToTempStore(fileStream,_DocuValue.Name, classstr (FileUploadTemporaryStorageStrategy));
            //inputFile=File::
            //i  = docuRefLocal.
            //Dynamics.AX.Application.File::SendFileToUser(fileStream,'input.pdf',CLassstr(FileUploadTemporaryStorageStrategy));
            // new Browser().navigate(inputFile, true);
        }
    
        pdfDocument = new iTextSharp.text.Document();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertClaimDiagnosis</Name>
				<Source><![CDATA[
    public void insertClaimDiagnosis(RefRecId _claimTableRecId, RefRecId _appointmentRecId)
    {
        HMClaimDiagnosis    hmClaimDiagnosis;
        HMServiceAppHelper  appHelper = new HMServiceAppHelper();
    
        container           conResponse, conDiagnosis;
    
        boolean     ret;
        int         containerSize, counter = 3, indexValue;
    
        ret = appHelper.callPostWebAPI('api/PatientEncounter/getPatientDiagnosis', "{\"AxAppoitnmentRefRecId\":\"" + int642str(_appointmentRecId) + "\",\"currentPage\":\"1\"}");
        //ret = appHelper.callPostWebAPI('api/PatientEncounter/getPatientDiagnosis', "{\"AxAppoitnmentRefRecId\":\"5637155826\",\"currentPage\":\"1\"}");
    
        if(ret)
        {
            conResponse = appHelper.parmRecordsCon();
        }
    
        containerSize = conLen(conResponse);
    
        while (containerSize > counter)
        {
            hmClaimDiagnosis.clear();
    
            counter += 1;
    
            conDiagnosis    = conPeek(conResponse, counter);
    
            hmClaimDiagnosis.HMClaimTable = _claimTableRecId;
            hmClaimDiagnosis.initValue();
    
            indexValue  = conFind(conDiagnosis, "DiagnosisName");
    
            if (indexValue)
            {
                hmClaimDiagnosis.HMDiagnosisName = conPeek(conDiagnosis, indexValue + 1);
            }
    
            indexValue  = conFind(conDiagnosis, 'ICDCode');
    
            if (indexValue)
            {
                hmClaimDiagnosis.HMICDCode = conPeek(conDiagnosis, indexValue + 1);
    
                switch (counter)
                {
                    case 4:
                        hmclaimTableMain.ICD10Code1 = hmClaimDiagnosis.HMICDCode;
                        break;
    
                    case 5:
                        hmclaimTableMain.ICD10Code2 = hmClaimDiagnosis.HMICDCode;
                        break;
    
                    case 6:
                        hmclaimTableMain.ICD10Code3 = hmClaimDiagnosis.HMICDCode;
                        break;
    
                    case 7:
                        hmclaimTableMain.ICD10Code4 = hmClaimDiagnosis.HMICDCode;
                        break;
                }
            }
    
            indexValue  = conFind(conDiagnosis, 'StatusText');
    
            if (indexValue)
            {
                hmClaimDiagnosis.HMStatusText = conPeek(conDiagnosis, indexValue + 1);
            }
    
            hmClaimDiagnosis.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCMS1450PatientData</Name>
				<Source><![CDATA[
    private void insertCMS1450PatientData()
    {
        HMPatient         hmPatient;
        CustTable         custTable;
        DirPartyTable     dirPartyTable;
        DirPerson         dirPerson;
        HMClaimTableSetup hmClaimSetup;
    
        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsElectronicAddress logisticsElectronicAddress;
    
        select firstOnly * from hmPatient where hmPatient.RecId == this.parmPatientRecId()
            join * from custTable where custTable.RecId == hmPatient.CustTable
            join * from dirPartyTable where dirPartyTable.RecId == custTable.Party
            join * from dirPerson where dirPerson.RecId == dirPartyTable.RecId;
    
        logisticsPostalAddress = DirParty::primaryPostalAddress(dirPartyTable.RecId);
        logisticsElectronicAddress = DirParty::primaryElectronicAddress(dirPartyTable.RecId,LogisticsElectronicAddressMethodType::Phone);
    
        hmClaimTableDetailTmp.PatientName = hmPatient.patientLastFirstMiddleName();
        if(dirPerson.birthDate()!=dateNull())
            hmClaimTableDetailTmp.PatientBirthDate =  this.dateFormatCMS1450(dirPerson.birthDate(), True);
        else
            hmClaimTableDetailTmp.PatientBirthDate = '0';
        hmClaimTableDetailTmp.PatientControlNumber = custTable.AccountNum;
        hmClaimTableDetailTmp.MedicalRecordNumber = custTable.AccountNum;
    
        switch(hmPatient.Gender)
        {
            case HcmPersonGender::Male:
    
                select Code
                    from hmClaimSetup
                        where  hmClaimSetup.Description == 'MALE'
                            && hmClaimSetup.HMClaimEnumList == HMClaimEnumList::Gender;
    
                hmClaimTableDetailTmp.PatientSex = hmClaimSetup.Code;
                break;
            case HcmPersonGender::Female:
                select Code
                    from hmClaimSetup
                        where  hmClaimSetup.Description == 'FEMALE'
                            && hmClaimSetup.HMClaimEnumList == HMClaimEnumList::Gender;
    
                hmClaimTableDetailTmp.PatientSex = hmClaimSetup.Code;
                break;
            default:
                hmClaimTableDetailTmp.PatientSex = 'U';
                break;
        }
    
        hmClaimTableDetailTmp.PatientStreet = logisticsPostalAddress.Street;
        hmClaimTableDetailTmp.PatientCity = logisticsPostalAddress.City;
        hmClaimTableDetailTmp.PatientState = logisticsPostalAddress.State;
        hmClaimTableDetailTmp.PatientZipCode = logisticsPostalAddress.ZipCode;
        hmClaimTableDetailTmp.CountryCode = logisticsPostalAddress.CountryRegionId;//InCorrect should be CountryCode.
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCMS1450TmpTable</Name>
				<Source><![CDATA[
    public boolean insertCMS1450TmpTable(int _totalPages)
    {
        HMClaimTable                            hmClaimTable;
        HMClaimTableSetup                       hmSetup;
        HMPatientChargeEntryTable               hmChargeEntryTable;
        HMProcedureCodeMaster                   hmProcedureMaster;
        HMDiagnosisDictionary                   hmDiagnosisDic;
        HcmWorker                               hcmWorker;
        DirPersonName                           personName;
        HMPatient                               hmPatient;
        HMCaseInsurance                         hmCaseInsurance;
        HMCaseInsurance                         HMCaseInsurancePry, HMCaseInsuranceScd, HMCaseInsuranceTrt;
        HMPatientInsurance                      hmPatientInsurance;
        HMPatientInsurance                      hmPatientInsurancePry, hmPatientInsuranceScd, hmPatientInsuranceTrt;
        HMInsuranceCarrier                      hmInsuranceCarrierPry, hmInsuranceCarrierScd, hmInsuranceCarrierTrt;
        RecId                                   HMCaseRecId;
        RecId                                   patientInsuranceRecId;
        DirPartyTable                           dirPartyTableGurantor;
        DirPartyTable                           dirPartyTableProvider;
        LogisticsPostalAddress                  postalAddressProviderDetails;
        LogisticsPostalAddress                  postalAddressGuaranterDetails;
        HMInsuranceCarrier                      hmInsuranceCarrier;
        HMInsuranceContract                     hmInsuranceContract;
        HMInsuranceContractCarrierCombination   hmInsuranceCombination;
        HMInsuranceContractClassOrPlans         hmInsurancePlan;
        HMTPA                                   hmTPA;
        HMCaseTrans                             hmCaseTrans;
        HMCase                                  hmCase;
        HMParameters                            hmParameters;
        utcDateTime                             testdatetime;
        HMPatientChargeEntryLine                hmPatientChargeEntryLine;
        real                                    paidPrimaryInsAmount, paidSecondaryInsAmount, paidTertiaryInsAmount, finalPayment;
        AmountMST                               billedAmount;
    
        boolean ret;
        int     counter = 0;
        real    sumOfTotalCharges = 0;
        real    sumOfUncoveredCharges = 0;
    
        HMResourceMaster        hmResourceMaster;
    
        select firstOnly hmClaimTable
            where hmClaimTable.RecId == claimRecId
        join hmChargeEntryTable
            where hmChargeEntryTable.RecId == hmClaimTable.HMPatientChargeEntryTable;
    
        HMCaseRecId = hmChargeEntryTable.HMCase;
        hmCase = hmCase::find(HMCaseRecId);

        select firstonly hmCaseInsurance
            where  hmCaseInsurance.IsActive == NoYes::Yes
                && HMCaseInsurance.HMCase == hmCase.RecId;
    
        patientInsuranceRecId = hmCaseInsurance.HMPatientInsurance;
            
        if (patientInsuranceRecId)
        {
            hmPatientInsurance  = HMPatientInsurance::find(patientInsuranceRecId);
    
            if (hmPatientInsurance)
            {
                HMInsuranceCarrier  = hmPatientInsurance.getCarrier_US();
    
                if (HMInsuranceCarrier)
                {
                    hmInsurancePlan = HMInsuranceContractClassOrPlans::find(hmPatientInsurance.HMInsuranceContractClassOrPlans);
    
                    if (hmInsurancePlan)
                    {
                        hmInsuranceContract = HMInsuranceContract::find(hmInsurancePlan.HMInsuranceContract);
    
                        if (hmInsuranceContract)
                        {
                            hmInsuranceCombination = HMInsuranceContractCarrierCombination::find(hmInsuranceContract.HMInsuranceContractCarrierCombination);
    
                            hmTPA = hmTPA::find(hmInsuranceCombination.HMInsuranceTPA);
                        }
                    }
                }
            }
        }
    
        this.parmChargeEntryRecId(hmClaimTable.HMPatientChargeEntryTable);
        this.parmInsuranceRecId(HMInsuranceCarrier.RecId);
        this.parmPatientRecId(hmClaimTable.HMPatient);
        this.parmPhysicianRecId(hmClaimTable.HMResourceMaster);
    
        try
        {
            ttsBegin;
    
            hmClaimTableDetailTmp.clear();
    
            hmClaimTableDetailTmp.initValue();
    
            hmClaimTableDetailTmp.HMClaimTable = hmClaimTable.RecId;
    
            HMPatient = HMPatient::find(hmClaimTable.HMPatient);
    
            hmResourceMaster = hmResourceMaster::find(hmClaimTable.HMResourceMaster);
    
            hmPatientChargeEntryTableMain = hmPatientChargeEntryTable::find(hmClaimTable.HMPatientChargeEntryTable);
    
            hmClaimTableDetailTmp.PatientID = hmPatientInsurance.HMPatientInsuranceMembershipId;
    
            this.insertCMS1450PatientData();
    
            //Pinncale_Work:Start
            dirPartyTableProvider                             = DirPartyTable::findRec(CompanyInfo::current());
            postalAddressProviderDetails                      = LogisticsPostalAddress::findByLocation(dirPartyTableProvider.PrimaryAddressLocation);
            hmClaimTableDetailTmp.NameOfProvider              = dirPartyTableProvider.Name;
            hmClaimTableDetailTmp.NameOfProviderb             = postalAddressProviderDetails.Street + ' ' + postalAddressProviderDetails.PostBox;
            hmClaimTableDetailTmp.NameOfProviderc             = LogisticsAddressCity::find(postalAddressProviderDetails.City).Description + ' ' + postalAddressProviderDetails.State + ' ' + postalAddressProviderDetails.ZipCode;
            hmClaimTableDetailTmp.NameOfProviderd             =  CompanyInfo::find().primaryPhone() + ' ' + ' ' + CompanyInfo::find().primaryFax() + ' ' + postalAddressProviderDetails.CountryRegionId;
            postalAddressProviderDetails                      = this.getPostalAddressByType(DirPartyTable::findRec(CompanyInfo::current()).RecId,LogisticsLocationRoleType::Invoice);
    
            if(this.getPostalAddressByType(DirPartyTable::findRec(CompanyInfo::current()).RecId,LogisticsLocationRoleType::Invoice))
            {
                hmClaimTableDetailTmp.PayToName                 =  DirPartyPostalAddressView::find(dirPartyTableProvider.RecId,postalAddressProviderDetails.Location).LocationName;
                hmClaimTableDetailTmp.PayToNameb                =  postalAddressProviderDetails.Street + ' ' + postalAddressProviderDetails.PostBox ;
                hmClaimTableDetailTmp.PayToNamec                =  LogisticsAddressCity::find(postalAddressProviderDetails.City).Description + ' ' + postalAddressProviderDetails.State + ' ' + postalAddressProviderDetails.ZipCode;
                // hmClaimTableDetailTmp.PayToNamed                =  CompanyInfo::find().primaryPhone() + ' ' + CompanyInfo::find().primaryFax() + ' ' + postalAddressProviderDetails.CountryRegionId;
            }
            else
            {
                hmClaimTableDetailTmp.PayToName                  = dirPartyTableProvider.Name;
                hmClaimTableDetailTmp.PayToNameb                 = postalAddressProviderDetails.Street + ' ' + postalAddressProviderDetails.PostBox;
                hmClaimTableDetailTmp.PayToNamec                 = LogisticsAddressCity::find(postalAddressProviderDetails.City).Description + ' ' + postalAddressProviderDetails.State + ' ' + postalAddressProviderDetails.ZipCode;
                hmClaimTableDetailTmp.PayToNamed                 = CompanyInfo::find().primaryPhone() + ' ' + ' ' + CompanyInfo::find().primaryFax() + ' ' + postalAddressProviderDetails.CountryRegionId;
            }
    
            hmClaimTableDetailTmp.AddmissionStartDate         = hmCase.AddmisionDate!=utcDateTimeNull()?this.dateFormatCMS1450(DateTimeUtil::date(hmCase.AddmisionDate), false):"";
            testDateTime                                      =  DateTimeUtil::applyTimeZoneOffset(hmCase.AddmisionDate,DateTimeUtil::getUserPreferredTimeZone());
            hmClaimTableDetailTmp.AddmissionHour              = int2str(DateTimeUtil::hour(testDateTime));
            testDateTime                                      =  DateTimeUtil::applyTimeZoneOffset(hmCase.DischargeDate,DateTimeUtil::getUserPreferredTimeZone());
            hmClaimTableDetailTmp.DischargeHour               = int2str(DateTimeUtil::hour(testDateTime));
            hmClaimTableDetailTmp.AddmissionHour              = int2str(DateTimeUtil::hour(hmCase.AddmisionDate));
            hmClaimTableDetailTmp.DischargeHour               = int2str(DateTimeUtil::hour(hmCase.DischargeDate));
            hmClaimTableDetailTmp.StatementCoveragePeriodFrom = hmCase.AddmisionDate!=utcDateTimeNull()?this.dateFormatCMS1450(DateTimeUtil::date(hmCase.AddmisionDate), false):"";
            hmClaimTableDetailTmp.StatementCoveragePeriodTo   = hmCase.DischargeDate!=utcDateTimeNull()?this.dateFormatCMS1450(DateTimeUtil::date(hmCase.DischargeDate), false):"";
    
            select firstOnly1 hmPatientInsurancePry
                where  hmPatientInsurancePry.HMPatient == hmPatient.RecId
                    && hmPatientInsurancePry.HMPayerType == HMPayerType::Gurantor;
    
    
            dirPartyTableGurantor = DirPartyTable::findRec(CustTable::find(hmPatientInsurancePry.InsuranceCarrier).Party);
            postalAddressGuaranterDetails=LogisticsPostalAddress::findByLocation(dirPartyTableGurantor.PrimaryAddressLocation);
            if (hmPatientInsurancePry)
            {
    
                hmClaimTableDetailTmp.ResponsiblePartyNameAddress = dirPartyTableGurantor.Name + '\n' + postalAddressGuaranterDetails.Street + ' ' +  postalAddressGuaranterDetails.PostBox + '\n' + LogisticsAddressCity::find(postalAddressGuaranterDetails.City).Description + ' ' +  postalAddressGuaranterDetails.State + ' ' +  postalAddressGuaranterDetails.ZipCode + '\n' +  postalAddressGuaranterDetails.CountryRegionId;
            }
    
            select firstOnly hmSetup
              where  hmSetup.RecId == hmCase.TypeOfAdmission
                    && hmSetup.HMClaimEnumList == HMClaimEnumList::TypeOfAdmission;
    
            hmClaimTableDetailTmp.TypeOfAddmission            = hmSetup.Code;
            hmClaimTableDetailTmp.FederalTaxIdNumber          = CompanyInfo::findRecId(CompanyInfo::current()).CoRegNum;//CompanyInfo::findRecId(CompanyInfo::current()).Tax1099RegNum;
    
            select firstOnly hmSetup
                where  hmSetup.RecId == hmCase.DischargeStatus
                    && hmSetup.HMClaimEnumList == HMClaimEnumList::DischargeStatus;
    
            hmClaimTableDetailTmp.PatientDischargeStatus       = hmSetup.Code;
            hmClaimTableDetailTmp.AccidentState                = hmCase.StateId;
    
            select firstOnly hmSetup
                where  hmSetup.RecId == hmCase.PointOfOrigin
                    && hmSetup.HMClaimEnumList == HMClaimEnumList::PointOfOriginAdult;
    
            hmClaimTableDetailTmp.PointOfOrigin                = hmSetup.Code;
            hmClaimTableDetailTmp.PDFCurrentPageNo             = pageNo;
            hmClaimTableDetailTmp.PDFTotalPages                = _totalPages;
            hmClaimTableDetailTmp.PDFCreationDate              = 
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());//DateTimeUtil::date(DateTimeUtil::utcNow());
    
            hmResourceMaster = HMResourceMaster::find(hmCase.HMResourceMaster);
    
            if (hmResourceMaster.Type == HMResourceType::Employee)
            {
                hcmWorker = HcmWorker::find(hmResourceMaster.RefRecId);
    
                hmClaimTableDetailTmp.AttendingPhysicianNPI = hcmWorker.NPI;
                hmClaimTableDetailTmp.AttendingPhysicianQUAL = enum2str(hcmWorker.HMQaul);
                select firstOnly personName
                    where personName.Person == DirPerson::find(hcmWorker.Person).RecId;
    
                hmClaimTableDetailTmp.AttendingPhysicianFirst = personName.FirstName;
                hmClaimTableDetailTmp.AttendingPhysicianLast = personName.LastName;
            }
    
            hmResourceMaster = HMResourceMaster::find(hmCase.OperatingPhysician);
    
            if (hmResourceMaster.Type == HMResourceType::Employee)
            {
                hcmWorker = HcmWorker::find(hmResourceMaster.RefRecId);
    
                hmClaimTableDetailTmp.OperatingPhysicianNPI = hcmWorker.NPI;
                hmClaimTableDetailTmp.OperatingPhysicianQUAL = enum2str(hcmWorker.HMQaul);
                select firstOnly personName
                    where personName.Person == DirPerson::find(hcmWorker.Person).RecId;
    
                hmClaimTableDetailTmp.OperatingPhysicianFirst = personName.FirstName;
                hmClaimTableDetailTmp.OperatingPhysicianLast = personName.LastName;
            }
            hmResourceMaster = HMResourceMaster::find(hmCase.OtherPhysician);
    
            if (hmResourceMaster.Type == HMResourceType::Employee)
            {
                hcmWorker = HcmWorker::find(hmResourceMaster.RefRecId);
    
                hmClaimTableDetailTmp.OtherPhysician1NPI = hcmWorker.NPI;
                hmClaimTableDetailTmp.OtherPhysician1QUAL = enum2str(hcmWorker.HMQaul);
                select firstOnly personName
                    where personName.Person == DirPerson::find(hcmWorker.Person).RecId;
    
                hmClaimTableDetailTmp.OtherPhysician1First = personName.FirstName;
                hmClaimTableDetailTmp.OtherPhysician1Last = personName.LastName;
            }
    
            hmResourceMaster = HMResourceMaster::find(hmCase.OtherPhysician1);
    
            if (hmResourceMaster.Type == HMResourceType::Employee)
            {
                hcmWorker = HcmWorker::find(hmResourceMaster.RefRecId);
    
                hmClaimTableDetailTmp.OtherPhysician2NPI = hcmWorker.NPI;
                hmClaimTableDetailTmp.OtherPhysician2QUAL = enum2str(hcmWorker.HMQaul);
                select firstOnly personName
                    where personName.Person == DirPerson::find(hcmWorker.Person).RecId;
    
                hmClaimTableDetailTmp.OtherPhysician2First = personName.FirstName;
                hmClaimTableDetailTmp.OtherPhysician2Last = personName.LastName;
            }
    
            counter = 0;
    
            while select RevenueCode, FromDate, CPTCodes, RecId
                    from hmPatientChargeEntryLine
                           order by hmPatientChargeEntryLine.RecId
                        group by hmPatientChargeEntryLine.RevenueCode, hmPatientChargeEntryLine.FromDate, hmPatientChargeEntryLine.RecId, hmPatientChargeEntryLine.CPTCodes
                            where hmPatientChargeEntryLine.HMPatientChargeEntryTable == hmChargeEntryTable.RecId
                    join sum(TotalAmount), sum(Qty)
                    //join TotalAmount, Qty
                    from hmCaseTrans
                            where hmCaseTrans.RecId == hmPatientChargeEntryLine.HMCaseTrans && hmCaseTrans.IsPPS==NoYes::No
                            &&    hmCaseTrans.HMServiceStatus == HMServiceStatus::Complete
            {
                ++counter;
                
                select firstOnly hmProcedureMaster
                    where  hmProcedureMaster.RecId == hmPatientChargeEntryLine.RevenueCode
                        && hmProcedureMaster.Type == HMProcCodeSearchType::Revenue;
               
               
                hmClaimChargeLineTmp.clear();
    
                hmClaimChargeLineTmp.initValue();
                hmClaimChargeLineTmp.HMClaimTable = hmClaimTable.RecId;
    
                if (counter > 22)
                {
                    counter = 1  ;
                }
    
                hmClaimChargeLineTmp.Priority = counter;
                hmClaimChargeLineTmp.RevenueCode = hmProcedureMaster.Code;//hmSetup.Code;
    
    
                hmClaimChargeLineTmp.Description = hmProcedureMaster.Description;//hmSetup.Description;
                hmClaimChargeLineTmp.ServiceDate = this.dateFormatCMS1450(hmPatientChargeEntryLine.FromDate, false);
                hmClaimChargeLineTmp.ServiceUnit = int2str(real2int(hmCaseTrans.Qty));
                hmClaimChargeLineTmp.TotalCharges = round(hmCaseTrans.TotalAmount,0.01);
    
                select firstOnly hmProcedureMaster
                    where  hmProcedureMaster.RecId == hmPatientChargeEntryLine.CPTCodes
                        && hmProcedureMaster.Type == HMProcCodeSearchType::CPT_HCPS;
    
                hmClaimChargeLineTmp.HCPCSCode =hmProcedureMaster.Code;
    
                sumOfTotalCharges += hmCaseTrans.TotalAmount;
    
                hmClaimChargeLineTmp.insert();
            }
    
            hmClaimTableDetailTmp.SumTotalCharges = round(sumOfTotalCharges,0.01);
            hmClaimTableDetailTmp.SumUncoveredCharges =  round(sumOfUncoveredCharges,0.01);
    
            select firstOnly hmSetup
                where  hmSetup.RecId == hmCase.BillType
                    && hmSetup.HMClaimEnumList == HMClaimEnumList::BillType;
    
            hmClaimTableDetailTmp.TypeOfBill=HMClaimTableSetup::findByRecEnum(hmCase.BillType,HMClaimEnumList::BillType).Code;
            hmClaimTableDetailTmp.Remarks=hmCase.Remarks;
            //Field Group : Carrier
            hmInsuranceCarrier = HMInsuranceCarrier::find(hmClaimTable.HMInsuranceCarrier);
    
            select firstOnly HMCaseInsurancePry
                where  HMCaseInsurancePry.Priority == 1
                    && HMCaseInsurancePry.HMCase == hmCase.RecId;
    
            hmPatientInsurancePry = HMPatientInsurance::find(HMCaseInsurancePry.HMPatientInsurance);
            hmInsuranceCarrierPry = HMInsuranceCarrier::findByCode(hmPatientInsurancePry.InsuranceCarrier);
    
            select firstOnly HMCaseInsuranceScd
                where  HMCaseInsuranceScd.Priority == 2
                    && HMCaseInsuranceScd.HMCase == hmCase.RecId;
    
            hmPatientInsuranceScd = HMPatientInsurance::find(HMCaseInsuranceScd.HMPatientInsurance);
            hmInsuranceCarrierScd = HMInsuranceCarrier::findByCode(hmPatientInsuranceScd.InsuranceCarrier);
    
            select firstOnly HMCaseInsuranceTrt
                    where  HMCaseInsuranceTrt.Priority == 3
                        && HMCaseInsuranceTrt.HMCase == hmCase.RecId;
    
            hmPatientInsuranceTrt = HMPatientInsurance::find(HMCaseInsuranceTrt.HMPatientInsurance);
            hmInsuranceCarrierTrt = HMInsuranceCarrier::findByCode(hmPatientInsuranceTrt.InsuranceCarrier);
    
            hmPIEProcedureInfoTmp.clear();
    
            hmPIEProcedureInfoTmp.initValue();
    
            hmPIEProcedureInfoTmp.HMClaimTable = hmClaimTable.RecId;
    
            if (hmInsuranceCarrier.ClaimType == HMClaimType::Paper)
            {
                hmPIEProcedureInfoTmp.PayerIdentificationPrimaryPayer = hmInsuranceCarrierPry.Code + ' ' + hmInsuranceCarrierPry.Name;
                hmPIEProcedureInfoTmp.PayerIdentificationSecondaryPayer = hmInsuranceCarrierScd.Code + ' ' + hmInsuranceCarrierScd.Name;
                hmPIEProcedureInfoTmp.PayerIdentificationTertiaryPayer = hmInsuranceCarrierTrt.Code + ' ' + hmInsuranceCarrierTrt.Name;
            }
            else if (hmInsuranceCarrier.ClaimType == HMClaimType::Electronic)
            {
                hmPIEProcedureInfoTmp.PayerIdentificationPrimaryPayer = hmInsuranceCarrierPry.PayorID + ' ' + hmInsuranceCarrierPry.Name;
                hmPIEProcedureInfoTmp.PayerIdentificationSecondaryPayer = hmInsuranceCarrierScd.PayorID + ' ' + hmInsuranceCarrierScd.Name;
                hmPIEProcedureInfoTmp.PayerIdentificationTertiaryPayer = hmInsuranceCarrierTrt.PayorID + ' ' + hmInsuranceCarrierTrt.Name;
            }
    
            hmPIEProcedureInfoTmp.HealthPlanIdPrimaryPayer  = hmPatientInsurancePry.HealthPlanId;
            hmPIEProcedureInfoTmp.HealthPlanIdSeconaryPayer = hmPatientInsuranceScd.HealthPlanId;
            hmPIEProcedureInfoTmp.HealthPlanIdTertiaryPayer = hmPatientInsuranceTrt.HealthPlanId;
            hmPIEProcedureInfoTmp.RICPrimary                = HMClaimTableSetup::findByRecEnum(hmPatientInsurancePry.ReleaseofInformationCertificationIndicat, HMClaimEnumList::ReleaseOfInformationCerficationIndicator).Code;
            hmPIEProcedureInfoTmp.RICSecondary              = HMClaimTableSetup::findByRecEnum(hmPatientInsuranceScd.ReleaseofInformationCertificationIndicat, HMClaimEnumList::ReleaseOfInformationCerficationIndicator).Code;
            hmPIEProcedureInfoTmp.RICTertiary               = HMClaimTableSetup::findByRecEnum(hmPatientInsuranceTrt.ReleaseofInformationCertificationIndicat, HMClaimEnumList::ReleaseOfInformationCerficationIndicator).Code;
            hmPIEProcedureInfoTmp.ABIPrimary                = HMClaimTableSetup::findByRecEnum(hmPatientInsurancePry.AssignmentOfBenefitsIndicator, HMClaimEnumList::AssignmentOfBenefit).Code;
            hmPIEProcedureInfoTmp.ABISecondary              = HMClaimTableSetup::findByRecEnum(hmPatientInsuranceScd.AssignmentOfBenefitsIndicator, HMClaimEnumList::AssignmentOfBenefit).Code;
            hmPIEProcedureInfoTmp.ABITertiary               = HMClaimTableSetup::findByRecEnum(hmPatientInsuranceTrt.AssignmentOfBenefitsIndicator, HMClaimEnumList::AssignmentOfBenefit).Code;
            hmPIEProcedureInfoTmp.NPINumber                 = hmInsuranceCarrier.HMProviderID;
            hmPIEProcedureInfoTmp.OPIPrimary                = hmInsuranceCarrierPry.OtherProviderIdentifier;
            hmPIEProcedureInfoTmp.OPISecondary              = hmInsuranceCarrierScd.OtherProviderIdentifier;
            hmPIEProcedureInfoTmp.OPITertiary               = hmInsuranceCarrierTrt.OtherProviderIdentifier;
    
            //Noman
    
            billedAmount = this.getCaseBilledAmount(hmChargeEntryTable);
            paidPrimaryInsAmount = this.getInsPaymentDetail(hmChargeEntryTable, hmPatientInsurancePry.InsuranceCarrier,'','', true);
            hmPIEProcedureInfoTmp.PriorPaymentPrimary       = num2str(paidPrimaryInsAmount, 1,2,1,0);
            hmPIEProcedureInfoTmp.EstimatedAmountDuePrimary = num2str(billedAmount - paidPrimaryInsAmount, 1,2,1,0);
    
            if (HMCaseInsurancePry.IsActive == NoYes::No)
            {
                paidSecondaryInsAmount = this.getInsPaymentDetail(hmChargeEntryTable, hmPatientInsurancePry.InsuranceCarrier, '','', false);
                hmPIEProcedureInfoTmp.PriorPaymentSecondary      = num2str(paidSecondaryInsAmount, 1,2,1,0);
                hmPIEProcedureInfoTmp.EstimatedAmountDueSecondary = num2str(billedAmount - (paidSecondaryInsAmount), 1,2,1,0);
    
                if (HMCaseInsuranceScd.IsActive == NoYes::No)
                {
                    paidTertiaryInsAmount = this.getInsPaymentDetail(hmChargeEntryTable, hmPatientInsurancePry.InsuranceCarrier,
                                                                        hmPatientInsuranceScd.InsuranceCarrier,
                                                                        '', false);
                    hmPIEProcedureInfoTmp.PriorPaymentTertiary      = num2str(paidTertiaryInsAmount, 1,2,1,0);
                    hmPIEProcedureInfoTmp.EstimatedAmountDueTertiary = num2str(billedAmount - (paidTertiaryInsAmount), 1,2,1,0);
                }
    
                //if (HMCaseInsuranceTrt.IsActive == NoYes::No)
                //{
                //paidTertiaryInsAmount = this.getInsPaymentDetail(hmChargeEntryTable, hmPatientInsurancePry.InsuranceCarrier,
                //hmPatientInsuranceScd.InsuranceCarrier,
                //hmPatientInsuranceTrt.InsuranceCarrier, false);
                //hmPIEProcedureInfoTmp.PriorPaymentTertiary      = num2str(paidTertiaryInsAmount, 1,2,1,0);
                //hmPIEProcedureInfoTmp.EstimatedAmountDueTertiary = num2str(billedAmount - (paidTertiaryInsAmount), 1,2,1,0);
                //}
            }
    
            //Noman
    
            //HMPatientInsurance > SubscriberName "Not Exist"
            select hmPatient
                where hmPatient.RecId == hmPatientInsuranceTrt.HMPatientSubscriber;
    
            hmPIEProcedureInfoTmp.InsuredNameTertiary = hmPatient.patientLastFirstMiddleName();
    
            select hmPatient
                where hmPatient.RecId == hmPatientInsuranceScd.HMPatientSubscriber;
    
            hmPIEProcedureInfoTmp.InsuredNameSecondary = hmPatient.patientLastFirstMiddleName();
    
            select hmPatient
                where hmPatient.RecId == hmPatientInsurancePry.HMPatientSubscriber;
    
            hmPIEProcedureInfoTmp.InsuredNamePrimary = hmPatient.patientLastFirstMiddleName();
    
            hmPIEProcedureInfoTmp.PatientRelationShipPrimary = strFmt("%1",enum2int(hmPatientInsurancePry.SubscriberRelation)==1 ? '01' : enum2int(hmPatientInsurancePry.SubscriberRelation)==8 ? 'G8' : strFmt("%1",enum2int(hmPatientInsurancePry.SubscriberRelation)));
            hmPIEProcedureInfoTmp.PatientRelationShipSecondary =strFmt("%1",enum2int(hmPatientInsuranceScd.SubscriberRelation)==1 ? '01' : enum2int(hmPatientInsuranceScd.SubscriberRelation)==8 ? 'G8' : strFmt("%1",enum2int(hmPatientInsuranceScd.SubscriberRelation)));
            hmPIEProcedureInfoTmp.PatientRelationShipTertiary = strFmt("%1",enum2int(hmPatientInsuranceTrt.SubscriberRelation)==1 ? '01' : enum2int(hmPatientInsuranceTrt.SubscriberRelation)==8 ? 'G8' : strFmt("%1",enum2int(hmPatientInsuranceTrt.SubscriberRelation)));
    
            hmPIEProcedureInfoTmp.InsuredUniqueIdPrimary = hmPatientInsurancePry.SubscriberID;
            hmPIEProcedureInfoTmp.InsuredUniqueIdSecondary = hmPatientInsuranceScd.SubscriberID;
            hmPIEProcedureInfoTmp.InsuredUniqueIdTertiary = hmPatientInsuranceTrt.SubscriberID;
    
            hmPIEProcedureInfoTmp.InsuredGroupNameTertiary = hmPatientInsuranceTrt.GroupName;
            hmPIEProcedureInfoTmp.InsuredGroupNameSecondary = hmPatientInsuranceScd.GroupName;
            hmPIEProcedureInfoTmp.InsuredGroupNamePrimary = hmPatientInsurancePry.GroupName;
    
            hmPIEProcedureInfoTmp.InsuredGroupNoPrimary = hmPatientInsurancePry.GroupNumber;
            hmPIEProcedureInfoTmp.InsuredGroupNoSecondary = hmPatientInsuranceScd.GroupNumber;
            hmPIEProcedureInfoTmp.InsuredGroupNoTertiary = hmPatientInsuranceTrt.GroupNumber;
    
            hmPIEProcedureInfoTmp.PPSCode                = HMProcedureCodeMaster::find(hmCase.HMPPSCode).Code;
            hmPIEProcedureInfoTmp.DocumentControlNumber  = hmCase.Documentcontrolnumber;
    
            hmPIEProcedureInfoTmp.EmployerNameOfInsured=hmPatientInsurancePry.EmployerNameofTheInsured;
            hmPIEProcedureInfoTmp.EmployerNameOfInsuredb=hmPatientInsuranceScd.EmployerNameofTheInsured;
            hmPIEProcedureInfoTmp.EmployerNameOfInsuredc=hmPatientInsuranceTrt.EmployerNameofTheInsured;
    
            hmPIEProcedureInfoTmp.TreatmentAuthorizationCode=HMCaseInsurancePry.TreatmentAuthorizationCode;
            hmPIEProcedureInfoTmp.TreatmentAuthorizationCodeb=HMCaseInsuranceScd.TreatmentAuthorizationCode;
            hmPIEProcedureInfoTmp.TreatmentAuthorizationCodec=HMCaseInsuranceTrt.TreatmentAuthorizationCode;
    
    
            select hmParameters;
            select hmSetup
                where  hmSetup.RecId == hmParameters.Diagnosisandprocedurecodequalifier
                    && hmSetup.HMClaimEnumList == HMClaimEnumList::DiagnosisAndProcedureCodeQualifier;
    
            hmPIEProcedureInfoTmp.DiagnosisAndProceduresCodeQualifier = hmSetup.Code;
    
            select hmDiagnosisDic
                where hmDiagnosisDic.RecId == hmCase.PrincipalDiagnosisCode;
    
            //hmPIEProcedureInfoTmp.PrincipalDiagnosisCode = hmDiagnosisDic.Code;
    
            select hmDiagnosisDic
                where hmDiagnosisDic.RecId == hmCase.AdmittingDiagnosisCode;
    
            hmPIEProcedureInfoTmp.AdmittingDiagnosisCode = hmDiagnosisDic.Code;
    
            select hmDiagnosisDic
                where hmDiagnosisDic.RecId == hmCase.PatientReasonA;
    
            hmPIEProcedureInfoTmp.PatientReasonForVisit1=hmDiagnosisDic.Code;
    
            select hmDiagnosisDic
                where hmDiagnosisDic.RecId == hmCase.PatientReasonB;
    
            hmPIEProcedureInfoTmp.PatientReasonForVisit2=hmDiagnosisDic.Code;
    
            select hmDiagnosisDic
                where hmDiagnosisDic.RecId == hmCase.PatientReasonC;
    
            hmPIEProcedureInfoTmp.PatientReasonForVisit3=hmDiagnosisDic.Code;
            hmPIEProcedureInfoTmp.Ecia=hmCase.Ecia;
            hmPIEProcedureInfoTmp.Ecib=hmCase.Ecib;
            hmPIEProcedureInfoTmp.Ecic=hmCase.Ecic;
            hmClaimTableDetailTmp.insert();
    
            hmPIEProcedureInfoTmp.insert();
    
            //Pinncale_Work:End
            //Modified By: Waqas Anwer
            this.loadInsuredData();
            this.loadDiagnosisCodesTmpData(hmCase);
            this.loadOccurenceCodesTmpData(hmCase);
            this.loadOccurenceSpanCodesTmpData(hmCase);
            this.loadProcedureCodesTmpData(hmCase);
            this.loadValueCodesTmpData(hmCase);
            this.loadCodesCodesTmpData(hmCase);
            this.loadConditionCodesTmpData(hmCase);
            hmClaimCodesDetailTmp.HMClaimTable =  hmClaimTable.RecId;
            hmClaimCodesDetailTmp.insert();
    
            ttsCommit;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCodesCodesTmpData</Name>
				<Source><![CDATA[
    public void loadCodesCodesTmpData(HMCase _case)
    {
        HMCaseCCQualifier1450           caseCodesCodes;
    
        #localmacro.HMCaseCCQualifiera
        '81CC(a)'
        #endmacro
    
        #localmacro.HMCaseCCQualifierb
        '81CC(b)'
        #endmacro
    
        #localmacro.HMCaseCCQualifierc
        '81CC(c)'
        #endmacro
    
        #localmacro.HMCaseCCQualifierd
        '81CC(d)'
        #endmacro
    
    
        while select caseCodesCodes
            where caseCodesCodes.Case == _case.RecId
        {
            // hmClaimCodesDetailTmp.clear();
    
            switch(caseCodesCodes.FieldLocator)
            {
                case #HMCaseCCQualifiera:
    
                    hmClaimCodesDetailTmp.OccuranceCode81a = HMClaimTableSetup::findByRecEnum(caseCodesCodes.Code, HMClaimEnumList::CodeCode).Code;
                    hmClaimCodesDetailTmp.OccuranceCodeQualifier81a = caseCodesCodes.Occurrencecodequalifier;
                    hmClaimCodesDetailTmp.OccuranceCodeValue81a = caseCodesCodes.Ocurrencecodevalue!=dateNull()?this.dateFormatCMS1450(caseCodesCodes.Ocurrencecodevalue, false):"";
                    break;
    
                case #HMCaseCCQualifierb:
    
                    hmClaimCodesDetailTmp.OccuranceCode81b = HMClaimTableSetup::findByRecEnum(caseCodesCodes.Code, HMClaimEnumList::CodeCode).Code;
                    hmClaimCodesDetailTmp.OccuranceCodeQualifier81b = caseCodesCodes.Occurrencecodequalifier;
                    hmClaimCodesDetailTmp.OccuranceCodeValue81b = caseCodesCodes.Ocurrencecodevalue!=dateNull()?this.dateFormatCMS1450(caseCodesCodes.Ocurrencecodevalue, false):"";
                    break;
    
    
                case #HMCaseCCQualifierc:
    
                    hmClaimCodesDetailTmp.OccuranceCode81c = HMClaimTableSetup::findByRecEnum(caseCodesCodes.Code, HMClaimEnumList::CodeCode).Code;
                    hmClaimCodesDetailTmp.OccuranceCodeQualifier81c = caseCodesCodes.Occurrencecodequalifier;
                    hmClaimCodesDetailTmp.OccuranceCodeValue81c = caseCodesCodes.Ocurrencecodevalue!=dateNull()?this.dateFormatCMS1450(caseCodesCodes.Ocurrencecodevalue, false):"";
                    break;
    
                case #HMCaseCCQualifierd:
    
                    hmClaimCodesDetailTmp.OccuranceCode81d = HMClaimTableSetup::findByRecEnum(caseCodesCodes.Code, HMClaimEnumList::CodeCode).Code;
                    hmClaimCodesDetailTmp.OccuranceCodeQualifier81d = caseCodesCodes.Occurrencecodequalifier;
                    hmClaimCodesDetailTmp.OccuranceCodeValue81d = caseCodesCodes.Ocurrencecodevalue!=dateNull()?this.dateFormatCMS1450(caseCodesCodes.Ocurrencecodevalue, false):"";
                    break;
    
            }
        }
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadConditionCodesTmpData</Name>
				<Source><![CDATA[
    public void loadConditionCodesTmpData(HMCase _case)
    {
        HMClaimConditionCode1450    caseConditionCodes;
    
        #define.HMcondition18('18')
        #define.HMcondition19('19')
        #define.HMcondition20('20')
        #define.HMcondition21('21')
        #define.HMcondition22('22')
        #define.HMcondition23('23')
        #define.HMcondition24('24')
        #define.HMcondition25('25')
        #define.HMcondition26('26')
        #define.HMcondition27('27')
        #define.HMcondition28('28')
    
        while select caseConditionCodes
            where caseConditionCodes.HMCase == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseConditionCodes.FieldLocator)
            {
                case #HMcondition18:
                    hmClaimCodesDetailTmp.Conditioncode18 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition19:
                    hmClaimCodesDetailTmp.Conditioncode19 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition20:
                    hmClaimCodesDetailTmp.Conditioncode20 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition21:
                    hmClaimCodesDetailTmp.Conditioncode21 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition22:
                    hmClaimCodesDetailTmp.Conditioncode22 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition23:
                    hmClaimCodesDetailTmp.Conditioncode23 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition24:
                    hmClaimCodesDetailTmp.Conditioncode24 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition25:
                    hmClaimCodesDetailTmp.Conditioncode25 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition26:
                    hmClaimCodesDetailTmp.Conditioncode26 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition27:
                    hmClaimCodesDetailTmp.Conditioncode27 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
                case #HMcondition28:
                    hmClaimCodesDetailTmp.Conditioncode28 = HMClaimTableSetup::findByRecEnum(caseConditionCodes.Code, HMClaimEnumList::ConditionCodes).Code;
                    break;
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDiagnosisCodesTmpData</Name>
				<Source><![CDATA[
    public void loadDiagnosisCodesTmpData(HMCase _case)
    {
        HMCaseOtherDiagnosisCode1450    caseDiagnosisCodes;
    
        #define.HMCaseOtherDiagnosisCode67("67")
        #define.HMCaseOtherDiagnosisCodea("A")
        #define.HMCaseOtherDiagnosisCodeb("B")
        #define.HMCaseOtherDiagnosisCodec("C")
        #define.HMCaseOtherDiagnosisCoded("D")
        #define.HMCaseOtherDiagnosisCodee("E")
        #define.HMCaseOtherDiagnosisCodef("F")
        #define.HMCaseOtherDiagnosisCodeg("G")
        #define.HMCaseOtherDiagnosisCodeh("H")
        #define.HMCaseOtherDiagnosisCodei("I")
        #define.HMCaseOtherDiagnosisCodej("J")
        #define.HMCaseOtherDiagnosisCodek("K")
        #define.HMCaseOtherDiagnosisCodel("L")
        #define.HMCaseOtherDiagnosisCodem("M")
        #define.HMCaseOtherDiagnosisCoden("N")
        #define.HMCaseOtherDiagnosisCodeo("O")
        #define.HMCaseOtherDiagnosisCodep("P")
        #define.HMCaseOtherDiagnosisCodeq("Q")
    
        while select caseDiagnosisCodes
            where caseDiagnosisCodes.Case == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseDiagnosisCodes.FieldLocator)
            {
                case #HMCaseOtherDiagnosisCode67:
                    hmClaimCodesDetailTmp.PrincipalDiagnosisCode = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodea:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeA = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodeb:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeB = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodec:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeC = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCoded:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeD = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodee:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeE = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodef:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeF = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodeg:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeG = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodeh:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeH = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodei:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeI = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodej:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeJ = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodek:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeK = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodel:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeL = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodem:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeM = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCoden:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeN = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodeo:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeO = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodep:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeP = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
                case #HMCaseOtherDiagnosisCodeq:
                    hmClaimCodesDetailTmp.OtherDagnosisCodeQ = HMDiagnosisDictionary::find(caseDiagnosisCodes.Code).Code;
                    break;
    
            }
        }
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInsuredData</Name>
				<Source><![CDATA[
    public void loadInsuredData()
    {
        HMPatient       hmPatient;
        CustTable       custTable;
        DirPartyTable   dirPartyTable;
        DirPerson       dirPerson;
    
        LogisticsPostalAddress      logisticsPostalAddress;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
    
        HMPatientInsurance  hmPatientInsurance = hmPatientChargeEntryTableMain.getPatientPrimaryInsurance();
    
        if(hmPatientInsurance.HMPatientSubscriber)
        {
            select * from hmPatient
                join * from custTable
                join * from dirPartyTable
                join * from dirPerson
                where  hmPatient.RecId == hmPatientInsurance.HMPatientSubscriber
                && hmPatient.CustTable == custTable.RecId
                && custTable.Party == dirPartyTable.RecId
                && dirPartyTable.RecId == dirPerson.RecId;
        }
        else
        {
            select * from hmPatient
                join * from custTable
                join * from dirPartyTable
                join * from dirPerson
                where  hmPatient.RecId == hmPatientInsurance.HMPatient
                && hmPatient.CustTable == custTable.RecId
                && custTable.Party == dirPartyTable.RecId
                && dirPartyTable.RecId == dirPerson.RecId;
        }
    
        logisticsPostalAddress = DirParty::primaryPostalAddress(dirPartyTable.RecId);
        logisticsElectronicAddress = DirParty::primaryElectronicAddress(dirPartyTable.RecId,LogisticsElectronicAddressMethodType::Phone);
    
        hmclaimTableMain.InsuredName = hmPatient.patientLastFirstMiddleName();
        //hmclaimTableMain.InsuredBirthDay = dirPerson.BirthDay;
        //hmclaimTableMain.InsuredBirthMonth = dirPerson.BirthMonth;
        //hmclaimTableMain.InsuredBirthYear = dirPerson.BirthYear;
        hmclaimTableMain.HMInsuredBirthDate = mkDate(dirPerson.BirthDay, dirPerson.BirthMonth, dirPerson.BirthYear);
    
        switch(hmPatient.Gender)
        {
            case HcmPersonGender::Male:
                hmclaimTableMain.InsuredGender = Gender::Male;
                break;
            case HcmPersonGender::Female:
                hmclaimTableMain.InsuredGender = Gender::Female;
                break;
            default:
                hmclaimTableMain.InsuredGender = Gender::Unknown;
                break;
        }
    
        hmclaimTableMain.InsuredStreet = logisticsPostalAddress.Street;
        hmclaimTableMain.InsuredCity = logisticsPostalAddress.City;
        hmclaimTableMain.InsuredState = logisticsPostalAddress.State;
        hmclaimTableMain.InsuredZipCode = logisticsPostalAddress.ZipCode;
    
        hmclaimTableMain.InsuredPhone = logisticsElectronicAddress.Locator;
        hmclaimTableMain.InsuredPhoneLocal = logisticsElectronicAddress.LocatorExtension;
    
        hmclaimTableMain.InsuredPlanProgramName = hmPatientInsurance.PolicyGroup;
        hmclaimTableMain.InsuredEmployersSchoolName = hmPatient.Employer;
        hmclaimTableMain.InsuredPolicyGroupNumber = hmPatientInsurance.PolicyNumber;
    
        if(hmPatientInsurance)
        {
            switch(hmPatientInsurance.SubscriberRelation)
            {
                case PatientInsuranceRelation::Self:
                    hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::Self;
                    break;
                //case PatientInsuranceRelation::Daughter:
                // case PatientInsuranceRelation::DependentChild:
                //case PatientInsuranceRelation::Son:
                //   hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::Child;
                //  break;
                case PatientInsuranceRelation::Spouse:
                    hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::Spouse;
                    break;
                case PatientInsuranceRelation::Unknown:
                    hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::None;
                    break;
                default:
                    hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::Other;
                    break;
            }
        }
        else
        {
            hmclaimTableMain.PatientInsuredRelation = HMClaimPatientInsuredRelation::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOccurenceCodesTmpData</Name>
				<Source><![CDATA[
    public void loadOccurenceCodesTmpData(HMCase _case)
    {
        HMCaseOccurrenceCode1450    caseOccurrence;
    
        #localmacro.HMCaseOccurrenceCode31a
        "31(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode31b
        "31(b)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode32a
        "32(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode32b
        "32(b)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode33a
        "33(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode33b
        "33(b)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode34a
        "34(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceCode34b
        "34(b)"
        #endmacro
    
        while select caseOccurrence
            where caseOccurrence.Case == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseOccurrence.FieldLocator)
            {
                case #HMCaseOccurrenceCode31a:
                    hmClaimCodesDetailTmp.OccurrenceCode1a = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate1a = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode31b:
                    hmClaimCodesDetailTmp.OccurrenceCode1b = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate1b = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode32a:
                    hmClaimCodesDetailTmp.OccurrenceCode2a = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate2a = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode32b:
                    hmClaimCodesDetailTmp.OccurrenceCode2b = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate2b = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode33a:
                    hmClaimCodesDetailTmp.OccurrenceCode3a = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate3a = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode33b:
                    hmClaimCodesDetailTmp.OccurrenceCode3b = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate3b = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode34a:
                    hmClaimCodesDetailTmp.OccurrenceCode4a = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate4a = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
    
                case #HMCaseOccurrenceCode34b:
                    hmClaimCodesDetailTmp.OccurrenceCode4b = HMClaimTableSetup::findByRecEnum(caseOccurrence.Code, HMClaimEnumList::OccurenceCode).Code;
                    hmClaimCodesDetailTmp.OccurrenceDate4b = caseOccurrence.Date!=dateNull()?this.dateFormatCMS1450(caseOccurrence.Date, false):"";
                    break;
            }
        }
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOccurenceSpanCodesTmpData</Name>
				<Source><![CDATA[
    public void loadOccurenceSpanCodesTmpData(HMCase _case)
    {
        HMCaseOccurrenceSpanCode1450    caseOccurrenceSpan;
    
        #localmacro.HMCaseOccurrenceSpanCode35a
        "35(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceSpanCode35b
        "35(b)"
        #endmacro
        #localmacro.HMCaseOccurrenceSpanCode36a
        "36(a)"
        #endmacro
        #localmacro.HMCaseOccurrenceSpanCode36b
        "36(b)"
        #endmacro
    
        while select caseOccurrenceSpan
            where caseOccurrenceSpan.Case == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseOccurrenceSpan.FieldLocator)
            {
                case #HMCaseOccurrenceSpanCode35a:
                    hmClaimCodesDetailTmp.OccurrenceSpanCode1a = HMClaimTableSetup::findByRecEnum(caseOccurrenceSpan.Code, HMClaimEnumList::OccurenceSpanCodes).Code;
                    hmClaimCodesDetailTmp.OccurrenceSpanFrom1a = caseOccurrenceSpan.From!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.From, false):"";
                    hmClaimCodesDetailTmp.OccurrenceSpanTo1a = caseOccurrenceSpan.Through!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.Through, false):"";
                    break;
    
                case #HMCaseOccurrenceSpanCode35b:
                    hmClaimCodesDetailTmp.OccurrenceSpanCode1b = HMClaimTableSetup::findByRecEnum(caseOccurrenceSpan.Code, HMClaimEnumList::OccurenceSpanCodes).Code;
                    hmClaimCodesDetailTmp.OccurrenceSpanFrom1b = caseOccurrenceSpan.From!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.From, false):"";
                    hmClaimCodesDetailTmp.OccurrenceSpanTo1b = caseOccurrenceSpan.Through!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.Through, false):"";
                    break;
    
                case #HMCaseOccurrenceSpanCode36a:
                    hmClaimCodesDetailTmp.OccurrenceSpanCode2a = HMClaimTableSetup::findByRecEnum(caseOccurrenceSpan.Code, HMClaimEnumList::OccurenceSpanCodes).Code;
                    hmClaimCodesDetailTmp.OccurrenceSpanFrom2a = caseOccurrenceSpan.From!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.From, false):"";
                    hmClaimCodesDetailTmp.OccurrenceSpanTo2a = caseOccurrenceSpan.Through!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.Through, false):"";
                    break;
    
                case #HMCaseOccurrenceSpanCode36b:
                    hmClaimCodesDetailTmp.OccurrenceSpanCode2b = HMClaimTableSetup::findByRecEnum(caseOccurrenceSpan.Code, HMClaimEnumList::OccurenceSpanCodes).Code;
                    hmClaimCodesDetailTmp.OccurrenceSpanFrom2b = caseOccurrenceSpan.From!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.From, false):"";
                    hmClaimCodesDetailTmp.OccurrenceSpanTo2b = caseOccurrenceSpan.Through!=dateNull()?this.dateFormatCMS1450(caseOccurrenceSpan.Through, false):"";
                    break;
            }
        }
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOtherInsuredData</Name>
				<Source><![CDATA[
    public void loadOtherInsuredData()
    {
        HMPatient hmPatient;
        CustTable   custTable;
        DirPartyTable dirPartyTable;
        DirPerson   dirPerson;
    
        HMPatientInsurance  hmPatientInsurance = hmPatientChargeEntryTableMain.getPatientSecondaryInsurance();
    
    
        if(hmPatientInsurance.HMPatientSubscriber)
        {
            select * from hmPatient
                join * from custTable
                join * from dirPartyTable
                join * from dirPerson
                where  hmPatient.RecId == hmPatientInsurance.HMPatientSubscriber
                && hmPatient.CustTable == custTable.RecId
                && custTable.Party == dirPartyTable.RecId
                && dirPartyTable.RecId == dirPerson.RecId;
        }
        else
        {
            select * from hmPatient
                join * from custTable
                join * from dirPartyTable
                join * from dirPerson
                where  hmPatient.RecId == hmPatientInsurance.HMPatient
                && hmPatient.CustTable == custTable.RecId
                && custTable.Party == dirPartyTable.RecId
                && dirPartyTable.RecId == dirPerson.RecId;
        }
    
        hmclaimTableMain.OtherInsuredName = hmPatient.patientLastFirstMiddleName();
        //hmclaimTableMain.OtherInsuredBirthDay = dirPerson.BirthDay;
        //hmclaimTableMain.OtherInsuredBirthMonth = dirPerson.BirthMonth;
        //hmclaimTableMain.OtherInsuredBirthYear = dirPerson.BirthYear;
        hmclaimTableMain.HMSecondaryInsuredBirthDate = mkDate(dirPerson.BirthDay, dirPerson.BirthMonth, dirPerson.BirthYear);
    
        switch(hmPatient.Gender)
        {
            case HcmPersonGender::Male:
                hmclaimTableMain.OtherInsuredGender = Gender::Male;
                break;
            case HcmPersonGender::Female:
                hmclaimTableMain.OtherInsuredGender = Gender::Female;
                break;
            default:
                hmclaimTableMain.OtherInsuredGender = Gender::Unknown;
                break;
        }
    
        hmclaimTableMain.OtherInsuredPlanProgramName = hmPatientInsurance.PolicyGroup;
        hmclaimTableMain.OtherInsuredEmployersSchoolName = hmPatient.Employer;
        hmclaimTableMain.OtherInsuredPolicyGroupNumber = hmPatientInsurance.PolicyNumber;
    
        if(hmPatientInsurance)
        {
            hmclaimTableMain.PatientAnotherPlan = NoYes::Yes;
        }
        else
        {
            hmclaimTableMain.PatientAnotherPlan = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPatientData</Name>
				<Source><![CDATA[
    public void loadPatientData()
    {
        HMPatient hmPatient;
        CustTable   custTable;
        DirPartyTable dirPartyTable;
        DirPerson   dirPerson;
    
        LogisticsPostalAddress logisticsPostalAddress;
        LogisticsElectronicAddress logisticsElectronicAddress;
    
        select firstOnly * from hmPatient where hmPatient.RecId == this.parmPatientRecId()
            join * from custTable where custTable.RecId == hmPatient.CustTable
            join * from dirPartyTable where dirPartyTable.RecId == custTable.Party
            join * from dirPerson where dirPerson.RecId == dirPartyTable.RecId;
    
        logisticsPostalAddress = DirParty::primaryPostalAddress(dirPartyTable.RecId);
        logisticsElectronicAddress = DirParty::primaryElectronicAddress(dirPartyTable.RecId,LogisticsElectronicAddressMethodType::Phone);
    
        hmclaimTableMain.PatientName = hmPatient.patientLastFirstMiddleName();
        //hmclaimTableMain.PatientBirthDay = dirPerson.BirthDay;
        //hmclaimTableMain.PatientBirthMonth = dirPerson.BirthMonth;
        //hmclaimTableMain.PatientBirthYear = dirPerson.BirthYear;
        hmclaimTableMain.HMPatientBirthDate = mkDate(dirPerson.BirthDay, dirPerson.BirthMonth, dirPerson.BirthYear);
    
        hmclaimTableMain.PatientAccountNum = custTable.AccountNum;
    
        switch(hmPatient.Gender)
        {
            case HcmPersonGender::Male:
                hmclaimTableMain.PatientGender = Gender::Male;
                break;
            case HcmPersonGender::Female:
                hmclaimTableMain.PatientGender = Gender::Female;
                break;
            default:
                hmclaimTableMain.PatientGender = Gender::Unknown;
                break;
        }
    
        switch(dirPerson.MaritalStatus)
        {
            case DirPersonMaritalStatus::Single:
                hmclaimTableMain.PatientMaritalStatus = HMClaimMaritalStatus::Single;
                break;
            case DirPersonMaritalStatus::Married:
                hmclaimTableMain.PatientMaritalStatus = HMClaimMaritalStatus::Married;
                break;
            case DirPersonMaritalStatus::None:
                hmclaimTableMain.PatientMaritalStatus = HMClaimMaritalStatus::None;
                break;
            default:
                hmclaimTableMain.PatientMaritalStatus = HMClaimMaritalStatus::Other;
                break;
        }
    
        switch(hmPatient.ProfessionalStatus)
        {
            case HMProfessionalStatus::Employed:
                hmclaimTableMain.PatientEmployementStatus = HMClaimEmployementStatus::Employed;
                break;
            case HMProfessionalStatus::FullTimeStudent:
                hmclaimTableMain.PatientEmployementStatus = HMClaimEmployementStatus::FullTimeStudent;
                break;
            case HMProfessionalStatus::PartTimeStudent:
                hmclaimTableMain.PatientEmployementStatus = HMClaimEmployementStatus::PartTimeStudent;
                break;
            case HMProfessionalStatus::None:
                hmclaimTableMain.PatientEmployementStatus = HMClaimEmployementStatus::None;
                break;
        }
    
        hmclaimTableMain.PatientStreet = logisticsPostalAddress.Street;
        hmclaimTableMain.PatientCity = logisticsPostalAddress.City;
        hmclaimTableMain.PatientState = logisticsPostalAddress.State;
        hmclaimTableMain.PatientZipCode = logisticsPostalAddress.ZipCode;
    
        hmclaimTableMain.PatientPhone = logisticsElectronicAddress.Locator;
        hmclaimTableMain.PatientPhoneLocal = logisticsElectronicAddress.LocatorExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProcedureCodesTmpData</Name>
				<Source><![CDATA[
    public void loadProcedureCodesTmpData(HMCase _case)
    {
        HMCaseOtherProcedureCode1450    caseProcedureCodes;
    
        #localmacro.HMCaseOtherProcedureCodea
        "74(a)"
        #endmacro
        #localmacro.HMCaseOtherProcedureCodeb
        "74(b)"
        #endmacro
        #localmacro.HMCaseOtherProcedureCodec
        "74(c)"
        #endmacro
        #localmacro.HMCaseOtherProcedureCoded
        "74(d)"
        #endmacro
        #localmacro.HMCaseOtherProcedureCodee
        "74(e)"
        #endmacro
    
        while select caseProcedureCodes
            where caseProcedureCodes.Case == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseProcedureCodes.FieldLocator)
            {
                case #HMCaseOtherProcedureCodea:
                    hmClaimCodesDetailTmp.OtherProcedureCodeA = HMProcedureCodeMaster::find(caseProcedureCodes.Code).Code;
                    hmClaimCodesDetailTmp.OtherProcedureDateA = caseProcedureCodes.Date!=dateNull()?this.dateFormatCMS1450(caseProcedureCodes.Date, false):"";
                    break;
    
                case #HMCaseOtherProcedureCodeb:
                    hmClaimCodesDetailTmp.OtherProcedureCodeB = HMProcedureCodeMaster::find(caseProcedureCodes.Code).Code;
                    hmClaimCodesDetailTmp.OtherProcedureDateB = caseProcedureCodes.Date!=dateNull()?this.dateFormatCMS1450(caseProcedureCodes.Date, false):"";
                    break;
    
                case #HMCaseOtherProcedureCodec:
                    hmClaimCodesDetailTmp.OtherProcedureCodeC = HMProcedureCodeMaster::find(caseProcedureCodes.Code).Code;
                    hmClaimCodesDetailTmp.OtherProcedureDateC = caseProcedureCodes.Date!=dateNull()?this.dateFormatCMS1450(caseProcedureCodes.Date, false):"";
                    break;
    
                case #HMCaseOtherProcedureCoded:
                    hmClaimCodesDetailTmp.OtherProcedureCodeD = HMProcedureCodeMaster::find(caseProcedureCodes.Code).Code;
                    hmClaimCodesDetailTmp.OtherProcedureDateD = caseProcedureCodes.Date!=dateNull()?this.dateFormatCMS1450(caseProcedureCodes.Date, false):"";
                    break;
    
                case #HMCaseOtherProcedureCodee:
                    hmClaimCodesDetailTmp.OtherProcedureCodeE = HMProcedureCodeMaster::find(caseProcedureCodes.Code).Code;
                    hmClaimCodesDetailTmp.OtherProcedureDateE = caseProcedureCodes.Date!=dateNull()?this.dateFormatCMS1450(caseProcedureCodes.Date, false):"";
                    break;
            }
        }
        hmClaimCodesDetailTmp.PrincipalProcedureCode = HMProcedureCodeMaster::find(_case.PrincipalProcedureCode).Code;
        hmClaimCodesDetailTmp.PrincipalProcedureDate = _case.PrincipalProcedureDate!=dateNull()?this.dateFormatCMS1450(_case.PrincipalProcedureDate, false):"";
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadValueCodesTmpData</Name>
				<Source><![CDATA[
    public void loadValueCodesTmpData(HMCase _case)
    {
        HMCaseValueCode1450     caseValueCodes;
    
        #localmacro.HMCaseValueCode39a
        "39(a)"
        #endmacro
        #localmacro.HMCaseValueCode39b
        "39(b)"
        #endmacro
        #localmacro.HMCaseValueCode39c
        "39(c)"
        #endmacro
        #localmacro.HMCaseValueCode39d
        "39(d)"
        #endmacro
        #localmacro.HMCaseValueCode40a
        "40(a)"
        #endmacro
        #localmacro.HMCaseValueCode40b
        "40(b)"
        #endmacro
        #localmacro.HMCaseValueCode40c
        "40(c)"
        #endmacro
        #localmacro.HMCaseValueCode40d
        "40(d)"
        #endmacro
        #localmacro.HMCaseValueCode41a
        "41(a)"
        #endmacro
        #localmacro.HMCaseValueCode41b
        "41(b)"
        #endmacro
        #localmacro.HMCaseValueCode41c
        "41(c)"
        #endmacro
        #localmacro.HMCaseValueCode41d
        "41(d)"
        #endmacro
    
        while select caseValueCodes
            where caseValueCodes.Case == _case.RecId
        {
            //hmClaimCodesDetailTmp.clear();
    
            switch(caseValueCodes.FieldLocator)
            {
                case #HMCaseValueCode39a:
                    hmClaimCodesDetailTmp.ValueCode1a = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount1a = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode39b:
                    hmClaimCodesDetailTmp.ValueCode1b = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount1b = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode39c:
                    hmClaimCodesDetailTmp.ValueCode1c = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount1c = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode39d:
                    hmClaimCodesDetailTmp.ValueCode1d = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount1d = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode40a:
                    hmClaimCodesDetailTmp.ValueCode2a = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount2a = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode40b:
                    hmClaimCodesDetailTmp.ValueCode2b = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount2b = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode40c:
                    hmClaimCodesDetailTmp.ValueCode2c = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount2c = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode40d:
                    hmClaimCodesDetailTmp.ValueCode2d = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount2d = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode41a:
                    hmClaimCodesDetailTmp.ValueCode3a = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount3a = caseValueCodes.Amount;
                    break;
    
    
                case #HMCaseValueCode41b:
                    hmClaimCodesDetailTmp.ValueCode3b = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount3b = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode41c:
                    hmClaimCodesDetailTmp.ValueCode3c = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount3c = caseValueCodes.Amount;
                    break;
    
                case #HMCaseValueCode41d:
                    hmClaimCodesDetailTmp.ValueCode3d = HMClaimTableSetup::findByRecEnum(caseValueCodes.Code, HMClaimEnumList::ValueCodes).Code;
                    hmClaimCodesDetailTmp.Amount3d = caseValueCodes.Amount;
                    break;
            }
        }
    
        //hmClaimCodesDetailTmp.HMClaimTable =  _claimTable.RecId;
        //hmClaimCodesDetailTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(boolean isCreate = true, boolean _inBatch = false)
    {
        boolean fileNotCreated = true;
        int i = 1;
    
        /*if (!_inBatch)
        {
            outputFile = xInfo::directory(DirectoryType::Log) + #outputFileName + '.pdf';
    
            if(isCreate)
            {
                do
                {
                    if(WinAPI::fileExists(outputFile,false))
                    {
                        //todo: ax7 docu
                        /*
             
                        if(HMDocuAction::isFileLocked(outputFile))
                        {
                            outputFile = xInfo::directory(DirectoryType::Log) + #outputFileName + int2str(i) +'.pdf';
                            i++;
                        }
                        else
                        {
                            if(WinAPI::deleteFile(outputFile))
                            {
                                fileNotCreated = false;
                            }
                            else
                            {
                                outputFile = xInfo::directory(DirectoryType::Log) + #outputFileName + int2str(i) +'.pdf';
                                i++;
                            }
                        }
                        */
                    }
                    else
                    {
                        fileNotCreated = false;
                    }
                }
    
                while (fileNotCreated);
            }
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>openClaimPDF</Name>
				<Source><![CDATA[
    private void openClaimPDF()
    {
        ;
        System.Diagnostics.Process::Start(outputFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchNumber</Name>
				<Source><![CDATA[
    public str parmBatchNumber(str _batchNumber = batchNumber)
    {
        batchNumber = _batchNumber;
    
        return batchNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChargeEntryRecId</Name>
				<Source><![CDATA[
    public RefRecid parmChargeEntryRecId(RefRecid _chargeEntryRecId = chargeEntryRecId)
    {
        chargeEntryRecId = _chargeEntryRecId;
    
        return chargeEntryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClaimTemplate</Name>
				<Source><![CDATA[
    public HMClaimTemplate parmClaimTemplate(HMClaimTemplate _hmClaimTemplate = hmClaimTemplate)
    {
        hmClaimTemplate = _hmClaimTemplate;
    
        return hmClaimTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInsuranceRecId</Name>
				<Source><![CDATA[
    public RefRecid parmInsuranceRecId(RefRecid _insuranceRecId = insuranceRecId)
    {
        insuranceRecId = _insuranceRecId;
    
        return insuranceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFirst</Name>
				<Source><![CDATA[
    public boolean parmIsFirst(boolean _isFirst = isFirst)
    {
        isFirst = _isFirst;
    
        return isFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutputFile</Name>
				<Source><![CDATA[
    public str parmOutputFile(str _outputFile = outputFile)
    {
        outputFile = _outputFile;
    
        return outputFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPatientRecId</Name>
				<Source><![CDATA[
    public Refrecid parmPatientRecId(Refrecid _patientRecId = patientRecId)
    {
        patientRecId = _patientRecId;
    
        return patientRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysicianRecId</Name>
				<Source><![CDATA[
    public RefRecid parmPhysicianRecId(RefRecid _physicianRecId = physicianRecId)
    {
        physicianRecId = _physicianRecId;
    
        return physicianRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClaimStatus</Name>
				<Source><![CDATA[
    public Recid updateClaimStatus(FormDataSource _fds, HMClaimStatus _status)
    {
        HMClaimVersion hmClaimVersionLocal, hmClaimVersionCount;
        HMClaimChargeLine chargeLine;
        HMClaimTable hmClaimTable;
        HMBillParameters hmBillParameters;
        RecId claimRecIdLocal;
        date dateFrom, dateTo;
        boolean hasRecord = false;
    
        try
        {
            ttsBegin;

            hmBillParameters = HMBillParameters::find();

            MultiSelectionHelper helper = MultiSelectionHelper::construct();
            helper.parmDatasource(_fds);

            hmClaimTable = helper.getFirst();
		
		
            while(hmClaimTable.RecId != 0)
            {
                claimRecIdLocal = hmClaimTable.RecId;
              
                if(claimRecIdLocal != 0)
                {
                    if (hmBillParameters.HMCreateERAFileOnClaimStatusUpdate == NoYes::Yes)
                    {
                        HMX12EDIMessage::generateERA(hmClaimTable.RecId);
                    }
    
                    hmClaimVersionlocal.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
                    hmClaimVersionlocal.initValue();
                    hmClaimVersionlocal.HMClaimTable = claimRecIdLocal;
                    hmClaimVersionlocal.ValidFrom = DateTimeUtil::utcNow();
                    hmClaimVersionlocal.ValidTo = DateTimeUtil::maxValue();
                    hmClaimVersionlocal.Status = _status;

                    if(_status == HMClaimStatus::Submitted)
                    {
                        dateFrom = dateNull();
                        dateTo   = dateMax();

                        select firstonly validTimeState(dateFrom, dateTo) count(recId) from hmClaimVersionCount
                            where hmClaimVersionCount.HMClaimTable == claimRecIdLocal
                            && hmClaimVersionCount.Status == HMClaimStatus::Submitted;

                        hmClaimVersionlocal.ClaimSubmissionId = hmClaimTable.ClaimID + "-" + int2Str(hmClaimVersionCount.RecId + 1);
                    }

                    hmClaimVersionlocal.insert();
    
                }
                hasRecord =true;
                if (_status == HMClaimStatus::Denied || _status == HMClaimStatus::Rejected)
                {
    
                    while select forUpdate chargeLine
                    where chargeLine.HMClaimTable == claimRecIdLocal
                    {
                        chargeLine.IsRejected = NoYes::Yes;
                        chargeLine.update();
    
                    }
                }
                //hmClaimTable =_fds.getNext();
                hmClaimTable = helper.getNext();
            }
            ttsCommit;
            if(!hasRecord)
            {
                throw warning(strfmt("No records marked for claims status updated to %1",enum2str(_status)));
            }
        }
        catch
        {
            error("@MAZ7630");
        }
    
        return hmClaimVersionlocal.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChargeEntry</Name>
				<Source><![CDATA[
    public boolean validateChargeEntry(HMPatientChargeEntryTable _chargeEntry)
    {
        HMPatientChargeEntryLine    hmChargeEntryLine;
        HMCaseTrans                 hmCaseTrans;
        HMCase                      hmCase;
        boolean                     isValid = true;
    
        select hmChargeEntryLine
            join hmCaseTrans
                where hmCaseTrans.RecId == hmChargeEntryLine.HMCaseTrans
                    && hmChargeEntryLine.HMPatientChargeEntryTable == _chargeEntry.RecId
                    && hmCaseTrans.HMServiceStatus != HMServiceStatus::Complete
                    && hmChargeEntryLine.HMCaseTrans != 0
                    && hmCaseTrans.IsPPS == NoYes::No;
    
        if (hmChargeEntryLine)
        {
            hmCase = HMCase::find(hmCaseTrans.HMCase);
    
            isValid = false;
    
            throw warning(strFmt("Claim against case no %1 cannot be generated, services are not posted", hmCase.CaseNo));
        }
    
        select firstonly hmCase
        where hmCase.RecId==_chargeEntry.HMCase;
    
        if(hmCase.BillType==0)
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Billtype field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.AddmisionDate==utcDateTimeNull())
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Admissiondate field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.TypeOfAdmission==0)
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Type of admission field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.DischargeDate==utcDateTimeNull())
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Discharge date field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.PointOfOrigin==0)
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Point of origin field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.DischargeStatus==0)
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, Discharge status field on case must be filled in.", hmCase.CaseNo));
        }
        if(hmCase.AdmittingDiagnosisCode==0)
        {
            isValid = false;
            throw warning(strFmt("Claim against case no %1 cannot be generated, admitting diagnosis code field on case must be filled in.", hmCase.CaseNo));
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceandClaimData</Name>
				<Source><![CDATA[
    public boolean validateInvoiceandClaimData(HMPatientChargeEntryTable _chargeEntry)
    {
        HMPatientChargeEntryLine    hmChargeEntryLineLocal,hmChargeEntryLineLocal1,hmChargeEntryLineLocal2;
        HMParameters                parameters;
        HMCasePaymtReceivedDetails  paymentDetails;
        HMCaseOtherDiagnosisCode1450 hMCaseOtherDiagnosisCode;
        HMCaseTrans                 hmCaseTrans;
        HMCase                      hmCase;
        HMPatient                   hMPatient;
        CustTable                   custTable;
        DirPartyTable               dirPartyTable;
        DirPerson                   dirPerson;
        HMBillParameters            hmbillparameter;
        HMPatientInsurance          hMPatientInsurance;
        HMInsuranceCarrier          hMInsuranceCarrier;
        boolean                     isValid = true;
        AccountNum                  insurancAccount;
        int64                       timeConsumed;
        utcDateTime                 currentTime;
    
        select firstOnly hMPatient
            where hMPatient.RecId==_chargeEntry.HMPatient
                join custTable where custTable.RecId == hmPatient.CustTable
                    join dirPartyTable where dirPartyTable.RecId == custTable.Party
                        join dirPerson where dirPerson.RecId == dirPartyTable.RecId;
    
        hmbillparameter = HMBillParameters::Find();

        if(strLen(custTable.AccountNum)==0)
        {
            isValid = false;
            throw warning("Bill cannot be generated, MRN field on patient must be filled in.");
        }
        if(strLen(hmPatient.patientLastFirstMiddleName())==0)
        {
            isValid = false;
            throw warning("Bill cannot be generated, Patient name field must be filled in.");
        }
        
        insurancAccount = _chargeEntry.getCaseInsuranceNum();
        if (insurancAccount)
        {
            select firstOnly RecId from hmCase where hmCase.RecId==_chargeEntry.HMCase;
            select firstOnly Code from  hMInsuranceCarrier where  hMInsuranceCarrier.RecId==hmCase.getInsuranceCarrierRecId_US();
    
            select firstOnly HMPayerType,HMPatientInsuranceMembershipId from hMPatientInsurance where hMPatientInsurance.InsuranceCarrier== hMInsuranceCarrier.Code;
    
            if(hMPatientInsurance.HMPayerType==HMPayerType::InsuranceCarrier && hMPatientInsurance.Priority==1)
            {
                if(strLen(hMPatientInsurance.HMPatientInsuranceMembershipId)==0)
                {
                    isValid = false;
                    throw Warning("Bill cannot be generated, Insurance membership id field must be filled in.");
                }
                else
                {
                    isValid = true;
                }
    
            }
        }
    
        if(hMPatient.Gender==HcmPersonGender::None)
        {
            isValid = false;
            throw warning("Bill cannot be generated, Patient gender field must be filled in.");
        }
    
        select firstOnly hMCaseOtherDiagnosisCode
                where hMCaseOtherDiagnosisCode.Case==_chargeEntry.HMCase
                && hMCaseOtherDiagnosisCode.Fieldlocator=='67';
    
        //Musab.
        // Bug: 3521 - Start:
        if(hmbillparameter.IsMedicalCodingMandatory == NoYes::Yes
            && hMCaseOtherDiagnosisCode.Code==0)
        // End.
        {
            isValid = false;
            throw Warning("Bill cannot be generated, Principal diagnosis code field on case must be filled in.");
        }

        select firstOnly RecId, PrincipalProcedureCode from hmCase where hmCase.RecId==_chargeEntry.HMCase;
        //Musab.
        // Bug: 3521 - Start:
        if(hmbillparameter.IsMedicalCodingMandatory == NoYes::Yes
            && hmCase.PrincipalProcedureCode == 0)
        {
            isValid = false;
            throw Warning("Bill cannot be generated, Principal procedure code field on case must be filled in.");
		}
        // End.
    
        select paymentDetails
            where paymentDetails.HMCase == _chargeEntry.HMCase;
    
        if(paymentDetails)
        {
            if (paymentDetails.LedgerJournalTrans == 0)
            {
                isValid = false;
                throw warning(strFmt("Bill cannot be generated, advance payments are not posted"));
            }
        }
        
        if(this.parmServiceStatus()==true)
        {
            select hmChargeEntryLineLocal
                join hmCaseTrans
                    where hmCaseTrans.RecId == hmChargeEntryLineLocal.HMCaseTrans
                        && hmChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntry.RecId
                        && (hmCaseTrans.HMServiceStatus != HMServiceStatus::Complete && hmCaseTrans.HMServiceStatus != HMServiceStatus::Cancelled)
                        && hmChargeEntryLineLocal.HMCaseTrans != 0
                        && hmCaseTrans.IsPPS == NoYes::No;
        }
        else
        {
            select hmChargeEntryLineLocal
                join hmCaseTrans
                    where hmCaseTrans.RecId == hmChargeEntryLineLocal.HMCaseTrans
                        && hmChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntry.RecId
                        && hmChargeEntryLineLocal.HMCaseTrans != 0
                        && hmCaseTrans.IsPPS == NoYes::No;
            if (hmChargeEntryLineLocal && hmCaseTrans.HMServiceStatus == HMServiceStatus::Cancelled)
            {
                isValid = false;
                throw warning(strFmt("Bill cannot be generated, services are not posted"));
            }
        }
       
        
    
        select count(RecId) from hmChargeEntryLineLocal1
            join hmCaseTrans
                where hmCaseTrans.RecId == hmChargeEntryLineLocal1.HMCaseTrans
                    && hmChargeEntryLineLocal1.HMPatientChargeEntryTable == _chargeEntry.RecId
                    && hmChargeEntryLineLocal1.HMCaseTrans != 0
                    && hmCaseTrans.IsPPS == NoYes::No;
    
        select count(RecId) from hmChargeEntryLineLocal2
            join hmCaseTrans
                where hmCaseTrans.RecId == hmChargeEntryLineLocal2.HMCaseTrans
                    && hmChargeEntryLineLocal2.HMPatientChargeEntryTable == _chargeEntry.RecId
                    && hmCaseTrans.HMServiceStatus == HMServiceStatus::Cancelled
                    && hmChargeEntryLineLocal2.HMCaseTrans != 0
                    && hmCaseTrans.IsPPS == NoYes::No;
    
        if (hmChargeEntryLineLocal1.RecId==hmChargeEntryLineLocal2.RecId)
        {
            isValid = false;
            throw warning(strFmt("Bill cannot be generated, all services are in cancelled state"));
        }
    
        hmCase = HMCase::find(_chargeEntry.HMCase);
    
        if (hmCase)
        {
            parameters = HMParameters::find();
            currentTime = DateTimeUtil::getSystemDateTime();
            timeConsumed = DateTimeUtil::getDifference(currentTime, hmCase.DischargeDate)/3600;
    
            if (parameters.LaggingPeriod >= timeConsumed && parameters.LaggingPeriod != 0)
            {
                isValid = false;
                throw warning(strFmt("Bill cannot be generated, lagging period must be more than %1 hours", parameters.LaggingPeriod));
            }
        }
    
        if (hmCase)
        {
            if(hmCase.DischargeDate==utcDateTimeNull())
            {
                if (!(hmcase.HMCaseType == HMCaseType::OutPatient && !hmbillparameter.OPDischargeDateMandatory))
                {
                    isValid = false;
                    throw warning("Bill cannot be generated, discharge date is missing");
                }
            }
        }
    
        select hmChargeEntryLineLocal
            join hmCaseTrans
                where hmCaseTrans.RecId == hmChargeEntryLineLocal.HMCaseTrans
                    && hmChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntry.RecId
                    && hmCaseTrans.BillingStatus != HMBillStatus::Posted;
    
        if (!hmChargeEntryLineLocal)
        {
            hmCase = HMCase::find(hmCaseTrans.HMCase);
            isValid = false;
            throw warning(strFmt("Bill has already been generated", hmCase.CaseNo));
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseChargeEntryLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Created by Zain
    /// </summary>
    /// <param name = "_args"></param>
    public static void reverseChargeEntryLine(HMPatientChargeEntryLine _hmPatientChargeEntryLine)
    {
        List                CaseTranslist;
        HMCaseTransDetail   hmCaseTransDetail;
        hmCaseTrans         hmCaseTrans = hmCaseTrans::find(_hmPatientChargeEntryLine.hmcaseTrans, false, ConcurrencyModel::Auto);
        //if(hmChargeEntryClass::isEligibleForBatchChange(_hmPatientChargeEntryLine.RecId, false))
        //{
        //if(Box::yesNo("@MAZ13599",DialogButton::No,"@MAZ7757") == DialogButton::Yes)
        //{
        CaseTranslist = new List(Types::Record);
        CaseTranslist.addEnd(hmCaseTrans);
        HMAccrueRevenueJournalClass::createJournalLines(CaseTranslist,true);

        select RecId from hmCaseTransDetail
        where hmCaseTransDetail.HMCaseTrans == hmCaseTrans.RecId;
        //&& hmCaseTransDetail.TransactionType == HMCaseTransDetailTransactionType::AccrueRevenueReturned;

        if(hmCaseTransDetail)
        {
            ttsBegin;
            hmCaseTrans.selectForUpdate(true);
            hmCaseTrans.BillingStatus = HMBillStatus::Reveresed;
            hmCaseTrans.update();
            ttsCommit;
            info("@MAZ13600");
        }
        else
        {
            warning("@MAZ13601");
        }
        //}
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequiredDocuments</Name>
				<Source><![CDATA[
    private void updateRequiredDocuments(RecId _claimRecId, RecId _insuranceCarrierRecId)
    {
        HMClaimChargeEntryRequireDocument       hmClaimChargeEntryRequireDocument;
        HMRequiredDocumentsInsuranceCarrier     hmRequiredDocumentsInsuranceCarrier;
        HMClaimChargeEntryRequireDocument   hmClaimChargeEntryRequireDocumentInsert;
        DocuRef         docuRef;

        HMPatientChargeEntryLine chargeEntryLine;
        HMPatientChargeEntryTable chargeEntryTable;
        HMCaseInsurance caseInsurance;
        HMClaimTable                claimTable;
        HMPatientInsurance          patientInsurance;
        HMInsuranceCarrier          insuranceCarrier;

        while select * from hmRequiredDocumentsInsuranceCarrier
            where hmRequiredDocumentsInsuranceCarrier.HMInsuranceCarrier == _insuranceCarrierRecId
        {
            select count(recId) from hmClaimChargeEntryRequireDocument
                where hmClaimChargeEntryRequireDocument.HMRequiredDocument == hmRequiredDocumentsInsuranceCarrier.HMRequiredDocuments
                && hmClaimChargeEntryRequireDocument.HMClaimTable == _claimRecId;

            if(hmClaimChargeEntryRequireDocument.RecId == 0)
            {
                boolean chargeEntryLineFOund = false;

                while select RecId from chargeEntryLine                    
                    join * from claimTable where claimTable.HMPatientChargeEntryTable == chargeEntryLine.HMPatientChargeEntryTable 
                    && claimTable.RecId == _claimRecId
                {
                    select forupdate recId from hmClaimChargeEntryRequireDocument
                    where hmClaimChargeEntryRequireDocument.HMRequiredDocument == hmRequiredDocumentsInsuranceCarrier.HMRequiredDocuments
                    && hmClaimChargeEntryRequireDocument.HMPatientChargeEntryLine == chargeEntryLine.RecId;

                    if(hmClaimChargeEntryRequireDocument.RecId )
                    {
                        chargeEntryLineFOund = true;

                        hmClaimChargeEntryRequireDocument.HMClaimTable = _claimRecId;
                        hmClaimChargeEntryRequireDocument.update();

                        while select forupdate docuRef
                            where docuRef.RefRecId == chargeEntryLine.RecId
                            && docuRef.RefCompanyId == curExt()
                            && docuRef.RefTableId == tableNum(HMPatientChargeEntryLine)
                        {
                            docuRef.RefRecId = _claimRecId;
                            docuRef.RefCompanyId = curExt();
                            docuRef.RefTableId = tableNum(HMClaimTable);

                            docuRef.update();
                        }

                        break;
                    }    
                }   
             
                if(!chargeEntryLineFOund)
                {
                    hmClaimChargeEntryRequireDocumentInsert.initValue();

                    hmClaimChargeEntryRequireDocumentInsert.HMClaimTable = _claimRecId;
                    hmClaimChargeEntryRequireDocumentInsert.HMRequiredDocument = hmRequiredDocumentsInsuranceCarrier.HMRequiredDocuments;

                    hmClaimChargeEntryRequireDocumentInsert.insert();
                }                
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        #Task
        HMClaimTableGeneration              hmClaimTableGeneration;
        HMPatientChargeEntryTable           hmPatientChargeEntryTable;
        HMPatientChargeEntryLine            hmPatientChargeEntryLine;
        Object                              formRunObject;
        FormRun                             formRun;
        HMCaseInsurance                     hmCaseInsurance, hmCaseInsuranceLocal;
        RecId                               PhysicianRecId;
        HMPatientInsurance                  hmPatientInsuranceLocal;
        int                                 counter, counterActive;
        boolean                             isClaimSuccessful = false;
        HMCase                              hmCaselocal, hmCase;
        HMBillParameters                    hmbillParameter;
        //Batch number validation by Ammar
        HMPatientInsurance                  patientInsuranceBatch;
        HMInsuranceCarrier                  insuranceCarrierBatch;
        HMPatientChargeEntryLine            chargeEntryLineBatch;
        // List of claims by MHNaviwala 15/04/2022
        List                                hmClaimList = new List(types::Int64);
        ListIterator                        hmClaimListIterator;
        RecId                               hmClaimRecID = 0;
        try
        {
            hmbillParameter = HMBillParameters::find();
            
            ttsBegin;
            //paper claim generation
            if (_args.menuItemName() == menuitemActionStr(HMClaimCMSGeneration))
            {
                hmClaimTableGeneration = new HMClaimTableGeneration();
                if(!hmClaimTableGeneration.generatePaperClaim(_args.record().RecId, HMInsuranceCarrier::find(HMClaimTable::find(_args.record().RecId).HMInsuranceCarrier).HMClaimTemplate, HMInsuranceCarrier::find(HMClaimTable::find(_args.record().RecId).HMInsuranceCarrier).RecId))
                {
                    error("@MAZ9738");
                }
            }
            // Pinncale:Start
            //individual claim geenration via Charge Entry Form
            else if (_args.menuItemName() == menuitemActionStr(HMCMSClaimGenerateChargeEntry))
            {
                hmClaimTableGeneration = new HMClaimTableGeneration();
                hmPatientChargeEntryTable = _args.record();

                hmClaimTableGeneration.parmServiceStatus(hmbillParameter.IsServiceStatusCompleted);

                if(hmClaimTableGeneration.validateInvoiceandClaimData(hmPatientChargeEntryTable))
                {
                    while select hmCaseInsurance
                    join hmPatientInsuranceLocal
                        where  hmCaseInsurance.HMPatientInsurance == hmPatientInsuranceLocal.RecId
                            && hmCaseInsurance.HMCase == hmPatientChargeEntryTable.HMCase
                            && hmPatientInsuranceLocal.HMPayerType == HMPayerType::InsuranceCarrier
                    {
                        counter++;
    
                        if (hmCaseInsurance.IsActive == 1)
                        {
                            hmCaseInsurancelocal = hmCaseInsurance::find(hmCaseInsurance.RecId);
                            counterActive++;
                        }
                    }

                    //Added by Ammar.Ali for MazikCare
                    //Validation for insurance carrier selection
                    //select firstonly RecId from patientInsuranceBatch
                    //    where patientInsuranceBatch.HMPatient == hmPatientChargeEntryTable.HMPatient && patientInsuranceBatch.HMPayerType == HMPayerType::InsuranceCarrier
                    //        join RecId from insuranceCarrierBatch where patientInsuranceBatch.InsuranceCarrier == insuranceCarrierBatch.Code &&  insuranceCarrierBatch.UseInsuranceBatch == NoYes::Yes;

                    insuranceCarrierBatch = HMInsuranceCarrier::findByCode(HMCaseInsurance::findByCase(hmPatientChargeEntryTable.HMCase).InsuranceCarrier);

                    if (insuranceCarrierBatch)
                    {
                        select RecId from chargeEntryLineBatch where chargeEntryLineBatch.HMPatientChargeEntryTable == hmPatientChargeEntryTable.RecId
                            && !chargeEntryLineBatch.HMInsuranceCarrierBatchDetails && insuranceCarrierBatch.UseInsuranceBatch;
                        if (chargeEntryLineBatch.RecId)
                        {
                            throw warning("Batch reference # must be assigned to the charge entry line for the patient");
                        }
                    }

                    //while select chargeEntryLineBatch
                    //    where chargeEntryLineBatch.HMPatientChargeEntryTable == hmPatientChargeEntryTable.RecId
                    //{
                    //    if (insuranceCarrierBatch.UseInsuranceBatch && !chargeEntryLineBatch.HMInsuranceCarrierBatchDetails)
                    //    {
                    //        throw warning("Batch number must be assigned to the charge entry line for the patient");
                    //    }
                    //}
    
                    if (counter > 0)
                    {
                        if (counterActive == 0)
                        {
                            throw warning("Claim cannot be generated, No active insurance selected");
                        }
                    }
    
                    if (counter > 0)
                    {    
                        if (!PhysicianRecId)
                        {
                            PhysicianRecId = HMCase::find(hmCaseInsurancelocal.HMCase).HMResourceMaster;
                        }
    
                        while select hmCaseInsurancelocal
                            join hmPatientInsuranceLocal
                                where  hmCaseInsurancelocal.HMPatientInsurance == hmPatientInsuranceLocal.RecId
                                    && hmCaseInsurancelocal.HMCase == hmPatientChargeEntryTable.HMCase
                                    && hmPatientInsuranceLocal.HMPayerType == HMPayerType::InsuranceCarrier
                                    && hmCaseInsurancelocal.IsActive == 1
                        {
                            hmClaimRecID = hmClaimTableGeneration.generate(hmPatientChargeEntryTable.HMPatient, PhysicianRecId, 0, hmPatientChargeEntryTable.RecId, '', hmCaseInsurancelocal.RecId);
                            
                            if (hmClaimRecID > 0)
                            {
                                isClaimSuccessful = true;

                                // add claim recid in list
                                hmClaimList.addStart(hmClaimRecID);
                                formRun = _args.caller();
    
                                if (formHasMethod(formRun,identifierstr(refreshChargeEntry)))
                                {
                                    formRunObject = formRun;
                                    formRunObject.refreshChargeEntry();
                                }
                            }
                            else
                            {
                                error("@MAZ9738");
                            }
                        }
                    }

                    hmCase = HMCase::Find(hmPatientChargeEntryTable.HMCase);

					//Zain
					//Reverse accrue journal
					if (hmbillParameter.EnableAccrueJournal)
					{
						if (!hmbillParameter.HMEnablePreInvoice)
					    {
							while select hmPatientChargeEntryLine
							where hmPatientChargeEntryLine.HMPatientChargeEntryTable == hmPatientChargeEntryTable.RecId
							{
							    HMClaimTableGeneration::reverseChargeEntryLine(hmPatientChargeEntryLine);
							}
					    }
					}
					//Zain
					
                    if (!hmbillParameter.HMEnablePreInvoice || hmCase.getInsuranceCarrierRecId() == 0)
					{
                        HMGenerateInvoice hmGenerateInvoice = new HMGenerateInvoice();

						//Generate Invoice
						//HMBillPaymentPosting::main(_args);

                        // iterate claim rec id and genrate invoice for each claim : code by MHNaviwala 15/04/2022
                        
                        hmClaimListIterator = new ListIterator (hmClaimList);

                        while (hmClaimListIterator.more())
                        {
                            hmGenerateInvoice = new HMGenerateInvoice();
                            hmGenerateInvoice.createInvoice(hmPatientChargeEntryTable, hmClaimListIterator.value());
                            hmClaimListIterator.next();
                        }

						select forUpdate CaseStatus from hmcaselocal
						    where hMCaselocal.RecId == hmPatientChargeEntryTable.HMCase;
    					
						if(hmcaselocal)
						{
						    hmcaselocal.CaseStatus = HMCaseStatus::Billed;
						    hMCaselocal.update();
						}
					}

                    //required documents
                    if(isClaimSuccessful)
                    {
                        info(strFmt("@MAZ10478"));
                    }

                    if(isClaimSuccessful)
                    {
						info(strFmt("@MAZ10478"));
                    }
                }
            }
            // Pinncale:End
            // Modified By: Waqas Anwer
            else if((_args.menuItemName() == menuitemActionStr(HMClaimStatusSubmit) || (_args.menuItemName() == menuitemActionStr(HMClaimStatusPaid)) || (_args.menuItemName() == menuitemActionStr(HMClaimStatusInReview)) || (_args.menuItemName() == menuitemActionStr(HMClaimStatusSubmitReady)) || (_args.menuItemName() == menuitemActionStr(HMClaimStatusApproved))))
            {
                hmClaimTableGeneration = new HMClaimTableGeneration(false);
                // hmClaimTableGeneration.updateClaimStatus(_args.record().RecId,_args.parmEnum());
                hmClaimTableGeneration.updateClaimStatus(_args.record().dataSource(),_args.parmEnum());
                if(_args.parm() == 'RefreshQuery')
                {
                    ttsCommit;
                    _args.caller().task(#taskRefresh);
                    return;
                }
            }
            ttsCommit;
        }
        catch
        {
            ttsAbort;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>