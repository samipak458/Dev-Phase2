<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMLookupClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMLookupClass
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValidPatientName</Name>
				<Source><![CDATA[
    //todo: ax7 new patient uncoment follwoing code when objects move 
/*
   

    public RecId checkValidConsultingPhysicianName(Description255 _text,HMConsultationType _type)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HMReferringPhysician    HMReferringPhysicianLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        switch (_type)
        {
            case HMConsultationType::Internal:
                select * from hmClinicStafflocal
                            join * from hmClinicStaffRoleLocal
                            join * from hcmWorkerlocal
                            join * from dirPersonlocal
                                where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
                                && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
                                && hcmWorkerlocal.Person == dirPersonlocal.RecId
                                && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                                && dirPersonlocal.Name == _text;
    
                return hmClinicStafflocal.RecId;
    
            case HMConsultationType::External:
                select * from HMReferringPhysicianLocal
                    join * from dirPersonlocal
                            where HMReferringPhysicianLocal.DirPerson == dirPersonlocal.RecId
                            && dirPersonlocal.Name == _text;
    
                return HMReferringPhysicianLocal.RecId;
    
            default:
                return (0);
        }
    }

    public HMDiagnosisDictionary checkValidDiagnosisName(Description255 _text)
    {
        HMDiagnosisDictionary   hmDiagnosisDictionaryLocal;
    
        select * from hmDiagnosisDictionaryLocal
            where hmDiagnosisDictionaryLocal.Description ==  _text;
    
        return hmDiagnosisDictionaryLocal;
    }

    public HMClinicStaff checkValidEmployeeName(Description255 _text, RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMStaffNursingUnit      hmStaffNursingUnit;
        HcmWorker               hcmWorkerlocal;
        DirPerson               dirPersonlocal;
    
        select * from  hmClinicStaffLocal
            join * from hmStaffNursingUnit
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStaffLocal.RecId == hmStaffNursingUnit.HMClinicStaff
            && hmClinicStaffLocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && hmStaffNursingUnit.HMOrganizationalUnit == _unitRecId
            && dirPersonlocal.Name == _text;
    
        return hmClinicStaffLocal;
    }

   

    public InventTable checkValidInventItem(Description255 _text, HMInventType _inventType)
    {
        InventTable   inventTableLocal;
        HMInventTable   hmInventTableLocal;
    
        select * from inventTableLocal
            join * from hmInventTableLocal
            where inventTableLocal.ItemId == _text
            && inventTableLocal.HMProductType == _inventType
            && inventTableLocal.ItemId == hmInventTableLocal.InventTable
            && inventTableLocal.HMProductType == HMInventType::HCPCS
            && hmInventTableLocal.Status == NoYes::Yes
            && hmInventTableLocal.StandardClinicalProcedure == YesNo::Yes;
    
        return inventTableLocal;
    
    }

    public InventTable checkValidInventMedication(Description255 _text)
    {
        InventTable   inventTableLocal;
        HMInventTable   hmInventTableLocal;
    
        select * from inventTableLocal
            join * from hmInventTableLocal
            where inventTableLocal.ItemId == _text
            && inventTableLocal.ItemId == hmInventTableLocal.InventTable
            && inventTableLocal.HMProductType == HMInventType::Medication;
    
        return inventTableLocal;
    
    }



    public HMClinicStaff checkValidNurseName(Description255 _text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse
            && dirPersonlocal.Name == _text;
    
        return hmClinicStafflocal;
    
    }

    public HMClinicStaff checkValidNursePhysicianName(Description255 text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse)
            && dirPersonlocal.Name == text;
    
        return hmClinicStafflocal;
    }

    public HMClinicStaff checkValidNursePracNursePhysicianName(Description255 text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            || hmClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner
                || hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse)
            && dirPersonlocal.Name == text;
    
        return hmClinicStafflocal;
    }

   

    public HMClinicStaff checkValidOUNurseName(Description255 _text, RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnit;
        HcmWorker               hcmWorkerlocal;
        DirPerson               dirPersonlocal;
    
        select * from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnit
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnit.HMClinicStaff
            && hmClinicStaffLocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse
            && hmStaffNursingUnit.HMOrganizationalUnit == _unitRecId
            && dirPersonlocal.Name == _text;
    
        return hmClinicStaffLocal;
    }

    public HMClinicStaff checkValidOUNursePhysicianName(Description255 _text, RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnit;
        HcmWorker               hcmWorkerlocal;
        DirPerson               dirPersonlocal;
    
        select * from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnit
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnit.HMClinicStaff
            && hmClinicStaffLocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse)
            && hmStaffNursingUnit.HMOrganizationalUnit == _unitRecId
            && dirPersonlocal.Name == _text;
    
        return hmClinicStaffLocal;
    }

    public HMClinicStaff checkValidOUPhysicianName(Description255 _text, RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnit;
        HcmWorker               hcmWorkerlocal;
        DirPerson               dirPersonlocal;
    
        select * from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnit
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnit.HMClinicStaff
            && hmClinicStaffLocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            && hmStaffNursingUnit.HMOrganizationalUnit == _unitRecId
            && dirPersonlocal.Name == _text;
    
        return hmClinicStaffLocal;
    }

    public HMClinicStaff checkValidOUPracNursePhysicianName(Description255 _text, RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnit;
        HcmWorker               hcmWorkerlocal;
        DirPerson               dirPersonlocal;
    
        select * from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnit
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnit.HMClinicStaff
            && hmClinicStaffLocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner)
            && hmStaffNursingUnit.HMOrganizationalUnit == _unitRecId
            && dirPersonlocal.Name == _text;
    
        return hmClinicStaffLocal;
    }
    

    public HMClinicStaff checkValidPhysicianPracNurseName(Description255 text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || hmClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner)
            && dirPersonlocal.Name == text;
    
        return hmClinicStafflocal;
    }

    public HMResourceSchedulingPlanningObject checkValidPlanningObject(Description255 _text)
    {
        HMResourceSchedulingPlanningObject    hmResourceSchedulingPlanningObject;
    
        select * from hmResourceSchedulingPlanningObject
            where hmResourceSchedulingPlanningObject.PlanningObjectStatus == AllowanceStatus::Active
            && hmResourceSchedulingPlanningObject.StartDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            && hmResourceSchedulingPlanningObject.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            && (hmResourceSchedulingPlanningObject.CaseType ==HMCaseType::OutPatient  ||
             hmResourceSchedulingPlanningObject.CaseType ==HMCaseType::Surgery)
            && hmResourceSchedulingPlanningObject.Description == _text;
    
        return hmResourceSchedulingPlanningObject;
    
    }

    public HMProviderGroup checkValidProviderGroup(Description255 _text)
    {
        HMProviderGroup  HMProviderGroup;
    
        select RecId,Code from HMProviderGroup
            where HMProviderGroup.Code == _text;
    
        return HMProviderGroup;
    }



    public HMClinicStaff checkValidStaffName(Description255 text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && dirPersonlocal.Name == text;
    
        return hmClinicStafflocal;
    }

    public RecId getDefaultConsultingPhysician(HMConsultationType  _type)
    {
        HMReferringPhysician    HMReferringPhysicianLocal;
        HMReferringPhysician    HMReferringPhysicianSelected;
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaff           HMClinicStaffSelected;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
    
        switch (_type)
        {
            case HMConsultationType::Internal:    // get Physician
                select count (RecId) from  HMClinicStaffLocal
                    join * from HMClinicStaffRoleLocal
                    where HMClinicStaffLocal.HMClinicStaffRole == HMClinicStaffRoleLocal.RecId
                    && HMClinicStaffRoleLocal.Role == HMStaffMemberType::Physician;
    
                if (HMClinicStaffLocal.RecId == 1)
                {
                    select * from  HMClinicStaffSelected
                        join * from HMClinicStaffRoleLocal
                        where HMClinicStaffSelected.HMClinicStaffRole == HMClinicStaffRoleLocal.RecId
                        && HMClinicStaffRoleLocal.Role == HMStaffMemberType::Physician;
    
                    return HMClinicStaffSelected.RecId;
                }
                else
                {
                    return HMClinicStaffSelected.RecId;
                }
            break;
    
            case HMConsultationType::External:   // get Referring Physician
                select count (RecId) from HMReferringPhysicianLocal;
                if (HMReferringPhysicianLocal.RecId == 1)
                {
                    select * from HMReferringPhysicianSelected;
    
                    return HMReferringPhysicianSelected.RecId;
                }
                else
                {
                    return HMReferringPhysicianSelected.RecId;
                }
            break;
    
            default:
                return (0);
        }
    }

    public HMClinicStaff getDefaultEmployee(RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMStaffNursingUnit      hmStaffNursingUnitLocal;
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmStaffNursingUnitLocal
            where hmClinicStaffLocal.RecId == hmStaffNursingUnitLocal.HMClinicStaff
            && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmStaffNursingUnitLocal
                where hmClinicStaffSelected.RecId == hmStaffNursingUnitLocal.HMClinicStaff
                && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultNursePhysician()
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
    
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse);
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse);
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultNursePracNursePhysician()
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
    
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner
            || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse);
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse);
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultOUNurse(RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnitLocal;
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnitLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnitLocal.HMClinicStaff
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse
            && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                join * from hmStaffNursingUnitLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && hmClinicStaffSelected.RecId == hmStaffNursingUnitLocal.HMClinicStaff
                && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse
                && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultOUNursePhysician(RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnitLocal;
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnitLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnitLocal.HMClinicStaff
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse)
            && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                join * from hmStaffNursingUnitLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && hmClinicStaffSelected.RecId == hmStaffNursingUnitLocal.HMClinicStaff
                && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                    || HMClinicStaffRoleLocal.Role == HMStaffMemberType::Nurse)
                && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultOUPhysician(RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnitLocal;
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnitLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnitLocal.HMClinicStaff
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                join * from hmStaffNursingUnitLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && hmClinicStaffSelected.RecId == hmStaffNursingUnitLocal.HMClinicStaff
                && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public HMClinicStaff getDefaultOUPractNursePhysician(RecId   _unitRecId)
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMStaffNursingUnit      hmStaffNursingUnitLocal;
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            join * from hmStaffNursingUnitLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffLocal.RecId == hmStaffNursingUnitLocal.HMClinicStaff
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner)
            && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                join * from hmStaffNursingUnitLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && hmClinicStaffSelected.RecId == hmStaffNursingUnitLocal.HMClinicStaff
                && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                    || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner)
                && hmStaffNursingUnitLocal.HMOrganizationalUnit == _unitRecId;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    

    public HMClinicStaff getDefaultPracNursePhysician()
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
    
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner);
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && (hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
                || HMClinicStaffRoleLocal.Role == HMStaffMemberType::NursePractitioner);
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

    public RecId getDefaultRoom(RecId _departmentRecId)
    {
        HMOrganizationalBuildingUnit    hmOrganizationalBuildingUnitLocal;
        HMBuildingUnit                  hmBuildingUnitLocal, hmBuildingUnitSelected;
        HMBuildingUnitCategory          hmBuildingUnitCategoryLocal;
        HMBuildingUnitType              hmBuildingUnitTypeLocal;
    
    
        select count(RecId) from hmBuildingUnitLocal
            join HMBuildingUnit, HMOrganizationalUnit from hmOrganizationalBuildingUnitLocal
            join RecId, HMBuildingUnitType from hmBuildingUnitCategoryLocal
            join RecId, Indicators from hmBuildingUnitTypeLocal
            where hmBuildingUnitLocal.RecId == hmOrganizationalBuildingUnitLocal.HMBuildingUnit
            && hmBuildingUnitLocal.HMBuildingUnitCategory == hmBuildingUnitCategoryLocal.RecId
            && hmBuildingUnitCategoryLocal.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
            && hmOrganizationalBuildingUnitLocal.HMOrganizationalUnit == _departmentRecId
            && hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport;
    
        if (hmBuildingUnitLocal.RecId == 1)
        {
            select firstOnly RecId, HMBuildingUnitCategory from hmBuildingUnitSelected
                join HMBuildingUnit, HMOrganizationalUnit from hmOrganizationalBuildingUnitLocal
                join RecId, HMBuildingUnitType from hmBuildingUnitCategoryLocal
                join RecId, Indicators from hmBuildingUnitTypeLocal
                where hmBuildingUnitSelected.RecId == hmOrganizationalBuildingUnitLocal.HMBuildingUnit
                && hmBuildingUnitSelected.HMBuildingUnitCategory == hmBuildingUnitCategoryLocal.RecId
                && hmBuildingUnitCategoryLocal.HMBuildingUnitType == hmBuildingUnitTypeLocal.RecId
                && hmOrganizationalBuildingUnitLocal.HMOrganizationalUnit == _departmentRecId
                && hmBuildingUnitTypeLocal.Indicators == HMBuildingUnitTypeIndicator::RoomWithBedSupport;
    
            return hmBuildingUnitSelected.RecId;
        }
        else
        {
            return 0;
        }
    }

    public HMMedRouteSite getDefaultSite(RecId  _routetRecId)
    {
         HMMedRouteSite   HMMedRouteSiteLocal;
    
        select firstOnly * from HMMedRouteSiteLocal
            where  HMMedRouteSiteLocal.HMMedicationRoute == _routetRecId;
    
        return HMMedRouteSiteLocal;
    }

   

   

    public static CustTable checkValidClientName(Description255 _text)
    {
        DirPartyTable       dirPartyTableLocal;
        CustTable           custTableLocal;
    
        select * from custTableLocal
            join * from dirPartyTableLocal
            where custTableLocal.Party == dirPartyTableLocal.RecId
            && dirPartyTableLocal.Name == _text;
    
        return custTableLocal;
    
    }

    

   

   

   

   

    public static VendTable checkValidVendorName(Description255 _text, NoYes _interpretResult = NoYes::No)
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
    
        VendTable           vendTableLocal;
    
        qbds = qry.addDataSource(tableNum(VendTable));
    
    
        if(_interpretResult)
        {
            qbds.addRange(fieldNum(VendTable, HMInterpretResults)).value(SysQuery::value(_interpretResult));
        }
    
        qbds = qbds.addDataSource(tableNum(DirPartyTable));
        qbds.relations(true);
    
        qbds.addRange(fieldNum(DirPartyTable,Name)).value(_text);
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        vendTableLocal =  qryRun.get(tableNum(VendTable));
    
        return vendTableLocal;
    }
*/
    public HMPatient checkValidPatientName(Description255 _text)
    {
        HMPatient           hmPatientLocal;
        DirPartyTable       dirPartyTableLocal;
        CustTable           custTableLocal;
    
        select * from hmPatientLocal
            join * from custTableLocal
            join * from dirPartyTableLocal
            where hmPatientLocal.CustTable == custTableLocal.RecId
            && hmPatientLocal.Status == PatientStatus::Active
            && custTableLocal.Party == dirPartyTableLocal.RecId
            && dirPartyTableLocal.Name == _text;
    
        return hmPatientLocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidOrganizationalUnit</Name>
				<Source><![CDATA[
    public static HMOrganizationalUnit checkValidOrganizationalUnit(Description255 _text, HMFileLocationType _fileLocationType, RecId _parentRecId = 0, HMFileLocationType _fileLocationTypeOther = HMFileLocationType::None)
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
        HMOrganizationalUnit    hmOrganizationalUnit;
    
        qbds = qry.addDataSource(tableNum(HMOrganizationalUnit));
        qbds.addRange(fieldNum(HMOrganizationalUnit, Description)).value(_text);
    
        qbds.addRange(fieldNum(HMOrganizationalUnit,FileLocationType)).value(SysQuery::value(_fileLocationType));
    
        if(_fileLocationTypeOther)
        {
            qbds.addRange(fieldNum(HMOrganizationalUnit,FileLocationType)).value(SysQuery::value(_fileLocationTypeOther));
        }
    
        qbds.addRange(fieldNum(HMOrganizationalUnit,IsBlocked)).value(SysQuery::value(NoYes::No));
        qbds.addRange(fieldNum(HMOrganizationalUnit,RecId)).value(strFmt('((FromDate <= %1)  && (ToDate >= %1))',date2StrXpp(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))));
    
        if(_parentRecId)
        {
            qbds.addRange(fieldNum(HMOrganizationalUnit,HMOrganizationalUnit)).value(SysQuery::value(_parentRecId));
        }
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        hmOrganizationalUnit =  qryRun.get(tableNum(HMOrganizationalUnit));
    
        return hmOrganizationalUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidPatientInsurance</Name>
				<Source><![CDATA[
    public static HMPatientInsurance checkValidPatientInsurance(RecId _patientRecId, HMInsuranceMembershipId _text)
    {
        HMPatientInsurance      hmPatientInsurance;
    
        select * from hmPatientInsurance
            where hmPatientInsurance.HMPatientInsuranceMembershipId == _text
            && hmPatientInsurance.HMPatient == _patientRecId;
    
        return hmPatientInsurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidPhysicianName</Name>
				<Source><![CDATA[
    public HMClinicStaff checkValidPhysicianName(Description255 _text)
    {
        HMClinicStaff           HMClinicStaffLocal;
        HMClinicStaffRole       HMClinicStaffRoleLocal;
        HcmWorker               HcmWorkerLocal;
        DirPerson               dirPersonlocal;
    
        select * from hmClinicStafflocal
            join * from hmClinicStaffRoleLocal
            join * from hcmWorkerlocal
            join * from dirPersonlocal
            where hmClinicStafflocal.HMClinicStaffRole ==  hmClinicStaffRoleLocal.RecId
            && hmClinicStafflocal.HcmWorker == hcmWorkerlocal.RecId
            && hcmWorkerlocal.Person == dirPersonlocal.RecId
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician
            && dirPersonlocal.Name == _text;
    
        return hmClinicStafflocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPhysician</Name>
				<Source><![CDATA[
    public HMClinicStaff getDefaultPhysician()
    {
        HMClinicStaff           hmClinicStaffLocal;
        HMClinicStaff           hmClinicStaffSelected;
        HMClinicStaffRole       hmClinicStaffRoleLocal;
    
    
        select count (RecId) from  hmClinicStaffLocal
            join * from hmClinicStaffRoleLocal
            where hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
            && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician;
    
        if (hmClinicStaffLocal.RecId == 1)
        {
            select * from  hmClinicStaffSelected
                join * from hmClinicStaffRoleLocal
                where hmClinicStaffSelected.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId
                && hmClinicStaffRoleLocal.Role == HMStaffMemberType::Physician;
    
            return hmClinicStaffSelected;
        }
        else
        {
            return hmClinicStaffSelected;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidAptitude</Name>
				<Source><![CDATA[
    public static HMResourceAptitudeAttribute checkValidAptitude(Description255 _text, RecId _specialityRecId = 0, ItemId _protocol = '')
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
        HMResourceAptitudeAttribute    hmResourceAptitudeAttribute;
    
        qbds = qry.addDataSource(tableNum(HMResourceAptitudeAttribute));
        qbds.addRange(fieldNum(HMResourceAptitudeAttribute, Description)).value(_text);
    
        if(_protocol)
        {
            qbds = qbds.addDataSource(tableNum(HMProtocolAttributeAptitude));
            qbds.relations(true);
    
            qbds.addRange(fieldNum(HMProtocolAttributeAptitude,ItemId)).value(_protocol);
        }
        else if(_specialityRecId)
        {
            qbds = qbds.addDataSource(tableNum(HMSpecialityAptitudesAttributes));
            qbds.relations(true);
    
            qbds.addRange(fieldNum(HMSpecialityAptitudesAttributes,HMSpecialtyCode)).value(SysQuery::value(_specialityRecId));
        }
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        hmResourceAptitudeAttribute =  qryRun.get(tableNum(HMResourceAptitudeAttribute));
    
        return hmResourceAptitudeAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidReason</Name>
				<Source><![CDATA[
    public static ReasonTable checkValidReason(Description255 _text, ReasonCodeAccountTypeAll _reasonCode)
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
        ReasonTable  reasonTable;
    
        qbds = qry.addDataSource(tableNum(ReasonTable));
        qbds.addRange(fieldNum(ReasonTable, Description)).value(_text);
    
        switch(_reasonCode)
        {
            case ReasonCodeAccountTypeAll::AppointmentSlotBlocking:
                qbds.addRange(fieldNum(ReasonTable,AppointmentSlotBlocking)).value(SysQuery::value(NoYes::Yes));
                break;
            case ReasonCodeAccountTypeAll::AppointmentCloseSchedule:
                qbds.addRange(fieldNum(ReasonTable,AppointmentCloseSchedule)).value(SysQuery::value(NoYes::Yes));
                break;
        }
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        reasonTable =  qryRun.get(tableNum(ReasonTable));
    
        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidScheduleTypeSearchName</Name>
				<Source><![CDATA[
    public static HMResourceSchedulingTypeCode checkValidScheduleTypeSearchName(Description255 _text, HMCaseType _caseType, boolean _isPseudoSearchableSubType = true, RecId _resourceRecId = 0, HMMedisysServiceType _serviceType = HMMedisysServiceType::None)
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
        HMResourceSchedulingTypeCode    hmResourceSchedulingTypeCodeLocal;
    
        qbds = qry.addDataSource(tableNum(HMResourceSchedulingTypeCode));
        qbds.addRange(fieldNum(HMResourceSchedulingTypeCode, Description)).value(_text);
        qbds.addRange(fieldNum(HMResourceSchedulingTypeCode,IsBlocked)).value(SysQuery::value(0));
    
        if(_caseType != HMCaseType::None && _caseType != HMCaseType::All)
        {
            qbds.addRange(fieldNum(HMResourceSchedulingTypeCode, CaseType)).value(SysQuery::value(_caseType));
        }
    
        if(_isPseudoSearchableSubType)
        {
            qbds.addRange(fieldnum(HMResourceSchedulingTypeCode,AppointmentSubType)).value(SysQuery::value(HMAppointmentSubType::Pseudo));
            qbds.addRange(fieldnum(HMResourceSchedulingTypeCode,AppointmentSubType)).value(SysQuery::value(HMAppointmentSubType::Searchable));
        }
    
        if(_serviceType != HMMedisysServiceType::None)
        {
            qbds = qbds.addDataSource(tableNum(HMScheduleTypeServiceType));
            qbds.relations(true);
    
            qbds.addRange(fieldNum(HMScheduleTypeServiceType,ServiceType)).value(SysQuery::value(_serviceType));
        }
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        hmResourceSchedulingTypeCodeLocal =  qryRun.get(tableNum(HMResourceSchedulingTypeCode));
    
        return hmResourceSchedulingTypeCodeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidSpeciality</Name>
				<Source><![CDATA[
    public static HMSpecialtyCode checkValidSpeciality(Description255 _text, HMMedisysServiceType _serviceType = HMMedisysServiceType::None)
    {
        Query qry = new Query();
        QueryRun qryRun;
        QueryBuildDataSource qbds;
        HMSpecialtyCode hmSpecialtyCode;
    
        qbds = qry.addDataSource(tableNum(HMSpecialtyCode));
        qbds.addRange(fieldNum(HMSpecialtyCode, Description)).value(_text);
    
        if(_serviceType != HMMedisysServiceType::None)
        {
            qbds = qbds.addDataSource(tableNum(HMSpecialityCodeServiceType));
            qbds.relations(true);
    
            qbds.addRange(fieldNum(HMSpecialityCodeServiceType,ServiceType)).value(SysQuery::value(_serviceType));
        }
    
        qryRun = new QueryRun(qry);
        qryRun.next();
    
        hmSpecialtyCode =  qryRun.get(tableNum(HMSpecialtyCode));
    
        return hmSpecialtyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidAppointmentReason</Name>
				<Source><![CDATA[
    public ReasonTable checkValidAppointmentReason(Description255 _text)
    {
        ReasonTable  reasonTable;
    
        select RecId, Reason, Appointments from reasonTable
            where reasonTable.Reason == _text
            && reasonTable.Appointments == NoYes::Yes;
    
        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidForceBookingCanceReason</Name>
				<Source><![CDATA[
    public ReasonTable checkValidForceBookingCanceReason(Description255 _text)
    {
        ReasonTable  reasonTable;
    
        select RecId, Reason, Appointments from reasonTable
            where reasonTable.Reason == _text
            && reasonTable.ForceBookingCancel == NoYes::Yes;
    
        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidOrderingReason</Name>
				<Source><![CDATA[
    public ReasonTable checkValidOrderingReason(Description255 _text)
    {
        ReasonTable  reasonTable;
    
        select RecId, Reason, Appointments from reasonTable
            where reasonTable.Reason == _text
            && reasonTable.Ordering == NoYes::Yes;
    
        return reasonTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidBookingOrigin</Name>
				<Source><![CDATA[
    public static HMBookingOrigin checkValidBookingOrigin(Description255 _text)
    {
        HMBookingOrigin hmBookingOriginLocal;
    
        select * from hmBookingOriginLocal
            where hmBookingOriginLocal.Description == _text;
    
        return hmBookingOriginLocal;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidResourceName</Name>
				<Source><![CDATA[
    public hmResourceMaster checkValidResourceName(Description255 _text, HMResourceType _type)
    {
        HMResourceMaster    hmResourceMaster;
    
        select * from hmResourceMaster
            where hmResourceMaster.Type == _type
            && hmResourceMaster.Description == _text;
    
        return hmResourceMaster;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidInventService</Name>
				<Source><![CDATA[
    public InventTable checkValidInventService(Description255 _text)
    {
        InventTable   inventTableLocal;
        HMInventTable   hmInventTableLocal;
    
        select * from inventTableLocal
            join * from hmInventTableLocal
            where inventTableLocal.ItemId == _text
            && inventTableLocal.ItemId == hmInventTableLocal.InventTable
            && inventTableLocal.HMProductType == HMInventType::HCPCS
            && hmInventTableLocal.Status == NoYes::Yes
            && hmInventTableLocal.StandardClinicalProcedure == YesNo::Yes;
    
        return inventTableLocal;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>