<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMResourceSchedulingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMResourceSchedulingHelper
{


    #define.AppointmentFileName('appointment.ics')
  //  #define.AppointmentEmailAddress("HISADMIN@mazikglobal.com")
    HMAppointmentInventTmp protocolExamPrice;
    str orgUnit, buildUnitl;
 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DetailsContainer_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(HMResourceSchedulingTypeCode, DetailsContainer), FormControlEventType::Clicked)]
    public static void DetailsContainer_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        ColorPicker colorpicker = sender as ColorPicker;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailBookingDetails</Name>
				<Source><![CDATA[
    //todo: ax7 uncomment only required method as when needed 
    /*
    public void addLink()
    {
    }
    
    public HMAppointmentInventTmp getprotocolExamPriceTmp()
    {
        return protocolExamPrice;
    }

    public static boolean blockAppointmentSlot(TransDate _fromDate, TransDate _toDate, TimeOfDay _fromTime, TimeOfDay _toTime, RecId _planningObjectRecid, RecId _reasonRecId)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot, HMAppointmentReserveSLotValidate;
        boolean ret = true;
        HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
        HMResourceSchedulingOpenTimeSlotsSearch hmResourceSchedulingOpenTimeSlotsSearch=new HMResourceSchedulingOpenTimeSlotsSearch();
        //Transdate           currentDate;
        TransDateTime       newSlotStartDateTime, newSlotEndDateTime, slotStartDateTime, slotEndDateTime;
    
        //currentDate = _fromDate;
    
        try
        {
            ttsBegin;
    
            hmResourceSchedulingOpenTimeSlotsTmp = hmResourceSchedulingOpenTimeSlotsSearch.searchOpenTimeSlotMultiPO(_fromDate, _toDate,true,
                        0,false,[false,false,false,false,false,false,false], _planningObjectRecid, 0,
                        _fromTime, _toTime, 0, 0, 0, HMIncludeExclude::Exclude, true,'');
    
    
            while select * from hmResourceSchedulingOpenTimeSlotsTmp
            {
                slotStartDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time);
                slotEndDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60));
    
                while select * from HMAppointmentReserveSLotValidate
                where HMAppointmentReserveSLotValidate.Date == hmResourceSchedulingOpenTimeSlotsTmp.date
                && HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Block
                && HMAppointmentReserveSLotValidate.HMResourceMaster == hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster
                {
                    newSlotStartDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.StartTime);
                    newSlotEndDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.EndTime);
    
                    if(newSlotStartDateTime == slotStartDateTime)
                    {
                        ret = false;
                        error(strFmt("@MAZ12016"));
                        throw Exception::Error;
    
                    }
    
                    if((newSlotStartDateTime > slotStartDateTime && newSlotStartDateTime < slotEndDateTime)
                        ||(newSlotEndDateTime > slotStartDateTime && newSlotEndDateTime < slotEndDateTime)
                        || (slotStartDateTime > newSlotStartDateTime && slotStartDateTime < newSlotEndDateTime)
                        ||(slotEndDateTime > newSlotStartDateTime && slotEndDateTime < newSlotEndDateTime))
                    {
                        ret = false;
                        error(strFmt("@MAZ12016"));
                        throw Exception::Error;
                    }
                }
    
                if(ret)
                {
                    HMAppointmentReserveSLot.clear();
    
                    HMAppointmentReserveSLot.Date = hmResourceSchedulingOpenTimeSlotsTmp.Date;
                    HMAppointmentReserveSLot.StartTime = hmResourceSchedulingOpenTimeSlotsTmp.Time;
                    HMAppointmentReserveSLot.EndTime = hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60);
                    HMAppointmentReserveSLot.HMResourceMaster = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster;
                    HMAppointmentReserveSLot.SlotReserveBlock = HMAppointmentSlotReserveBlock::Block;
                    HMAppointmentReserveSLot.ReasonTable = _reasonRecId;
    
                    HMAppointmentReserveSLot.insert();
                }
            }
    
            /* while(currentDate <= _toDate)
            {
                /*select RecId from HMAppointmentReserveSLotValidate
                where HMAppointmentReserveSLotValidate.Date == currentDate
                && HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Block
                && ((HMAppointmentReserveSLotValidate.StartTime >= _fromTime && HMAppointmentReserveSLotValidate.StartTime <= _toTime)
                    ||(HMAppointmentReserveSLotValidate.EndTime >= _fromTime && HMAppointmentReserveSLotValidate.EndTime <= _toTime)
                    || (_fromTime >= HMAppointmentReserveSLotValidate.StartTime && _fromTime <= HMAppointmentReserveSLotValidate.EndTime)
                    ||(_toTime >= HMAppointmentReserveSLotValidate.StartTime && _toTime <= HMAppointmentReserveSLotValidate.EndTime))
                    && HMAppointmentReserveSLotValidate.HMResourceMaster == _resourceRecId;*/ // line added for resolving issue arises of not blocing the slots
    
                currentDate = currentDate + 1;
            }*/
    
            info("@MAZ11564");
    
            ttsCommit;
        }
        catch
        {
            error("@MAZ11565");
            ret = false;
        }
    
        return ret;
    }

  

   

  

    

   

    

    

   
   

    public static boolean closeAppointmentSlot(TransDate _fromDate, TransDate _toDate, TimeOfDay _fromTime, TimeOfDay _toTime, RecId _planningObjectRecid, RecId _reasonRecId)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot, HMAppointmentReserveSLotValidate;
        boolean ret = true;
        HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
        HMResourceSchedulingOpenTimeSlotsSearch hmResourceSchedulingOpenTimeSlotsSearch=new HMResourceSchedulingOpenTimeSlotsSearch();
        //Transdate           currentDate;
        TransDateTime       newSlotStartDateTime, newSlotEndDateTime, slotStartDateTime, slotEndDateTime;
    
        //currentDate = _fromDate;
    
        try
        {
            ttsBegin;
    
            hmResourceSchedulingOpenTimeSlotsTmp = hmResourceSchedulingOpenTimeSlotsSearch.searchOpenTimeSlotMultiPO(_fromDate, _toDate,true,
                        0,false,[false,false,false,false,false,false,false], _planningObjectRecid, 0,
                        _fromTime, _toTime, 0, 0, 0, HMIncludeExclude::Exclude, true,'');
    
    
            while select * from hmResourceSchedulingOpenTimeSlotsTmp
            {
                slotStartDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time);
                slotEndDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60));
    
                while select * from HMAppointmentReserveSLotValidate
                where HMAppointmentReserveSLotValidate.Date == hmResourceSchedulingOpenTimeSlotsTmp.date
                && HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Close
                && HMAppointmentReserveSLotValidate.HMResourceMaster == hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster
                {
                    newSlotStartDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.StartTime);
                    newSlotEndDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.EndTime);
    
                    if(newSlotStartDateTime == slotStartDateTime)
                    {
                        ret = false;
                        error(strFmt("@MAZ12015"));
                        throw Exception::Error;
    
                    }
    
                    if((newSlotStartDateTime > slotStartDateTime && newSlotStartDateTime < slotEndDateTime)
                        ||(newSlotEndDateTime > slotStartDateTime && newSlotEndDateTime < slotEndDateTime)
                        || (slotStartDateTime > newSlotStartDateTime && slotStartDateTime < newSlotEndDateTime)
                        ||(slotEndDateTime > newSlotStartDateTime && slotEndDateTime < newSlotEndDateTime))
                    {
                        ret = false;
                        error(strFmt("@MAZ12015"));
                        throw Exception::Error;
                    }
                }
    
                if(ret)
                {
                    HMAppointmentReserveSLot.clear();
    
                    HMAppointmentReserveSLot.Date = hmResourceSchedulingOpenTimeSlotsTmp.Date;
                    HMAppointmentReserveSLot.StartTime = hmResourceSchedulingOpenTimeSlotsTmp.Time;
                    HMAppointmentReserveSLot.EndTime = hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60);
                    HMAppointmentReserveSLot.HMResourceMaster = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster;
                    HMAppointmentReserveSLot.SlotReserveBlock = HMAppointmentSlotReserveBlock::Close;
                    HMAppointmentReserveSLot.ReasonTable = _reasonRecId;
    
                    HMAppointmentReserveSLot.insert();
    
                    //HMEmailGeneration::emailCloseScheduleDetails(HMResourceMaster::find(HMAppointmentReserveSLot.HMResourceMaster).refRecIdHumanResouce(false, ''));
                }
            }
    
            info("@MAZ12017");
    
            ttsCommit;
        }
        catch
        {
            error("@MAZ12018");
            ret = false;
        }
    
        return ret;
    }

   
    

   

    public static str createProcedureHTML(RecId  _appointmentId)
    {
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
        InventTable                         InventTable;
        HMInventTable                       HMInventTable;
        boolean isFirst = true;
        boolean isRecord = false;
        HMResourceSchedulingAppointmentInvent HMResourceSchedulingAppointmentInvent;
    
        str  html;
    
            while select * from HMResourceSchedulingAppointmentInvent
                join * from InventTable
                join * from  HMInventTable
                where HMResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appointmentId
                && HMResourceSchedulingAppointmentInvent.InventTable == InventTable.ItemId
                && HMInventTable.InventTable == InventTable.ItemId
                && HMInventTable.Instruction != ""
        {
            if (HMInventTable.RecId)
            {
                if (isFirst)
                {
                    html += SysLabel::labelId2String2('@MAZ11109');//'<table border = \'1\'> <tr> <th>Exam code</th> <th>Description</th> <th>Instruction</th> </tr>';
                    isFirst = false;
                    isRecord = true;
                }
            }
            html += '<tr> <td>' + HMInventTable.InventTable + '</td> <td> ' + InventTable::find(HMInventTable.InventTable).itemDescriptionOrName() + '</td> <td> ' + HMInventTable.Instruction+ '</td> </tr>';
        }
    
        if (isRecord)
        {
            html += '</table>';
        }
    
        return html;
    }

    public static str createProtocolANDExamCodeNotesHTML(RecId  _appointmentId)
    {
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
        InventTable                         InventTable;
        HMInventTable                       HMInventTable;
        HMProtocolNotes                     HMProtocolNotes;
        HMExamCodeNotes                     HMExamCodeNotes;
        BOMVersion                          BOMVersion;
        BOMTable                            BOMTable;
        Str1260                              newItemId;
    
        boolean isFirst = true;
        boolean isRecord = false;
        HMResourceSchedulingAppointmentInvent HMResourceSchedulingAppointmentInvent;
    
        str  html;
    
        while select RecId,Notes from HMProtocolNotes order by HMProtocolNotes.Sequence asc
            join RecId from BOMVersion
        where  BOMVersion.RecId == HMProtocolNotes.BOMVersion
            join RecId from HMResourceSchedulingAppointment
        where  HMResourceSchedulingAppointment.BOMVersion == BOMVersion.RecId
            && HMResourceSchedulingAppointment.RecId == _appointmentId
        {
            html += HMProtocolNotes.Notes + '<br>';
        }
    
        while select RecId, InventTable from HMResourceSchedulingAppointmentInvent
            where HMResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appointmentId
        {
            newItemId = '';
            while select RecId,Notes from HMExamCodeNotes order by HMExamCodeNotes.Sequence asc
                  where HMExamCodeNotes.ItemId ==   HMResourceSchedulingAppointmentInvent.InventTable
            {
                if (isFirst)
                {
                    html += SysLabel::labelId2String2('@MAZ11115');//"<br><table border = \'1\'> <tr> <th>Exam code</th> <th>Description</th> <th>Instruction</th> </tr>";
                    isFirst = false;
                    isRecord = true;
                }
                newItemId += HMExamCodeNotes.Notes +";";
            }
    
            if (newItemId != '')
            html += '<tr> <td>' + HMResourceSchedulingAppointmentInvent.InventTable + '</td> <td> ' + InventTable::find(HMResourceSchedulingAppointmentInvent.InventTable).itemDescriptionOrName() + '</td> <td> ' + newItemId + '</td> </tr>';
        }
    
        if (isRecord)
        {
            html += '</table>';
        }
    
    
    
       /* while select RecId,Notes from HMExamCodeNotes order by HMExamCodeNotes.ItemId asc ,HMExamCodeNotes.Sequence asc
            join RecId, InventTable from  HMInventTable
        where HMInventTable.InventTable == HMExamCodeNotes.ItemId
            join  RecId from HMResourceSchedulingAppointmentInvent
            where HMResourceSchedulingAppointmentInvent.InventTable == HMInventTable.InventTable
            && HMResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appointmentId
    
        {
            //info (HMExamCodeNotes.Notes);
            // html += HMExamCodeNotes.Notes + "<br>";
            if (HMExamCodeNotes.RecId)
            {
                if (isFirst)
                {
                    html += "<table border = \'1\'> <tr> <th>Exam code</th> <th>Description</th> <th>Instruction</th> </tr>";
                    isFirst = false;
                    isRecord = true;
                }
            }
            html += "<tr> <td>" + HMInventTable.InventTable + "</td> <td> " + InventTable::find(HMInventTable.InventTable).itemDescriptionOrName() + "</td> <td> " + HMExamCodeNotes.Notes+ "</td> </tr>";
    
        }
    
        if (isRecord)
        {
            html += "</table>";
        }
       */
        return html;
    }

   
   */

 

    
    public static void emailBookingDetails(RecId _primaryApptRecId)
    {
        HMResourceSchedulingAppointment primaryAppt = HMResourceSchedulingAppointment::find(_primaryApptRecId);
        HMResourceSchedulingAppointment HMResourceSchedulingAppointment;
        HMResourceSchedulingPlanningObject      hmResourceSchedulingPlanningObject;
        HMResourceMaster                        hmResourceMaster;
        List                            relatedApptRecIdList;
        HMPatientVisit                  hmPatientVisit;
        date                            apptDate;
        boolean                         isFirst = true;
        ListEnumerator                  listEnmr;
        boolean isExternalPrimary = HMResourceSchedulingHelper::getAppointmentResourceVendorType(primaryAppt.HMResourceSchedulingPlanningObject);
    
        HMEmailGeneration::emailBookingDetails(_primaryApptRecId);
    
        relatedApptRecIdList = new List(Types::Int64);
    
        while select AppointmentDate from HMResourceSchedulingAppointment
            order by appointmentDate asc
            join RecId from hmPatientVisit
            join RecId from hmResourceSchedulingPlanningObject
            join RecId from hmResourceMaster
            where HMResourceSchedulingAppointment.HMPatientVisit == hmPatientVisit.RecId
            && HMResourceSchedulingAppointment.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObject.RecId
            && hmResourceSchedulingPlanningObject.HMResourceMaster == hmResourceMaster.RecId
            && HMResourceSchedulingAppointment.HMPatientVisit == primaryAppt.HMPatientVisit
            && hmResourceMaster.VendorType != HMVendorType::External
            && (isExternalPrimary || HMResourceSchedulingAppointment.appointmentdate != hmPatientVisit.EncounterDate)
        {
            if(isFirst)
            {
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                isFirst = false;
            }
    
            if(apptDate == HMResourceSchedulingAppointment.AppointmentDate)
            {
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
            else
            {
                HMEmailGeneration::emailBookingDetailsMulitpleAppointment(relatedApptRecIdList);
                relatedApptRecIdList = new List(Types::Int64);
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
        }
    
        if(!relatedApptRecIdList.empty())
        {
            HMEmailGeneration::emailBookingDetailsMulitpleAppointment(relatedApptRecIdList);
        }
    
        relatedApptRecIdList = new List(Types::Int64);
    
        while select AppointmentDate from HMResourceSchedulingAppointment
            join RecId from hmResourceSchedulingPlanningObject
            join RecId from hmResourceMaster
            join RecId from hmPatientVisit
            where HMResourceSchedulingAppointment.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObject.RecId
            && hmResourceSchedulingPlanningObject.HMResourceMaster == hmResourceMaster.RecId
            && HMResourceSchedulingAppointment.HMPatientVisit == hmPatientVisit.RecId
            && HMResourceSchedulingAppointment.HMPatientVisit == primaryAppt.HMPatientVisit
            && HMResourceSchedulingAppointment.RecId != _primaryApptRecId
            && hmResourceMaster.VendorType == HMVendorType::External
        {
            relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
        }
    
        listEnmr = relatedApptRecIdList.getEnumerator();
    
        while(listEnmr.moveNext())
        {
            HMEmailGeneration::emailBookingDetails(listEnmr.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailCancelDetails</Name>
				<Source><![CDATA[
    public static void emailCancelDetails(List _apptRecId)
    {
        HMResourceSchedulingAppointment         HMResourceSchedulingAppointment;
        List                                    relatedApptRecIdList;
        date                                    apptDate;
        boolean                                 isFirst = true;
        ListEnumerator                          listEnumerator;
        Query                                   qry;
        Queryrun                                queryRun;
    
        qry = new Query();
    
        listEnumerator = _apptRecId.getEnumerator();
    
        qry.addDataSource(tableNum(HMResourceSchedulingAppointment));
        qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addSortField(fieldNum(HMResourceSchedulingAppointment, AppointmentDate));
        qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addSortField(fieldNum(HMResourceSchedulingAppointment, PrimaryAppointment));
    
        while(listEnumerator.moveNext())
        {
            qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addRange(fieldNum(HMResourceSchedulingAppointment,RecId)).value(SysQuery::value(listEnumerator.current()));
        }
    
        queryRun = new queryRun(qry);
    
        relatedApptRecIdList = new List(Types::Int64);
    
        while(queryRun.next())
        {
            HMResourceSchedulingAppointment = queryRun.get(tableNum(HMResourceSchedulingAppointment));
    
            if(HMResourceSchedulingHelper::getAppointmentResourceVendorType(HMResourceSchedulingAppointment.HMResourceSchedulingPlanningObject))
            {
                HMEmailGeneration::emailCancelDetails(HMResourceSchedulingAppointment.RecId);
                continue;
            }
    
            if(isFirst)
            {
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                isFirst = false;
            }
    
            if(apptDate == HMResourceSchedulingAppointment.AppointmentDate)
            {
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
            else
            {
                HMEmailGeneration::emailCancelDetailsMulitpleAppointment(relatedApptRecIdList);
                relatedApptRecIdList = new List(Types::Int64);
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
        }
    
        if(!relatedApptRecIdList.empty())
        {
            HMEmailGeneration::emailCancelDetailsMulitpleAppointment(relatedApptRecIdList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailRescheduleDetails</Name>
				<Source><![CDATA[
    public static void emailRescheduleDetails(List _apptRecId)
    {
        HMResourceSchedulingAppointment         HMResourceSchedulingAppointment;
        List                                    relatedApptRecIdList;
        date                                    apptDate;
        boolean                                 isFirst = true;
        ListEnumerator                          listEnumerator;
        Query                                   qry;
        Queryrun                                queryRun;
    
        qry = new Query();
    
        listEnumerator = _apptRecId.getEnumerator();
    
        qry.addDataSource(tableNum(HMResourceSchedulingAppointment));
        qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addSortField(fieldNum(HMResourceSchedulingAppointment, AppointmentDate));
        qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addSortField(fieldNum(HMResourceSchedulingAppointment, PrimaryAppointment));
    
        while(listEnumerator.moveNext())
        {
            qry.dataSourceTable(tableNum(HMResourceSchedulingAppointment)).addRange(fieldNum(HMResourceSchedulingAppointment,RecId)).value(SysQuery::value(listEnumerator.current()));
        }
    
        queryRun = new queryRun(qry);
    
        relatedApptRecIdList = new List(Types::Int64);
    
        while(queryRun.next())
        {
            HMResourceSchedulingAppointment = queryRun.get(tableNum(HMResourceSchedulingAppointment));
    
            if(HMResourceSchedulingHelper::getAppointmentResourceVendorType(HMResourceSchedulingAppointment.HMResourceSchedulingPlanningObject))
            {
                HMEmailGeneration::emailRescheduleDetails(HMResourceSchedulingAppointment.RecId);
                continue;
            }
    
            if(isFirst)
            {
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                isFirst = false;
            }
    
            if(apptDate == HMResourceSchedulingAppointment.AppointmentDate)
            {
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
            else
            {
                HMEmailGeneration::emailRescheduleDetailsMulitpleAppoint(relatedApptRecIdList);
                relatedApptRecIdList = new List(Types::Int64);
                apptDate = HMResourceSchedulingAppointment.AppointmentDate;
                relatedApptRecIdList.addEnd(HMResourceSchedulingAppointment.RecId);
            }
        }
    
        if(!relatedApptRecIdList.empty())
        {
            HMEmailGeneration::emailRescheduleDetailsMulitpleAppoint(relatedApptRecIdList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAppointmentsTmpByProtocol</Name>
				<Source><![CDATA[
    public static HMAppointmentsTmp fillAppointmentsTmpByProtocol(ItemId _protocolId)
    {
        HMResourceSchedulingAppointment         appt;
        HMResourceSchedulingAppointmentInvent   apptInvent;
        HMResourceSchedulingPlanningObject      planningObject;
        HMOrganizationalUnit                    hmorgUnit;
        HMAppointmentsTmp                       HMAppointmentsTmp;
    
        while select AppointmentDate,AppointmentTime, HMPatient, HMResourceSchedulingPlanningObject, AppointmentNumber from appt
            group by AppointmentDate,AppointmentTime, HMPatient, HMResourceSchedulingPlanningObject, AppointmentNumber, RecId
            where appt.appointmentdate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            && appt.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
            join apptInvent where apptInvent.HMResourceSchedulingAppointment == appt.RecId
            && (apptInvent.InventTable == _protocolId
            || apptInvent.Protocol == _protocolId)
        {
            HMAppointmentsTmp.clear();
            HMAppointmentsTmp.AppointmentDate = appt.AppointmentDate;
            HMAppointmentsTmp.AppointmentNumber = appt.AppointmentNumber;
            HMAppointmentsTmp.AppointmentTime = time2str(appt.AppointmentTime, TimeSeparator::Colon, TimeFormat::AMPM);
            HMAppointmentsTmp.AppointmentNumber = appt.AppointmentNumber;
            HMAppointmentsTmp.PatientName = appt.getPatientName();
    
            select RecId from planningObject
            join Description from hmorgUnit
            where planningObject.HMOrganizationalUnit == hmorgunit.RecId
            && planningObject.RecId == appt.HMResourceSchedulingPlanningObject;
    
            HMAppointmentsTmp.OrganizationUnit = hmorgUnit.Description;
            HMAppointmentsTmp.Resource = appt.getAppointmentResource();
            HMAppointmentsTmp.insert();
        }
        return HMAppointmentsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCorrectHTML</Name>
				<Source><![CDATA[
    public static HMmemo generateCorrectHTML(HMmemo _emailBody)
    {
        #define.BODYSTART('<Body>')
        #define.BODYEND('</Body>')
        #define.NEWLINE('&nbsp;')
        #define.NEWLINESTART('<BR>')
        #define.NEWLINEEND('</BR>')
    
        if (!strContains(_emailBody,#BODYSTART))
        {
            _emailBody = strIns(_emailBody,#BODYSTART,0);
            _emailBody = strIns(_emailBody,#BODYEND,strLen(_emailBody)+1);
        }
        if (strContains(_emailBody,#NEWLINE))
        {
            _emailBody = strReplace(_emailBody,#NEWLINE,#NEWLINESTART + #NEWLINEEND);
        }
        return _emailBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppointmentResourceVendorType</Name>
				<Source><![CDATA[
    public static boolean getAppointmentResourceVendorType(RecId _planningObjectRecId)
    {
        return HMResourceMasterHelper::isResourceExternal(HMResourceSchedulingPlanningObject::find(_planningObjectRecId).HMResourceMaster);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmailStatus</Name>
				<Source><![CDATA[
    /*
    public static boolean getApptCheckOutServiceStatus(RecId _apptRecId)
    {
        HMResourceSchedulingAppointmentInvent   apptInvent;
        HMResourceSchedulingAppointment         hmResourceSchedulingAppointment;
    
        select PrimaryAppointment from hmResourceSchedulingAppointment
            where hmResourceSchedulingAppointment.RecId == _apptRecId;
    
        if(hmResourceSchedulingAppointment.PrimaryAppointment == YesNo::Yes)
        {
            select count(RecId) from apptInvent
                where apptInvent.HMResourceSchedulingAppointment == _apptRecId
                && apptInvent.HMServiceStatus != HMServiceStatus::Complete
                && apptInvent.HMServiceStatus != HMServiceStatus::Decline
                && apptInvent.HMServiceStatus != HMServiceStatus::Postponed
                && apptInvent.NotRequired == NoYes::No;
        }
        else
        {
            select count(RecId) from apptInvent
                where apptInvent.RelatedAppointmentRecId == _apptRecId
                && apptInvent.HMServiceStatus != HMServiceStatus::Complete
                && apptInvent.HMServiceStatus != HMServiceStatus::Decline
                && apptInvent.HMServiceStatus != HMServiceStatus::Postponed
                && apptInvent.NotRequired == NoYes::No;
        }
    
        return apptInvent.RecId == 0;
    }

   
   
   

    public static Recid getLocationByAppointment(RecId _apptRecId)
    {
        HMResourceSchedulingPlanningObject      hmResourceSchedulingPlanningObject;
        HMResourceSchedulingAppointment         hmResourceSchedulingAppointment;
    
        select hmOrganizationalUnit from hmResourceSchedulingPlanningObject
            join RecId from hmResourceSchedulingAppointment
            where hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject
            && hmResourceSchedulingAppointment.RecId == _apptRecId;
    
        return hmResourceSchedulingPlanningObject.hmOrganizationalUnit;
    }

 

   
   

   

   
   

    public static SysEmailId getProtocolTemplate(RecId  _bOMVersionRecId)
    {
        BOMVersion      BOMVersion;
        SysEmailTable   SysEmailTable; //     = SysEmailTable::find(sysEmailId);
    
        select RecId, SysEmailTable from BOMVersion
            where BOMVersion.RecId == _bOMVersionRecId
            join RecId from SysEmailTable
                where SysEmailTable.EmailId == BOMVersion.SysEmailTable;
    
        return BOMVersion.SysEmailTable;
    }

   
    

    public static RecId getSlotReserveClient(date _date, Timeofday _formTime, Timeofday _endTime,RecId _resourceRecId)
    {
        HMAppointmentReserveSLot                    hmAppointmentReserveSlot;
    
        select * from hmAppointmentReserveSlot
            where hmAppointmentReserveSlot.HMResourceMaster == _resourceRecId
            && hmAppointmentReserveSlot.Date == _date
            && hmAppointmentReserveSlot.SlotReserveBlock == HMAppointmentSlotReserveBlock::Reserve
            && (hmAppointmentReserveSlot.StartTime <= _formTime
            && hmAppointmentReserveSlot.EndTime >= _formTime
            && hmAppointmentReserveSlot.StartTime <= _endTime
            && hmAppointmentReserveSlot.EndTime >= _endTime);
    
        return hmAppointmentReserveSlot.Client;
    }

    public static RecId getSlotReserveREcId(date _date, Timeofday _formTime, Timeofday _endTime,RecId _resourceRecId)
    {
        HMAppointmentReserveSLot                    hmAppointmentReserveSlot;
    
        select * from hmAppointmentReserveSlot
            where hmAppointmentReserveSlot.HMResourceMaster == _resourceRecId
            && hmAppointmentReserveSlot.Date == _date
            && hmAppointmentReserveSlot.SlotReserveBlock == HMAppointmentSlotReserveBlock::Reserve
            && (hmAppointmentReserveSlot.StartTime <= _formTime
            && hmAppointmentReserveSlot.EndTime >= _formTime
            && hmAppointmentReserveSlot.StartTime <= _endTime
            && hmAppointmentReserveSlot.EndTime >= _endTime);
    
        return hmAppointmentReserveSlot.RecId;
    }

  

    public static boolean isAdmissionOrderExist(recid _patientRecId)
    {
        HMResourceSchedulingAppointment     hmResourceSchedulingAppointment;
    
        select RecId,AppointmentStatus from hmResourceSchedulingAppointment
            where (hmResourceSchedulingAppointment.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            || hmResourceSchedulingAppointment.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Waiting)
            && hmResourceSchedulingAppointment.HMPatient == _patientRecId
            && hmResourceSchedulingAppointment.HMAppointmentType == HMAppointmentType::Admission;
    
        if(hmResourceSchedulingAppointment.RecId)
        {
            warning(strFmt("@MAZ9119",hmResourceSchedulingAppointment.AppointmentStatus));
            return true;
        }
        else
        {
            return false;
        }
    
    }


  
   

    static public boolean sendAppointmentEmailNew(Thread _thread)
    {
        //todo :: uncomment //
        /*
        #define.TIME('Time')
        #define.DATE('Date')
        #define.PATIENT('Patient')
        #define.PHYSICIAN('Physician')
        #define.UNIT('Unit')
        //#define.STATUS('Status')
        #define.PROCEDURE('%Procedure%')
        //#define.STATUS('%Status%')
        #define.CONFIRMLINK('%ConfirmLink%')
        #define.RESCHEDULELINK('%ReScheduleLink%')
    
    
        str procedureHTML;
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointmentUpdate;
        SysOutgoingEmailTable   outgoingEmailTable;
        SysEmailItemId          nextEmailItemId;
        boolean ret = true;
        HMmemo              emailBody;
        SysEmailSubject     subjectText;
        String30            emailId, time, newTime, newDate;
        DirPartyName        physicianName;
        Map                 templateTokens      = new Map(Types::String, Types::String);
        date                appointmentDate     = conPeek(_thread.getInputParm(),1);
        timeOfDay           appointmentTime     = conPeek(_thread.getInputParm(),2);
        recid               patient             = conPeek(_thread.getInputParm(),3);
        recid               appointmentId       = conPeek(_thread.getInputParm(),4);
        FormOpenMode        openmode            = conPeek(_thread.getInputParm(),6);
        SysEmailId          sysEmailId          = conPeek(_thread.getInputParm(),7);
        SysEmailTable           emailTable      = SysEmailTable::find(sysEmailId);
        SysEmailMessageTable    messageTable    = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);
        str link = '\'http://www.google.com\'';
        str linkTag;
        HMPatient               hmPatient           = HMPatient::find(patient);
    
        try
        {
            emailId         = CustTable::findRecId(HMPatient::find(patient).CustTable).email();
            if (emailId != "")
            {
                messageTable = SysEmailMessageTable::find(emailTable.EmailId,HcmLanguageCode::find(hmPatient.HcmLanguageCode).LanguageCodeId);
    
                if (!messageTable)
                {
                    messageTable = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);
                }
    
                subjectText     = messageTable.Subject;
                emailBody       = messageTable.Mail;
                emailBody       = HMResourceSchedulingHelper::generateCorrectHTML(emailBody);
                physicianName   = HMResourceSchedulingAppointment::find(appointmentId).getAppointmentPhysician();
                time            = time2Str(appointmentTime,TimeSeparator::Colon,TimeFormat::AMPM);
                newTime         = subStr(time,1,5);
                newTime         += subStr(time,strLen(time)-2,strLen(time));
                //newDate         = date2StrXpp(appointmentDate);
                newDate         = date2StrUSR(appointmentDate,DateFlags::None);
    
                templateTokens.insert(#PATIENT,HMPatient::find(patient).patientFirstName());
                templateTokens.insert(#PHYSICIAN, physicianName);
                templateTokens.insert(#DATE, newDate);
                templateTokens.insert(#TIME, newTime);
                templateTokens.insert(#UNIT,HMOrganizationalUnit::find(HMResourceSchedulingPlanningObject::find(HMResourceSchedulingAppointment::find(appointmentId).HMResourceSchedulingPlanningObject).HMOrganizationalUnit).Description);
    
                link ="\"http://159.100.223.143:8000/Confirmation.aspx?Req=Confirmed&Id="+ int642str(appointmentId)+"\"";
                linkTag = "<A style=\"CURSOR: pointer; FONT-SIZE: 14px; TEXT-DECORATION: none; HEIGHT: 26px; WIDTH: 220px; BACKGROUND: #5a5858; COLOR: #fff; DISPLAY: block; LINE-HEIGHT: 26px; PADDING-RIGHT: 5px\" href="+link+"><IMG style=\"FLOAT: left; PADDING-RIGHT: 5px\" src=\"http://159.100.223.143:8000/email-notification.jpg\"></IMG> Confirm appointment</A>";
                emailBody = strReplace(emailBody,#CONFIRMLINK, linkTag);
    
                link ="\"http://159.100.223.143:8000/ReSchedule.aspx?ReSchedule="+ int642str(appointmentId)+"\"";
                linkTag = "<A style=\"CURSOR: pointer; FONT-SIZE: 14px; TEXT-DECORATION: none; HEIGHT: 26px; WIDTH: 220px; BACKGROUND: #5a5858; COLOR: #fff; DISPLAY: block; LINE-HEIGHT: 26px; PADDING-RIGHT: 5px\" href="+link+"><IMG style=\"FLOAT: left; PADDING-RIGHT: 5px\" src=\"http://159.100.223.143:8000/email-notification.jpg\"></IMG> Re-schedule appointment</A>";
                emailBody = strReplace(emailBody,#RESCHEDULELINK, linkTag);
    
                /*if (openmode == FormOpenMode::ForNew)
                {
                    link ="\"http://159.100.223.132:8000/Confirmation.aspx?Req=Confirmed&Id="+ int642str(appointmentId)+"\"";
                    linkTag = "<a href="+link+">confirmed</a>";
                     emailBody = strReplace(emailBody,#STATUS, linkTag);
                   // templateTokens.insert(#STATUS, "confirmed");
    
                }
                else
                {
                    link ="\"http://159.100.223.132:8000/Confirmation.aspx?Req=Reconfirmed&Id="+ int642str(appointmentId)+"\"";
                    linkTag = "<a href="+link+">re-confirmed</a>";
                    emailBody = strReplace(emailBody,#STATUS, linkTag);
                    //templateTokens.insert(#STATUS, "re-confirmed");
                }
                */
    
               /* procedureHTML = HMResourceSchedulingHelper::createProcedureHTML(appointmentId);
                if (procedureHTML == "")
                {
                     emailBody = strReplace(emailBody,#PROCEDURE, "");
                }
                else
                {
                    emailBody = strReplace(emailBody,#PROCEDURE, procedureHTML);
                }
               */
                nextEmailItemId = EventInbox::nextEventId();
                outgoingEmailTable.EmailItemId = nextEmailItemId;
                outgoingEmailTable.TemplateId = sysEmailId;
                outgoingEmailTable.IsSystemEmail = NoYes::No;
                outgoingEmailTable.Sender = emailTable.SenderAddr;
                outgoingEmailTable.SenderName = emailTable.SenderName;
                outgoingEmailTable.Recipient = emailId;
                outgoingEmailTable.Subject = subjectText;
                outgoingEmailTable.Priority = eMailPriority::Normal;
                outgoingEmailTable.WithRetries = false;
                outgoingEmailTable.RetryNum = 0;
                outgoingEmailTable.UserId = curUserId();
                outgoingEmailTable.Status = SysEmailStatus::Unsent;
                outgoingEmailTable.Message = SysEmailMessage::stringExpand(emailBody, SysEmailTable::htmlEncodeParameters(templateTokens));
                outgoingEmailTable.LatestStatusChangeDateTime = DateTimeUtil::getSystemDateTime();
                outgoingEmailTable.insert();
    
                if (HMResourceSchedulingAppointment::find(appointmentId).SysOutgoingEmailTable == 0)
                {
                    ttsBegin;
                    select forUpdate HMResourceSchedulingAppointmentUpdate
                        where HMResourceSchedulingAppointmentUpdate.RecId == appointmentId;
    
                    HMResourceSchedulingAppointmentUpdate.SysOutgoingEmailTable = outgoingEmailTable.EmailItemId;
                    HMResourceSchedulingAppointmentUpdate.update();
                    ttsCommit;
                }
            }
            else
            {
                ret = false;
    
                warning(SysLabel::labelId2String2('@MAZ11098'));
                //HMResourceSchedulingHelper::setEmailStatus(appointmentId ,SysEmailStatus::Failed);
    
            }
    
        }
        catch
        {
            ret= false;
    
            info(SysLabel::labelId2String2('@MAZ11099'));
          //  HMResourceSchedulingHelper::setEmailStatus(appointmentId ,SysEmailStatus::Failed);
        }
    
        _thread.setOutputParm([ret]);
    
        return ret;
        */
    }

    static public void sendAppointmentEmailTemp(Thread _thread)
    {
        #define.TIME('Time')
        #define.DATE('Date')
        #define.PATIENT('Patient')
        #define.PHYSICIAN('Physician')
        #define.UNIT('Unit')
        #define.STATUS('Status')
    
        HMmemo              emailBody;
        SysEmailSubject     subjectText;
        String30            emailId, time, newTime, newDate;
        DirPartyName        physicianName;
        Map                 templateTokens      = new Map(Types::String, Types::String);
        date                appointmentDate     = conPeek(_thread.getInputParm(),1);
        timeOfDay           appointmentTime     = conPeek(_thread.getInputParm(),2);
        recid               patient             = conPeek(_thread.getInputParm(),3);
        recid               appointmentId       = conPeek(_thread.getInputParm(),4);
        FormOpenMode        openmode            = conPeek(_thread.getInputParm(),5);
        SysEmailId          sysEmailId          = conPeek(_thread.getInputParm(),6);
    
        SysEmailTable           emailTable      = SysEmailTable::find(sysEmailId);
        SysEmailMessageTable    messageTable    = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);
        SysMailer               mail            = new SysMailer();
        SysEmailParameters      parm            = SysEmailParameters::find();
        SMTPPassword            pass            = SysEmailParameters::password();
    
        emailId         = HMPatient::find(patient).getPrimaryEmailAddress();
        subjectText     = messageTable.Subject;
        emailBody       = messageTable.Mail;
        emailBody       = HMResourceSchedulingHelper::generateCorrectHTML(emailBody);
        physicianName   = HMResourceSchedulingAppointment::find(appointmentId).getAppointmentPhysician();
        time            = time2Str(appointmentTime,TimeSeparator::Colon,TimeFormat::AMPM);
        newTime         = subStr(time,1,5);
        newTime         += subStr(time,strLen(time)-2,strLen(time));
        //newDate         = date2StrXpp(appointmentDate);
        newDate         = date2StrUSR(appointmentDate,DateFlags::None);
    
        templateTokens.insert(#PATIENT,HMPatient::find(patient).patientFirstName());
        templateTokens.insert(#PHYSICIAN, physicianName);
        templateTokens.insert(#DATE, newDate);
        templateTokens.insert(#TIME, newTime);
        templateTokens.insert(#UNIT,HMResourceSchedulingPlanningObject::find(HMResourceSchedulingAppointment::find(appointmentId).HMResourceSchedulingPlanningObject).Description);
        if (openmode == FormOpenMode::ForNew)
        {
            templateTokens.insert(#STATUS, "@MAZ6819");
        }
        else
        {
            templateTokens.insert(#STATUS, "@MAZ6820");
        }
        emailBody = SysEmailMessage::stringExpand(emailBody, SysEmailTable::htmlEncodeParameters(templateTokens));
    
        mail.SMTPRelayServer(parm.SMTPRelayServerName,parm.SMTPPortNumber,parm.SMTPUserName,pass);
        mail.fromAddress(emailTable.SenderAddr);
        mail.tos().appendAddress(emailId);
        mail.subject(subjectText);
        mail.htmlBody(emailBody);
        mail.priority(eMailPriority::Normal);
        mail.sendMail();
    
    }

    static public void sendAppointmentMail(Thread _thread)
    {
        System.IO.StreamWriter sw;
        InteropPermission perm = new InteropPermission(InteropKind::ClrInterop);
    
        str path = xInfo::directory(DirectoryType::Log)+#AppointmentFileName;
        str startDateTime;
        str endDateTime;
        utcdatetime startTime;
        utcdatetime endTime;
    
        date appointmentDate = conPeek(_thread.getInputParm(),1);
        timeOfDay appointmentTime = conPeek(_thread.getInputParm(),2);
        int duration = conPeek(_thread.getInputParm(),3);
        str emailAddress = conPeek(_thread.getInputParm(),4);
        recid scheduleType = conPeek(_thread.getInputParm(),5);
        recid patient =conPeek(_thread.getInputParm(),6);
        str senderEmail = conPeek(_thread.getInputParm(),7);
    
        SysMailer mail = new SysMailer();
        SMTPPassword pass;
        SysEmailParameters parm=SysEmailParameters::find();
        pass = SysEmailParameters::password();
        mail.SMTPRelayServer(parm.SMTPRelayServerName,parm.SMTPPortNumber,parm.SMTPUserName,pass);
        mail.fromAddress(senderEmail);
        mail.tos().appendAddress(emailAddress);
    
        mail.subject(strfmt("%1",HMResourceSchedulingTypeCode::find(scheduleType).Description));
        mail.htmlBody();
        mail.priority(eMailPriority::Normal);
    
        startTime = DateTimeUtil::newDateTime(appointmentDate, appointmentTime);
        endTime = DateTimeUtil::addMinutes(startTime, duration);
    
        startDateTime=strFmt('%1',strReplace(strReplace(DateTimeUtil::toStr(startTime),':',''),'-',''));
        endDateTime=strFmt('%1',strReplace(strReplace(DateTimeUtil::toStr(endTime),':',''),'-',''));
    
        sw = new System.IO.StreamWriter(path);
        perm.assert();
        sw.WriteLine('BEGIN:VCALENDAR');
        sw.WriteLine('PRODID:-//Flo Inc.//FloSoft//EN');
        sw.WriteLine('BEGIN:VEVENT');
        sw.WriteLine('DTSTART:' + startDateTime);
        sw.WriteLine('DTEND:' + endDateTime);
        sw.WriteLine('LOCATION:'+ CompanyInfo::find().Name);
        sw.WriteLine('DESCRIPTION;ENCODING=QUOTED-PRINTABLE:' + strfmt(SysLabel::labelId2String2('@MAZ11108'),HMPatient::find(patient).patientName()));
        sw.WriteLine('SUMMARY:' + strfmt("%1",HMResourceSchedulingTypeCode::find(scheduleType).Description));
        sw.WriteLine('PRIORITY:3');
        sw.WriteLine('END:VEVENT');
        sw.WriteLine('END:VCALENDAR');
    
        sw.Flush();
        sw.Close();
        sw.Dispose();
    
        mail.attachments().add(path);
        mail.sendMail();
    }

    static public void sendAppointmentMailPhysician(Thread _thread)
    {
        utcdatetime startTime;
        utcdatetime endTime;
    
        str emailAddress = conPeek(_thread.getInputParm(),1);
        recid apptRecId =conPeek(_thread.getInputParm(),2);
        SysEmailId          sysEmailId   = conPeek(_thread.getInputParm(),3);
        str physicianName = conPeek(_thread.getInputParm(),4);
    
        SysEmailTable           emailTable      = SysEmailTable::find(sysEmailId);
        HMResourceSchedulingAppointment hmResourceSchedulingAppointment = HMResourceSchedulingAppointment::find(apptRecId);
    
        str subject = strFmt("%1 - %2", HMResourceSchedulingTypeCode::find(hmResourceSchedulingAppointment.HMResourceSchedulingTypeCode).HMMedisysScheduleType,hmResourceSchedulingAppointment.getPatientName());
        str body = strFmt("Your appointmnet has been scheduled with %1", hmResourceSchedulingAppointment.getPatientName());
        str location = hmResourceSchedulingAppointment.showClinic();
    
        System.Net.Mail.SmtpClient smtpClient = new System.Net.Mail.SmtpClient();
        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage();
        HMOutlook.Appoitnment appt = new HMOutlook.Appoitnment();
        SMTPPassword pass;
        SysEmailParameters parm=SysEmailParameters::find();
        System.Net.ICredentialsByHost cre;
        pass = SysEmailParameters::password();
    
    
        try
        {
            smtpClient.set_EnableSsl(true);
            smtpClient.set_Host(parm.SMTPRelayServerName);
            smtpClient.set_Port(parm.SMTPPortNumber);
    
            cre = new System.Net.NetworkCredential(parm.SMTPUserName, pass);
            smtpClient.set_Credentials(cre);
            startTime = DateTimeUtil::newDateTime(hmResourceSchedulingAppointment.AppointmentDate, hmResourceSchedulingAppointment.AppointmentTime);
            endTime = DateTimeUtil::newDateTime(hmResourceSchedulingAppointment.AppointmentEndDate, hmResourceSchedulingAppointment.AppointmentEndTime);
    
            msg = appt.sendEmail(emailTable.SenderAddr,emailTable.SenderName,emailAddress,physicianName,subject,body,startTime,endTime,location);
    
            smtpClient.Send(msg);
    
        }
        catch
        {
    
        }
    }

    static public void sendEditAppointmentMail(Thread _thread)
    {
        System.IO.StreamWriter sw;
        InteropPermission perm = new InteropPermission(InteropKind::ClrInterop);
    
        str path = xInfo::directory(DirectoryType::Log)+#AppointmentFileName;
        str startDateTime;
        str endDateTime;
        utcdatetime startTime;
        utcdatetime endTime;
    
        date appointmentDate = conPeek(_thread.getInputParm(),1);
        timeOfDay appointmentTime = conPeek(_thread.getInputParm(),2);
        int duration = conPeek(_thread.getInputParm(),3);
        str emailAddress = conPeek(_thread.getInputParm(),4);
        recid scheduleType = conPeek(_thread.getInputParm(),5);
        recid patient =conPeek(_thread.getInputParm(),6);
        str senderEmail = conPeek(_thread.getInputParm(),7);
    
        SysMailer mail = new SysMailer();
        SMTPPassword pass;
        SysEmailParameters parm=SysEmailParameters::find();
        pass = SysEmailParameters::password();
        mail.SMTPRelayServer(parm.SMTPRelayServerName,parm.SMTPPortNumber,parm.SMTPUserName,pass);
        mail.fromAddress(senderEmail);
        mail.tos().appendAddress(emailAddress);
    
        mail.subject(strfmt("%1",HMResourceSchedulingTypeCode::find(scheduleType).Description));
        mail.htmlBody();
        mail.priority(eMailPriority::Normal);
    
        startTime = DateTimeUtil::newDateTime(appointmentDate, appointmentTime);
        endTime = DateTimeUtil::addMinutes(startTime, duration);
    
        startDateTime=strFmt("%1",strReplace(strReplace(DateTimeUtil::toStr(startTime),":",""),"-",""));
        endDateTime=strFmt("%1",strReplace(strReplace(DateTimeUtil::toStr(endTime),":",""),"-",""));
    
        sw = new System.IO.StreamWriter(path);
        perm.assert();
        sw.WriteLine('BEGIN:VCALENDAR');
        sw.WriteLine('PRODID:-//Flo Inc.//FloSoft//EN');
        sw.WriteLine('BEGIN:VEVENT');
        sw.WriteLine('DTSTART:' + startDateTime);
        sw.WriteLine('DTEND:' + endDateTime);
        sw.WriteLine('LOCATION:'+ CompanyInfo::find().Name);
        sw.WriteLine('DESCRIPTION;ENCODING=QUOTED-PRINTABLE:' + strfmt('Your appointment has been re-scheduled with %1.',HMPatient::find(patient).patientName()));
        sw.WriteLine('SUMMARY:' + strfmt("%1",HMResourceSchedulingTypeCode::find(scheduleType).Description));
        sw.WriteLine('PRIORITY:3');
        sw.WriteLine('END:VEVENT');
        sw.WriteLine('END:VCALENDAR');
    
        sw.Flush();
        sw.Close();
        sw.Dispose();
    
        mail.attachments().add(path);
        mail.sendMail();
    }

    static public boolean sendReConfirmAppointmentEmail(HMResourceSchedulingAppointment  _hmResourceSchedulingAppointment)
    {
        #define.TIME('Time')
        #define.DATE('Date')
        #define.PATIENT('Patient')
        #define.PHYSICIAN('Physician')
        #define.UNIT('Unit')
        #define.LINK('%Link%')
        #define.LINK2('%Link2%')
        #define.PROCEDURE('%Procedure%')
        #define.RECONFIRMLINK('%ReConfirmLink%')
        #define.RESCHEDULELINK('%ReScheduleLink%')
         #define.NOTES('%Notes%')
    
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointmentUpdate;
        SysOutgoingEmailTable   outgoingEmailTable;
        SysEmailItemId          nextEmailItemId;
        HMmemo                  emailBody;
        SysEmailSubject         subjectText;
        String30                emailId, time, newTime, newDate;
        DirPartyName            physicianName;
        Map                     templateTokens      = new Map(Types::String, Types::String);
        date                    appointmentDate     = _hmResourceSchedulingAppointment.AppointmentDate;
        timeOfDay               appointmentTime     = _hmResourceSchedulingAppointment.AppointmentTime;
        recid                   patient             = _hmResourceSchedulingAppointment.HMPatient;
        recid                   appointmentId       = _hmResourceSchedulingAppointment.RecId;
        SysEmailId              sysEmailId;       //   = HMParameters::find().ReConfirmAppointmentSysEmailTable;
        SysEmailTable           emailTable;         // = SysEmailTable::find(sysEmailId);
        SysEmailMessageTable    messageTable;
        boolean                 ret                 = true;
        str                     link                = '\'http://www.google.com\'';
        str                     linkTag;
        str                     procedureHTML;
        HMPatient               hmPatient           = HMPatient::find(patient);
        try
        {
            emailId         = CustTable::findRecId(HMPatient::find(patient).CustTable).email();
            if (emailId != "")
            {
                sysEmailId  = HMResourceSchedulingHelper::getProtocolTemplate(_hmResourceSchedulingAppointment.BOMVersion);
                if (sysEmailId == "")
                {
                    sysEmailId  = HMParameters::find().ReConfirmAppointmentSysEmailTable;
                }
                emailTable   = SysEmailTable::find(sysEmailId);
                messageTable = SysEmailMessageTable::find(emailTable.EmailId,HcmLanguageCode::find(hmPatient.HcmLanguageCode).LanguageCodeId);
    
                if (!messageTable)
                {
                    messageTable = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);
                }
    
                subjectText     = messageTable.Subject;
                emailBody       = messageTable.Mail;
                emailBody       = HMResourceSchedulingHelper::generateCorrectHTML(emailBody);
                physicianName   = HMResourceSchedulingAppointment::find(appointmentId).getAppointmentPhysician();
                time            = time2Str(appointmentTime,TimeSeparator::Colon,TimeFormat::AMPM);
                newTime         = subStr(time,1,5);
                newTime         += subStr(time,strLen(time)-2,strLen(time));
                //newDate         = date2StrXpp(appointmentDate);
                newDate         = date2StrUSR(appointmentDate,DateFlags::None);
    
                templateTokens.insert(#PATIENT,HMPatient::find(patient).patientFirstName());
                templateTokens.insert(#PHYSICIAN, physicianName);
                templateTokens.insert(#DATE, newDate);
                templateTokens.insert(#TIME, newTime);
                templateTokens.insert(#UNIT,HMOrganizationalUnit::find(HMResourceSchedulingPlanningObject::find(HMResourceSchedulingAppointment::find(appointmentId).HMResourceSchedulingPlanningObject).HMOrganizationalUnit).Description);
    
                link ="\"http://159.100.223.143:8000/Confirmation.aspx?Req=Reconfirmed&Id="+ int642str(appointmentId)+"\"";
                linkTag = "<A style=\"CURSOR: pointer; FONT-SIZE: 14px; TEXT-DECORATION: none; HEIGHT: 26px; WIDTH: 220px; BACKGROUND: #5a5858; COLOR: #fff; DISPLAY: block; LINE-HEIGHT: 26px; PADDING-RIGHT: 5px\" href="+link+"><IMG style=\"FLOAT: left; PADDING-RIGHT: 5px\" src=\"http://159.100.223.143:8000/email-notification.jpg\"></IMG> Re-confirm appointment</A>";
                emailBody = strReplace(emailBody,#RECONFIRMLINK, linkTag);
    
                link ="\"http://159.100.223.143:8000/ReSchedule.aspx?ReSchedule="+ int642str(appointmentId)+"\"";
                linkTag = "<A style=\"CURSOR: pointer; FONT-SIZE: 14px; TEXT-DECORATION: none; HEIGHT: 26px; WIDTH: 220px; BACKGROUND: #5a5858; COLOR: #fff; DISPLAY: block; LINE-HEIGHT: 26px; PADDING-RIGHT: 5px\" href="+link+"><IMG style=\"FLOAT: left; PADDING-RIGHT: 5px\" src=\"http://159.100.223.143:8000/email-notification.jpg\"></IMG> Re-schedule appointment</A>";
                emailBody = strReplace(emailBody,#RESCHEDULELINK, linkTag);
    
                //procedureHTML = HMResourceSchedulingHelper::createProcedureHTML(appointmentId);
                procedureHTML = HMResourceSchedulingHelper::createProtocolANDExamCodeNotesHTML(appointmentId);
                if (procedureHTML == "")
                {
                     emailBody = strReplace(emailBody,#NOTES, "");
                }
                else
                {
                    emailBody = strReplace(emailBody,#NOTES, procedureHTML);
                }
    
    
                nextEmailItemId = EventInbox::nextEventId();
                outgoingEmailTable.EmailItemId = nextEmailItemId;
                outgoingEmailTable.TemplateId = sysEmailId;
                outgoingEmailTable.IsSystemEmail = NoYes::No;
                outgoingEmailTable.Sender = emailTable.SenderAddr;
                outgoingEmailTable.SenderName = emailTable.SenderName;
                outgoingEmailTable.Recipient = emailId;
                outgoingEmailTable.Subject = subjectText;
                outgoingEmailTable.Priority = eMailPriority::Normal;
                outgoingEmailTable.WithRetries = false;
                outgoingEmailTable.RetryNum = 0;
                outgoingEmailTable.UserId = curUserId();
                outgoingEmailTable.Status = SysEmailStatus::Unsent;
                outgoingEmailTable.Message = SysEmailMessage::stringExpand(emailBody, SysEmailTable::htmlEncodeParameters(templateTokens));
                outgoingEmailTable.LatestStatusChangeDateTime = DateTimeUtil::getSystemDateTime();
                outgoingEmailTable.insert();
    
                ttsBegin;
                HMResourceSchedulingAppointmentUpdate = HMResourceSchedulingAppointment::find(_hmResourceSchedulingAppointment.RecId,true);
                HMResourceSchedulingAppointmentUpdate.IsReconfirmEmailSent = NoYes::Yes;
                HMResourceSchedulingAppointmentUpdate.update();
                ttsCommit;
            }
            else
            {
                ret = false;
    
                warning(SysLabel::labelId2String2('@MAZ11098'));
                //HMResourceSchedulingHelper::setEmailStatus(appointmentId ,SysEmailStatus::Failed);
    
            }
    
        }
        catch
        {
            ret= false;
    
            info(SysLabel::labelId2String2('@MAZ11099'));
          //  HMResourceSchedulingHelper::setEmailStatus(appointmentId ,SysEmailStatus::Failed);
        }
    
        return ret;
    }
    */
    public static void setEmailStatus(RecId  _appointmentId, YesNo   _emailStatus)
    {
        HMResourceSchedulingAppointment   HMResourceSchedulingAppointmentLocal ;
        ttsBegin;
    
        select forUpdate * from HMResourceSchedulingAppointmentLocal
            where HMResourceSchedulingAppointmentLocal.RecId == _appointmentId;
    
        HMResourceSchedulingAppointmentLocal.EmailSent = _emailStatus;
        HMResourceSchedulingAppointmentLocal.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTimeNew</Name>
				<Source><![CDATA[
    /*

   

    public static boolean unblockAppointmentSlot(TransDate _fromDate, TransDate _toDate, TimeOfDay _fromTime, TimeOfDay _toTime, RecId _resourceRecId)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLotValidate;
        boolean ret = true;
        Transdate               currentDate;
    
        currentDate = _fromDate;
    
        try
        {
            ttsBegin;
    
            while(currentDate <= _toDate)
            {
                select forupdate HMAppointmentReserveSLotValidate
                where HMAppointmentReserveSLotValidate.Date == currentDate
                && HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Block
                && ((HMAppointmentReserveSLotValidate.StartTime >= _fromTime && HMAppointmentReserveSLotValidate.StartTime <= _toTime)
                    ||(HMAppointmentReserveSLotValidate.EndTime >= _fromTime && HMAppointmentReserveSLotValidate.EndTime <= _toTime)
                    || (_fromTime >= HMAppointmentReserveSLotValidate.StartTime && _fromTime <= HMAppointmentReserveSLotValidate.EndTime)
                    ||(_toTime >= HMAppointmentReserveSLotValidate.StartTime && _toTime <= HMAppointmentReserveSLotValidate.EndTime))
                    && HMAppointmentReserveSLotValidate.HMResourceMaster == _resourceRecId; // line added for resolving issue arises of not blocing the slots
    
                if(HMAppointmentReserveSLotValidate)
                {
                    HMAppointmentReserveSLotValidate.delete();
                }
                currentDate = currentDate + 1;
            }
    
            info("@MAZ11566");
    
            ttsCommit;
        }
        catch
        {
            error("@MAZ11567");
            ret = false;
        }
    
        return ret;
    }

  
   
   

   
*/
    public static boolean validateTimeNew(String15 _value)
    {
        boolean retVal;
        //str pattern = '((0[1-9]|1[0-2])|^[1-9]{1}):[0-5][0-9](\\s)(?i)(am|pm)';
        str pattern = '((0[1-9]|1[0-2])|^[1-9]{1}):[0-5][0-9]:[0-5][0-9](\\s)(?i)(am|pm)';
        System.Text.RegularExpressions.Match myMatch;
    
        myMatch = System.Text.RegularExpressions.Regex::Match(_value, pattern);
    
        retVal = myMatch.get_Success();
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateApptDateEndTime</Name>
				<Source><![CDATA[
    public static TransDateTime calculateApptDateEndTime(recId _scheduleType, recId _resourceRecId, date currentDate,  timeOfDay fromTime)
    {
        TransDateTime resultTime;
        int duration;
    
        duration = HMResourceMasterHelper::getDurationInMinutes(_resourceRecId, _scheduleType);
    
        resultTime = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(currentDate,fromTime),duration);
    
        return resultTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateApptEndTime</Name>
				<Source><![CDATA[
    public static timeOfDay calculateApptEndTime(recId _scheduleType, recId _resourceRecId, date currentDate,  timeOfDay fromTime)
    {
        timeOfDay resultTime;
        int duration;
    
        duration = HMResourceMasterHelper::getDurationInMinutes(_resourceRecId, _scheduleType);
    
        resultTime = DateTimeUtil::time(DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(currentDate,fromTime),duration));
    
        return resultTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAppointment</Name>
				<Source><![CDATA[
    public static boolean cancelAppointment(List _apptRecId, HMAppointmentCancellationStatus _cancelStatus, str _notes, date _date, timeofDay _time, Recid _patientRecId, date _apptDate, boolean _updateComplement = true)
    {
        HMResourceSchedulingAppointment HMResourceSchedulingAppointmentLocal,HMResourceSchedulingAppointmentValidate;
        HMPatientVisit                  hmPatientEncounter;
        ListEnumerator                  listEnumerator = _apptRecId.getEnumerator();
        HMAppoinmentLog                 HMAppoinmentLog;
        RecId                           primaryApptRecId;
        RecordInsertList                HMAppoinmentLogList = new RecordInsertList(tableNum(HMAppoinmentLog));
        RecId                           encounterRecId;
        int                             totalAppts, cancelledAppts;
        HMAppointmentConfirmationStatus confirmationStatus;
        HMAppointmentReserveSLot        apptReserve;
        Set                             cancelApptSet;
        HMResourceSchedulingAppointmentInvent   apptInvent;
        try
        {
            cancelApptSet = new Set(Types::Int64);
            ttsBegin;
            while(listEnumerator.moveNext())
            {
                HMAppoinmentLog.clear();
                cancelApptSet.add(listEnumerator.current());
                select forupdate appointmentnumber,AppointmentStatus,HMCancellationStatus,RecId,PrimaryAPpointment,HMPatientVisit,AppointmentDate from HMResourceSchedulingAppointmentLocal
                where HMResourceSchedulingAppointmentLocal.RecId == listEnumerator.current();
    
                HMResourceSchedulingAppointmentLocal.AppointmentStatus = HMResourceSchedulingAppointmentStatus::Cancelled;
                HMResourceSchedulingAppointmentLocal.HMCancellationStatus = _cancelStatus;
                if(HMResourceSchedulingAppointmentLocal.PrimaryAppointment == YesNo::Yes)
                {
                    primaryApptRecId = HMResourceSchedulingAppointmentLocal.RecId;
                    confirmationStatus = HMResourceSchedulingAppointmentLocal.HMConfirmationStatus;
                }
                else
                {
                    apptInvent.skipDataMethods(true);
                    update_recordSet apptInvent
                    setting RelatedAppointmentRecId = 0
                    where apptInvent.RelatedAppointmentRecId == HMResourceSchedulingAppointmentLocal.RecId;
                }
                encounterRecId = HMResourceSchedulingAppointmentLocal.HMPatientVisit;
                HMResourceSchedulingAppointmentLocal.update();
    
                delete_from apptReserve
                where apptReserve.HMResourceSchedulingAppointment == HMResourceSchedulingAppointmentLocal.RecId;
    
                apptReserve.skipDeleteActions(true);
                HMAppoinmentLog.HMAppointLogStatus = HMResourceSchedulingAppointmentStatus::Cancelled;
                HMAppoinmentLog.HMResScheduleAppointment = HMResourceSchedulingAppointmentLocal.RecId;
                HMAppoinmentLog.HMAppointLogDate = _date;
                HMAppoinmentLog.HMAppointLogTime = _time;
                HMAppoinmentLog.HMAppointLogNote = _notes;
               
                HMAppoinmentLogList.add(HMAppoinmentLog);
    
                select count(RecId) from HMResourceSchedulingAppointmentValidate
                where HMResourceSchedulingAppointmentValidate.HMPatientVisit == HMResourceSchedulingAppointmentLocal.HMPatientVisit
                && HMResourceSchedulingAppointmentValidate.AppointmentDate == HMResourceSchedulingAppointmentLocal.AppointmentDate
                && HMResourceSchedulingAppointmentValidate.RecId != HMResourceSchedulingAppointmentLocal.RecId
                && HMResourceSchedulingAppointmentValidate.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed;
    
    
            }
            if(encounterRecId)
            {
                select count(RecId) from HMResourceSchedulingAppointmentLocal
                where HMResourceSchedulingAppointmentLocal.HMPatientVisit == encounterRecId
                && HMResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Cancelled;
    
                cancelledAppts = HMResourceSchedulingAppointmentLocal.RecId;
    
                select count(RecId) from HMResourceSchedulingAppointmentLocal
                where HMResourceSchedulingAppointmentLocal.HMPatientVisit == encounterRecId;
    
                totalAppts = HMResourceSchedulingAppointmentLocal.RecId;
    
                if(cancelledAppts == totalAppts)
                {
                    select RecId from HMResourceSchedulingAppointmentLocal
                    where HMResourceSchedulingAppointmentLocal.HMPatientVisit == encounterRecId
                    && HMResourceSchedulingAppointmentLocal.PrimaryAppointment == YesNo::Yes;
    
    
                }
            }
    
            //if(primaryApptRecId && confirmationStatus != HMAppointmentConfirmationStatus::IncompleteInfo)
            //{
            //HMEmailGeneration::emailCancelDetails(primaryApptRecId);
            //}
            HMAppoinmentLogList.insertDatabase();
            ttsCommit;
            //todo: ax7 email 
            //HMResourceSchedulingHelper::emailCancelDetails(_apptRecId);
    
            return true;
        }
        catch
        {
            warning("@MAZ11519");
            return false;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAppointmentExistByCalendarWeek</Name>
				<Source><![CDATA[
    public static List checkAppointmentExistByCalendarWeek(Recid _planningObjectRecId, RecId _weekPlanCalendarRecId)
    {
        HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentLocal;
        date                                        fromDate, toDate, currentDate;
        HMResourceSchedulingWeekDayPlan             hmResourceSchedulingWeekDayPlan;
        List                                        apptList = new List(Types::Int64);
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalender = HMResourceSchedulingWeekPlanToCalender::find(_weekPlanCalendarRecId);
    
        fromDate = HMResourceSchedulingHelper::date2Week(hmResourceSchedulingWeekPlanToCalender.YearNo, hmResourceSchedulingWeekPlanToCalender.WeekNo);
        toDate = fromDate + 6;
    
        currentDate = fromDate;
    
        while(currentDate <= toDate)
        {
            select count(RecId) from hmResourceSchedulingWeekDayPlan
                where hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
                    && hmResourceSchedulingWeekDayPlan.Days == dayOfWk(currentDate);
    
            if(hmResourceSchedulingWeekDayPlan.RecId)
            {
                while select RecId from hmResourceSchedulingAppointmentLocal
                    where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == _planningObjectRecId
                    && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                    && hmResourceSchedulingAppointmentLocal.AppointmentDate == currentDate
                {
                    apptList.addEnd(hmResourceSchedulingAppointmentLocal.RecId);
                }
            }
    
            currentDate = currentDate + 1;
        }
    
        return apptList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAppointmentExistByDayPlan</Name>
				<Source><![CDATA[
    public static List checkAppointmentExistByDayPlan(Recid _planningObjectRecId, RecId _dayPlanRecId, FromTime _fromTime, ToTime _toTime)
    {
        HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentLocal;
        date                                        currentDate;
        List                                        apptList = new List(Types::Int64);
        HMResourceSchedulingWeekDayPlan             hmResourceSchedulingWeekDayPlan;
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalender;
    
        while select * from hmResourceSchedulingWeekDayPlan where hmResourceSchedulingWeekDayPlan.HMResourceSchedulingDayPlan == _dayPlanRecId
            join * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
        {
            currentDate = HMResourceSchedulingHelper::date2Week(hmResourceSchedulingWeekPlanToCalender.YearNo, hmResourceSchedulingWeekPlanToCalender.WeekNo);
    
            currentDate = currentDate + (hmResourceSchedulingWeekDayPlan.Days -1);
    
            while select RecId from hmResourceSchedulingAppointmentLocal
                where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == _planningObjectRecId
                && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == currentDate
                && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= _fromTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= _toTime)
            {
                apptList.addEnd(hmResourceSchedulingAppointmentLocal.RecId);
            }
        }
    
        return apptList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAppointmentExistByWeekDayPlan</Name>
				<Source><![CDATA[
    public static List checkAppointmentExistByWeekDayPlan(Recid _planningObjectRecId, RecId _weekDayPlanRecId, FromTime _fromTime, ToTime _toTime)
    {
        HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentLocal;
        date                                        currentDate;
        List                                        apptList = new List(Types::Int64);
        HMResourceSchedulingWeekDayPlan             hmResourceSchedulingWeekDayPlan = HMResourceSchedulingWeekDayPlan::find(_weekDayPlanRecId);
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalender;
    
        while select * from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan == hmResourceSchedulingWeekDayPlan.HMResourceSchedulingWeekPlan
        {
            currentDate = HMResourceSchedulingHelper::date2Week(hmResourceSchedulingWeekPlanToCalender.YearNo, hmResourceSchedulingWeekPlanToCalender.WeekNo);
    
            currentDate = currentDate + (hmResourceSchedulingWeekDayPlan.Days -1);
    
            while select RecId from hmResourceSchedulingAppointmentLocal
                where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == _planningObjectRecId
                && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
                && hmResourceSchedulingAppointmentLocal.AppointmentDate == currentDate
                && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= _fromTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= _toTime)
            {
                apptList.addEnd(hmResourceSchedulingAppointmentLocal.RecId);
            }
        }
    
        return apptList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAppointmentExistByWeekPlan</Name>
				<Source><![CDATA[
    public static List checkAppointmentExistByWeekPlan(Recid _planningObjectRecId, RecId _weekPlanRecId)
    {
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalender;
        List                                        apptList = new List(Types::Int64);
    
        while select RecId from hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan == _weekPlanRecId
        {
            apptList.appendList(HMResourceSchedulingHelper::checkAppointmentExistByCalendarWeek(_planningObjectRecId, hmResourceSchedulingWeekPlanToCalender.RecId));
        }
    
        return apptList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAppointmentSlotByDS</Name>
				<Source><![CDATA[
    public static boolean createAppointmentSlotByDS(FormDataSource _fds)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot;
        boolean ret = true;
        RecId patientRecId = HMParameters::find().HMPatient_BogusForReservedAppt;
    
        try
        {
            if(!patientRecId)
            {
                warning("@MAZ12345");
                return false;
            }
            ttsBegin;
            for (HMAppointmentReserveSLot = _fds.getFirst(true) ? _fds.getFirst(true) : _fds.cursor(); HMAppointmentReserveSLot; HMAppointmentReserveSLot = _fds.getNext())
            {
                HMResourceSchedulingHelper::createNewAppointment(patientRecId,HMAppointmentReserveSLot.HMResourceSchedulingTypeCode,
                                                                HMAppointmentReserveSLot.HMOrganizationalUnit_ServiceLocation,
                                                                HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject,
                                                                HMAppointmentReserveSLot.Date,
                                                                HMAppointmentReserveSLot.StartTime,
                                                                CustTable::findRecId(HMAppointmentReserveSLot.Client).AccountNum,
                                                                HMResourceSchedulingAppointmentStatus::Reserved);
            }
            ttsCommit;
    
            info("@MAZ12344");
        }
        catch
        {
            error("@MAZ11567");
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAppointmentVisit</Name>
				<Source><![CDATA[
    public static RecId createAppointmentVisit(TransDate _appointmentDate, TimeofDay _appointmentTime ,recid _patientRecId, recid _organizationalUnitRecId)
    {
        HMPatientVisit hmatientVisit;
        HMNumberSequenceHandler numberSeq = new HMNumberSequenceHandler();
    
        try
        {
            hmatientVisit.VisitNo = numberSeq.generateNumberSequence(HMOrganizationalUnit::getOperatingUnitRecid(_organizationalUnitRecId), extendedtypenum(HMVisitNo));
            hmatientVisit.EncounterDate = _appointmentDate;
    
            if(!hmatientVisit.VisitNo)
            {
                checkFailed(strFmt("@MAZ8513","@MAZ13299",HMOrganizationalUnit::find(_organizationalUnitRecId).Description));
            }
    
            hmatientVisit.HMCaseType = HMCaseType::OutPatient;
            hmatientVisit.Patient = _patientRecId;
            hmatientVisit.Time = _appointmentTime;
    
            if(hmatientVisit.validateWrite())
            {
                hmatientVisit.insert();
                numberSeq.commitNewNumSeq();
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            numberSeq.deleteNewNumSeq();
        }
    
        return hmatientVisit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceLog</Name>
				<Source><![CDATA[
    public static boolean createServiceLog(RecId _serviceRecId, RecId _userRecId, boolean _isWorker, int _serviceStatusId, str _note, RecId _reasonRecId, NoYes _resetService, NoYes _notRequired)
    {
        HMServiceLog                            serviceLog;
    
        try
        {
            ttsBegin;
            serviceLog.HMServiceLogDate                         = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            serviceLog.HMServiceLogTime                         = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
            serviceLog.HMResourceSchedulingAppointmentInvent    = _serviceRecId;
            serviceLog.HMServiceLogNote                         = _note;
            serviceLog.HMServiceLogStatus                       = _serviceStatusId;
            serviceLog.HMUserRecId                              = _userRecId;
            serviceLog.HMIsWorker                               = _isWorker;
            serviceLog.ServiceReason                            = _reasonRecId;
            serviceLog.ResetService                             = _resetService;
            serviceLog.NotRequired                              = _notRequired;
            serviceLog.insert();
            ttsCommit;
        }
        catch
        {
            return false;
        }
    
        return  true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2Week</Name>
				<Source><![CDATA[
    public static date date2Week(Yr _year, Week _week)
    {
        date date1 = mkDate(01,01,_year);
        Days d1 = dayOfWk(date1);
    
        return (date1 - d1) + 7*(_week - 1) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOUByResource</Name>
				<Source><![CDATA[
    public static RecId findOUByResource(REcId _OUREcId , RecId _resourceRecId)
    {
        HMResourceOrganizationalUnit    HMResourceOrganizationalUnit;
        select HMOrganizationalUnit from HMResourceOrganizationalUnit
        where HMResourceOrganizationalUnit.HMResourceMaster == _resourceRecId
        && HMResourceOrganizationalUnit.HMOrganizationalUnit == _OUREcId;
    
        return HMResourceOrganizationalUnit.HMOrganizationalUnit;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQRCode</Name>
				<Source><![CDATA[
    public static RefRecId generateQRCode(HMAppointmentNumber _apptNumber, HMPatientId _patientMRN, recId _apptRecId)
    {
        DocuActionArchive docuActionArchive;
        EFDocQRCode_BR    qrCode;
        HMParameters      hmParameters;
        container         imageContainer;
        Filename          file;
        BinData           binData;
        DocuRef           docuRef;
        Image             image;
        str               codeStr, content; 
        
        codeStr      = _apptNumber + ';' + _patientMRN;
        hmParameters = HMParameters::find();
        
        // make file URL
        str endSlash(str _str)
        {
            return (strscan(_str, '\\',strlen(_str),-1)) ? _str : _str + '\\';
        }
    
        try
        {
            // Create an instance of the QR code class
            qrCode = new EFDocQRCode_BR();
    
            // Generate a QR code for the URL and save the result to a container
            imageContainer = qrCode.generateQRCode(codeStr);
            System.IO.MemoryStream memoryStream = Binary::constructFromContainer(imageContainer).getMemoryStream();
            file = _apptNumber + '.jpg';
            /*// Encode binData to base64
            content = BinData::dataToString(imageContainer);
            
            // Use AX's good old Image class to load the image from the container and save it as a file
            image = new Image();
            image.setData(imageContainer);
            
            file = endSlash(System.IO.Path::GetTempPath());
            file = file + _apptNumber + '.jpg';
            image.saveImage(file, ImageSaveType::JPG);
            
            // set file name
            //file = _apptNumber + '.jpg';
            //System.Text.Encoding  encoding = new  System.Text.Encoding  encoding();
            // Converting file to byte array
            System.Byte[] fileBytes = System.Text.Encoding::ASCII.GetBytes(content);
            // Converting byte array to memory stream
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream(fileBytes);
        */
            //memoryStream.position = 0;

            if (hmParameters.docuTypeId)
            {
                HMResourceSchedulingAppointment hmResourceSchedulingAppointment;

                ttsBegin;
                                
                docuRef.RefTableId   = tableNum(HMResourceSchedulingAppointment);   //TableId, for which the attachement should be attached.
                docuRef.RefRecId     = _apptRecId;                                  //RecId, for which the attachement should be attached.
                docuRef.RefCompanyId = curext();                                    //CompanyId
                docuRef.TypeId       = hmParameters.docuTypeId;                     // 'File';
    
                //docuRef.insert();
                
                //todo: ax7 docu ref
                /*
                docuActionArchive = new DocuActionArchive();
                
                // This action first displays a file selection dialog.
                // After the file is selected designates a number sequence and stores the file to document archive.
                docuActionArchive.setDocuType(docuRef.TypeId);
                docuActionArchive.add(docuRef, file);
                */
                
                //docuref = DocumentManagement::attachFile(tableNum(HMResourceSchedulingAppointment),_apptRecId, curExt(), docuRef.TypeId, memoryStream, file, 'jpg', file);
                //docuRef = DocumentManagement::attachFile(tableNum(HMResourceSchedulingAppointment), _apptRecId, curExt(), docuRef.TypeId, memoryStream, System.IO.Path::GetFileName(file), System.Web.MimeMapping::GetMimeMapping(file), System.IO.Path::GetFileName(file));
                docuRef = DocumentManagement::attachFile(tableNum(HMResourceSchedulingAppointment), _apptRecId, curExt(), docuRef.TypeId, memoryStream, file, "jpg", file);
                ttsCommit;
            }
            else
            {
                error("@MAZ13162");
                ttsabort;
            }
        }
        catch
        {
            error("@MAZ13070");
        }
        return docuRef.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveBOMVersion</Name>
				<Source><![CDATA[
    public static BOMVersion getActiveBOMVersion(ItemId _itemId)
    {
        BOMVersion bomversion;
    
        select firstonly * from bomVersion
            where bomVersion.ItemId == _itemId
            && bomVersion.Active
            && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    
        return bomversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDifferenceInDayPlans</Name>
				<Source><![CDATA[
    public static List getDifferenceInDayPlans(Recid _dayPlanRecId1, RecId _dayPlanRecId2)
    {
        HMResourceSchedulingDayPlan     hmResourceSchedulingDayPlan1, hmResourceSchedulingDayPlan2;
        List list = new List(Types::Container);
    
        hmResourceSchedulingDayPlan1 = HMResourceSchedulingDayPlan::find(_dayPlanRecId1);
        hmResourceSchedulingDayPlan2 = HMResourceSchedulingDayPlan::find(_dayPlanRecId2);
    
        if(_dayPlanRecId1 && _dayPlanRecId2)
        {
            if(hmResourceSchedulingDayPlan1.DayStartTime < hmResourceSchedulingDayPlan2.DayStartTime)
            {
                if(hmResourceSchedulingDayPlan1.DayEndTime <= hmResourceSchedulingDayPlan2.DayStartTime)
                {
                    list.addEnd([hmResourceSchedulingDayPlan1.DayStartTime, hmResourceSchedulingDayPlan1.DayEndTime]);
                }
                else
                {
                    list.addEnd([hmResourceSchedulingDayPlan1.DayStartTime, hmResourceSchedulingDayPlan2.DayStartTime]);
                }
            }
            else if(hmResourceSchedulingDayPlan1.DayStartTime > hmResourceSchedulingDayPlan2.DayStartTime
                && hmResourceSchedulingDayPlan1.DayStartTime >= hmResourceSchedulingDayPlan2.DayEndTime)
            {
                list.addEnd([hmResourceSchedulingDayPlan1.DayStartTime, hmResourceSchedulingDayPlan1.DayEndTime]);
            }
    
            if(hmResourceSchedulingDayPlan1.DayEndTime > hmResourceSchedulingDayPlan2.DayEndTime)
            {
                if(hmResourceSchedulingDayPlan1.DayStartTime < hmResourceSchedulingDayPlan2.DayEndTime)
                {
                    list.addEnd([hmResourceSchedulingDayPlan2.DayEndTime, hmResourceSchedulingDayPlan1.DayEndTime]);
                }
            }
        }
        else if(_dayPlanRecId1)
        {
            list.addEnd([hmResourceSchedulingDayPlan1.DayStartTime, hmResourceSchedulingDayPlan1.DayEndTime]);
        }
    
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProtocolServiceType</Name>
				<Source><![CDATA[
    public static HMMedisysServiceType getProtocolServiceType(ItemId _itemId)
    {
        bomVersion bomVersion;
    
        select firstonly HMMedisysServiceType from bomVersion
        where bomVersion.ItemId == _itemId
        && bomVersion.Active
        && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    
        return bomVersion.HMMedisysServiceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceRecId</Name>
				<Source><![CDATA[
    public static RecID getResourceRecId(Description _resourceDesc, RecId _hmorganizationalUnit)
    {
        Query       query;
        QueryRun    queryRun;
        HMResourceMaster    HMResourceMaster;
        query = new query();
    
        query.addDataSource(tableNum(HMResourceMaster));
        query.dataSourceTable(tableNum(HMResourceMaster)).addRange(fieldNum(HMResourceMaster,Description)).value(SysQuery::value(_resourceDesc));
    
        query.dataSourceTable(tableNum(HMResourceMaster)).addRange(fieldNum(HMResourceMaster, Status)).value(SysQuery::value(HMResourceStatus::Active));
        if(_hmorganizationalUnit)
        {
            query.dataSourceTable(tableNum(HMResourceMaster)).addDataSource(tableNum(HMResourceOrganizationalUnit)).relations(true);
            query.dataSourceTable(tableNum(HMResourceOrganizationalUnit)).addRange(fieldNum(HMResourceOrganizationalUnit,HMOrganizationalUnit)).value(SysQuery::value(_hmorganizationalUnit));
        }
    
        queryRun = new QueryRun(query);
    
        queryRun.next();
    
        HMResourceMaster = queryRun.get(tableNum(HMResourceMaster));
    
        return HMResourceMaster.RecId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWeekday</Name>
				<Source><![CDATA[
    public static boolean isWeekday(date _date)
    {
        boolean ret;
        HMParameters                        hmParameters = HMParameters::find();
    
        switch(dayOfWk(_date))
        {
            case 1:
                ret = hmParameters.Monday;
                break;
            case 2:
                ret = hmParameters.Tuesday;
                break;
            case 3:
                ret = hmParameters.Wednesday;
                break;
            case 4:
                ret = hmParameters.Thursday;
                break;
            case 5:
                ret = hmParameters.Friday;
                break;
            case 6:
                ret = hmParameters.Saturday;
                break;
            case 7:
                ret = hmParameters.Sunday;
                break;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedApptReschedule</Name>
				<Source><![CDATA[
    public static boolean markedApptReschedule(List _apptList)
    {
        boolean ret = true;
        HMResourceSchedulingAppointment     hmresourceSchedulingAppointment, hmresourceSchedulingAppointmentUpdate;
        ListEnumerator                      listEnumr = _apptList.getEnumerator();
        HMAppoinmentLog                     hmAppoinmentLog;
        RecordInsertList                    hmAppoinmentLogList =  new RecordInsertList(tableNum(HMAppoinmentLog));
        try
        {
            ttsBegin;
    
            while(listEnumr.moveNext())
            {
                select HMPatientVisit from hmresourceSchedulingAppointment where hmresourceSchedulingAppointment.RecId == listEnumr.current();
    
                if(hmresourceSchedulingAppointment.HMPatientVisit)
                {
                    while select forupdate RecId from hmresourceSchedulingAppointmentUpdate
                        where hmresourceSchedulingAppointmentUpdate.HMPatientVisit == hmresourceSchedulingAppointment.HMPatientVisit
                    {
                        hmresourceSchedulingAppointmentUpdate.AppointmentStatus = HMResourceSchedulingAppointmentStatus::ToBeReschedule;
                        hmresourceSchedulingAppointmentUpdate.update();
    
                        hmAppoinmentLog.clear();
    
                        hmAppoinmentLog.HMAppointLogStatus = HMResourceSchedulingAppointmentStatus::ToBeReschedule;
                        hmAppoinmentLog.HMResScheduleAppointment = hmresourceSchedulingAppointmentUpdate.RecId;
                        hmAppoinmentLog.HMAppointLogDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        hmAppoinmentLog.HMAppointLogTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                        hmAppoinmentLogList.add(hmAppoinmentLog);
    
                        HMTask::createTaskForAppointment(hmresourceSchedulingAppointmentUpdate.RecId,HMActivityAppointmentStatus::ToBeRescheduled);
                    }
                }
            }
            
            hmAppoinmentLogList.insertDatabase();
            ttsCommit;
        }
        catch
        {
            ret = false;
            warning("@MAZ12523");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBlockCloseAppointmentSlot</Name>
				<Source><![CDATA[
    public static boolean reserveBlockCloseAppointmentSlot(FormDataSource _fds, HMAppointmentSlotReserveBlock _task, RecId _clientRecId, Recid _reasonRecId, Recid _serviceLocationRecId = 0, ContactPersonId _requestorId = '', HMAppointmentNotes _csrNotes = '')
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot;
        RecId                                           appointmentRecId;
        boolean ret = true;
        HMResourceSchedulingOpenTimeSlotsTmp            hmResourceSchedulingOpenTimeSlotsTmp;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObject;
        RecId                                           patientRecId = HMParameters::find().HMPatient_BogusForReservedAppt;
        try
        {
            /*
            if(!patientRecId)
            {
                warning("@MAZ12345");
                return false;
            }
            */
            ttsBegin;
    
            for (hmResourceSchedulingOpenTimeSlotsTmp = _fds.getFirst(true) ? _fds.getFirst(true) : _fds.cursor(); hmResourceSchedulingOpenTimeSlotsTmp; hmResourceSchedulingOpenTimeSlotsTmp = _fds.getNext())
            {
                select firstOnly HMResourceMaster, RecId from hmResourceSchedulingPlanningObject
                    where hmResourceSchedulingPlanningObject.RecId == hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingPlanningObject;
    
                HMAppointmentReserveSLot.clear();
    
                HMAppointmentReserveSLot.Date = hmResourceSchedulingOpenTimeSlotsTmp.date;
                HMAppointmentReserveSLot.Client = _clientRecId;
                HMAppointmentReserveSLot.StartTime = hmResourceSchedulingOpenTimeSlotsTmp.Time;
                HMAppointmentReserveSLot.EndTime = hmResourceSchedulingOpenTimeSlotsTmp.SlotEndTime;
                HMAppointmentReserveSLot.HMResourceMaster = hmResourceSchedulingPlanningObject.HMResourceMaster;
                HMAppointmentReserveSLot.SlotReserveBlock = _task;
                HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject = hmResourceSchedulingPlanningObject.RecId;
                HMAppointmentReserveSLot.HMOrganizationalUnit_ServiceLocation = _serviceLocationRecId;
                HMAppointmentReserveSLot.ReasonTable = _reasonRecId;
                HMAppointmentReserveSLot.ArrivalTime = hmResourceSchedulingOpenTimeSlotsTmp.ArrivalTime;
                HMAppointmentReserveSLot.HMResourceSchedulingTypeCode = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode;
    
                if(HMAppointmentReserveSLot.SlotReserveBlock == HMAppointmentSlotReserveBlock::Reserve)
                {
                    appointmentRecId = HMResourceSchedulingHelper::createNewAppointment(patientRecId,HMAppointmentReserveSLot.HMResourceSchedulingTypeCode,
                                                                    HMAppointmentReserveSLot.HMOrganizationalUnit_ServiceLocation,
                                                                    HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject,
                                                                    HMAppointmentReserveSLot.Date,
                                                                    HMAppointmentReserveSLot.StartTime,
                                                                    CustTable::findRecId(HMAppointmentReserveSLot.Client).AccountNum,
                                                                    HMResourceSchedulingAppointmentStatus::Reserved, _requestorId,
                                                                    _csrNotes, HMAppointmentReserveSLot.ArrivalTime);
                    if(appointmentRecId)
                    {
                        HMAppointmentReserveSLot.HMResourceSchedulingAppointment = appointmentRecId;
                        HMAppointmentReserveSLot.insert();
                    }
                    else
                    {
                        ttsAbort;
                        return false;
                    }
                }
                else
                {
                    HMAppointmentReserveSLot.insert();
                }
    
            }
    
            ttsCommit;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAppointmentService</Name>
				<Source><![CDATA[
    public static void saveAppointmentService(RecId _sourceAppointmentRecId, RecId _targetAppointmentRecId)
    {
        HMResourceSchedulingAppointmentInvent apptInventSource, apptInventTarget;
        RecordInsertList        apptInventTargetList =  new RecordInsertList(tableNum(HMResourceSchedulingAppointmentInvent));
        while select * from apptInventSource
            where apptInventSource.HMResourceSchedulingAppointment == _sourceAppointmentRecId
        {
            buf2Buf(apptInventSource,apptInventTarget);
            apptInventTarget.HMResourceSchedulingAppointment = _targetAppointmentRecId;
            apptInventTargetList.add(apptInventTarget);
        }
        apptInventTargetList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unblockAppointmentSlotByDS</Name>
				<Source><![CDATA[
    public static boolean unblockAppointmentSlotByDS(FormDataSource _fds, boolean _suppressInfo = false)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot;
    
        boolean ret = true;
    
        try
        {
            ttsBegin;
            for (HMAppointmentReserveSLot = _fds.getFirst(true) ? _fds.getFirst(true) : _fds.cursor(); HMAppointmentReserveSLot; HMAppointmentReserveSLot = _fds.getNext())
            {
                HMResourceSchedulingHelper::deleteReserveApptSlot(HMAppointmentReserveSLot.HMResourceSchedulingAppointment);
                HMAppointmentReserveSLot.delete();
            }
            ttsCommit;
            if(!_suppressInfo)
            {
                info("@MAZ11566");
            }
        }
        catch
        {
            error("@MAZ11567");
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOverBookingSlots</Name>
				<Source><![CDATA[
    public static void updateOverBookingSlots(RecId _planningObjectRecId)
    {
        HMResourceSchedulingDayPlan         hmResourceSchedulingDayPlan;
        HMResourceSchedulingDayPlanItem     hmResourceSchedulingDayPlanItem;
    
        try
        {
            hmResourceSchedulingDayPlanItem.skipDataMethods(true);
            update_recordset hmResourceSchedulingDayPlanItem
                setting
                    NumberOfOverBookings = 0
                join hmResourceSchedulingDayPlan
                    where hmResourceSchedulingDayPlan.RecId == hmResourceSchedulingDayPlanItem.HMResourceSchedulingDayPlan
                        && hmResourceSchedulingDayPlan.HMResourceSchedulingPlanningObject == _planningObjectRecId;
            
        }
        catch
        {
            error("Error while updating Number of over bookings in time slots");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTime</Name>
				<Source><![CDATA[
    public static boolean validateTime(String10 _value)
    {
        boolean retVal;
        str pattern = '((0[1-9]|1[0-2])|^[1-9]{1}):[0-5][0-9](\\s)(?i)(am|pm)';
        System.Text.RegularExpressions.Match myMatch;
    
        myMatch = System.Text.RegularExpressions.Regex::Match(_value, pattern);
    
        retVal = myMatch.get_Success();
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCalenderWeek</Name>
				<Source><![CDATA[
    public void copyCalenderWeek(int _sourceFrom, int _sourceTo, int _targetFrom, int _targetTo, recid _weekPlanID, HMCalendarWeekStatus _status = HMCalendarWeekStatus::Confirmed)
    {
        HMResourceSchedulingWeekPlan                hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalenderlocal;
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalenderNew;
        int fromYear;
        int toYear;
        int i;
        int j;
        int weeknum;
    
        //try
        //{
        //ttsBegin;
    
        hmResourceSchedulingWeekPlan = HMResourceSchedulingWeekPlan::find(_weekPlanID);
        fromYear = hmResourceSchedulingWeekPlan.FromYear;
        toYear =  hmResourceSchedulingWeekPlan.ToYear;
    
        weeknum=_sourceFrom;
    
        for(i=_targetFrom;i<=_targetTo;i++)
        {
            select count(recId) from HMResourceSchedulingWeekPlanToCalenderlocal
                    where HMResourceSchedulingWeekPlanToCalenderlocal.HMResourceSchedulingWeekPlan==_weekPlanID
                    && HMResourceSchedulingWeekPlanToCalenderlocal.WeekNo==weeknum;
    
            if(HMResourceSchedulingWeekPlanToCalenderlocal.RecId > 0)
            {
                for(j=fromYear;j<=toYear;j++)
                {
                    try
                    {
    
    
                        if(this.checkWeekPlanCalendarExist(i, j,hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject))
                        {
                            if(this.checkCalenderWeekYearExist(i, j,hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject))
                            {
                                if(this.checkTimeSlotOverlappingForWeekPlan(i,j,_weekPlanID,hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject) && this.checkTimeSlotOverlappingForCalendarWeek(i,j,_weekPlanID,hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject))
                                {
                                    hmResourceSchedulingWeekPlanToCalenderNew.HMResourceSchedulingWeekPlan=_weekPlanID;
                                    hmResourceSchedulingWeekPlanToCalenderNew.WeekNo=i;
                                    hmResourceSchedulingWeekPlanToCalenderNew.YearNo=j;
                                    hmResourceSchedulingWeekPlanToCalenderNew.Status = _status;
    
                                    if(hmResourceSchedulingWeekPlanToCalenderNew.validateWrite())
                                    {
                                        hmResourceSchedulingWeekPlanToCalenderNew.insert();
                                    }
                                    else
                                    {
                                        throw Exception::Error;
                                    }
    
                                }
                                else
                                {
                                    throw error(strfmt("@MAZ4088",i,j,orgUnit,buildUnitl));
                                }
                            }
                            else
                            {
                                throw error(strfmt("@MAZ1743",i,j));
                            }
                        }
                        else
                        {
                            throw error(strfmt("@MAZ3328",i,j));
                        }
                    }
                    catch
                    {
                        continue;
                    }
                }
            }
    
            if(weeknum==_sourceTo)
            {
                weeknum=_sourceFrom;
            }
            else
            {
                weeknum++;
            }
        }
    
        //ttsCommit;
        //}
        //catch
        //{
        //
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialTimeSlots</Name>
				<Source><![CDATA[
    public int64 getInitialTimeSlots(timeOfDay _fromTime, timeOfDay _toTime, recId _scheduleType, recId _resourceRecId)
    {
        int duration;
        int64 minutes;
    
        duration = HMResourceMasterHelper::getDurationInMinutes(_resourceRecId, _scheduleType);
    
        minutes = DateTimeUtil::getDifference(DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),_toTime),(DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),_fromTime)))/60;
    
        return minutes/duration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWeekPlanCalendarExist</Name>
				<Source><![CDATA[
    private boolean checkWeekPlanCalendarExist(int _week, int _year, recid _planningObjectRecId)
    {
        HMResourceSchedulingWeekPlan                hmResourceSchedulingWeekPlan;
    
        select count(recId) from hmResourceSchedulingWeekPlan
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject == _planningObjectRecid
            && hmResourceSchedulingWeekPlan.WeekNumber == _week
            && (HMResourceSchedulingWeekPlan.FromYear <= _year && HMResourceSchedulingWeekPlan.ToYear >= _year);
    
        if(hmResourceSchedulingWeekPlan.RecId > 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewAppointment</Name>
				<Source><![CDATA[
    public static RecId createNewAppointment(RecId _hmPatientRecId,
                                        RecId _scheduleTypeRecId,
                                        REcId _serviceLocationRecId,
                                        RecId _planningObjectRecId,
                                        Date _appointmentDate,
                                        TimeOfDay _appointemntTime,
                                        CustAccount _client,
                                        HMResourceSchedulingAppointmentStatus _apptStatus,
                                        ContactPersonId _requestorId = '',
                                        HMAppointmentNotes _csrNotes = '',
                                        TimeOfDay _arrivalTime = -1)
    {
        hmResourceSchedulingAppointment hmResourceSchedulingAppointmentNew;
        hmResourceSchedulingPlanningObject  hmResourceSchedulingPlanningObjectMain;
        HMNumberSequenceGeneratorClass  HMNumberSequenceGeneratorClass = new HMNumberSequenceGeneratorClass();
        try
        {
            hmResourceSchedulingPlanningObjectMain = hmResourceSchedulingPlanningObject::find(_planningObjectRecId);
            hmResourceSchedulingAppointmentNew.AppointmentStatus                    = _apptStatus;
            hmResourceSchedulingAppointmentNew.HMPatient                            = _hmPatientRecId;
            hmResourceSchedulingAppointmentNew.HMResourceSchedulingTypeCode         = _scheduleTypeRecId;
            hmResourceSchedulingAppointmentNew.HMResourceSchedulingPlanningObject   = hmResourceSchedulingPlanningObjectMain.RecId;
            hmResourceSchedulingAppointmentNew.AppointmentDate                      = _appointmentDate;
            hmResourceSchedulingAppointmentNew.AppointmentTime                      = _appointemntTime;
            hmResourceSchedulingAppointmentNew.Client                               = _client;
            hmResourceSchedulingAppointmentNew.HMOrganizationalUnitServiceLocation  = _serviceLocationRecId;
            hmResourceSchedulingAppointmentNew.RequestorContactPerson               = _requestorId;
            hmResourceSchedulingAppointmentNew.Notes                                = _csrNotes;
            hmResourceSchedulingAppointmentNew.ArrivalTime                          = _arrivalTime;
            hmResourceSchedulingAppointmentNew.AppointmentNumber                    = HMNumberSequenceGeneratorClass.getNewNumSeqForAppointmentNum(HMOrganizationalUnit::getOperatingUnitRecid(hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit));
            hmResourceSchedulingAppointmentNew.HMPatientVisit                   = HMResourceSchedulingHelper::createAppointmentVisit(hmResourceSchedulingAppointmentNew.AppointmentDate,
                                                                                                            hmResourceSchedulingAppointmentNew.AppointmentTime, hmResourceSchedulingAppointmentNew.HMPatient,
                                                                                                                hmResourceSchedulingPlanningObjectMain.HMOrganizationalUnit);
            if(!hmResourceSchedulingAppointmentNew.HMPatientVisit)
            {
                checkFailed("@MAZ11211");
            }
            hmResourceSchedulingAppointmentNew.insert();
            HMNumberSequenceGeneratorClass.useNewNumSeqForAppointmentNum();
            return hmResourceSchedulingAppointmentNew.RecId;
        }
        catch
        {
            HMNumberSequenceGeneratorClass.deleteNewNumSeqForAppointmentNum();
            return 0;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReserveApptSlot</Name>
				<Source><![CDATA[
    public static void deleteReserveApptSlot(RecId _apptRecId)
    {
        HMResourceSchedulingAppointment appt;
        ttsBegin;
        select forupdate appt
        where appt.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Reserved
        && appt.RecId == _apptRecId;
        if(appt)
        {
            appt.AppointmentStatus = HMResourceSchedulingAppointmentStatus::Cancelled;
            appt.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTimeSlotOverlappingForWeekPlan</Name>
				<Source><![CDATA[
    public boolean checkTimeSlotOverlappingForWeekPlan(int _week, int _year, recid _weekPlan, recid _planningObjectRecId)
    {
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlanLocal;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlanLocal;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlanLocal;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItemLocal;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlanLocalForCurrent;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItemLocalForCurrent;
    
        //str message = "Day plan for %1 overlaps with the time slot for the Physician at the Organizational unit  = %2 and Building unit = %3";
        boolean ret = true;
    
        RecId dayPlan1 = this.getDayPlan(_weekPlan, 1);
        RecId dayPlan2 = this.getDayPlan(_weekPlan, 2);
        RecId dayPlan3 = this.getDayPlan(_weekPlan, 3);
        RecId dayPlan4 = this.getDayPlan(_weekPlan, 4);
        RecId dayPlan5 = this.getDayPlan(_weekPlan, 5);
        RecId dayPlan6 = this.getDayPlan(_weekPlan, 6);
        RecId dayPlan7 = this.getDayPlan(_weekPlan, 7);
    
        RecId resource = HMResourceSchedulingPlanningObject::find(_planningObjectRecId).HMResourceMaster;
    
        while select * from hmResourceSchedulingPlanningObjectLocal
            join * from hmResourceSchedulingWeekPlanLocal
            join * from hmResourceSchedulingWeekDayPlanLocal
            order by hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingWeekPlan, hmResourceSchedulingWeekDayPlanLocal.Days
            where hmResourceSchedulingPlanningObjectLocal.RecId != _planningObjectRecId
            && hmResourceSchedulingPlanningObjectLocal.HMResourceMaster == resource
            && hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingWeekPlanLocal.HMResourceSchedulingPlanningObject
            && hmResourceSchedulingWeekPlanLocal.WeekNumber == _week
            && (hmResourceSchedulingWeekPlanLocal.FromYear <= _year && hmResourceSchedulingWeekPlanLocal.ToYear >= _year)
            && hmResourceSchedulingWeekPlanLocal.RecId == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingWeekPlan
        {
            if(dayPlan1 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 1)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan1
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan2 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 2)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan2
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan3 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 3)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan3
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan4 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 4)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan4
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime < hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan5 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 5)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan5
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan6 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 6)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan6
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan7 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 7)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan7
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime < hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(ret == false)
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTimeSlotOverlappingForCalendarWeek</Name>
				<Source><![CDATA[
    public boolean checkTimeSlotOverlappingForCalendarWeek(int _week, int _year, recid _weekPlan, recid _planningObjectRecId)
    {
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlanLocal;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlanLocal;
        HMResourceSchedulingWeekPlanToCalender          hmResourceSchedulingWeekPlanToCalenderLocal;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlanLocal;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItemLocal;
        HMResourceSchedulingDayPlan                     hmResourceSchedulingDayPlanLocalForCurrent;
        HMResourceSchedulingDayPlanItem                 hmResourceSchedulingDayPlanItemLocalForCurrent;
    
        //str message = "Day plan for %1 overlaps with the time slot for the Physician at the Organizational unit  = %2 and Building unit = %3";
        boolean ret = true;
    
        RecId dayPlan1 = this.getDayPlan(_weekPlan, 1);
        RecId dayPlan2 = this.getDayPlan(_weekPlan, 2);
        RecId dayPlan3 = this.getDayPlan(_weekPlan, 3);
        RecId dayPlan4 = this.getDayPlan(_weekPlan, 4);
        RecId dayPlan5 = this.getDayPlan(_weekPlan, 5);
        RecId dayPlan6 = this.getDayPlan(_weekPlan, 6);
        RecId dayPlan7 = this.getDayPlan(_weekPlan, 7);
    
        RecId resource = HMResourceSchedulingPlanningObject::find(_planningObjectRecId).HMResourceMaster;
    
        while select * from hmResourceSchedulingPlanningObjectLocal
            join * from hmResourceSchedulingWeekPlanLocal
            join * from hmResourceSchedulingWeekDayPlanLocal
            join * from hmResourceSchedulingWeekPlanToCalenderLocal
            order by hmResourceSchedulingWeekPlanToCalenderLocal.HMResourceSchedulingWeekPlan, hmResourceSchedulingWeekDayPlanLocal.Days
            where hmResourceSchedulingPlanningObjectLocal.RecId != _planningObjectRecId
            && hmResourceSchedulingPlanningObjectLocal.HMResourceMaster == resource
            && hmResourceSchedulingPlanningObjectLocal.RecId == hmResourceSchedulingWeekPlanLocal.HMResourceSchedulingPlanningObject
            && hmResourceSchedulingWeekPlanLocal.RecId == hmResourceSchedulingWeekPlanToCalenderLocal.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalenderLocal.WeekNo == _week
            && hmResourceSchedulingWeekPlanToCalenderLocal.YearNo == _year
            && hmResourceSchedulingWeekPlanLocal.RecId == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingWeekPlan
        {
            if(dayPlan1 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 1)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan1
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan2 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 2)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan2
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan3 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 3)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan3
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan4 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 4)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan4
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime < hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan5 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 5)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan5
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan6 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 6)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan6
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime <  hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(dayPlan7 != 0 && hmResourceSchedulingWeekDayPlanLocal.Days == 7)
            {
                select * from hmResourceSchedulingDayPlanLocal
                    join * from hmResourceSchedulingDayPlanItemLocal
                    where hmResourceSchedulingDayPlanLocal.RecId  == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan
                    && hmResourceSchedulingDayPlanLocal.RecId == hmResourceSchedulingDayPlanItemLocal.HMResourceSchedulingDayPlan;
    
                select * from hmResourceSchedulingDayPlanLocalForCurrent
                    join * from hmResourceSchedulingDayPlanItemLocalForCurrent
                    where hmResourceSchedulingDayPlanLocalForCurrent.RecId  == dayPlan7
                    && hmResourceSchedulingDayPlanLocalForCurrent.RecId == hmResourceSchedulingDayPlanItemLocalForCurrent.HMResourceSchedulingDayPlan;
    
                if(hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime == hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime == hmResourceSchedulingDayPlanItemLocal.EndTime)
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime <  hmResourceSchedulingDayPlanItemLocal.EndTime) || (hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime > hmResourceSchedulingDayPlanItemLocal.StartTime && hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime < hmResourceSchedulingDayPlanItemLocal.EndTime))
                {
                    ret = false;
                }
                else if((hmResourceSchedulingDayPlanItemLocal.StartTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.StartTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime) || (hmResourceSchedulingDayPlanItemLocal.EndTime > hmResourceSchedulingDayPlanItemLocalForCurrent.StartTime && hmResourceSchedulingDayPlanItemLocal.EndTime <  hmResourceSchedulingDayPlanItemLocalForCurrent.EndTime))
                {
                    ret = false;
                }
    
                if(ret == false)
                {
                    orgUnit = HMOrganizationalUnit::find(hmResourceSchedulingPlanningObjectLocal.HMOrganizationalUnit).Description;
                    buildUnitl = HMBuildingUnit::find(hmResourceSchedulingPlanningObjectLocal.HMBuildingUnit).Description;
                }
            }
    
            if(ret == false)
            {
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        //todo: ax7 uncomment after moving all appointment objects
        
        HMResourceSchedulingHelper  hmResourceSchedulingHelperObject=new HMResourceSchedulingHelper();
        Object                      formRunObject;
        FormRun                     formRun;
        
        HMResourceSchedulingAppointment     hmResourceSchedulingAppointment;
        FormDataSource              fds;
        HMResourceSchedulingAppointmentInvent       hmResourceSchedulingAppointmentInvent;
        boolean ret;
        DialogButton                            dialogButton;
    
        if(_args.menuItemName()==menuitemActionStr(HMResourceSchedulingGenerateCalenderWeek))
        {
            if(hmResourceSchedulingHelperObject.generateCalenderWeek(_args.record()))
            {
                formRun = _args.caller().owner();
    
                if(formHasMethod(formRun,identifierstr(updateWeekPlanToCalenderGrid)))
                {
                    formRunObject = formRun;
                    formRunObject.updateWeekPlanToCalenderGrid();
                }
            }
            else
            {
                error("@MAZ1731");
            }
        }
       
        else if(_args.menuItemName() == menuitemActionStr(HMResourceSchedulingConfirmForceBookAppt))
        {
            hmResourceSchedulingHelperObject.confirmForceBookAppointment(_args.record().RecId);
            formRun = _args.caller();
            if(formHasMethod(formRun,identifierStr(refreshGrid)))
            {
                _args.caller().refreshGrid();
            }
        }
        else if(_args.menuItemName()==menuitemActionStr(HMAppointmentChartPrepare))
        {
            select forUpdate hmResourceSchedulingAppointment
                where hmResourceSchedulingAppointment.RecId == _args.record().RecId;
    
            if(hmResourceSchedulingAppointment.RecId)
            {
                ttsBegin;
    
                hmResourceSchedulingAppointment.ChartPrepared = !hmResourceSchedulingAppointment.ChartPrepared;
                hmResourceSchedulingAppointment.update();
                if(hmResourceSchedulingAppointment.ChartPrepared)
                {
                    info("@MAZ11544");
                }
    
                ttsCommit;
    
                formRun = _args.caller().owner();
    
                if(formHasMethod(formRun,identifierstr(refreshUnRegGrid)))
                {
                    formRunObject = formRun;
                    formRunObject.refreshUnRegGrid();
                }
            }
            else
            {
                error("@MAZ11545");
            }
        }
        else if(_args.menuItemName()==menuitemActionStr(HMAppointmentExamCodesExpand))
        {
            dialogButton = Box::yesNo("@MAZ11548", DialogButton::Yes, "@SYS301622");
            if (dialogButton == DialogButton::Yes)
            {
                try
                {
                    fds = FormDataUtil::getFormDataSource(_args.record());
    
                    ttsBegin;
    
                    for (hmResourceSchedulingAppointmentInvent = fds.getFirst(true) ? fds.getFirst(true) : fds.cursor(); hmResourceSchedulingAppointmentInvent; hmResourceSchedulingAppointmentInvent = fds.getNext())
                    {
                        hmResourceSchedulingHelperObject.expandProtocolServices(hmResourceSchedulingAppointmentInvent);
                    }
    
                    ttsCommit;
                    ret = true;
                }
                catch
                {
                    ret = false;
                }
    
                if(ret)
                {
                    fds.executeQuery();
                   
                }
                else
                {
                    error("@MAZ11547");
                }
            }
        }
        /*
        else if(_args.menuItemName()==menuitemActionStr(HMAppointmentResendEmail))
        {
            HMEmailGeneration::emailBookingDetails(_args.record().RecId, true);
    
            fds = FormDataUtil::getFormDataSource(_args.record());
    
            fds.executeQuery();
        }
        */
        else if(_args.menuItemName()==menuitemActionStr(HMResourceSchedulingUndeclineService))
        {
            dialogButton = Box::yesNo("@MAZ12272", DialogButton::Yes, "@SYS301622");
            if (dialogButton == DialogButton::Yes)
            {
                HMResourceSchedulingHelper::undeclineService(_args.record().RecId);
    
                fds = FormDataUtil::getFormDataSource(_args.record());
    
                fds.research(true);
            }
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>undeclineService</Name>
				<Source><![CDATA[
    public static boolean undeclineService(RecId _apptServiceRecId)
    {
        HMResourceSchedulingAppointmentInvent   apptInvent;
        try
        {
            ttsBegin;
            apptInvent = HMResourceSchedulingAppointmentInvent::find(_apptServiceRecId,true);
            apptInvent.HMServiceStatus = HMServiceStatus::NotStarted;
            apptInvent.ServiceSubStatus = '';
            apptInvent.update();
            ttsCommit;
            return true;
        }
        catch
        {
            warning("@MAZ11514");
            return false;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCalenderWeekYearExist</Name>
				<Source><![CDATA[
    private boolean checkCalenderWeekYearExist(int _week, int _year, recid _planningObjectRecId)
    {
        HMResourceSchedulingWeekPlan                hmResourceSchedulingWeekPlan;
        HMResourceSchedulingWeekPlanToCalender      hmResourceSchedulingWeekPlanToCalender;
    
        select count(recId) from hmResourceSchedulingWeekPlan
            join * from  hmResourceSchedulingWeekPlanToCalender
            where hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject==_planningObjectRecid
            && hmResourceSchedulingWeekPlan.RecId == hmResourceSchedulingWeekPlanToCalender.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekPlanToCalender.WeekNo == _week
            && hmResourceSchedulingWeekPlanToCalender.YearNo == _year;
    
        if(hmResourceSchedulingWeekPlan.RecId > 0)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandProtocolServices</Name>
				<Source><![CDATA[
    public void expandProtocolServices(HMResourceSchedulingAppointmentInvent _hmResourceSchedulingAppointmentInvent)
    {
        HMResourceSchedulingAppointmentInvent   hmResourceSchedulingAppointmentInvent;
        RecordInsertList                        hmResourceSchedulingAppointmentInventList = new RecordInsertList(tableNum(HMResourceSchedulingAppointmentInvent));
        InventTable inventTable;
        HMInventTable                           hmInventTable;
        HMResourceSchedulingPlanningObject      planObject;
        HMResourceSchedulingAppointment         appt;
        HMResourceMaster                        resourceMaster;
        VendAccount                             vendAccount;
        RecId                                   workerRecId,resourceRecId;
        BOM         bomTable;
        BOMVersion  bomVersion;
    
        inventTable = inventTable::find(_hmResourceSchedulingAppointmentInvent.InventTable);
    
        select * from resourceMaster
        join planObject
        join appt
        where resourceMaster.recid == planObject.HMResourceMaster
        && appt.HMResourceSchedulingPlanningObject == planObject.RecId
        && appt.RecId == _hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment;
    
        if(resourceMaster)
        {
            resourceRecId = resourceMaster.RecId;
            if(resourceMaster.type == HMResourceType::Vendor)
            {
                vendAccount = VendTable::findRecId(resourceMaster.RefRecId).AccountNum;
            }
            else if(resourceMaster.type == HMResourceType::Employee)
            {
                workerRecId = resourceMaster.RefRecId;
            }
        }
        if(inventTable.PmfProductType == PmfProductType::BOM)
        {
            select firstonly BOMId,RecId from bomVersion
            where bomVersion.ItemId == inventTable.ItemId
            && bomVersion.Active
            && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    
            if (bomVersion.RecId)
            {
                ttsBegin;
    
                While select ItemId from bomTable
                    where bomTable.BOMId == bomVersion.BOMId
                    join inventTable
                    where bomTable.ItemId == inventTable.ItemId
                {
                    select count(RecId) from hmResourceSchedulingAppointmentInvent
                        where hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment
                        && hmResourceSchedulingAppointmentInvent.InventTable == bomTable.ItemId
                        && hmResourceSchedulingAppointmentInvent.HMServiceStatus != HMServiceStatus::Decline;
    
                    if(hmResourceSchedulingAppointmentInvent.RecId > 0)
                    {
                        error(strFmt("@MAZ11549", bomTable.ItemId));
                        ttsAbort;
                        throw Exception::Error;
                    }
    
                    hmResourceSchedulingAppointmentInvent.clear();
    
                    hmResourceSchedulingAppointmentInvent.initValue();
                    hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment = _hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment;
                    hmResourceSchedulingAppointmentInvent.PatientResponsibility = _hmResourceSchedulingAppointmentInvent.PatientResponsibility;
                    hmResourceSchedulingAppointmentInvent.InventTable = bomTable.ItemId;
                    hmResourceSchedulingAppointmentInvent.Protocol = _hmResourceSchedulingAppointmentInvent.InventTable;
                    hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId = _hmResourceSchedulingAppointmentInvent.RelatedAppointmentRecId;
                    if(HMInventTable::findByItemId(hmResourceSchedulingAppointmentInvent.InventTable).MDactivity == NoYes::Yes)
                    {
                        hmResourceSchedulingAppointmentInvent.VendTable = vendAccount;
                        hmResourceSchedulingAppointmentInvent.HcmWorker = workerRecId;
                        hmResourceSchedulingAppointmentInvent.HMResourceMaster = resourceRecId;
                    }
                    hmResourceSchedulingAppointmentInventList.add(hmResourceSchedulingAppointmentInvent);
                }
                /*
                hmResourceSchedulingAppointmentInvent.skipDeleteActions(true);
                 delete_from hmResourceSchedulingAppointmentInvent
                    where hmResourceSchedulingAppointmentInvent.RecId == _hmResourceSchedulingAppointmentInvent.RecId;
                 */
                 select forupdate *from hmResourceSchedulingAppointmentInvent
                    where hmResourceSchedulingAppointmentInvent.RecId == _hmResourceSchedulingAppointmentInvent.RecId;
                 if(hmResourceSchedulingAppointmentInvent)
                {
                    hmResourceSchedulingAppointmentInvent.skipDeleteActions(true);
                    hmResourceSchedulingAppointmentInvent.delete();
                }
                
                hmResourceSchedulingAppointmentInventList.insertDatabase();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCalenderWeek</Name>
				<Source><![CDATA[
    private boolean generateCalenderWeek(HMResourceSchedulingWeekPlan _hmResourceSchedulingWeekPlan)
    {
        HMResourceSchedulingWeekPlanToCalender  hmResourceSchedulingWeekPlanToCalenderlocal;
        HMResourceSchedulingWeekPlan            hmResourceSchedulingWeekPlanlocal;
        int         i;
        boolean     flag=false;
    
        if(_hmResourceSchedulingWeekPlan.RecId)
        {
            for(i=_hmResourceSchedulingWeekPlan.FromYear;i<=_hmResourceSchedulingWeekPlan.ToYear;i++)
            {
                try
                {
                    //ttsBegin;
    
                    if(this.checkCalenderWeekYearExist(_hmResourceSchedulingWeekPlan.WeekNumber, i,_hmResourceSchedulingWeekPlan.HMResourceSchedulingPlanningObject))
                    {
                        hmResourceSchedulingWeekPlanToCalenderlocal.HMResourceSchedulingWeekPlan=_hmResourceSchedulingWeekPlan.RecId;
                        hmResourceSchedulingWeekPlanToCalenderlocal.WeekNo=_hmResourceSchedulingWeekPlan.WeekNumber;
                        hmResourceSchedulingWeekPlanToCalenderlocal.YearNo=i;
                        if(hmResourceSchedulingWeekPlanToCalenderlocal.validateWrite())
                        {
                            hmResourceSchedulingWeekPlanToCalenderlocal.insert();
                            //ttsCommit;
    
                            flag=true;
                        }
                    }
                    else
                    {
                        throw error(strfmt("@MAZ1743",_hmResourceSchedulingWeekPlan.WeekNumber,i));
                    }
                }
                catch
                {
                    throw error(strfmt("@MAZ1743",_hmResourceSchedulingWeekPlan.WeekNumber,i));
                }
            }
    
    
            if(flag)
            {
                ttsBegin;
                hmResourceSchedulingWeekPlanlocal = HMResourceSchedulingWeekPlan::find(_hmResourceSchedulingWeekPlan.RecId,true);
                hmResourceSchedulingWeekPlanlocal.IsGenerated=NoYes::Yes;
                hmResourceSchedulingWeekPlanlocal.update();
                ttsCommit;
            }
    
        }
        else
        {
            flag=false;
        }
    
        return flag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDayPlan</Name>
				<Source><![CDATA[
    private RecId getDayPlan(RecId _weekPlan, int _day)
    {
        HMResourceSchedulingWeekPlan                    hmResourceSchedulingWeekPlanLocal;
        HMResourceSchedulingWeekDayPlan                 hmResourceSchedulingWeekDayPlanLocal;
    
        select * from hmResourceSchedulingWeekPlanLocal
            join * from hmResourceSchedulingWeekDayPlanLocal
            where hmResourceSchedulingWeekPlanLocal.RecId == _weekPlan
            && hmResourceSchedulingWeekPlanLocal.RecId == hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingWeekPlan
            && hmResourceSchedulingWeekDayPlanLocal.Days == _day;
    
        return hmResourceSchedulingWeekDayPlanLocal.HMResourceSchedulingDayPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNoShowCancelExamCode</Name>
				<Source><![CDATA[
    public void addNoShowCancelExamCode(HMResourceSchedulingAppointment _appointment, ItemId _examCode)
    {
        HMResourceSchedulingAppointmentInvent apptInvent;
        HMServiceStatus HMServiceStatus;
        HMResourceSchedulingAppointment appt;
        try
        {
            if(_appointment.PrimaryAppointment == YesNo::No)
            {
                select * from appt
                where appt.HMPatientVisit == _appointment.HMPatientVisit
                && appt.PrimaryAppointment == YesNo::Yes;
            }
            else
            {
                appt = _appointment;
            }
    
            if(_appointment.AppointmentStatus == HMResourceSchedulingAppointmentStatus::NoShow)
            {
                HMServiceStatus = HMServiceStatus::NoShow;
            }
            else if(_appointment.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Cancelled)
            {
                HMServiceStatus = HMServiceStatus::Cancelled;
            }
            else
            {
                return;
            }
            ttsBegin;
            if(_appointment.PrimaryAppointment == YesNo::Yes)
            {
                apptInvent.skipDataMethods(true);
                update_recordSet apptInvent
                    setting HMServiceStatus = HMServiceStatus
                    where apptInvent.HMResourceSchedulingAppointment == appt.RecId;
            }
            else
            {
                apptInvent.skipDataMethods(true);
                update_recordSet apptInvent
                    setting HMServiceStatus = HMServiceStatus
                    where apptInvent.HMResourceSchedulingAppointment == appt.RecId
                    && apptInvent.RelatedAppointmentRecId == _appointment.RecId;
            }
            
            apptInvent.clear();
            apptInvent.initValue();
            apptInvent.InventTable = _examCode;
            apptInvent.PatientResponsibility = this.payerIsClient(appt) ? HMPatientPaymentResponsibility::Client : HMPatientPaymentResponsibility::Patient;
            apptInvent.HMResourceSchedulingAppointment = appt.RecId;
            if(_appointment.PrimaryAppointment == YesNo::No)
            {
                apptInvent.RelatedAppointmentRecId = _appointment.RecId;
            }
            apptInvent.insert();
            ttsCommit;
            info(strFmt("@MAZ12340",enum2str(HMServiceStatus),_examCode ));
        }
        catch
        {
            error("@MAZ12339");
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandAppointmentProtocols</Name>
				<Source><![CDATA[
    public boolean expandAppointmentProtocols(RecId _appointmentRecId)
    {
        boolean ret;
        HMResourceSchedulingAppointmentInvent       hmResourceSchedulingAppointmentInvent;
    
        try
        {
            while select * from hmResourceSchedulingAppointmentInvent
                where hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _appointmentRecId
            {
                this.expandProtocolServices(hmResourceSchedulingAppointmentInvent);
            }
    
            ret = true;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payerIsClient</Name>
				<Source><![CDATA[
    private boolean payerIsClient(HMResourceSchedulingAppointment _appt)
    {
        HMPatientPaymentResponsibility responsibility;
        hmResourceSchedulingPlanningObject  hmResourceSchedulingPlanningObject;
        CustTable                           custTable;
        boolean                             cashSales;
    
        responsibility = HMPatientPaymentResponsibility::Client;
        select cashSales from custTable where custTable.AccountNum == _appt.Client;
        cashSales = custTable.CashSales;
        if(cashSales)
        {
            responsibility = HMPatientPaymentResponsibility::Patient;
        }
    
        if(responsibility == HMPatientPaymentResponsibility::Client)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCancellationDate</Name>
				<Source><![CDATA[
    public static date getCancellationDate(RecId _appointmentRecId)
    {
        date                                cancellationDate;
        HMOrganizationalUnit                hmOrganizationalUnit;
        HMResourceSchedulingAppointment     hmResourceSchedulingAppointment;
        int i;
    
        select RecId, AppointmentDate from hmResourceSchedulingAppointment
            where hmResourceSchedulingAppointment.RecId == _appointmentRecId
            join CancellationDeadlineDays from hmOrganizationalUnit
                where hmOrganizationalUnit.RecId == hmResourceSchedulingAppointment.HMOrganizationalUnitServiceLocation;
    
        if(hmResourceSchedulingAppointment.RecId)
        {
            cancellationDate = hmResourceSchedulingAppointment.AppointmentDate;
    
            i = 1;
    
            while(i <= hmOrganizationalUnit.CancellationDeadlineDays)
            {
                if(HMResourceSchedulingHelper::isWeekday(cancellationDate -1))
                {
                    cancellationDate = cancellationDate - 1;
                    i++;
                }
                else
                {
                    cancellationDate = cancellationDate - 1;
                }
            }
        }
    
        return cancellationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalAppointmentType</Name>
				<Source><![CDATA[
    public static RecId getOrignalAppointmentType(RecId _scheduleRecId)
    {
        HMResourceSchedulingTypeCode    hmResourceSchedulingTypeCode;
        RecId actualRecId;
    
        select AppointmentSubType, RecId, ParentAppointmentType from hmResourceSchedulingTypeCode
            where hmResourceSchedulingTypeCode.RecId == _scheduleRecId;
    
        if(hmResourceSchedulingTypeCode.AppointmentSubType == HMAppointmentSubType::Searchable)
        {
            actualRecId = hmResourceSchedulingTypeCode.RecId;
        }
        else if(hmResourceSchedulingTypeCode.AppointmentSubType == HMAppointmentSubType::Open)
        {
            actualRecId = hmResourceSchedulingTypeCode.ParentAppointmentType;
        }
    
        return actualRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferAppointments</Name>
				<Source><![CDATA[
    public static boolean transferAppointments(List _list, HMAppointmentConfirmationStatus _confirmStatus, HMAppointmentCancellationStatus _cancelStatus, boolean emailToBeSent = true)
    {
        HMResourceSchedulingAppointment apptSource,apptDestination;
        ListEnumerator                  listEnumerator;
        RecId                           newEncounterRecId;
        container                       apptContainer;
        HMResourceSchedulingPlanningObject  hmResourceSchedulingPlanningObject;
        HMOrganizationalUnit            HMOrganizationalUnit;
        HMAppoinmentLog                 HMAppoinmentLog;
        HMTransferAppointmentClass      HMTransferAppointmentClass;
        try
        {
            ttsBegin;
            HMTransferAppointmentClass = new HMTransferAppointmentClass();
            HMTransferAppointmentClass.startProcess(_list,_confirmStatus,_cancelStatus,emailToBeSent);
            ttsCommit;
    
            info("@MAZ9670");
            return true;
        }
        catch
        {
            warning("@MAZ11524");
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPatientTimeOverlapping</Name>
				<Source><![CDATA[
    public static boolean checkPatientTimeOverlapping(date _appointmentDate, TimeOfDay _appointmentTime, RecId _resourceRecId, RecId _scheduleTypeRecId, RecId _appointmentRecId, Recid _hmpatientRecId)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean             ret = true;
        TimeOfDay           newAppointmentEndTime;
        date newAppointmentEndDate;
        utcDateTime newAppointmentEnd,oldAppointmentEnd,newAppointmentStart,oldAppointmentStart;
    
        newAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appointmentDate,_appointmentTime),HMResourceMasterHelper::getDurationInMinutes(_resourceRecId,_scheduleTypeRecId));
    
        newAppointmentStart = DateTimeUtil::newDateTime(_appointmentDate,_appointmentTime);
    
        newAppointmentEndTime = DateTimeUtil::time(newAppointmentEnd);
        newAppointmentEndDate = DateTimeUtil::date(newAppointmentEnd);
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
            where hmResourceSchedulingAppointmentLocal.HMPatient == _hmpatientRecId
            && hmResourceSchedulingAppointmentLocal.RecId != _appointmentRecId
            && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            && ((hmResourceSchedulingAppointmentLocal.AppointmentDate >= _appointmentDate && hmResourceSchedulingAppointmentLocal.AppointmentDate <= newAppointmentEndDate)
            ||(hmResourceSchedulingAppointmentLocal.AppointmentEndDate >= _appointmentDate && hmResourceSchedulingAppointmentLocal.AppointmentEndDate <= newAppointmentEndDate)
            || (_appointmentDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appointmentDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            ||(newAppointmentEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && newAppointmentEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate))
        {
            if(newAppointmentStart == oldAppointmentStart)
            {
                error("@MAZ12014");
                ret = false;
                break;
            }
    
            oldAppointmentStart = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentDate,hmResourceSchedulingAppointmentLocal.AppointmentTime);
            oldAppointmentEnd = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentEndDate,hmResourceSchedulingAppointmentLocal.AppointmentEndTime);
    
            if(oldAppointmentStart == newAppointmentStart)
            {
                continue;
            }
    
            if((oldAppointmentStart > newAppointmentStart && oldAppointmentStart < newAppointmentEnd)
            ||(oldAppointmentEnd > newAppointmentStart && oldAppointmentEnd < newAppointmentEnd)
            || (newAppointmentStart > oldAppointmentStart && newAppointmentStart < oldAppointmentEnd)
            ||(newAppointmentEnd > oldAppointmentStart && newAppointmentEnd < oldAppointmentEnd))
            {
                error("@MAZ12012");
                ret = false;
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPhysicianTimeOverlapping</Name>
				<Source><![CDATA[
    public static boolean checkPhysicianTimeOverlapping(date _appointmentDate, TimeOfDay _appointmentTime, RecId _resourceRecId, RecId _scheduleTypeRecId, RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointment                 hmResourceSchedulingAppointmentLocal;
        HMResourceSchedulingPlanningObject              hmResourceSchedulingPlanningObjectLocal;
        boolean             ret = true;
        TimeOfDay           newAppointmentEndTime;
        date newAppointmentEndDate;
        utcDateTime newAppointmentEnd,oldAppointmentEnd,newAppointmentStart,oldAppointmentStart;
    
        newAppointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_appointmentDate,_appointmentTime),HMResourceMasterHelper::getDurationInMinutes(_resourceRecId,_scheduleTypeRecId));
    
        newAppointmentStart = DateTimeUtil::newDateTime(_appointmentDate,_appointmentTime);
    
        newAppointmentEndTime = DateTimeUtil::time(newAppointmentEnd);
        newAppointmentEndDate = DateTimeUtil::date(newAppointmentEnd);
    
        while select * from hmResourceSchedulingAppointmentLocal
            join * from hmResourceSchedulingPlanningObjectLocal
            where hmResourceSchedulingPlanningObjectLocal.HMResourceMaster == _resourceRecId
            && hmResourceSchedulingAppointmentLocal.RecId != _appointmentRecId
            && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed)
            && hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == hmResourceSchedulingPlanningObjectLocal.RecId
            && hmResourceSchedulingPlanningObjectLocal.CaseType == HMCaseType::OutPatient
            && hmResourceSchedulingAppointmentLocal.HMAppointmentType != HMAppointmentType::Admission
            && ((hmResourceSchedulingAppointmentLocal.AppointmentDate >= _appointmentDate && hmResourceSchedulingAppointmentLocal.AppointmentDate <= newAppointmentEndDate)
            ||(hmResourceSchedulingAppointmentLocal.AppointmentEndDate >= _appointmentDate && hmResourceSchedulingAppointmentLocal.AppointmentEndDate <= newAppointmentEndDate)
            || (_appointmentDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && _appointmentDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate)
            ||(newAppointmentEndDate >= hmResourceSchedulingAppointmentLocal.AppointmentDate && newAppointmentEndDate <= hmResourceSchedulingAppointmentLocal.AppointmentEndDate))
        {
            oldAppointmentStart = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentDate,hmResourceSchedulingAppointmentLocal.AppointmentTime);
            oldAppointmentEnd = DateTimeUtil::newDateTime(hmResourceSchedulingAppointmentLocal.AppointmentEndDate,hmResourceSchedulingAppointmentLocal.AppointmentEndTime);
    
            if(oldAppointmentStart == newAppointmentStart)
            {
                continue;
            }
    
            if((oldAppointmentStart > newAppointmentStart && oldAppointmentStart < newAppointmentEnd)
                ||(oldAppointmentEnd > newAppointmentStart && oldAppointmentEnd < newAppointmentEnd)
                || (newAppointmentStart > oldAppointmentStart && newAppointmentStart < oldAppointmentEnd)
                ||(newAppointmentEnd > oldAppointmentStart && newAppointmentEnd < oldAppointmentEnd))
            {
                error("@MAZ12011");
                ret = false;
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelatedAppointment</Name>
				<Source><![CDATA[
    public static boolean createRelatedAppointment(HMResourceSchedulingAppointment _hmResourceSchedulingAppointment, recid _organizationalUnitRecId,
                            HMResourceSchedulingOpenTimeSlotsTmp _hmResourceSchedulingOpenTimeSlotsTmp, HMAppointmentInventTmp _hmAppointmentInventTmp)
    {
        HMResourceSchedulingAppointment             hmResourceSchedulingAppointment, hmResourceSchedulingAppointmentCheck;
        HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
        HMNumberSequenceHandler                     numberSeq;
        boolean                                     ret;
        int                                         priorityNumber;
        utcDateTime                                 appointmentEnd;
        HMAppoinmentLog                             hmAppoinmentLog;
    
        try
        {
            ttsBegin;
            hmResourceSchedulingOpenTimeSlotsTmp = _hmResourceSchedulingOpenTimeSlotsTmp;
            while select * from hmResourceSchedulingOpenTimeSlotsTmp
                where hmResourceSchedulingOpenTimeSlotsTmp.AppointmentRecId == 0
            {
                hmResourceSchedulingAppointment.clear();
                numberSeq = new HMNumberSequenceHandler();
    
                hmResourceSchedulingAppointment.HMPatientVisit = _hmResourceSchedulingAppointment.HMPatientVisit;
                hmResourceSchedulingAppointment.AppointmentNumber = numberSeq.generateNumberSequence(HMOrganizationalUnit::getOperatingUnitRecid(_organizationalUnitRecId), extendedtypenum(HMAppointmentNumber));
    
                if (hmResourceSchedulingAppointment.AppointmentNumber  == '')
                {
                    throw error(strFmt("@MAZ8512","@MAZ8923","@MAZ11212"));
                }
    
                hmResourceSchedulingAppointment.HMPatient                            = _hmResourceSchedulingAppointment.HMPatient;
                hmResourceSchedulingAppointment.HMResourceSchedulingTypeCode         = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode;
                hmResourceSchedulingAppointment.HMResourceSchedulingPlanningObject   = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingPlanningObject;
                hmResourceSchedulingAppointment.AppointmentDate                      = hmResourceSchedulingOpenTimeSlotsTmp.Date;
                hmResourceSchedulingAppointment.AppointmentTime                      = hmResourceSchedulingOpenTimeSlotsTmp.Time;
                hmResourceSchedulingAppointment.HMOrganizationalUnitServiceLocation  = hmResourceSchedulingOpenTimeSlotsTmp.HMOrganizationalUnitSubClinic;
                hmResourceSchedulingAppointment.HMBookingOrigin                      = _hmResourceSchedulingAppointment.HMBookingOrigin;
                //hmResourceSchedulingAppointment.HMAppointmentChannel                 = _hmResourceSchedulingAppointment.HMAppointmentChannel;
                hmResourceSchedulingAppointment.BOMVersion                           = _hmResourceSchedulingAppointment.BOMVersion;
                hmResourceSchedulingAppointment.Client                               = _hmResourceSchedulingAppointment.Client;
                hmResourceSchedulingAppointment.IsSpecificConsultant                 = _hmResourceSchedulingAppointment.IsSpecificConsultant;
                hmResourceSchedulingAppointment.RescheduleWithoutConfirmation        = _hmResourceSchedulingAppointment.RescheduleWithoutConfirmation;
                hmResourceSchedulingAppointment.PhysicalChartRequired                = _hmResourceSchedulingAppointment.PhysicalChartRequired;
                hmResourceSchedulingAppointment.PrimaryAppointment                   = YesNo::No;
                appointmentEnd = DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date,hmResourceSchedulingOpenTimeSlotsTmp.Time),HMResourceMasterHelper::getDurationInMinutes(hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster, hmResourceSchedulingOpenTimeSlotsTmp.HMResourceSchedulingTypeCode));
    
                hmResourceSchedulingAppointment.AppointmentEndTime  = DateTimeUtil::time(appointmentEnd);
                hmResourceSchedulingAppointment.AppointmentEndDate  = DateTimeUtil::date(appointmentEnd);
                hmResourceSchedulingAppointment.ChiefComplaint      = _hmResourceSchedulingAppointment.ChiefComplaint;
    
                hmResourceSchedulingAppointment.Notes               = _hmResourceSchedulingAppointment.Notes;
                hmResourceSchedulingAppointment.PatientName         = _hmResourceSchedulingAppointment.PatientName;
                hmResourceSchedulingAppointment.PatientContact      = _hmResourceSchedulingAppointment.PatientContact;
    
                hmResourceSchedulingAppointment.PONum = _hmResourceSchedulingAppointment.PONum;
                hmResourceSchedulingAppointment.EmployeeNum = _hmResourceSchedulingAppointment.EmployeeNum;
                hmResourceSchedulingAppointment.GOPNum = _hmResourceSchedulingAppointment.GOPNum;
                hmResourceSchedulingAppointment.RequestorContactPerson = _hmResourceSchedulingAppointment.RequestorContactPerson;
                hmResourceSchedulingAppointment.ReportSentContactPerson = _hmResourceSchedulingAppointment.ReportSentContactPerson;
                hmResourceSchedulingAppointment.ClientBillingLogisticsPostalAddress = _hmResourceSchedulingAppointment.ClientBillingLogisticsPostalAddress;
                hmResourceSchedulingAppointment.ClientReportLogisticsPostalAddres = _hmResourceSchedulingAppointment.ClientReportLogisticsPostalAddres;
                hmResourceSchedulingAppointment.CreditCardTokenRequired = _hmResourceSchedulingAppointment.CreditCardTokenRequired;
                hmResourceSchedulingAppointment.CreditCardToken = _hmResourceSchedulingAppointment.CreditCardToken;
                hmResourceSchedulingAppointment.RequestDate = _hmResourceSchedulingAppointment.RequestDate;
    
                hmResourceSchedulingAppointment.ForceBookingStatus = _hmResourceSchedulingAppointment.ForceBookingStatus;
                hmResourceSchedulingAppointment.ArrivalTime = hmResourceSchedulingOpenTimeSlotsTmp.ArrivalTime;
                hmResourceSchedulingAppointment.IsHotspot = hmResourceSchedulingOpenTimeSlotsTmp.IsHotspot;
                hmResourceSchedulingAppointment.PatientRequestor = _hmResourceSchedulingAppointment.PatientRequestor;
                hmResourceSchedulingAppointment.SendEmailTo = _hmResourceSchedulingAppointment.SendEmailTo;
    
                hmResourceSchedulingAppointment.HMWaitingList       = _hmResourceSchedulingAppointment.HMWaitingList;
                hmResourceSchedulingAppointment.AppointmentStatus   = _hmResourceSchedulingAppointment.AppointmentStatus;
                hmResourceSchedulingAppointment.HMAppointmentType   = _hmResourceSchedulingAppointment.HMAppointmentType;
                hmResourceSchedulingAppointment.HMConfirmationStatus = _hmResourceSchedulingAppointment.HMConfirmationStatus;
                if(hmResourceSchedulingAppointment.validateWrite())
                {
                    if(hmResourceSchedulingAppointment.isNewRecord())
                    {
                        hmResourceSchedulingAppointment.insert();
    
                        hmAppoinmentLog.HMResScheduleAppointment    = hmResourceSchedulingAppointment.RecId;
                        hmAppoinmentLog.HMAppointLogStatus          = HMResourceSchedulingAppointmentStatus::Confirmed;
                        hmAppoinmentLog.HMAppointLogDate            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                        hmAppoinmentLog.HMAppointLogTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                        hmAppoinmentLog.HMAppointLogNote            = hmResourceSchedulingAppointment.Notes;
                        hmAppoinmentLog.insert();
    
                        numberSeq.commitNewNumSeq();
                    }
                    else
                    {
                        hmResourceSchedulingAppointment.update();
    
                        select forUpdate hmAppoinmentLog
                            where hmAppoinmentLog.HMResScheduleAppointment == hmResourceSchedulingAppointment.RecId
                            && hmAppoinmentLog.HMAppointLogStatus == HMResourceSchedulingAppointmentStatus::Confirmed;
    
                        if(hmAppoinmentLog)
                        {
                            hmAppoinmentLog.HMResScheduleAppointment    = hmResourceSchedulingAppointment.RecId;
                            hmAppoinmentLog.HMAppointLogStatus          = HMResourceSchedulingAppointmentStatus::Confirmed;
                            hmAppoinmentLog.HMAppointLogDate            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogTime            = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());
                            hmAppoinmentLog.HMAppointLogNote            = hmResourceSchedulingAppointment.Notes;
                            hmAppoinmentLog.update();
                        }
                    }
                    while select forUpdate _hmAppointmentInventTmp
                    where _hmAppointmentInventTmp.AppointmentRecId == hmResourceSchedulingOpenTimeSlotsTmp.RecId
                    {
                        _hmAppointmentInventTmp.AppointmentRecid = hmResourceSchedulingAppointment.RecId;
                        _hmAppointmentInventTmp.AppointmentTableId = tableNum(hmResourceSchedulingAppointment);
                        _hmAppointmentInventTmp.update();
                    }
    
                    ret = true;
                }
                else
                {
                    throw Exception::Error;
                }
            }
    
            ttsCommit;
        }
        catch
        {
            numberSeq.deleteNewNumSeq();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillAppointmentExamsTmp</Name>
				<Source><![CDATA[
    public static HMAppointmentInventTmp fillAppointmentExamsTmp(HMAppointmentInventTmp apptInventTmp, HMResourceSchedulingAppointment HMResourceSchedulingAppointment)
    {
    
        BOM                                     bomTable;
        BOMVersion                              bomVersion;
        InventTable                             inventTable;
        HMResourceSchedulingAppointmentInvent   apptInvent;
        RecId                                   relatedAppointmentRecId,visitREcId;
        HMCaseTrans                             hMCaseTrans;
        if(HMResourceSchedulingAppointment.PrimaryAppointment == YesNo::No)
        {
            relatedAppointmentRecId = HMResourceSchedulingAppointment.RecId;
            visitREcId = HMResourceSchedulingAppointment.HMPatientVisit;
    
            select * from HMResourceSchedulingAppointment
            where HMResourceSchedulingAppointment.HMPatientVisit == visitREcId
            && HMResourceSchedulingAppointment.PrimaryAppointment == YesNo::Yes;
    
        }
    

        delete_from apptInventTmp;
        apptInventTmp.skipDeleteActions(true);
        while select * from apptInvent
            where apptInvent.HMResourceSchedulingAppointment == HMResourceSchedulingAppointment.RecId
        {
            if(relatedAppointmentRecId != 0)
            {
                if(apptInvent.RelatedAppointmentRecId != relatedAppointmentRecId)
                {
                    continue;
                }
            }
            select firstonly bomVersion
            where bomVersion.ItemId == apptInvent.InventTable
            //&& bomVersion.Active
            && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    
            if(inventTable::find(apptInvent.InventTable).PmfProductType == PmfProductType::BOM)
            {
                if (bomVersion.RecId)
                {
                    While select ItemId,HMCondition from bomTable
                        where bomTable.BOMId == bomVersion.BOMId
                        join inventTable
                        where bomTable.ItemId == inventTable.ItemId
                    {
                        apptInventTmp.clear();
                        apptInventTmp.ItemId = bomTable.ItemId;
                        apptInventTmp.ItemName = HMInventTableClass::showDescription(bomTable.ItemId);
                        apptInventTmp.ProtocolId = apptInvent.InventTable;
                        apptInventTmp.HMCondition = bomTable.HMCondition;
                        if(apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client)
                        {
                            apptInventTmp.ProtocolName = HMResourceSchedulingHelper::getProtocolName(HMResourceSchedulingAppointment.Client,apptInvent.InventTable);
                        }
                        else
                        {
                            apptInventTmp.ProtocolName = HMInventTableClass::showDescription(apptInvent.InventTable);
                        }
                        apptInventTmp.PatientResponsibility = apptInvent.PatientResponsibility;
                        apptInventTmp.HMServiceStatus = apptInvent.HMServiceStatus;
                        apptInventTmp.HMResourceSchedulingAppointmentInvent = apptInvent.RecId;
                        apptInventTmp.insert();
                    }
                }
            }
            else
            {
                select BillingStatus from hMCaseTrans
                where hMCaseTrans.HMResourceSchedulingAppointmentInvent == apptInvent.RecId;
                apptInventTmp.clear();
                apptInventTmp.ItemId = apptInvent.InventTable;
                apptInventTmp.ItemName = HMInventTableClass::showDescription(apptInvent.InventTable);
                apptInventTmp.PatientResponsibility = apptInvent.PatientResponsibility;
                apptInventTmp.HMServiceStatus = apptInvent.HMServiceStatus;
                apptInventTmp.HMResourceSchedulingAppointmentInvent = apptInvent.RecId;
                apptInventTmp.ProtocolId = apptInvent.Protocol;
                apptInventTmp.BillingStatus = hMCaseTrans.BillingStatus;
                if(apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Client)
                {
                    apptInventTmp.ProtocolName = HMResourceSchedulingHelper::getProtocolName(HMResourceSchedulingAppointment.Client,apptInvent.Protocol);
                }
                else
                {
                    apptInventTmp.ProtocolName = HMInventTableClass::showDescription(apptInvent.Protocol);
                }
                apptInventTmp.insert();
            }
        }
        return apptInventTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeMultiResourceAppt</Name>
				<Source><![CDATA[
    public static void storeMultiResourceAppt(HMResourceSchedulingOpenTimeSlotsTmp _source, HMResourceSchedulingOpenTimeSlotsTmp _target)
    {

        delete_from _target where _target.AppointmentRecId == 0;
        _target.skipDeleteActions(true);
        while select * from _source where _source.AppointmentRecId == 0
        {
            buf2Buf(_source,_target);
            _target.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreatePlanningObjectForInvAndPay</Name>
				<Source><![CDATA[
    public static RecId findOrCreatePlanningObjectForInvAndPay(RecId _clinicRecId)
    {
        RecId planningObjectRecId;
        HMOrganizationalUnit                HMOrganizationalUnit;
        HMOrganizationalBuildingUnit        HMOrganizationalBuildingUnit;
        HMResourceSchedulingPlanningObject  HMResourceSchedulingPlanningObject;
        try
        {
            select RecId from HMResourceSchedulingPlanningObject
            where HMResourceSchedulingPlanningObject.HMOrganizationalUnit == _clinicRecId
            && HMResourceSchedulingPlanningObject.CaseType == HMCaseType::InvoiceAndPay;
            if(HMResourceSchedulingPlanningObject)
            {
                planningObjectRecId = HMResourceSchedulingPlanningObject.RecId;
            }
            else
            {
                select Code,Description from HMOrganizationalUnit
                where HMOrganizationalUnit.recid == _clinicRecId;
    
                HMResourceSchedulingPlanningObject.clear();
                HMResourceSchedulingPlanningObject.Code = strFmt('InvPay%1',HMOrganizationalUnit.Code);
                HMResourceSchedulingPlanningObject.Description = strFmt('InvPay%1',HMOrganizationalUnit.Description);
                HMResourceSchedulingPlanningObject.StartDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                HMResourceSchedulingPlanningObject.EndDate = dateMax();
                HMResourceSchedulingPlanningObject.PlanningObjectStatus = AllowanceStatus::Active;
                HMResourceSchedulingPlanningObject.HMOrganizationalUnit = _clinicRecId;
                HMResourceSchedulingPlanningObject.CaseType = HMCaseType::InvoiceAndPay;
    
                select HMBuildingUnit from HMOrganizationalBuildingUnit
                where HMOrganizationalBuildingUnit.HMOrganizationalUnit == _clinicRecId;
                HMResourceSchedulingPlanningObject.HMBuildingUnit = HMOrganizationalBuildingUnit.HMBuildingUnit;
    
                HMResourceSchedulingPlanningObject.insert();
                planningObjectRecId = HMResourceSchedulingPlanningObject.RecId;
            }
            return planningObjectRecId;
        }
        catch
        {
            return 0;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressDescription</Name>
				<Source><![CDATA[
    public static HMNotes getAddressDescription(RecId _postalAddressRecId)
    {
        LogisticsPostalAddress      logisticsPostalAddress;
        LogisticsLocation           logisticsLocation;
        HMNotes ret;
    
        select Address from logisticsPostalAddress
            where logisticsPostalAddress.RecId == _postalAddressRecId
            join Description from logisticsLocation
                where logisticsLocation.RecId == logisticsPostalAddress.Location;
    
        if(logisticsLocation.Description)
        {
            ret = logisticsLocation.Description + '\n' + logisticsPostalAddress.Address;
        }
        else
        {
            ret = logisticsPostalAddress.Address;
        }
    
        return ret;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationRecId</Name>
				<Source><![CDATA[
    public static Recid getLocationRecId(Description _text)
    {
        hmOrganizationalUnit    hmOrganizationalUnit;
    
        select RecId from hmOrganizationalUnit
        where (hmOrganizationalUnit.FileLocationType == HMFileLocationType::Clinic)
        && hmOrganizationalUnit.Description == _text;
    
        return hmOrganizationalUnit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyDefaultPostalAddressByType</Name>
				<Source><![CDATA[
    public static RecId getPartyDefaultPostalAddressByType(RecId _party, LogisticsLocationRoleType _type)
    {
        DirPartyLocation        partyLocation;
        DirPartyLocationRole    partyLocationRole;
        LogisticsLocation       location;
        LogisticsLocationRole   locationRole;
        LogisticsPostalAddress  postalAddress;
    
    
        select count(RecId) from postalAddress
            exists join location
                where location.RecId == postalAddress.Location
            exists join locationRole
                where locationRole.Type  == _type
            exists join partyLocation
                where
                    partyLocation.Location == location.RecId &&
                    partyLocation.Party == _party
            exists join partyLocationRole
                where partyLocationRole.PartyLocation == partyLocation.RecId &&
                    partyLocationRole.LocationRole == locationRole.RecId;
    
        if(postalAddress.recid == 1)
        {
            select RecId from postalAddress
            exists join location
                where location.RecId == postalAddress.Location
            exists join locationRole
                where locationRole.Type  == _type
            exists join partyLocation
                where
                    partyLocation.Location == location.RecId &&
                    partyLocation.Party == _party
            exists join partyLocationRole
                where partyLocationRole.PartyLocation == partyLocation.RecId &&
                    partyLocationRole.LocationRole == locationRole.RecId;
            return postalAddress.RecId;
        }
        return 0;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSlotReserveSubClinic</Name>
				<Source><![CDATA[
    public static RecId getSlotReserveSubClinic(date _date, Timeofday _formTime, Timeofday _endTime,RecId _resourceRecId)
    {
        HMAppointmentReserveSLot                    hmAppointmentReserveSlot;
    
        select * from hmAppointmentReserveSlot
            where hmAppointmentReserveSlot.HMResourceMaster == _resourceRecId
            && hmAppointmentReserveSlot.Date == _date
            && hmAppointmentReserveSlot.SlotReserveBlock == HMAppointmentSlotReserveBlock::Reserve
            && (hmAppointmentReserveSlot.StartTime <= _formTime
            && hmAppointmentReserveSlot.EndTime >= _formTime
            && hmAppointmentReserveSlot.StartTime <= _endTime
            && hmAppointmentReserveSlot.EndTime >= _endTime);
    
        return hmAppointmentReserveSlot.HMOrganizationalUnit_ServiceLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateApptCheckIn</Name>
				<Source><![CDATA[
    public static boolean updateApptCheckIn(Recid _apptRecId, Recid _billingAddressRecId, RecId _reportAddressRecId)
    {
        boolean ret = true;
        HMResourceSchedulingAppointment     hmresourceSchedulingAppointment;
    
        try
        {
    
            ttsBegin;
    
            select forUpdate hmresourceSchedulingAppointment where hmresourceSchedulingAppointment.RecId == _apptRecId;
    
            if(hmresourceSchedulingAppointment)
            {
                hmresourceSchedulingAppointment.ClientBillingLogisticsPostalAddress = _billingAddressRecId;
                hmresourceSchedulingAppointment.ClientReportLogisticsPostalAddres = _reportAddressRecId;
    
                hmresourceSchedulingAppointment.update();
            }
    
            ttsCommit;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReserveSlotOnAppointment</Name>
				<Source><![CDATA[
    public static void updateReserveSlotOnAppointment(TransDate _apptStartDate, TransDate _apptEndDate, Timeofday _apptStartTime,
                        TimeOFday _apptEndTime,  RecId _resourceRecId)
    {
        HMAppointmentReserveSLot        hmAppointmentReserveSLot;
    
        hmAppointmentReserveSLot = hmAppointmentReserveSLot::findByRange(_apptStartDate, _apptEndDate, _apptStartTime, _apptEndTime, _resourceRecId, HMAppointmentSlotReserveBlock::Reserve);
    
        if(hmAppointmentReserveSLot)
        {
            ttsBegin;
    
            hmAppointmentReserveSLot.selectForUpdate(true);
            if(hmAppointmentReserveSLot.HMResourceSchedulingAppointment)
            {
                HMResourceSchedulingHelper::deleteReserveApptSlot(HMAppointmentReserveSLot.HMResourceSchedulingAppointment);
            }
            hmAppointmentReserveSLot.delete();
    
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAppointmentProtocol</Name>
				<Source><![CDATA[
    public static boolean deleteAppointmentProtocol(ItemId _protocolId, RecId _apptRecid)
    {
        boolean ret;
        HMResourceSchedulingAppointmentInvent       hmResourceSchedulingAppointmentInvent;
        HMResourceSchedulingAppointment             appt;
    
        appt = HMResourceSchedulingAppointment::find(_apptRecid);
        try
        {
            ttsBegin;
    
            while select forUpdate hmResourceSchedulingAppointmentInvent
                where hmResourceSchedulingAppointmentInvent.Protocol == _protocolId
                && hmResourceSchedulingAppointmentInvent.HMResourceSchedulingAppointment == _apptRecid
            {
                if(hmResourceSchedulingAppointmentInvent.Invoiced)
                {
                    throw error("@MAZ12319");
                }
    
                if(hmResourceSchedulingAppointmentInvent.POPosted)
                {
                    throw error("@MAZ12320");
                }
    
                hmResourceSchedulingAppointmentInvent.delete();
    
            }
            ttsCommit;
    
            ret = true;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProtocolName</Name>
				<Source><![CDATA[
    public static str getProtocolName(CustAccount _clientAccount, Itemid _protocolId)
    {
        HMClientProtocol                        hmClientProtocol;
        select * from hmClientProtocol
            where hmClientProtocol.ClientAccount == _clientAccount
            && hmClientProtocol.ItemId == _protocolId;
    
        return hmClientProtocol.itemAlias();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>declineService</Name>
				<Source><![CDATA[
    public static boolean declineService(HMServiceDeclinedReason _reason, RecId _apptServiceRecId)
    {
        HMResourceSchedulingAppointmentInvent   apptInvent;
        try
        {
            ttsBegin;
            apptInvent = HMResourceSchedulingAppointmentInvent::find(_apptServiceRecId,true);
            apptInvent.HMServiceStatus = HMServiceStatus::Decline;
            apptInvent.ServiceSubStatus = _reason;
            apptInvent.update();
            ttsCommit;
            return true;
        }
        catch
        {
            warning("@MAZ11514");
            return false;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchedulingSubType</Name>
				<Source><![CDATA[
    public static HMAppointmentSubType getSchedulingSubType(RecId _scheduleRecId)
    {
        HMResourceSchedulingTypeCode        hmResourceSchedulingTypeCode;
    
        select AppointmentSubType from hmResourceSchedulingTypeCode
            where hmResourceSchedulingTypeCode.RecId == _scheduleRecId;
    
        return hmResourceSchedulingTypeCode.AppointmentSubType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiResourceApptExist</Name>
				<Source><![CDATA[
    public static boolean multiResourceApptExist(HMResourceSchedulingOpenTimeSlotsTmp _source, FormDataSource _targetFds)
    {
        HMResourceSchedulingOpenTimeSlotsTmp    hmResourceSchedulingOpenTimeSlotsTmpLocal;
        //FormDataSource                          fds = _target.dataSource();
    
        hmResourceSchedulingOpenTimeSlotsTmpLocal = _targetFds.getFirst();
    
        while(hmResourceSchedulingOpenTimeSlotsTmpLocal)
        {
            if(_source.Date == hmResourceSchedulingOpenTimeSlotsTmpLocal.Date
            && _source.Time == hmResourceSchedulingOpenTimeSlotsTmpLocal.Time
            && _source.HMResourceSchedulingPlanningObject == hmResourceSchedulingOpenTimeSlotsTmpLocal.HMResourceSchedulingPlanningObject
            && _source.HMResourceSchedulingTypeCode == hmResourceSchedulingOpenTimeSlotsTmpLocal.HMResourceSchedulingTypeCode)
            {
                warning("@MAZ11502");
                return true;
            }
    
            if(_source.Date == hmResourceSchedulingOpenTimeSlotsTmpLocal.Date
            && _source.Time == hmResourceSchedulingOpenTimeSlotsTmpLocal.Time)
            {
                warning("@MAZ11503");
                return true;
            }
    
            hmResourceSchedulingOpenTimeSlotsTmpLocal = _targetFds.getNext();
        }
    
    
        /*select firstOnly RecId from _target
        where _source.Date == _target.Date
        && _source.Time == _target.Time
        && _source.HMResourceSchedulingPlanningObject == _target.HMResourceSchedulingPlanningObject
        && _source.HMResourceSchedulingTypeCode == _target.HMResourceSchedulingTypeCode;
    
        if(_target.RecId)
        {
        warning("@MAZ11502");
        return true;
        }
        select firstOnly RecId from _target
        where _source.Date == _target.Date
        && _source.Time == _target.Time;
        if(_target.RecId)
        {
        warning("@MAZ11503");
        return true;
        }
        */
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFromOU</Name>
				<Source><![CDATA[
    public static inventDimId getInventDimFromOU(RecId _organzationalUnitRecId)
    {
        InventLocation      inventLocation;
        InventDim           inventDim;
        HMOrganizationalUnit hmOrganizationalUnit;
    
        select InventLocation, RecId from hmOrganizationalUnit where hmOrganizationalUnit.RecId == _organzationalUnitRecId;
    
        if(hmOrganizationalUnit.RecId)
        {
            InventLocation = InventLocation::find(hmOrganizationalUnit.InventLocation);
            inventDim.InventLocationId = InventLocation.InventLocationId;
            inventDim.InventSiteId = InventLocation.InventSiteId;
            inventDim = inventDim::findOrCreate(inventDim);
        }
    
        return inventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandApptProtcol</Name>
				<Source><![CDATA[
    public AmountMst expandApptProtcol(ItemId  _protocolId, AccountNum _clientAccount, RecId _patientRecId, RecId _organzationalUnitRecId, date _date = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                        InventDimId _inventDimId = '', boolean _patientAmountOnly = false, RecId _appointmentRecid = 0, boolean _insertIntoTmp = false)
    {
        CustTable                               custTable;
        BOMVersion                              bomVersion;
        BOM                                     BomTable;
        real                                    appointmentPrice,taxAmount;
        HMOrganizationalUnit                    hmOrganizationalUnit;
        HMClientProtocolPriceOverrideDetails    HMClientProtocolPriceOverrideDetails;
        HMClientProtocol                        hmClientProtocol;
        Amount                                  lineAmount;
        InventDimId                             inventDimId = HMResourceSchedulingHelper::getInventDimFromOU(_organzationalUnitRecId);
        InventTable                             inventTableLocal;
        container                               priceCon;
        real                                    itemListPrice,protocolContractPrice,remainingPrice;
        HMResourceSchedulingAppointmentInvent   apptInvent;
    
        select firstOnly * from hmClientProtocol
        where hmClientProtocol.ClientAccount == _clientAccount
        && hmClientProtocol.ItemId == _protocolId;
    
        select TaxGroup from hmOrganizationalUnit
        where hmOrganizationalUnit.recid == _organzationalUnitRecId;
    
        if(!_inventDimId)
        {
            inventDimId = HMResourceSchedulingHelper::getInventDimFromOU(_organzationalUnitRecId);
        }
        else
        {
            inventDimId = _inventDimId;
        }
    
        if(hmClientProtocol)
        {
            if(hmClientProtocol.CalculationMethod == HMProtocolCalculationMethod::PriceOverride)
            {
            }
    
            select firstonly bomVersion
            where bomVersion.ItemId == _protocolId
            && bomVersion.Active
            && bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
            && (!bomVersion.ToDate || bomVersion.ToDate >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    
            while select bomTable
            where bomTable.BOMId == bomVersion.BOMId
            join * from inventTableLocal
            where bomTable.ItemId == inventTableLocal.ItemId
            {
    
                select DiscountDistribution,RecId from HMClientProtocolPriceOverrideDetails
                where HMClientProtocolPriceOverrideDetails.HMClientProtocol == hmClientProtocol.RecId
                && HMClientProtocolPriceOverrideDetails.ItemId == inventTableLocal.ItemId;
    
                if(!HMClientProtocolPriceOverrideDetails)
                {
    
                    if(_appointmentRecid && _patientAmountOnly)
                    {
                        select count(RecId) from apptInvent
                        where apptInvent.Protocol == _protocolId
                        && apptInvent.InventTable == inventTableLocal.ItemId
                        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Patient
                        && apptInvent.HMResourceSchedulingAppointment == _appointmentRecid;
                        if(apptInvent.RecId == 0)
                        {
                            continue;
                        }
                    }
    
                    if(_insertIntoTmp)
                    {
                        this.insertExamProtocolPriceTmp(inventTableLocal.ItemId,lineAmount+taxAmount);
                    }
                }
            }
            while select bomTable
            where bomTable.BOMId == bomVersion.BOMId
            join * from inventTableLocal
            where bomTable.ItemId == inventTableLocal.ItemId
            {
                select DiscountDistribution,RecId from HMClientProtocolPriceOverrideDetails
                where HMClientProtocolPriceOverrideDetails.HMClientProtocol == hmClientProtocol.RecId
                && HMClientProtocolPriceOverrideDetails.ItemId == inventTableLocal.ItemId;
    
                if(HMClientProtocolPriceOverrideDetails)
                {
    
                    if(_appointmentRecid && _patientAmountOnly)
                    {
                        select count(RecId) from apptInvent
                        where apptInvent.Protocol == _protocolId
                        && apptInvent.InventTable == inventTableLocal.ItemId
                        && apptInvent.PatientResponsibility == HMPatientPaymentResponsibility::Patient
                        && apptInvent.HMResourceSchedulingAppointment == _appointmentRecid;
                        if(apptInvent.RecId == 0)
                        {
                            continue;
                        }
                    }
    
                    if(_insertIntoTmp)
                    {
                        this.insertExamProtocolPriceTmp(inventTableLocal.ItemId,lineAmount+taxAmount);
                    }
                }
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExamProtocolPriceTmp</Name>
				<Source><![CDATA[
    private void insertExamProtocolPriceTmp(ItemId _itemid, AmountMst _price)
    {
        protocolExamPrice.clear();
        protocolExamPrice.ItemId = _itemid;
        protocolExamPrice.ItemName = HMInventTableclass::showDescription(_itemid);
        protocolExamPrice.Price = _price;
        protocolExamPrice.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAppointmentSlot</Name>
				<Source><![CDATA[
       public static boolean removeAppointmentSlot(TransDate _fromDate, TransDate _toDate, TimeOfDay _fromTime, TimeOfDay _toTime, RecId _planningObjectRecid, RecId _resourceRecId)
       {
           HMAppointmentReserveSLot HMAppointmentReserveSLot, HMAppointmentReserveSLotValidate;
           boolean ret = true;
           HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
           HMResourceSchedulingOpenTimeSlotsSearch hmResourceSchedulingOpenTimeSlotsSearch=new HMResourceSchedulingOpenTimeSlotsSearch();
           TransDateTime       newSlotStartDateTime, newSlotEndDateTime, slotStartDateTime, slotEndDateTime;
    
           try
           {
               ttsBegin;
    
               hmResourceSchedulingOpenTimeSlotsTmp = hmResourceSchedulingOpenTimeSlotsSearch.searchOpenTimeSlotMultiPO(_fromDate, _toDate,true,
                        0,false,[false,false,false,false,false,false,false], _planningObjectRecid, 0,
                        _fromTime, _toTime, 0, 0, 0, HMIncludeExclude::Exclude, true,'');
    
               while select * from hmResourceSchedulingOpenTimeSlotsTmp
               {
                   slotStartDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time);
                   slotEndDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date, hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60));
    
                   while select * from HMAppointmentReserveSLotValidate
                    where HMAppointmentReserveSLotValidate.Date == hmResourceSchedulingOpenTimeSlotsTmp.date
                    && (HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Block
                    || HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Close
                    || HMAppointmentReserveSLotValidate.SlotReserveBlock == HMAppointmentSlotReserveBlock::Reserve)
                    && HMAppointmentReserveSLotValidate.HMResourceMaster == hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster
                   {
                       newSlotStartDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.StartTime);
                       newSlotEndDateTime = DateTimeUtil::newDateTime(HMAppointmentReserveSLotValidate.Date,HMAppointmentReserveSLotValidate.EndTime);
    
                       if(newSlotStartDateTime == slotStartDateTime)
                       {
                           ret = false;
                           error(strFmt("@MAZ12162"));
                           throw Exception::Error;
                       }
    
                       if((newSlotStartDateTime > slotStartDateTime && newSlotStartDateTime < slotEndDateTime)
                        ||(newSlotEndDateTime > slotStartDateTime && newSlotEndDateTime < slotEndDateTime)
                        || (slotStartDateTime > newSlotStartDateTime && slotStartDateTime < newSlotEndDateTime)
                        ||(slotEndDateTime > newSlotStartDateTime && slotEndDateTime < newSlotEndDateTime))
                       {
                           ret = false;
                           error(strFmt("@MAZ12162"));
                           throw Exception::Error;
                       }
                   }
    
                   if(ret)
                   {
                       HMAppointmentReserveSLot.clear();
    
                       HMAppointmentReserveSLot.Date = hmResourceSchedulingOpenTimeSlotsTmp.Date;
                       HMAppointmentReserveSLot.StartTime = hmResourceSchedulingOpenTimeSlotsTmp.Time;
                       HMAppointmentReserveSLot.EndTime = hmResourceSchedulingOpenTimeSlotsTmp.Time + (hmResourceSchedulingOpenTimeSlotsTmp.Duration * 60);
                       HMAppointmentReserveSLot.HMResourceMaster = hmResourceSchedulingOpenTimeSlotsTmp.HMResourceMaster;
                       HMAppointmentReserveSLot.SlotReserveBlock = HMAppointmentSlotReserveBlock::Removed;
                       HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject = _planningObjectRecid;
    
                       HMAppointmentReserveSLot.insert();
                   }
               }
    
            ttsCommit;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewAppointmentSlot</Name>
				<Source><![CDATA[
    public static boolean addNewAppointmentSlot(TransDate _fromDate, TransDate _toDate, TimeOfDay _fromTime, TimeOfDay _toTime, RecId _planningObjectRecid, RecId _scheduleType, RecId _resourceRecId, str _arrivalTime)
    {
        HMAppointmentReserveSLot HMAppointmentReserveSLot;
        HMResourceSchedulingAppointment             hmResourceSchedulingAppointmentLocal;
        boolean ret = true;
        HMResourceSchedulingOpenTimeSlotsTmp        hmResourceSchedulingOpenTimeSlotsTmp;
        HMResourceSchedulingOpenTimeSlotsSearch hmResourceSchedulingOpenTimeSlotsSearch=new HMResourceSchedulingOpenTimeSlotsSearch();
        Integer         numberOfSlots,i,duration;
        HMResourceSchedulingHelper objClass=new HMResourceSchedulingHelper();
        timeOfDay   fromTime, endTime;
        TransDateTime apptStartDateTime, apptEndDateTime, slotStartDateTime, slotEndDateTime;
        int j;
    
        try
        {
            hmResourceSchedulingOpenTimeSlotsTmp = hmResourceSchedulingOpenTimeSlotsSearch.searchOpenTimeSlotMultiPO(_fromDate, _toDate,true,
                        0,false,[false,false,false,false,false,false,false], _planningObjectRecid, 0,
                        -1, -1, 0, 0, 0, HMIncludeExclude::Exclude, false,'');
    
            numberOfSlots = int642int(objClass.getInitialTimeSlots(_fromTime,_toTime,_scheduleType, _resourceRecId));
    
            for(i=1 ; i<=numberOfSlots ; i++)
            {
                ret = true;
                if(i==1)
                {
                    fromTime =  _fromTime;
    
                }
                else
                {
                    fromTime = endTime;
                }
    
                duration = HMResourceMasterHelper::getDurationInMinutes(_resourceRecId, _scheduleType);
                endTime = DateTimeUtil::time(DateTimeUtil::addMinutes(DateTimeUtil::newDateTime(_fromDate,fromTime),duration));
                slotStartDateTime = DateTimeUtil::newDateTime(_fromDate, fromTime);
                slotEndDateTime = DateTimeUtil::newDateTime(_toDate, endTime);
                while select * from hmResourceSchedulingOpenTimeSlotsTmp
                {
                    //info(strFmt("%1 - %2 - %3", date2StrUsr(hmResourceSchedulingOpenTimeSlotsTmp.Date), time2StrHM(hmResourceSchedulingOpenTimeSlotsTmp.Time), time2strhm(hmResourceSchedulingOpenTimeSlotsTmp.SlotEndTime)));
                    apptStartDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date,hmResourceSchedulingOpenTimeSlotsTmp.Time);
                    apptEndDateTime = DateTimeUtil::newDateTime(hmResourceSchedulingOpenTimeSlotsTmp.Date,hmResourceSchedulingOpenTimeSlotsTmp.SlotEndTime);
    
                    if(apptStartDateTime == slotStartDateTime)
                    {
                        ret = false;
                        break;
                    }
    
                    if((apptStartDateTime > slotStartDateTime && apptStartDateTime < slotEndDateTime)
                        ||(apptEndDateTime > slotStartDateTime && apptEndDateTime < slotEndDateTime)
                        || (slotStartDateTime > apptStartDateTime && slotStartDateTime < apptEndDateTime)
                        ||(slotEndDateTime > apptStartDateTime && slotEndDateTime < apptEndDateTime))
                    {
                        ret = false;
                        break;
                    }
                }
                if(!ret)
                {
                    //ret = false;
                    //error(strFmt("@MAZ12161"));
                    warning(strFmt("Cannot add slot from %1 to %2, Time slot already exist",time2StrHM(fromTime),time2StrHM(endTime)));
                    //throw Exception::Error;
                }
                if(ret)
                {
                    select count(RecId) from hmResourceSchedulingAppointmentLocal
                    where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == _planningObjectRecid
                    && (hmResourceSchedulingAppointmentLocal.AppointmentTime >= fromTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= endTime)
                    && (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedIn
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Examined
                    || hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedOut)
                    && hmResourceSchedulingAppointmentLocal.AppointmentDate == _fromDate;
    
                    if(hmResourceSchedulingAppointmentLocal.RecId)
                    {
                        ret = false;
                        warning(strFmt("Cannot add slot from %1 to %2, Appointment already exist",time2StrHM(fromTime),time2StrHM(endTime)));
                        //throw Exception::Error;
                    }
                    if(ret)
                    {
                        //ttsBegin;
                        HMAppointmentReserveSLot.clear();
    
                        HMAppointmentReserveSLot.Date = _fromDate;
                        HMAppointmentReserveSLot.StartTime = fromTime;
                        HMAppointmentReserveSLot.EndTime = endTime;
                        HMAppointmentReserveSLot.HMResourceMaster = _resourceRecId;
                        HMAppointmentReserveSLot.SlotReserveBlock = HMAppointmentSlotReserveBlock::Added;
                        HMAppointmentReserveSLot.HMResourceSchedulingTypeCode = _scheduleType;
                        HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject = _planningObjectRecid;
                        HMAppointmentReserveSLot.ArrivalTime = _arrivalTime == '' ? -1 : str2time(_arrivalTime);
    
                        HMAppointmentReserveSLot.insert();
                        //ttsCommit;
                    }
                }
    
            }
    
    
    
    
    
            //select count(RecId) from hmResourceSchedulingOpenTimeSlotsTmp
            //where  (hmResourceSchedulingOpenTimeSlotsTmp.Time >= _fromTime && hmResourceSchedulingOpenTimeSlotsTmp.SlotEndTime <= _toTime);
    
            //if(!ret)
            //{
            ////ret = false;
            //error(strFmt("@MAZ12161"));
            //throw Exception::Error;
            //}
    
            //select count(RecId) from hmResourceSchedulingAppointmentLocal
            //where hmResourceSchedulingAppointmentLocal.HMResourceSchedulingPlanningObject == _planningObjectRecid
            //&& (hmResourceSchedulingAppointmentLocal.AppointmentTime >= _fromTime && hmResourceSchedulingAppointmentLocal.AppointmentEndTime <= _toTime)
            //&& (hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            //|| hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Confirmed
            //|| hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedIn
            //|| hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Examined
            //|| hmResourceSchedulingAppointmentLocal.AppointmentStatus == HMResourceSchedulingAppointmentStatus::CheckedOut)
            //&& hmResourceSchedulingAppointmentLocal.AppointmentDate == _fromDate;
            //
            //if(hmResourceSchedulingAppointmentLocal.RecId)
            //{
            //ret = false;
            //error(strFmt("@MAZ12161"));
            //throw Exception::Error;
            //}
    
            //ttsBegin;
            //
            //numberOfSlots = int642int(objClass.getInitialTimeSlots(_fromTime,_toTime, _scheduleType, _resourceRecId));
            //
            //fromTime = _fromTime;
            //
            //for (j = 1; j <= numberOfSlots; j++)
            //{
            //endTime = HMResourceSchedulingHelper::calculateApptEndTime(_scheduleType, _resourceRecId, _fromDate, fromTime);
            //
            //HMAppointmentReserveSLot.clear();
            //
            //HMAppointmentReserveSLot.Date = _fromDate;
            //HMAppointmentReserveSLot.StartTime = fromTime;
            //HMAppointmentReserveSLot.EndTime = endTime;
            //HMAppointmentReserveSLot.HMResourceMaster = _resourceRecId;
            //HMAppointmentReserveSLot.SlotReserveBlock = HMAppointmentSlotReserveBlock::Added;
            //HMAppointmentReserveSLot.HMResourceSchedulingTypeCode = _scheduleType;
            //HMAppointmentReserveSLot.HMResourceSchedulingPlanningObject = _planningObjectRecid;
            //HMAppointmentReserveSLot.ArrivalTime = _arrivalTime == '' ? -1 : str2time(_arrivalTime);
            //
            //HMAppointmentReserveSLot.insert();
            //
            //fromTime = endTime;
            //}
    
            //ttsCommit;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmForceBookAppointment</Name>
				<Source><![CDATA[
    public void confirmForceBookAppointment(RecId _appointmentRecId)
    {
        HMResourceSchedulingAppointment appt,apptFetch;
        try
        {
            select HMPatientVisit,REcId from apptFetch
            where apptFetch.RecId == _appointmentRecId;
            if(apptFetch)
            {
                ttsbegin;
                appt.skipDataMethods(true);
                update_recordSet appt
                setting HMConfirmationStatus = HMAppointmentConfirmationStatus::ForceBookedConfirmed
                where appt.HMPatientVisit == apptFetch.HMPatientVisit;
    
                select HMPatientVisit,REcId from appt
                where appt.HMPatientVisit == apptFetch.HMPatientVisit
                && appt.PrimaryAppointment == YesNO::Yes
                && appt.HMConfirmationStatus == HMAppointmentConfirmationStatus::ForceBookedConfirmed;
                //todo: ax 7 email
                //HMEmailGeneration::emailBookingDetails(appt.RecId);
                info("@MAZ11287");
                ttscommit;
                return;
            }
            checkFailed("@MAZ11284");
        }
        catch
        {
            checkFailed("@MAZ11284");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNursingUnitLocationRecId</Name>
				<Source><![CDATA[
    public static Recid getNursingUnitLocationRecId(Description _text)
    {
        hmOrganizationalUnit    hmOrganizationalUnit;
    
        select RecId from hmOrganizationalUnit
        where (hmOrganizationalUnit.FileLocationType == HMFileLocationType::NursingUnit)
        && hmOrganizationalUnit.Description == _text;
    
        return hmOrganizationalUnit.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>