<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMBatchServiceChargeEntryInquiry</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMBatchServiceChargeEntryInquiry
{
    HMBatchServiceChargeEntryTmp    hmBatchServiceChargeEntryTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHMBatchServiceChargeEntryTmp</Name>
				<Source><![CDATA[
    public HMBatchServiceChargeEntryTmp getHMBatchServiceChargeEntryTmp()
    {
        return hmBatchServiceChargeEntryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInquiry</Name>
				<Source><![CDATA[
    public void processInquiry(StartDate _startDate, EndDate _endDate)
    {
        HMItemizedBillReportContract    dataContract;
        HMCase                          hmCase;
        HMPatientChargeEntryTable       patientChargeEntryTable;
        HMPatientChargeEntryLine        patientChargeEntryLine;
        HMOrganizationalUnit            organizationUnit;
        HMCaseTrans                     caseTrans;
        CustTrans                       custTrans;
        HMPatient                       hmPatient;
        CompanyInfo                     companyInfo;
        CompanyImage                    companyImage;
        HMClaimTableSetup               claimTableSetup;
        HMCaseOtherDiagnosisCode1450    otherDiagnosisCode1450;
        HMProcedureCodeMaster           procedureCodeMaster;
        int                             i;
        Qty                             noOfPrints;
        RefRecId                        caseRecId;
        HMCaseNo                        caseNo;
        Amount                          billedAccountBalance;
        StartDateTime                   startDateTime;
        EndDateTime                     endDateTime;
        Counter                         recCount;
    
        startDateTime = DateTimeUtil::newDateTime(_startDate, 0);
        endDateTime = DateTimeUtil::newDateTime(_endDate, 0);
    
    
         while select * from patientChargeEntryLine
            join caseTrans
                where patientChargeEntryLine.HMCaseTrans == caseTrans.RecId
                   && patientChargeEntryLine.createdDateTime >= startDateTime
                   && patientChargeEntryLine.createdDateTime <= endDateTime
                join hmCase
                    where caseTrans.HMCase == hmCase.RecId
                    join hmPatient
                        where hmCase.HMPatient == hmpatient.RecId
                           //
        {
            recCount++;
            hmBatchServiceChargeEntryTmp.SNo = recCount;
            hmBatchServiceChargeEntryTmp.HMCaseNo = hmCase.CaseNo;
            hmBatchServiceChargeEntryTmp.PatientName = CustTable::findRecId(hmPatient.CustTable).name();
            hmBatchServiceChargeEntryTmp.PatientStatus = HMClaimTableSetup::findByRecEnum(hmCase.HMPatientStatus, HMClaimEnumList::PatientStatus).Code;
            hmBatchServiceChargeEntryTmp.FromDate = patientChargeEntryLine.FromDate;
            hmBatchServiceChargeEntryTmp.Location = HMOrganizationalUnit::find(caseTrans.HMOrganizationalUnit).Description;
            hmBatchServiceChargeEntryTmp.Physician = HMResourceMaster::find(hmCase.HMResourceMaster).Description;
            hmBatchServiceChargeEntryTmp.Itemid = caseTrans.ItemId;
            hmBatchServiceChargeEntryTmp.ItemName = caseTrans.ItemName;
            hmBatchServiceChargeEntryTmp.CPTCode = HMProcedureCodeMaster::find(patientChargeEntryLine.CPTCodes).Code;
            hmBatchServiceChargeEntryTmp.ServiceStatus = caseTrans.HMServiceStatus;
            hmBatchServiceChargeEntryTmp.Qty = caseTrans.Qty;
            hmBatchServiceChargeEntryTmp.SalesPrice = caseTrans.SalesPrice;
            hmBatchServiceChargeEntryTmp.TotalAmount = caseTrans.TotalAmount;
            hmBatchServiceChargeEntryTmp.insert();
        }
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>