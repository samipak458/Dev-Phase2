<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMResourceMasterHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMResourceMasterHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDurationInMinutes</Name>
				<Source><![CDATA[
    public static Integer getDurationInMinutes(RecId _hmResourceRecId, RecId _scheduleType)
    {
        HMResourceMasterScheduleType        hmResourceMasterScheduleType;
        Integer retVal;
    
        select firstonly * from hmResourceMasterScheduleType
            where hmResourceMasterScheduleType.HMResourceSchedulingTypeCode == _scheduleType
            && hmResourceMasterScheduleType.HMResourceMaster == _hmResourceRecId;
    
        if(hmResourceMasterScheduleType)
        {
            switch(hmResourceMasterScheduleType.DurationUnit)
            {
                case HMMinHrs::Hours:
                    retVal = hmResourceMasterScheduleType.Duration * 60;
                    break;
                case HMMinHrs::Minutes:
                    retVal = hmResourceMasterScheduleType.Duration;
                    break;
            }
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenAppointmentCount</Name>
				<Source><![CDATA[
    static public Integer getOpenAppointmentCount(RecId _hmResourceRecId)
    {
        
        HMResourceSchedulingAppointment appointment;
        HMResourceSchedulingPlanningObject  planningObject;
    
        select count(RecId) from appointment
                where appointment.AppointmentStatus == HMResourceSchedulingAppointmentStatus::Open
            join RecId from planningObject where planningObject.RecId == appointment.HMResourceSchedulingPlanningObject
                && planningObject.HMResourceMaster == _hmResourceRecId;
    
        return int642int(appointment.RecId);
        
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceName</Name>
				<Source><![CDATA[
    public static Description getResourceName(RecId _hmResourceRecId)
    {
        HMResourceMaster  hmResourceMaster;
    
        select firstOnly Description from hmResourceMaster where hmResourceMaster.RecId == _hmResourceRecId;
    
        return hmResourceMaster.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceRefRecId</Name>
				<Source><![CDATA[
    public static RecId getResourceRefRecId(RecId _hmResourceRecId)
    {
        HMResourceMaster  hmResourceMaster;
    
        select firstOnly RefRecId from hmResourceMaster where hmResourceMaster.RecId == _hmResourceRecId;
    
        return hmResourceMaster.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceSpeciality</Name>
				<Source><![CDATA[
    public static Description255 getResourceSpeciality(RecId _hmResourceRecId)
    {
        HMResourceMasterSpeciality  hmResourceMasterSpeciality;
        HMSpecialtyCode             hmSpecialtyCode;
        Description255              speciality;
        boolean one = true;
    
        while select RecId from hmResourceMasterSpeciality
            join Description from hmSpecialtyCode
            where hmResourceMasterSpeciality.HMSpecialtyCode == hmSpecialtyCode.RecId
            && hmResourceMasterSpeciality.HMResource == _hmResourceRecId
        {
            if (!one)
            {
                speciality += " , ";
                one = false;
            }
    
            speciality += hmSpecialtyCode.Description ;
            one = false;
        }
    
        return speciality;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceType</Name>
				<Source><![CDATA[
    public static HMResourceType getResourceType(RecId _hmResourceRecId)
    {
        HMResourceMaster  hmResourceMaster;
    
        select firstOnly Type from hmResourceMaster where hmResourceMaster.RecId == _hmResourceRecId;
    
        return hmResourceMaster.Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertResourceOrganizationalUnit</Name>
				<Source><![CDATA[
    static public boolean insertResourceOrganizationalUnit(RecId _hmResourceRecId, RecId _organizationalUnit, RecId _hcmWorkerRecId)
    {
        HMResourceOrganizationalUnit       hmResourceOrganizationalUnit;
        boolean ret;
        try
        {
            hmResourceOrganizationalUnit.HMResourceMaster = _hmResourceRecId;
            hmResourceOrganizationalUnit.HMOrganizationalUnit = _organizationalUnit;
            hmResourceOrganizationalUnit.HcmWorker = _hcmWorkerRecId;
    
            hmResourceOrganizationalUnit.insert();
    
            ret = true;
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResourceExternal</Name>
				<Source><![CDATA[
    public static boolean isResourceExternal(RecId _hmResourceRecId)
    {
        HMResourceMaster  hmResourceMaster;
    
        select firstOnly Type,VendorType from hmResourceMaster where hmResourceMaster.RecId == _hmResourceRecId;
    
        return hmResourceMaster.Type == HMResourceType::Vendor && hmResourceMaster.VendorType == HMVendorType::External;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>