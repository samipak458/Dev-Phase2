<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMServiceAppHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class HMServiceAppHelper
{
    #define.ApplicationJson('application/json')

    HMComments      errorMessage;
    container       recordsCon;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPostWebAPI</Name>
				<Source><![CDATA[
    public boolean callPostWebAPI(URL _serviceOperation, HMComments _postData, str _header = '')
    {
        RetailWebRequest request;
        RetailWebResponse response;
        HMParameters hmParameters = HMParameters::find();
        str rawResponse;
        Map responseData, dataMap;
        MapEnumerator mapEnmr;
        container conValues;
        boolean ret;
        ListEnumerator  listEnmr;
        List dataList;
        RetailCommonWebAPI webApi = RetailCommonWebAPI::construct();
        
        if(!hmParameters.ServiceURLWebAPI)
        {
            throw error("Web API service URL not set in parameters");
        }
    
        try
        {
            
            response = webApi.makePostRequest(hmParameters.ServiceURLWebAPI + "/" + _serviceOperation, _postData, _header , #ApplicationJson);
           
            rawResponse = response.parmData();
            responseData = RetailCommonWebAPI::getMapFromJsonString(rawResponse);
    
            conValues = responseData.lookup('error');
    
            if(conPeek(conValues, 3) > 0)
            {
                conValues = conPeek(conValues, 4);
    
                dataMap = Map::create(conValues);
    
                conValues = dataMap.lookup('message');
    
                dataList = List::create(conValues);
    
                listEnmr = dataList.getEnumerator();
    
                while(listEnmr.moveNext())
                {
                    this.parmErrorMessage(con2Str(listEnmr.current()));
                }
    
                ret = false;
            }
            else
            {
                conValues = responseData.lookup('data');
    
                dataMap = Map::create(conValues);
    
                conValues = dataMap.lookup('records');
    
                this.parmRecordsCon(conValues);
    
                ret = true;
            }
        }
        catch
        {
            ret = false;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorMessage</Name>
				<Source><![CDATA[
    public HMComments parmErrorMessage(HMComments _errorMessage = errorMessage)
    {
        errorMessage = _errorMessage;
    
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordsCon</Name>
				<Source><![CDATA[
    public container parmRecordsCon(container _recordsCon = recordsCon)
    {
        recordsCon = _recordsCon;
    
        return recordsCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>