<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimChargeLineItemPayments</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimChargeLineItemPayments extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMClaimChargeLineItemPayments</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMClaimChargeLineItemPayments</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMClaimChargeLineItemPayments</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMClaimChargeLineItemPayments::exist(_recId))
        {
            ret = checkFailed(strfmt(HMClaimChargeLineItemPayments::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAppliedAmount</Name>
				<Source><![CDATA[
    public static RealBase displayAppliedAmount(RecId _claimCharge)
    {
        HMClaimChargeLineItemPayments   payments;
    
        select sum(Amount) from payments where payments.HMClaim1500ChargeLine == _claimCharge;
        return payments.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMClaimChargeLineItemPayments</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMClaimChargeLineItemPayments</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmClaimChargeLineItemPayments
                 where
                     hmClaimChargeLineItemPayments.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HMClaimChargeLineItemPayments</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>HMClaimChargeLineItemPayments</c> table; otherwise, an empty record.
    /// </returns>
    public static HMClaimChargeLineItemPayments find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMClaimChargeLineItemPayments    hmClaimChargeLineItemPayments;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmClaimChargeLineItemPayments.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            hmClaimChargeLineItemPayments.selectForUpdate(_forUpdate);
    
            select firstonly hmClaimChargeLineItemPayments
                where hmClaimChargeLineItemPayments.RecId == _recId;
        }
    
        return hmClaimChargeLineItemPayments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMClaimChargeLineItemPayments</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BillNClaimMgmt</ConfigurationKey>
	<DeveloperDocumentation>@MAZ9627</DeveloperDocumentation>
	<Label>@MAZ9626</Label>
	<TitleField1>HMClaim1500ChargeLine</TitleField1>
	<TitleField2>Amount</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<ExtendedDataType>RealBase</ExtendedDataType>
			<Label>@SYS62867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClaim1500ChargeLine</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClaimChargeLine</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<ExtendedDataType>HMNotes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentType</Name>
			<EnumType>HMClaimPaymentType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTable</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Reason</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reference1</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>Reference 1</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reference2</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>Reference 2</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClaimChargeLine</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMClaimChargeLine</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClaimChargeLine</Name>
					<Field>HMClaimChargeLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>BillingReason</Name>
					<RelatedField>BillingReason</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTable</Name>
					<Field>ReasonTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>