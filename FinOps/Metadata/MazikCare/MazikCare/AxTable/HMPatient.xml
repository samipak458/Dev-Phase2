<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatient</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMPatient extends common
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cellPhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone cellPhone()
    {
        Phone phone;
        container conPhone;
        CustTable custTable;
    
        select firstOnly Party from custTable where custTable.RecId == this.CustTable;
    
        conPhone = DirParty::electronicAddressLocatorsByRole(custTable.Party,
                                                                LogisticsElectronicAddressMethodType::Phone,
                                                                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::SMS).Name);
        if(conphone != conNull())
        {
            phone = conPeek(conPhone,1);
        }
    
        return phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTablePhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone custTablePhone()
    {
        CustTable custTable;
        select Party from custTable
        where custTable.RecId == this.CustTable;
        return  custTable.phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeAddress</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Addressing employeeAddress()
    {
        return logisticsLocation::find(this.EmploymentLogisticsLocation).postalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgeInDaysByEncounterDate</Name>
				<Source><![CDATA[
    public int64 getAgeInDaysByEncounterDate(Date _date, Date _encounterDate)
    {
        int years;
        int months;
        int days;
        int nowMonth;
        int nowDay;
        int nowYear;
        int dateYear;
        int counterMonths;
        int counterDays;
        int noOfdays;
        int monthDays;
        boolean isMonthCrossed;
     //   boolean isDispalyLongAges;
        boolean willMonthsCrossed;
        int64 finalAge;
    
        years=yearDiff(_encounterDate, _date);
        nowYear=year(_encounterDate);
        dateYear=year(_date);
        months=0;
        counterMonths=mthOfYr(_date);
        nowMonth=mthOfYr(_encounterDate);
        days=0;
        counterDays=dayOfMth(_date);
        nowDay=dayOfMth(_encounterDate);
        noOfdays=0;
        isMonthCrossed=false;
        willMonthsCrossed=false;
    
        if(nowMonth==1)
        {
            monthDays=12;
        }
        else
        {
            monthDays=nowMonth-1;
        }
    
        switch(monthDays)
        {
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                noOfdays=31;
                break;
            case 4:
            case 6:
            case 9:
            case 11:
                noOfdays=30;
                break;
            case 2:
                if((nowYear mod 4) == 0)
                {
                    noOfdays=29;
                }
                else
                {
                    noOfdays=28;
                }
                break;
        }
    
    
    
        if(counterMonths==nowMonth && nowYear==dateYear)
        {
            months=0;
        }
        else if(counterMonths==nowMonth && years > 0 && nowDay >= counterDays )
        {
            months=0;
        }
        else
        {
            months++;
    
            if(counterMonths==12)
            {
                counterMonths=1;
            }
            else
            {
                counterMonths++;
            }
            while(true)
            {
                if(counterMonths==nowMonth)
                {
                    break;
                }
                else
                {
                    months++;
    
                    if(counterMonths==12)
                    {
                        counterMonths=1;
                    }
                    else
                    {
                        counterMonths++;
                    }
                }
            }
        }
    
        if(counterDays > nowDay)
        {
            willMonthsCrossed = true;
        }
        else
        {
            willMonthsCrossed = false;
        }
    
        while(true)
        {
            if(counterDays==nowDay)
            {
                if(isMonthCrossed==true)
                {
                    months--;
                }
                break;
            }
            else
            {
                days++;
    
                if(counterDays==noOfdays && willMonthsCrossed)
                {
                    counterDays=1;
                    isMonthCrossed=true;
                }
                else
                {
                    counterDays++;
                }
            }
        }
    
        if(years == 0)
        {
            finalAge = (months*30) + days;
        }
        else if(months == 0)
        {
            finalAge = (years*365) + days;
        }
        else if(years == 0 && months == 0)
        {
            finalAge = days;
        }
        else
        {
            finalAge = (years*365) + (months*30) + days;
        }
    
        return finalAge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgeNewWithParameters</Name>
				<Source><![CDATA[
    public string30 getAgeNewWithParameters(Date _date)
    {
        int years;
        int months;
        int days;
        String30    finalage;
        boolean isDispalyLongAges;
        HMParameters hMParameters;
        HMCalcBirthDate     calcPatientBirthDate;
        HMAgeHelper         hmAgeHelper = new HMAgeHelper();
    
        int64                           ageInDays,ageInMonths;
        real                            ageInYears;
        boolean                         fromValue,toValue;
    
        container conAgeValues;
        HMAgeHelper ageHelper = new HMAgeHelper();
        calcPatientBirthDate = hmAgeHelper.getDateFromAge(this.HMAgeValue);
    
        if(_date != dateNull() && _date <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            conAgeValues = ageHelper.getYearsMonthsDaysFromDate(_date);
            years = conPeek(conAgeValues,1);
            months = conPeek(conAgeValues,2);
            days = conPeek(conAgeValues,3);
    
            ageInDays = ageHelper.getAgeInDays(_date);
            ageInMonths = ageHelper.getAgeInMonths(_date);
            ageInYears = ageHelper.getAgeInYears(_date);
    
            hMParameters = HMParameters::find();
    
            if(hMParameters.IsDisplayLongAges==NoYes::Yes)
            {
                switch(hMParameters.FromUnit)
                {
                    case HMPatinetAgeUnit::Day:
                        if(ageInDays >= hMParameters.FromValue)
                            fromValue = true;
                        break;
                    case HMPatinetAgeUnit::Month:
                        if(ageInMonths >= hMParameters.FromValue)
                            fromValue = true;
                        break;
                    case HMPatinetAgeUnit::Year:
                        if(ageInYears >= hMParameters.FromValue)
                            fromValue = true;
                        break;
                }
    
                switch(hMParameters.ToUnit)
                {
                    case HMPatinetAgeUnit::Day:
                        if(ageInDays <= hMParameters.ToValue)
                            toValue = true;
                        break;
                    case HMPatinetAgeUnit::Month:
                        if(ageInMonths <= hMParameters.ToValue)
                            toValue = true;
                        break;
                    case HMPatinetAgeUnit::Year:
                        if(ageInYears <= hMParameters.ToValue)
                            toValue = true;
                        break;
                }
    
                if(fromValue && toValue)
                {
                    isDispalyLongAges=true;
                }
                else
                {
                    isDispalyLongAges=false;
                }
            }
            else
            {
                isDispalyLongAges=false;
            }
    
            if(isDispalyLongAges==true)
            {
                if(years>0)
                {
                    finalage = strfmt('%1 %2', years, (years > 1 ? 'years' : 'year'));
                    finalage += ' ';
                }
    
                if(months>0)
                {
                    finalage += strfmt('%1 %2', months, (months > 1 ? 'months' : 'month'));
                    finalage += ' ';
                }
    
                if(days>0)
                {
                    if(finalage == '')
                    {
                        finalage += strfmt('%1 %2',days, (days > 1 ? 'days' : 'day'));
                    }
                }
            }
            else
            {
                if(years>0)
                {
                    finalage = strfmt('%1 %2', years, (years > 1 ? 'years' : 'year'));
                }
                else if(months>0)
                {
                    finalage += strfmt('%1 %2', months, (months > 1 ? 'months' : 'month'));
                }
                else if(days>0)
                {
                    finalage += strfmt('%1 %2',days, (days > 1 ? 'days' : 'day'));
                }
            }
        }
        else
        {
            finalage = ' ';
        }
    
        //if (calcPatientBirthDate != dateNull())
        //{
            //finalage = finalage +'*';
        //}
    
        return finalage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBirthDate</Name>
				<Source><![CDATA[
    public date getBirthDate()
    {
        DirPerson   person;
        date birthDate = dateNull();
    
        person = DirPerson::find(this.DirPartyTable);
        birthDate=person.birthDate();
        return birthDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryRegionShortname</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressCountryRegionShortName getCountryRegionShortname ()
    {
        LogisticsAddressCountryRegion            LogisticsAddressCountryRegion;
        LogisticsAddressCountryRegionTranslation LogisticsAddressCountryRegionTranslation;
    
        LanguageId language = CompanyInfo::languageId();
    
        if (language == '')
        {
            language = 'en-us';
        }
    
        select * from LogisticsAddressCountryRegion
            where LogisticsAddressCountryRegion.RecId == this.LogisticsAddressCountryRegion
                join  LogisticsAddressCountryRegionTranslation
                    where LogisticsAddressCountryRegionTranslation.CountryRegionId == LogisticsAddressCountryRegion.CountryRegionId
                        && LogisticsAddressCountryRegionTranslation.LanguageId == language;
    
        return LogisticsAddressCountryRegionTranslation.ShortName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDayTimeContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first day time contact <c>LogisticLocation</c>  table.
    /// </summary>
    /// <returns>
    /// The daytime contact number.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsElectronicAddressLocator getDayTimeContact()
    {
        HMPatient                   patient;
        DirPartyLocation            dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select * from patient
        join location, Party from dirPartyLocation where dirPartyLocation.Party == this.DirPartyTable
        join Location, Type, HMPreferredTime, Locator from logisticsElectronicAddress where logisticsElectronicAddress.Location == dirPartyLocation.Location
        && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Phone
        && logisticsElectronicAddress.HMPreferredTime==HMPreferredTime::DayTime;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntervalBetweenAppointment</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display String10 getIntervalBetweenAppointment()
    {
        String10    interval;
        TransDate   d1 = this.getNewAppointmentDate();
        TransDate   d2 = this.getLastAppointmentDate();
        int         d3;
    
        if(d2!=  dateNull() && d1 != dateNull())
        {
        d3 = d1-d2;
        }
    
        if (d3 > 0)
        {
            if (d3 == 1)
            {
                interval = int2str(d3)+ SysLabel::labelId2String2('@SYS182272');
            }
            else
            {
                interval = int2str(d3)+ SysLabel::labelId2String2('@SYS4006426');
            }
        }
    
        return interval;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntervalInDays</Name>
				<Source><![CDATA[
    private int64 getIntervalInDays(int64 _val, HMPatinetAgeUnit _unit)
    {
        HMPatinetAgeUnit          unit;
        int64                     days;
        int64                     val;
    
        unit=_unit;
        val=_val;
    
        switch(unit)
        {
            case HMPatinetAgeUnit::Day:
                days=val;
                break;
            case HMPatinetAgeUnit::Month:
                days=(val*30);
                break;
            case HMPatinetAgeUnit::Year:
                days=(val*365);
                break;
        }
    
        return days;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastAppointmentDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display transdate getLastAppointmentDate()
    {
        TransDate _transdate;
        
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
    
        select * from HMResourceSchedulingAppointment order by AppointmentDate,AppointmentTime desc
            where HMResourceSchedulingAppointment.HMPatient == this.RecId
            && (HMResourceSchedulingAppointment.AppointmentDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            || ((HMResourceSchedulingAppointment.AppointmentDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingAppointment.AppointmentTime < DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))));
    
        return HMResourceSchedulingAppointment.AppointmentDate;
        
        return _transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastAppointmentTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display HMTime getLastAppointmentTime()
    {
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
    
        select * from HMResourceSchedulingAppointment order by AppointmentDate,AppointmentTime desc
            where HMResourceSchedulingAppointment.HMPatient == this.RecId
            && (HMResourceSchedulingAppointment.AppointmentDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            || ((HMResourceSchedulingAppointment.AppointmentDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingAppointment.AppointmentTime < DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))));
    
        return HMResourceSchedulingAppointment.AppointmentTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMRN</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display CustAccount getMRN()
    {
        CustTable   custTable;
    
        select AccountNum from custTable where custTable.RecId == this.CustTable;
    
        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewAppointmentDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display transdate getNewAppointmentDate()
    {
        TransDate _transdate;
        
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
    
        select * from HMResourceSchedulingAppointment order by AppointmentDate,AppointmentTime asc
            where HMResourceSchedulingAppointment.HMPatient == this.RecId
            && (HMResourceSchedulingAppointment.AppointmentDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            || ((HMResourceSchedulingAppointment.AppointmentDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingAppointment.AppointmentTime > DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))));
    
    
        return HMResourceSchedulingAppointment.AppointmentDate;
        
        return _transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewAppointmentTime</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display HMTime getNewAppointmentTime()
    {
        HMResourceSchedulingAppointment     HMResourceSchedulingAppointment;
    
        select * from HMResourceSchedulingAppointment order by AppointmentDate,AppointmentTime asc
            where HMResourceSchedulingAppointment.HMPatient == this.RecId
            && (HMResourceSchedulingAppointment.AppointmentDate > DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
            || ((HMResourceSchedulingAppointment.AppointmentDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && HMResourceSchedulingAppointment.AppointmentTime > DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))));
    
    
    
        return HMResourceSchedulingAppointment.AppointmentTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNightTimeContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first night time contact <c>LogisticLocation</c>  table.
    /// </summary>
    /// <returns>
    /// The nighttime contact number.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsElectronicAddressLocator getNightTimeContact()
    {
        DirPartyLocation    dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select location, Party from dirPartyLocation where dirPartyLocation.Party == this.DirPartyTable
        join Location, Type, HMPreferredTime, Locator from logisticsElectronicAddress where logisticsElectronicAddress.Location == dirPartyLocation.Location
        && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Phone
        && logisticsElectronicAddress.HMPreferredTime==HMPreferredTime::NightTime;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientArabicFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display HMArabicFirstName getPatientArabicFirstName()
    {
        str arabicFirstName;
    
        arabicFirstName = DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).HMArabicFirstName;
    
        return arabicFirstName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientArabicLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display HMArabicLastName getPatientArabicLastName()
    {
        str arabicLastName;
        arabicLastName = DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).HMArabicLastName;
        return arabicLastName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientArabicMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display HMArabicMiddleName getPatientArabicMiddleName()
    {
        str arabicMiddleName;
    
        arabicMiddleName = DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).HMArabicMiddleName;
    
        return arabicMiddleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientEmailAddress</Name>
				<Source><![CDATA[
    public String30 getPatientEmailAddress()
    {
        DirPartyLocation            dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select firstOnly location, Party, isPrimary
            from dirPartyLocation
            where dirPartyLocation.Party == this.DirPartyTable
            join locator, location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == dirPartyLocation.Location
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the first name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display FirstName getPatientFirstName()
    {
        str sttrr;
        sttrr = DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).FirstName;
        return sttrr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientLanguage</Name>
				<Source><![CDATA[
    public LanguageId getPatientLanguage()
    {
        DirPartyTable   dirPartyTable;
    
        select LanguageId from dirPartyTable
            where dirPartyTable.recid == this.DirPartyTable;
    
        return dirPartyTable.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the last name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display LastName getPatientLastName()
    {
        str sttrr;
        sttrr = DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).LastName;
        return sttrr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the middle name from table, DirPersonName
    /// </summary>
    /// <returns>
    /// FirstName
    /// </returns>
    
    [SysClientCacheDataMethodAttribute(true)]
    public display MiddleName getPatientMiddleName()
    {
        return DirPersonName::find(DirPerson::find(DirPartyTable::findRec(this.DirPartyTable).RecId).RecId).MiddleName;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientPhone</Name>
				<Source><![CDATA[
    public String30 getPatientPhone()
    {
        DirPartyLocation    dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select firstOnly location, Party, isPrimary
            from dirPartyLocation
            where dirPartyLocation.Party == this.DirPartyTable
            join locator, location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == dirPartyLocation.Location
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientSkype</Name>
				<Source><![CDATA[
    public String30 getPatientSkype()
    {
        DirPartyLocation    dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select firstOnly location, Party, isPrimary
            from dirPartyLocation
            where dirPartyLocation.Party == this.DirPartyTable
            join locator, location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == dirPartyLocation.Location
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Skype;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getphysicianName</Name>
				<Source><![CDATA[
    //BP Deviation documented
    [SysClientCacheDataMethodAttribute(true)]
    public display Name getphysicianName()
    {
        return DirPerson::find(HcmWorker::find( HMClinicStaff::find(this.HMClinicStaff).HcmWorker).Person).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first primary contact <c>LogisticLocation</c>  table.
    /// </summary>
    /// <returns>
    /// The primary contact number.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsElectronicAddressLocator getPrimaryContact()
    {
        DirPartyLocation    dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select firstOnly location, isPrimary, Party from dirPartyLocation
        where dirPartyLocation.Party == this.DirPartyTable && dirPartyLocation.isPrimary == NoYes::Yes
        join locator, location, Type from logisticsElectronicAddress
        where logisticsElectronicAddress.Location == dirPartyLocation.Location && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Phone;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryEmailAddress</Name>
				<Source><![CDATA[
    public String30 getPrimaryEmailAddress()
    {
        DirPartyLocation    dirPartyLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
        select firstOnly location, Party, isPrimary from dirPartyLocation
            where dirPartyLocation.Party == this.DirPartyTable
            && dirPartyLocation.isPrimary == NoYes::Yes
            join locator, location, Type from logisticsElectronicAddress
            where logisticsElectronicAddress.Location == dirPartyLocation.Location
            && logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryInsurance</Name>
				<Source><![CDATA[
    public recid getPrimaryInsurance()
    {
        HMPatientInsurance  hmPatientInsurance;
        HMInsuranceCarrier  hmInsuranceCarrier;
        CustTable           custTable;
    
        select firstOnly RecId,InsuranceCarrier from hmPatientInsurance
            order by Priority
            where hmPatientInsurance.HMPatient == this.RecId
            && hmPatientInsurance.HMPayerType == HMPayerType::InsuranceCarrier
            && hmPatientInsurance.InsuranceStatus == HMInsuranceStatus::Active
            && (hmPatientInsurance.EffectiveDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmPatientInsurance.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        select RecId,CustTable from hmInsuranceCarrier
            join AccountNum,RecId from custTable
            where custTable.AccountNum == hmPatientInsurance.InsuranceCarrier
            && hmInsuranceCarrier.CustTable == custTable.RecId;
    
        return hmInsuranceCarrier.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPatientInsurance</Name>
				<Source><![CDATA[
    public HMPatientInsurance getPrimaryPatientInsurance()
    {
        HMPatientInsurance  hmPatientInsurance;
    
        select firstOnly * from hmPatientInsurance
        order by Priority
        where hmPatientInsurance.HMPatient == this.RecId
        && (hmPatientInsurance.HMPayerType == HMPayerType::InsuranceCarrier
        ||hmPatientInsurance.HMPayerType == HMPayerType::Corporate)
        && hmPatientInsurance.InsuranceStatus == HMInsuranceStatus::Active
        && (hmPatientInsurance.EffectiveDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmPatientInsurance.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        return hmPatientInsurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecondaryPatientInsurance</Name>
				<Source><![CDATA[
    public HMPatientInsurance getSecondaryPatientInsurance()
    {
        HMPatientInsurance  hmPatientInsurance;
    
        select * from hmPatientInsurance
        order by Priority
        where hmPatientInsurance.HMPatient == this.RecId
        && hmPatientInsurance.HMPayerType == HMPayerType::InsuranceCarrier
        && hmPatientInsurance.InsuranceStatus == HMInsuranceStatus::Active
        && (hmPatientInsurance.EffectiveDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmPatientInsurance.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        if(hmPatientInsurance)
        {
            next hmPatientInsurance;
        }
    
        return hmPatientInsurance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HCMIdentificationExpirationDate</Name>
				<Source><![CDATA[
    public edit HcmIdentificationExpirationDate HCMIdentificationExpirationDate(Boolean _set, HcmIdentificationExpirationDate _identificationExpirationDate)
    {
        HcmIdentificationExpirationDate expirationDate = _identificationExpirationDate;
        HcmPersonIdentificationNumber   PersonIdNumber;
    
        select forupdate firstOnly PersonIdNumber
                where PersonIdNumber.Person == this.DirPartyTable;
    
        if (_set)
        {
            if (_identificationExpirationDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                expirationDate = PersonIdNumber.ExpirationDate;
                error("Expiration cannot be set for the past.");
            }
            else
            {
                if (PersonIdNumber)
                {
                    ttsBegin;
    
                    PersonIdNumber.ExpirationDate     = expirationDate;
                    PersonIdNumber.HMHijriExpiryDate    = HMHijriDateHelper::convertGeorgianToHijri(expirationDate);
                    PersonIdNumber.update();
    
                    ttsCommit;
                }
                else
                {
                    error("The identification number has not been set.");
                }
            }
        }
        else
        {
            expirationDate = PersonIdNumber.ExpirationDate;
        }
    
        return expirationDate;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>HCMIdentificationNumber</Name>
				<Source><![CDATA[
    public edit HcmIdentificationNumber HCMIdentificationNumber(Boolean _set, HcmIdentificationNumber _HCMIdentificationNumber)
    {
     /*   HcmIdentificationNumber         HCMIdentificationNumber = _HcmIdentificationNumber;
        HcmPersonIdentificationNumber   PersonIdNumber;
        HMIdentificationType            identificationType;
        boolean validate = true;
        DirPerson person = DirPerson::find(this.DirPartyTable);
        #Define.numericValues('1234567890')
    
        select forupdate firstOnly PersonIdNumber
                where PersonIdNumber.Person == person.RecId;
    
        if (_set)
        {
            identificationType  = HcmIdentificationType::find(PersonIdNumber.IdentificationType).HMNationalIdType;
    
            if (identificationType != HMIdentificationType::Passport)
            {
                if (strLen(_HCMIdentificationNumber) != 10)
                {
                    validate = false;
                    error(strFmt("The %1 number should be 10 digits long.", identificationType));
                }
               // info(strFmt("%1--%2", strLen(_HCMIdentificationNumber), strLen(strKeep(_HCMIdentificationNumber, '1234567890'))));
                if (!(strLen(_HCMIdentificationNumber) == strLen(strKeep(_HCMIdentificationNumber, #numericValues))))
                {
                    validate = false;
                    error(strFmt("The %1 number can only be comprised of numeric digits.", identificationType));
                }
            }
    
            if(validate)
            {
                ttsBegin;
                PersonIdNumber.IdentificationNumber = _HCMIdentificationNumber;
    
                if (PersonIdNumber)
                {
                    PersonIdNumber.update();
                }
                else
                {
                    PersonIdNumber.insert();
                }
                ttsCommit;
            }
            else
            {
                HCMIdentificationNumber = _HCMIdentificationNumber;
            }
        }
    
        else
        {
            HCMIdentificationNumber = PersonIdNumber.IdentificationNumber;
        }
     */
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>HCMNationalIdType</Name>
				<Source><![CDATA[
    public edit HcmIdentificationTypeId HCMNationalIdType(Boolean _set, HcmIdentificationTypeId _nationalIdType)
    {
    /*    HcmIdentificationType           IdentificationType;
        HcmPersonIdentificationNumber   PersonIdNumber;
        String255                       NationalIdType;
        DirPerson                       person = DirPerson::find(this.DirPartyTable);
        boolean                         validate = true;
    
        IdentificationType = HcmIdentificationType::findByIdentificationType(_nationalIdType);
    
        select forupdate firstOnly PersonIdNumber
            where PersonIdNumber.Person == person.RecId;
    
        if (_set)
        {
            if (LogisticsAddressCountryRegion::findRecId(this.LogisticsAddressCountryRegion).CountryRegionId =='sau')
            {
                if (IdentificationType.HMNationalIdType != HMIdentificationType::NationalId)
                {
                    validate = false;
                    error("Cannot set Identification type other than National Id for Saudi nationals.");
                }
            }
            else
            {
                if (IdentificationType.HMNationalIdType == HMIdentificationType::NationalId)
                {
                    validate = false;
                    error("Cannot set Identification type National Id for Non-Saudi nationals.");
                }
            }
    
            /* if (HcmIdentificationType::findByIdentificationType(_nationalIdType).HMNationalIdType != HMIdentificationType::Passport)
             {
                 ttsbegin;
    
                 if (PersonIdNumber)
                 {
                     PersonIdNumber.IdentificationNumber = '';//subStr(PersonIdNumber.IdentificationNumber, 0, 10);
                     PersonIdNumber.update();
                 }
                 else
                 {
                     PersonIdNumber.IdentificationNumber = '';//subStr(PersonIdNumber.IdentificationNumber, 0, 10);
                     PersonIdNumber.Person               = person.RecId;
                     PersonIdNumber.insert();
                 }
    
                 ttsCommit;
             }*/
    
    
            if (validate)
            {
                ttsBegin;
    
                PersonIdNumber.IdentificationType = IdentificationType.RecId;
    
                if (PersonIdNumber)
                {
                    PersonIdNumber.update();
                }
                else
                {
                    PersonIdNumber.Person               = person.RecId;
                    PersonIdNumber.insert();
                }
    
                NationalIdType = IdentificationType.IdentificationTypeId;
    
                ttsCommit;
            }
        }
        else
        {
            IdentificationType = HcmIdentificationType::find(PersonIdNumber.IdentificationType);
            NationalIdType = IdentificationType.IdentificationTypeId;
        }
    */
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>HMHijriExpiryDate</Name>
				<Source><![CDATA[
    public edit HMHijriExpiryDate HMHijriExpiryDate(Boolean _set, HMHijriExpiryDate _idHijriExpiryDate)
    {
        HMHijriExpiryDate               expirationDateHijri = _idHijriExpiryDate;
        HcmPersonIdentificationNumber   PersonIdNumber;
        date                            gregorianDate;
    
        select forupdate firstOnly PersonIdNumber
                where PersonIdNumber.Person == this.DirPartyTable;
    
        if (_set)
        {
            gregorianDate = HMHijriDateHelper::convertHijriToGeorgian(_idHijriExpiryDate);
    
            if (gregorianDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                expirationDateHijri = PersonIdNumber.HMHijriExpiryDate;
                error("Expiration cannot be set for the past.");
            }
            else
            {
                if (PersonIdNumber)
                {
                    ttsBegin;
                    PersonIdNumber.HMHijriExpiryDate    = _idHijriExpiryDate;
                    PersonIdNumber.ExpirationDate       = gregorianDate;
                    PersonIdNumber.update();
                    ttsCommit;
                }
                else
                {
                    error("The identification number has not been set.");
                }
            }
        }
    
        else
        {
            expirationDateHijri = PersonIdNumber.HMHijriExpiryDate;
        }
    
        return expirationDateHijri;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>homePhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone homePhone()
    {
        Phone       phone;
        container   conPhone;
    
        conPhone = DirParty::electronicAddressLocatorsByRole(this.DirPartyTable,
                                                                LogisticsElectronicAddressMethodType::Phone,
                                                                LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Home).Name);
        if(conphone != conNull())
        {
            phone = conPeek(conPhone,1);
        }
    
        return phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.RegisteredBy = curUserId();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNKAEnabled</Name>
				<Source><![CDATA[
    public  boolean isNKAEnabled()
    {
        return this.HMPatientAllergyInvestigationStatus==HMPatientAllergyInvestigationStatus::Unknonwn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSecondaryInsuranceExist</Name>
				<Source><![CDATA[
    public NoYes isSecondaryInsuranceExist()
    {
        HMPatientInsurance  hmPatientInsurance;
        NoYes               result;
    
        select count(RecId) from hmPatientInsurance
        order by Priority
        where hmPatientInsurance.HMPatient == this.RecId
        && hmPatientInsurance.HMPayerType == HMPayerType::InsuranceCarrier
        && hmPatientInsurance.InsuranceStatus == HMInsuranceStatus::Active
        && (hmPatientInsurance.EffectiveDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmPatientInsurance.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        if(hmPatientInsurance.RecId > 1)
        {
            result = NoYes::Yes;
        }
        else
        {
            result = NoYes::No;
        }
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nameGenderAge</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display HMShortDescription nameGenderAge()
    {
        str name,age,gender;
    
        name = this.patientName();
        age = this.patientAgeNew();
        gender = enum2str(this.Gender);
    
        return name+'('+gender+','+age+')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>outstandingBalance</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Amount outstandingBalance()
    {
        CustTable custTable;
    
        select firstOnly AccountNum from custTable where custTable.RecId == this.CustTable;
    
        return custTable.openBalanceCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientAgeInYears</Name>
				<Source><![CDATA[
    public String50 patientAgeInYears()
    {
        Date        birthDate;
        int         years;
        DirPerson   person;
    
        HMAgeHelper         hmAgeHelper = new HMAgeHelper();
    
        //calcPatientBirthDate = hmAgeHelper.getDateFromAge(this.HMAgeValue);
        person = DirPerson::find(this.DirPartyTable);
        birthDate = person.birthDate();// mkdate(_person.BirthDay, _person..BirthMonth, _person.BirthYear);
        years  = intvNo(DateTimeUtil::date(DateTimeUtil::utcNow()), birthDate, intvScale::Year);
        if(years > 0)
        {
            return int2str(years) + ' ' + "@MAZ359";
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientAgeNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the age of <c>DirPerson</c> setup table.
    /// </summary>
    /// <returns>
    /// The age of <c>DirPerson</c> setup table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display String30 patientAgeNew()
    {
        Date        birthDate;
        DirPerson   person;
        HMCalcBirthDate     calcPatientBirthDate;
        HMAgeHelper         hmAgeHelper = new HMAgeHelper();
    
        //calcPatientBirthDate = hmAgeHelper.getDateFromAge(this.HMAgeValue);
        person = DirPerson::find(this.DirPartyTable);
        birthDate = person.birthDate();// mkdate(_person.BirthDay, _person..BirthMonth, _person.BirthYear);
    
        //if (calcPatientBirthDate != dateNull())
        //{
            //birthDate = calcPatientBirthDate;
        //}
    
        return this.GetAgeNewWithParameters(birthDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientBirthDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the  DOB of <c>DirPerson</c> setup table.
    /// </summary>
    /// <returns>
    /// The DOB of <c>DirPerson</c> setup table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display StartDate patientBirthDate()
    {
        //Date        birthDate;
        StartDate        birthDate;
        DirPerson   person;
    
        person = DirPerson::find(this.DirPartyTable);
        birthDate = person.birthDate();// mkdate(_person.BirthDay, _person..BirthMonth, _person.BirthYear);
    
        return birthDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientBirthDateEdit</Name>
				<Source><![CDATA[
    edit StartDate patientBirthDateEdit(Boolean set, StartDate birthDate)
    {
        StartDate   newBirthDate;
        DirPerson   dirPerson,dirPersonUpdate;
        HMCalcBirthDate     calcPatientBirthDate;
        HMAgeHelper         hmAgeHelper = new HMAgeHelper();
    
        dirPerson = DirPerson::find(this.DirPartyTable);
    
        if (set)
        {
            select forUpdate dirPersonUpdate
            where dirPersonUpdate.RecId == dirPerson.RecId;
            ttsbegin;
    
            dirPersonUpdate.BirthDay = dayofmth(birthDate);
            dirPersonUpdate.BirthMonth = mthofyr(birthDate);
            dirPersonUpdate.BirthYear = DateTimeUtil::year(DateTimeUtil::newDateTime(birthDate, 0));
            dirPersonUpdate.update();
    
            ttscommit;
    
            this.BirthDate = dirPersonUpdate.birthDate();
        }
    
        newBirthDate = dirPerson.birthDate();
    
        return newBirthDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientChartName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display HMShortDescription patientChartName()
    {
        return this.PatientChartNum() + ' : ' + this.PatientName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientChartNameGender</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display String255 patientChartNameGender()
    {
        str name;
        str chartNum;
        str gender;
        String255 info;
    
        name=this.PatientName();
        chartNum=this.PatientChartNum();
        gender=enum2str(this.Gender);
    
        if(gender == '')
        {
            info = chartNum + strFmt(' : ') + name;
        }
        else
        {
            info = chartNum + strFmt(' : ') + name + strFmt(', ')+ gender;
        }
    
        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientChartNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account of <c>CustTable</c>  table.
    /// </summary>
    /// <returns>
    /// The account of <c>CustTable</c>  table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display CustAccount patientChartNum()
    {
        CustTable       custTable;
    
        select AccountNum from custTable
        where custTable.RecId == this.CustTable;
    
        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientFirstName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first name of <c>DirPersonName</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPersonName</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display FirstName patientFirstName()
    {
        CustTable       custTable;
        DirPartyTable   dirPartyTable;
        DirPerson       dirPerson;
        DirPersonName   dirPersonName;
    
    
        select * from  custTable
            join * from dirPartyTable
            where custTable.RecId == this.CustTable
            && custTable.Party == dirPartyTable.RecId
            join * from dirPerson
            where dirPerson.RecId == dirPartyTable.RecId
            join * from dirPersonName
            where dirPersonName.Person == dirPerson.RecId;
    
        return dirPersonName.FirstName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientGender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gender of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The gender of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display String30 patientGender()
    {
        return enum2str(this.Gender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientImage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Bitmap patientImage()
    {
        Bitmap bitmap;
        //todo: ax7 new patient docuref method implementation 
        /*
        Bindata     binData ;
        FileIOPermission perm;
        DocuRef docuRef;
        HMDocuAction action = new HMDocuAction();
        str inputFile;
        DocuValue   docuValue;
        docuRef = DocuRef::findRecId(this.DocuRef);
    
        if(DocuType::find(docuRef.TypeId).FilePlace == DocuFilePlace::Database)
        {
            docuValue = DocuValue::find(docuRef.ValueRecId);
            bitmap = docuValue.File;
        }
        else
        {
            inputFile = docuRef.completeFilename();
    
            if(inputFile != '')
            {
                perm = new FileIOPermission(inputFile, 'r');
                perm.assert();
    
                binData = new BinData();
                if (binData.loadFile(inputFile))
                {
                    bitmap = binData.getData();
                }
                CodeAccessPermission::revertAssert();
    
            }
    
        }
        */
        return bitmap;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display String255 patientInformation()
    {
        str name;
        str chartNum;
        str gender;
        str age;
        String255 info;
    
        name=this.PatientName();
        chartNum=this.PhysicalChartNumber;
        gender=enum2str(this.Gender);
        age=this.PatientAgeNew();
    
      //  info = "@MAZ9"+strFmt(": ")+name +" "+strFmt("(") + chartNum +strFmt(") ")+"@SYS9284"+strFmt(": ")+gender+" "+"@SYS10445"+strFmt(": ")+ age;
    
        if(gender == '' && age == ' ')
        {
            info = chartnum != '' ? chartNum + strFmt(' : ') + name : '' + name;
        }
        else if(gender == '')
        {
            info = chartnum != '' ? chartNum + strFmt(' : ') + name + strFmt(', ')+ age : '' + name + strFmt(', ')+ age;
        }
        else if(age == ' ')
        {
            info = chartnum != '' ? chartNum + strFmt(' : ') + name + strFmt(', ') + gender : '' + name + strFmt(', ') + gender;
        }
        else
        {
            info = chartnum != '' ? chartNum + strFmt(' : ') + name + strFmt(', ') + gender + strFmt(', ')+ age : '' + name + strFmt(', ') + gender + strFmt(', ')+ age;
        }
    
       /* if (name == "..." && gender == "" && age == " ")
        {
            info = chartNum + strFmt(" : ");
        }
    
        else
        {
            info = chartNum + strFmt(" : ") + name + strFmt(", ") + gender + strFmt(", ")+ age;
        }
        */
        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientLanguage</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display LanguageId patientLanguage()
    {
        return this.getPatientLanguage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientLastFirstMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of <c>DirPersonName</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPersonName</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display Name patientLastFirstMiddleName()
    {
        DirPartyTable   dirPartyTable;
        DirPerson       dirPerson;
        DirPersonName   dirPersonName;
        Name name;
    
        select * from dirPartyTable
            where dirPartyTable.RecId == this.DirPartyTable
            join * from dirPerson
            where dirPerson.RecId == dirPartyTable.RecId
            join * from dirPersonName
            where dirPersonName.Person == dirPerson.RecId;
    
        if(dirPersonName.LastName && dirPersonName.FirstName && dirPersonName.MiddleName)
        {
            name = dirPersonName.LastName + ' ' + dirPersonName.FirstName + ' ' + dirPersonName.MiddleName;
        }
        else if(dirPersonName.LastName && dirPersonName.FirstName)
        {
            name = dirPersonName.LastName + ' ' + dirPersonName.FirstName;
        }
        else if(dirPersonName.LastName && dirPersonName.MiddleName)
        {
            name = dirPersonName.LastName + ' ' + dirPersonName.MiddleName;
        }
        else if(dirPersonName.MiddleName && dirPersonName.FirstName)
        {
            name = dirPersonName.FirstName + ' ' + dirPersonName.MiddleName;
        }
        else if(dirPersonName.LastName)
        {
            name = dirPersonName.LastName;
        }
        else if(dirPersonName.FirstName)
        {
            name = dirPersonName.FirstName;
        }
        else if(dirPersonName.MiddleName)
        {
            name = dirPersonName.MiddleName;
        }
    
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display DirPartyName patientName()
    {
        return DirPartyTable::findRec(this.DirPartyTable).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientNameWithSalutation</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display String255 patientNameWithSalutation()
    {
        String255 ret;
    
        if(this.Salutation != HRMSalutation::None)
        {
            ret = enum2str(this.Salutation) + ' ' + this.patientName();
        }
        else
        {
            ret = this.patientName();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientPrimaryAddress</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressing patientPrimaryAddress()
    {
        return DirParty::primaryPostalAddress(this.DirPartyTable).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientPrimaryEmail</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Email patientPrimaryEmail()
    {
        LogisticsElectronicAddress electronicAddress;
    
        electronicAddress = DirParty::primaryElectronicAddress(this.DirPartyTable, LogisticsElectronicAddressMethodType::Email);
    
        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientPrimaryPhone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the phone of <c>CustTable</c>  table.
    /// </summary>
    /// <returns>
    /// The phone of <c>CustTable</c>  table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display Phone patientPrimaryPhone()
    {
        LogisticsElectronicAddress electronicAddress;
    
        electronicAddress = DirParty::primaryElectronicAddress(this.DirPartyTable, LogisticsElectronicAddressMethodType::Phone);
    
        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientSalutationNameAgeGender</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display String255 patientSalutationNameAgeGender()
    {
        str name;
        str age;
        str gender;
        str salutation;
        String255 info;
    
        name=strLRTrim(this.PatientName());
        age=strLRTrim(this.patientAgeNew());
        gender=enum2str(this.Gender);
    
        if(this.Salutation != HRMSalutation::None)
        {
            salutation = enum2str(this.Salutation);
        }
        else
        {
            salutation = "";
        }
    
    
    
        if(gender == '' && salutation == '' && age == '')
        {
            info = name;
        }
        else if (salutation == '' && gender =='')
        {
            info = name + ', ' + age;
        }
        else if(gender == '' && age =='')
        {
            info = salutation + ' ' + name ;
        }
        else if(salutation == '' && age =='')
        {
            info = name + ', ' + gender;
        }
        else if(gender == '')
        {
            info = salutation + ' ' + name + ', ' + age;
        }
        else if(age =='')
        {
            info = salutation + ' ' + name+ ', ' + gender;
        }
        else if (salutation == '')
        {
            info = name + ', ' + age+ ', ' + gender;
        }
        else
        {
            info = salutation + ' ' + name + ', ' + age+ ', ' + gender;
        }
    
    
        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicianName</Name>
				<Source><![CDATA[
    //BP Deviation documented
    public edit Name physicianName(boolean _set, Name _dirPersonName)
    {
    
        HMClinicStaff               hmClinicStaffLocal;
        HcmWorker                   hcmWorkerLocal;
        DirPerson                   dirPersonLocal;
        DirPersonName               dirPersonNameLocal;
        Name                        retname;
    
        //breakpoint;
    
        if(!hasFieldAccess(tablenum(DirPerson),fieldnum(DirPerson,Name)))
        {
            throw error("@SYS57330");
        }
    
        if( _set )
        {
            select HcmWorker,RecId
            from hmClinicStaffLocal
            join Person,recId from hcmWorkerLocal
            join RecId,Name from dirPersonLocal
            join Person from dirPersonNameLocal
            where
            hmClinicStaffLocal.HcmWorker == hcmWorkerLocal.RecId
            && hcmWorkerLocal.Person == dirPersonLocal.RecId
            && dirPersonNameLocal.Person == dirPersonLocal.RecId
            && dirPersonLocal.Name == _dirPersonName;
    
            retname = dirPersonLocal.Name;
    
            this.HMClinicStaff = hmClinicStaffLocal.RecId;
        }
    
        return DirPerson::find(HcmWorker::find( HMClinicStaff::find(this.HMClinicStaff).HcmWorker).Person).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePhysicalChartNumber</Name>
				<Source><![CDATA[
    public boolean validatePhysicalChartNumber()
    {
        boolean ret = true;
        HMPatient hmPatientLocal;
    
        if(ret)
        {
            if (this.PhysicalChartNumber)
            {
                select count(RecId) from hmPatientLocal
                    where hmPatientLocal.PhysicalChartNumber == this.PhysicalChartNumber
                    && hmPatientLocal.RecId != this.RecId;
    
                if (hmPatientLocal.RecId > 0)
                {
                    ret = false;
                    warning("@MAZ11225");
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret;
        HMPatient   patientLocal;
    
        ret = super();
    
        if (ret)
        {
            select patientLocal
                where patientLocal.HMIdentificationNumber == this.HMIdentificationNumber
                    && patientLocal.RecId != this.RecId;
    
            if (patientLocal.RecId && patientLocal.HMIdentificationNumber != '')
            {
                ret = false;
                error("The National Identification number is already in use, please enter a valid Identification number.");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>HMPatient</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatient</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;
    
        if (!HMPatient::exist(_recId))
        {
            isExisting = checkFailed(strfmt(HMPatient::txtNotExist(),_recId));
        }
    
        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>HMPatient</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatient</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        HMPatient     hmPatient;
    
        select firstonly
            RecId
        from
            hmPatient
        where
            hmPatient.RecId == _recId;
    
        return hmPatient != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatient</c> table.
    /// </summary>
    /// <param name="_patientRecId">
    ///    The record ID of the <c>HMPatient</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatient</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatient find(
    HMPatientRecId       _patientRecId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatient   hmPatient;
    
        hmPatient.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatient.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly hmPatient
            where hmPatient.RecId == _patientRecId;
    
        return hmPatient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByMRN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds a patient for the MRN (AccountNum)
    /// </summary>
    /// <param name="_mrn">
    /// The Medical Record Number (AccountNum) to search for
    /// </param>
    /// <returns>
    /// The HMPatient record found for the sent MRN
    /// </returns>
    /// <remarks>
    /// Jan 10 2012 - created for CCD - consumed for finding patient's guarantor
    /// </remarks>
    
    public static HMPatient findByMRN(AccountNum          _mrn)
    {
        HMPatient   hmPatient;
        CustTable   custTable;
    
        select firstonly hmPatient join RecId,Party from custTable
            where hmPatient.CustTable == custTable.RecId
                && custTable.AccountNum == _mrn;
    
        return hmPatient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPerson</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the record in the <c>HMPatient</c> table specified by a template name.
    /// </summary>
    /// <param name="_person">
    ///    The person of the <c>HMPatient</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatient</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatient findByPerson(
    DirPartyRecId       _person,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatient   hmPatient;
    
        hmPatient.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatient.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly hmPatient
            where hmPatient.DirPartyTable == _person;
    
        return hmPatient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMPatient</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecallDate</Name>
				<Source><![CDATA[
    public static void updateRecallDate(RecId   _appointment)
    {
        HMResourceSchedulingAppointment  hmResourceSchedulingAppointment  = HMResourceSchedulingAppointment::find(_appointment);
        HMPatient                        hmPatient                        = HMPatient::find(hmResourceSchedulingAppointment.HMPatient);
        HMCustomerServiceContractHeader  hmCustomerServiceContractHeader;
        HMCustomerServiceContractLines   hmCustomerServiceContractLines;
        BOMTable                         bOMTable;
        BOMVersion                       bOMVersion;
        HMResourceSchedulingAppointment  hmResourceSchedulingAppointmentFetch;
        HMPatient                        hmPatientUpdate;
        AccountNum                       clientAccountNum;
        TransDate                        newRecallDate;
        int                              recallDays;
    
        if (hmPatient.ContactFirst)
        {
            clientAccountNum = CustTable::findRecId(hmPatient.Client).AccountNum;
            if (clientAccountNum)
            {
                select RecId from hmCustomerServiceContractHeader
                    where hmCustomerServiceContractHeader.CustAccount == clientAccountNum
                join RecId,HMServiceContractRecurrence from hmCustomerServiceContractLines
                    where hmCustomerServiceContractLines.HMCustomerServiceContractHeader == hmCustomerServiceContractHeader.RecId
                join RecId from bOMTable
                    where bOMTable.BOMId == hmCustomerServiceContractLines.BOMTable
                join RecId from  bOMVersion
                    where bOMVersion.BOMId == bOMTable.BOMId
                join RecId,AppointmentDate from hmResourceSchedulingAppointmentFetch
                    where hmResourceSchedulingAppointmentFetch.BOMVersion == bOMVersion.RecId
                    && hmResourceSchedulingAppointmentFetch.RecId == hmResourceSchedulingAppointment.RecId;
    
                if (hmCustomerServiceContractLines.RecId)
                {
                    switch (hmCustomerServiceContractLines.HMServiceContractRecurrence)
                    {
                        case HMServiceContractRecurrence::Weekly:
                            recallDays = 3;
                            newRecallDate = (hmResourceSchedulingAppointmentFetch.AppointmentDate + 7) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every2Weeks:
                            recallDays = 7;
                            newRecallDate = (hmResourceSchedulingAppointmentFetch.AppointmentDate + 14) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every3Weeks:
                            recallDays = 15;
                            newRecallDate = (hmResourceSchedulingAppointmentFetch.AppointmentDate + 21) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Monthly:
                            recallDays = 15;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,1) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every2Months:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,2) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every3Months:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,3) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every4Months:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,4) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::HalfYearly:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,6) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Yearly:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,12) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every2Year:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,24) - recallDays;
                            break;
    
                        case HMServiceContractRecurrence::Every3Year:
                            recallDays = 30;
                            newRecallDate = dateMthFwd(hmResourceSchedulingAppointmentFetch.AppointmentDate,36) - recallDays;
                            break;
    
                    }
    
                    ttsBegin;
    
                    select forUpdate RecId,RecallDate from hmPatientUpdate
                        where hmPatientUpdate.RecId == hmPatient.RecId;
    
                    hmPatientUpdate.RecallDate = newRecallDate;
                    hmPatientUpdate.update();
    
                    ttsCommit;
    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHeightInFeets</Name>
				<Source><![CDATA[
    public display String10 displayHeightInFeets()
    {
        int feet = this.Height / 12;
    
        int inchesLeft = this.Height mod 12;
    
        return strFmt('%1\'%2"',feet,inchesleft);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayWeightInKg</Name>
				<Source><![CDATA[
    public display String10 displayWeightInKg()
    {
        real weightInKg = this.Weight/2.2;
        weightInKg = decRound(this.Weight/2.2,2);
        return strFmt('%1',weightInKg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientBirthDate</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display date getPatientBirthDate()
    {
        DirPerson   person;
        date birthDate = dateNull();
    
        person = DirPerson::find(this.DirPartyTable);
        birthDate=person.birthDate();
        return birthDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientLastName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first name of <c>DirPersonName</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPersonName</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display FirstName patientLastName()
    {
        CustTable       custTable;
        DirPartyTable   dirPartyTable;
        DirPerson       dirPerson;
        DirPersonName   dirPersonName;
    
    
        select * from  custTable
            join * from dirPartyTable
            where custTable.RecId == this.CustTable
            && custTable.Party == dirPartyTable.RecId
            join * from dirPerson
            where dirPerson.RecId == dirPartyTable.RecId
            join * from dirPersonName
            where dirPersonName.Person == dirPerson.RecId;
    
        return dirPersonName.LastName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientMiddleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first name of <c>DirPersonName</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPersonName</c>table.
    /// </returns>
    //BP Deviation Documented
    [SysClientCacheDataMethodAttribute(true)]
    display FirstName patientMiddleName()
    {
        CustTable       custTable;
        DirPartyTable   dirPartyTable;
        DirPerson       dirPerson;
        DirPersonName   dirPersonName;
    
    
        select * from  custTable
            join * from dirPartyTable
            where custTable.RecId == this.CustTable
            && custTable.Party == dirPartyTable.RecId
            join * from dirPerson
            where dirPerson.RecId == dirPartyTable.RecId
            join * from dirPersonName
            where dirPersonName.Person == dirPerson.RecId;
    
        return dirPersonName.MiddleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientPrimaryCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    ///Returns primary country region of patient
    /// </summary>
    [SysClientCacheDataMethodAttribute(true)]
    display LogisticsAddressCountryRegionId getPatientPrimaryCountryRegion()
    {
        DirPartyPostalAddressView   AddressView;

        select CountryRegionId from AddressView
            where AddressView.Party == this.DirPartyTable && AddressView.IsPrimary;

        return AddressView.CountryRegionId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PatientMgmt</ConfigurationKey>
	<DeveloperDocumentation>@MAZ852</DeveloperDocumentation>
	<Label>@MAZ9</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>HcmEthnicOrigin</TitleField1>
	<TitleField2>OtherName</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhysicalChartNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>patientChartNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>patientName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirPartyTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmergencyContact</Name>
			<Label>@SYS33771</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Relationship</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPhoneMobile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPharmacy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPatientAllergyInvestigationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMClinicStaff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMLaboratories</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocuRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMCalcBirthDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMAgeValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherDetails</Name>
			<Label>@MAZ358</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMReferringPhysician</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Salutation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameSuffix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Employment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Employer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentLogisticsLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMProfession</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EmploymentEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Gender</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelfEmployed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EncounterActive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProfessionalStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherIdentifications</Name>
			<Label>@MAZ76</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BirthTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SocialSecurityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DrivingLicenseNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BloodGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMRaceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmEthnicOrigin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HcmLanguageCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OtherName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMClinicStaffFamilyDoctor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsVIP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReasonTableMerge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>patientPrimaryPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>patientName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>patientChartNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS24704</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AgeInDays</Name>
			<ExtendedDataType>HMAgeValue</ExtendedDataType>
			<HelpText>@MAZ8978</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AgeInMonths</Name>
			<ExtendedDataType>HMAgeValue</ExtendedDataType>
			<HelpText>@MAZ8977</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BirthDate</Name>
			<ExtendedDataType>BirthDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>BirthTime</Name>
			<ExtendedDataType>HMPatientBirthTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BloodGroup</Name>
			<EnumType>BloodGroup</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BoxId</Name>
			<ExtendedDataType>HMBoxId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CallNotes</Name>
			<HelpText>Patient call notes</HelpText>
			<Label>@MAZ12149</Label>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CanContact</Name>
			<HelpText>CSR can contact patient</HelpText>
			<Label>Can contact</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CivicAddress</Name>
			<HelpText>@MAZ11324</HelpText>
			<Label>@MAZ11323</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Client</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@PSA175</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ContactFirst</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>Contact first</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPerson</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS325541</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPhoneMobile</Name>
			<ExtendedDataType>PhoneMobile</ExtendedDataType>
			<Label>@MAZ64</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CreditCardToken</Name>
			<HelpText>@SYS4000166</HelpText>
			<Label>@SYS4000166</Label>
			<StringSize>50</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CriticalMedicalInformation</Name>
			<ExtendedDataType>HMMemo</ExtendedDataType>
			<Label>@MAZ11813</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustTable</Name>
			<ExtendedDataType>CustTableRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>Customer</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirPartyRelationshipNextToKin</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ8134</HelpText>
			<Label>@MAZ8133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirPartyTable</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Party</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DocuRef</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DrivingLicenseNumber</Name>
			<ExtendedDataType>HMDrivingLicense</ExtendedDataType>
			<HelpText>@MAZ354</HelpText>
			<Label>@MAZ2276</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmployeeNumber</Name>
			<Label>@SYS14981</Label>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Employer</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@SYS30556</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Employment</Name>
			<EnumType>PatientEmployment</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmploymentEmail</Name>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmploymentFax</Name>
			<ExtendedDataType>TeleFax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EmploymentLogisticsLocation</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EmploymentPhone</Name>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EncounterActive</Name>
			<HelpText>@MAZ4767</HelpText>
			<Label>@SYS39462</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Executive</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExecutiveProtocol</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS110796</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExtraCoveredByClient</Name>
			<HelpText>@MAZ10591</HelpText>
			<Label>@MAZ10592</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Field1</Name>
			<Label>@CLIFiltering:FilterDisplayControl_FieldName</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FileLocation</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ11272</HelpText>
			<Label>@MAZ12148</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Gender</Name>
			<EnumType>HcmPersonGender</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HasCareBookRegistration</Name>
			<Label>Care book registration</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmEthnicOrigin</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@MAZ1243</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HcmLanguageCode</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS66040</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>HMAgeValue</Name>
			<ExtendedDataType>HMAgeValue</ExtendedDataType>
			<HelpText>@MAZ7726</HelpText>
			<Label>@MAZ7725</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMBookingOrigin</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HMCalcBirthDate</Name>
			<ExtendedDataType>HMCalcBirthDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClinicStaff</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClinicStaffFamilyDoctor</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ8132</HelpText>
			<Label>@MAZ8131</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMHijriDateOfBirth</Name>
			<ExtendedDataType>HMHijriDateOfBirth</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMHijriExpiryDate</Name>
			<ExtendedDataType>HMHijriExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMIdentificationNumber</Name>
			<ExtendedDataType>HMIdentificationNumber</ExtendedDataType>
			<Label>@MAZ9179</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMLaboratories</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HMNationalIdExpiryDate</Name>
			<ExtendedDataType>HMNationalIdExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMNationalIdType</Name>
			<EnumType>HMNationalIdType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMPatientAllergyInvestigationStatus</Name>
			<EnumType>HMPatientAllergyInvestigationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMPharmacy</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMProfession</Name>
			<ExtendedDataType>HMProfessionRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMRaceCode</Name>
			<ExtendedDataType>HMRaceCodeRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMReferringPhysician</Name>
			<ExtendedDataType>HMReferringPhysicianRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InClinicFileLocation</Name>
			<ExtendedDataType>HMPatientClinicFileLocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsAuthorized</Name>
			<HelpText>@MAZ11315</HelpText>
			<Label>@MAZ11315</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOnHold</Name>
			<HelpText>@MAZ11318</HelpText>
			<Label>@MAZ11318</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsOutstanding</Name>
			<HelpText>@MAZ11314</HelpText>
			<Label>@MAZ11314</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsVIP</Name>
			<ExtendedDataType>HMVIP</ExtendedDataType>
			<HelpText>@MAZ8281</HelpText>
			<Label>@SYS81354</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JobTitle</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS28183</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsAddressCountryRegion</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ9022</HelpText>
			<Label>@MAZ9021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NameSuffix</Name>
			<EnumType>HRMNameSuffix</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OtherName</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@MAZ60</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PassportExpireDate</Name>
			<ExtendedDataType>PassportExpireDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PassportNum</Name>
			<ExtendedDataType>PassportNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PatientHighlights</Name>
			<ExtendedDataType>HMNotes</ExtendedDataType>
			<Label>@MAZ11824</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhysicalChartNumber</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>HMPhysicalChartNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PictureRefused</Name>
			<Label>@MAZ11850</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Pilot</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreEmployment</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>Pre-employment</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PreEmploymentProtocol</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS110796</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrefModeOfCommunication</Name>
			<EnumType>HMPreferredModeOfCommunication</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProfessionalStatus</Name>
			<ExtendedDataType>HMPatientProfessionalStatus</ExtendedDataType>
			<EnumType>HMProfessionalStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProvincialHealthCardExpDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@MAZ11337</HelpText>
			<Label>@MAZ2162</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProvincialHealthCardNumber</Name>
			<HelpText>@MAZ11336</HelpText>
			<Label>@MAZ11335</Label>
			<StringSize>15</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RAMQ</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableMerge</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ8288</HelpText>
			<Label>@SYS86426</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTablePatientDeactivate</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ9049</HelpText>
			<Label>@SYS86426</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RecallDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>Recall date</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefusedToProvidePicture</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<HelpText>Patient has refused to provide picture</HelpText>
			<Label>Refused to provide picture</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegisteredBy</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@MAZ13005</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RegistrationDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS111365</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Relationship</Name>
			<Label>@SYS80109</Label>
			<EnumType>HMRelationship</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Salutation</Name>
			<HelpText>@MAZ2280</HelpText>
			<Label>@SYS22501</Label>
			<EnumType>HRMSalutation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelfEmployed</Name>
			<HelpText>@MAZ357</HelpText>
			<Label>@MAZ93</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>smmBusRelTable</Name>
			<Label>@DMF1689</Label>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SocialSecurityNumber</Name>
			<ExtendedDataType>HMSocialSecurity</ExtendedDataType>
			<HelpText>@MAZ2581</HelpText>
			<Label>@MAZ9179</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>PatientStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TextOnInvoice</Name>
			<ExtendedDataType>Name</ExtendedDataType>
			<HelpText>Patient name on invoice</HelpText>
			<Label>Text on invoice</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>del_Category</Name>
			<EnumType>HMPatientCategory</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>Image</Name>
			<Label>Image</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FormProvision</Name>
			<Label>Form of provision</Label>
			<StringSize>200</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Height</Name>
			<HelpText>Patient height n inches</HelpText>
			<Label>Height (in.)</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HipaaDateAcknowledge</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>Date acknowledged</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMPatientRestriction</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Restrictions</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PrimaryPhysician</Name>
			<Label>Primary physician</Label>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReferringPhysician</Name>
			<Label>Referring physician</Label>
			<StringSize>60</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RefuseToSign</Name>
			<ExtendedDataType>HMVIP</ExtendedDataType>
			<Label>Refuse to sign</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RefuseToSignAcknowledge</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>Date acknowledged</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RISRegistered</Name>
			<Label>@MAZ13571</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<HelpText>Weight in lbs</HelpText>
			<Label>Weight (lbs)</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HIPAA</Name>
			<ExtendedDataType>HMVIP</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FamilyPhysician</Name>
			<Label>Family physician</Label>
			<StringSize>30</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustTableIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Enabled>No</Enabled>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMRaceCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMRaceCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmEthnicOriginIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmEthnicOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HcmLanguageCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HcmLanguageCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMReferringPhysicianIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMReferringPhysician</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LogisticsLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>EmploymentLogisticsLocation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMProfessionIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMProfession</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMClinicStaffIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMClinicStaff</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMPharmacyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMPharmacy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>HMLaboratoriesIdx2</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMLaboratories</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DocuRefIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>dataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DocuRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>Party</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DirPartyTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DirPartyMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Party</MapField>
					<MapFieldTo>DirPartyTable</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMVersion_Executive</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOMVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMVersion_Executive</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExecutiveProtocol</Name>
					<Field>ExecutiveProtocol</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMVersion_PreEmployment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BOMVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BOMVersion_PreEmployment</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PreEmploymentProtocol</Name>
					<Field>PreEmploymentProtocol</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_Client</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Client</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CustType</Name>
					<RelatedField>CustType</RelatedField>
					<Value>4</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Client_</Name>
					<Field>Client</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTable</Name>
					<Field>CustTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPartyTable</Name>
					<Field>DirPartyTable</Field>
					<RelatedField>Party</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyRelationshipNextToKin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DirPartyRelationship</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPartyRelationshipNextToKin</Name>
					<Field>DirPartyRelationshipNextToKin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DirPartyTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPartyTable</Name>
					<Field>DirPartyTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DocuRef_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DocuRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DocuRef</Name>
					<Field>DocuRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dataAreaId</Name>
					<Field>dataAreaId</Field>
					<RelatedField>RefCompanyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EmploymentLogisticsLocation_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EmploymentLogisticsLocation</Name>
					<Field>EmploymentLogisticsLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmEthnicOrigin_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmEthnicOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmEthnicOrigin</Name>
					<Field>HcmEthnicOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmLanguageCode_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmLanguageCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HcmLanguageCode</Name>
					<Field>HcmLanguageCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClinicStaff_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMClinicStaff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClinicStaff</Name>
					<Field>HMClinicStaff</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClinicStaffFamilyDoctor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMClinicStaff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HMClinicStaffFamilyDoctor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClinicStaffFamilyDoctor</Name>
					<Field>HMClinicStaffFamilyDoctor</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMLaboratories</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMLaboratories</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMLaboratories</Name>
					<Field>HMLaboratories</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMOrganizationalUnitVirtual_FileLocation</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMOrganizationalUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HMOrganizationalUnitVirtual_FileLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FileLocation</Name>
					<Field>FileLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMProfession_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMProfession</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMProfession</Name>
					<Field>HMProfession</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMRaceCode_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMRaceCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMRaceCode</Name>
					<Field>HMRaceCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMReferringPhysician_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMReferringPhysician</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMReferringPhysician</Name>
					<Field>HMReferringPhysician</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsAddressCountryRegion</Name>
					<Field>LogisticsAddressCountryRegion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTableMerge</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTableMerge</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PatientMerge</Name>
					<RelatedField>PatientMerge</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableMerge</Name>
					<Field>ReasonTableMerge</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReasonTablePatientDeactivate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReasonTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ReasonTablePatientDeactivate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PatientDeactivate</Name>
					<RelatedField>PatientDeactivate</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTablePatientDeactivate</Name>
					<Field>ReasonTablePatientDeactivate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RegistrationSource</Name>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMBookingOrigin</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMBookingOrigin</Name>
					<Field>HMBookingOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>smmBusRelTable</Name>
			<RelatedTable>smmBusRelTable</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>smmBusRelTable</Name>
					<Field>smmBusRelTable</Field>
					<RelatedField>BusRelAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMPharmacy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMPharmacy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMPharmacy</Name>
					<Field>HMPharmacy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMPatientRestriction</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMPatientRestriction</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMPatientRestriction</Name>
					<Field>HMPatientRestriction</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>