<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMCaseNotes</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMCaseNotes extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBillingStatementNotes</Name>
				<Source><![CDATA[
    public static void createBillingStatementNotes(custAccountStatementExtTmp custAccountStatementExtTmp)
    {
        HMCaseNotes                     hmCaseNotesStatement, hmCaseNotesPayment;
        HMCaseNotesIdentificationSetup  HMCaseNotesIdentificationSetupStatement, HMCaseNotesIdentificationSetupPaym;
        CustInvoiceJour custInvoiceJour;
        while select CustTrans_Invoice,CustTable_AccountNum from custAccountStatementExtTmp
        group by CustTrans_Invoice,CustTable_AccountNum
            where custAccountStatementExtTmp.CustTrans_Invoice != ''
        {
            select * from custInvoiceJour
            where custInvoiceJour.InvoiceId == custAccountStatementExtTmp.CustTrans_Invoice;
    
            if(custInvoiceJour.HMCase)
            {
                select * from hmCaseNotesStatement
                order by hmCaseNotesStatement.createdDateTime desc
                join HMCaseNotesIdentificationSetupStatement
                where hmCaseNotesStatement.HMCaseNotesIdentificationSetup == HMCaseNotesIdentificationSetupStatement.RecId
                && hmCaseNotesStatement.hmcase == custInvoiceJour.HMCase
                && hmCaseNotesStatement.CustAccount == custInvoiceJour.InvoiceAccount
                && (HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementGenerated
                || HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementReminder
                || HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementFinalNotice);
    
                select * from hmCaseNotesPayment
                order by hmCaseNotesPayment.createdDateTime desc
                join HMCaseNotesIdentificationSetupPaym
                where hmCaseNotesPayment.HMCaseNotesIdentificationSetup == HMCaseNotesIdentificationSetupPaym.RecId
                && hmCaseNotesStatement.CustAccount == custInvoiceJour.InvoiceAccount
                && hmCaseNotesPayment.hmcase == custInvoiceJour.HMCase
                && (HMCaseNotesIdentificationSetupPaym.Identification == HMCaseNotesIdentification::PaymentReceived);
    
    
    
                if(hmCaseNotesPayment.createdDateTime > hmCaseNotesStatement.createdDateTime || !hmCaseNotesStatement)
                {
                    HMCaseNotes::createCaseIdentificationNotes(custInvoiceJour.HMCase,HMCaseNotesIdentification::BillStatementGenerated,"",custInvoiceJour.InvoiceAccount);
                }
                else
                {
                    if(HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementGenerated)
                    {
                        HMCaseNotes::createCaseIdentificationNotes(custInvoiceJour.HMCase,HMCaseNotesIdentification::BillStatementReminder,"",custInvoiceJour.InvoiceAccount);
                    }
                    else if(HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementFinalNotice || HMCaseNotesIdentificationSetupStatement.Identification == HMCaseNotesIdentification::BillStatementReminder)
                    {
                        HMCaseNotes::createCaseIdentificationNotes(custInvoiceJour.HMCase,HMCaseNotesIdentification::BillStatementFinalNotice,"",custInvoiceJour.InvoiceAccount);
                    }
                }
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCaseIdentificationNotes</Name>
				<Source><![CDATA[
    public static void createCaseIdentificationNotes(RecId _caseRecId, HMCaseNotesIdentification _identifier, str _notes, str _accountNum = '', AmountMST _amount = 0.00)
    {
        HMCaseNotes hmCaseNotes;
        str notes;
        try
        {
            hmCaseNotes.initValue();
            hmCaseNotes.HMCaseNotesIdentificationSetup = HMCaseNotesIdentificationSetup::findByIdentification(_identifier).RecId;
            hmCaseNotes.HMCase = _caseRecId;
            hmCaseNotes.CustAccount = _accountNum;
            if(_notes)
            {
                hmCaseNotes.Notes = _notes;
            }
            else
            {
                switch(_identifier)
                {
                    case HMCaseNotesIdentification::UB04:
                        notes = strFmt("Claim generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::Invoiced:
                        notes = strFmt("Invoiced to %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::PaymentReceived:
                        notes = strFmt("Payment amount : %1 received from %2",_accountNum,_amount);
                        break;
                    case HMCaseNotesIdentification::BillStatementGenerated:
                        notes = strFmt("Bill statement generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::BillStatementReminder:
                        notes = strFmt("Bill statement reminder generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::BillStatementFinalNotice:
                        notes = strFmt("Bill statement final notice generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::BillAttorney:
                        notes = strFmt("Attorny bill generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::BillCarrier:
                        notes = strFmt("Insurance carrier bill generated for %1",_accountNum);
                        break;
                    case HMCaseNotesIdentification::BillPatient:
                        notes = strFmt("Patient bill generated for %1",_accountNum);
                        break;
    
                }
                hmCaseNotes.Notes = notes;
            }
            hmCaseNotes.insert();
        }
        catch
        {
            throw error("Error in inserting case notes");
        }
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>Mazikcare table to store case notes</DeveloperDocumentation>
	<Label>Case notes</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>HMCase</TitleField1>
	<TitleField2>Notes</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMCase</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMCaseNotesIdentificationSetup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>Identification</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<Label>@MAZ190</Label>
			<StringSize>-1</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMCase</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMCase</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMCase</Name>
					<Field>HMCase</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMCaseNotesIdentificationSetup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMCaseNotesIdentificationSetup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMCaseNotesIdentificationSetup</Name>
					<Field>HMCaseNotesIdentificationSetup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>