<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMInsuranceCoveragePlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMInsuranceCoveragePlan extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>email</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display Email email()
    {
        return this.getCustTable().email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    public CustTable getCustTable()
    {
        CustTable   custTable;
    
        select firstOnly custTable where custTable.AccountNum == this.InsuranceCarrier;
    
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Name</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display CustName Name()
    {
        return this.getCustTable().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display LogisticsAddressing postalAddress()
    {
        return this.getCustTable().address();
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryEmail</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display LogisticsElectronicAddressLocator primaryEmail()
    {
        CustTable                   custTable;
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
    
        select * from logisticsElectronicAddress
        join * from logisticsLocation
        join * from dirPartyLocation
        join * from dirPartyTable
        join * from custTable
        where logisticsElectronicAddress.Location==logisticsLocation.RecId
        && logisticsLocation.RecId==dirPartyLocation.Location
        && dirPartyLocation.Party==dirPartyTable.RecId
        && dirPartyTable.RecId==custTable.Party
        && custTable.RecId==CustTable::find(this.InsuranceCarrier).RecId
        && dirPartyLocation.IsPrimary==NoYes::Yes
        && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Email;
    
        return logisticsElectronicAddress.locator;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryFax</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display LogisticsElectronicAddressLocator primaryFax()
    {
        CustTable                   custTable;
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
    
        select * from logisticsElectronicAddress
        join * from logisticsLocation
        join * from dirPartyLocation
        join * from dirPartyTable
        join * from custTable
        where logisticsElectronicAddress.Location==logisticsLocation.RecId
        && logisticsLocation.RecId==dirPartyLocation.Location
        && dirPartyLocation.Party==dirPartyTable.RecId
        && dirPartyTable.RecId==custTable.Party
        && custTable.RecId==CustTable::find(this.InsuranceCarrier).RecId
        && dirPartyLocation.IsPrimary==NoYes::Yes
        && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Fax;
    
        return logisticsElectronicAddress.locator;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryPhone</Name>
				<Source><![CDATA[
    //BP Deviation Documented
    display LogisticsElectronicAddressLocator primaryPhone()
    {
        CustTable                   custTable;
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsLocation           logisticsLocation;
        LogisticsElectronicAddress  logisticsElectronicAddress;
    
    
        select * from logisticsElectronicAddress
        join * from logisticsLocation
        join * from dirPartyLocation
        join * from dirPartyTable
        join * from custTable
        where logisticsElectronicAddress.Location==logisticsLocation.RecId
        && logisticsLocation.RecId==dirPartyLocation.Location
        && dirPartyLocation.Party==dirPartyTable.RecId
        && dirPartyTable.RecId==custTable.Party
        && custTable.RecId==CustTable::find(this.InsuranceCarrier).RecId
        && dirPartyLocation.IsPrimary==NoYes::Yes
        && logisticsElectronicAddress.Type==LogisticsElectronicAddressMethodType::Phone;
    
        return logisticsElectronicAddress.locator;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
        if(ret && this.CoveragePercentage> 100.00)
        {
                ret = checkFailed("@MAZ3346");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMInsuranceCoveragePlan</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMInsuranceCoveragePlan</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMInsuranceCoveragePlan</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMInsuranceCoveragePlan::exist(_recId))
        {
            ret = checkFailed(strfmt(HMInsuranceCoveragePlan::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMInsuranceCoveragePlan</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMInsuranceCoveragePlan</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmInsuranceCoveragePlan
                 where
                     HMInsuranceCoveragePlan.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>HMInsuranceCoveragePlan</c> table.
    /// </summary>
    /// <param name="_recid">
    ///     The record ID of the <c>HMInsuranceCoveragePlan</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>HMInsuranceCoveragePlan</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static HMInsuranceCoveragePlan find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMInsuranceCoveragePlan  hmInsuranceCoveragePlan;
        hmInsuranceCoveragePlan.selectForUpdate(_forUpdate);
    
        if(_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmInsuranceCoveragePlan.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmInsuranceCoveragePlan where hmInsuranceCoveragePlan.RecId == _recid;
    
        return hmInsuranceCoveragePlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMInsuranceCoveragePlan</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HIS</ConfigurationKey>
	<DeveloperDocumentation>@MAZ3262</DeveloperDocumentation>
	<Label>@MAZ3255</Label>
	<TitleField1>Code</TitleField1>
	<TitleField2>Description</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoverageAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoveragePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceCarrier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPaymentOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Code</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoverageAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoveragePercentage</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isEditable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceCarrier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPaymentOption</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS25589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>HMCode</ExtendedDataType>
			<HelpText>@MAZ3263</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoverageAmount</Name>
			<ExtendedDataType>Amount</ExtendedDataType>
			<HelpText>@MAZ3258</HelpText>
			<Label>@MAZ3351</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoveragePercentage</Name>
			<ExtendedDataType>HMPercentPositive</ExtendedDataType>
			<HelpText>@MAZ3259</HelpText>
			<Label>@MAZ3352</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<HelpText>@MAZ3256</HelpText>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMPaymentOption</Name>
			<EnumType>HMPaymentOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InsuranceCarrier</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@MAZ607</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>isEditable</Name>
			<HelpText>@MAZ3261</HelpText>
			<Label>@SYS304123</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HMInsuranceCoveragePlanCodeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InsuranceCarrier_CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InsuranceCarrier</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>InsuranceCarrier</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>CustType</Name>
					<RelatedField>CustType</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>