<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMInsuranceCarrierBatchDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMInsuranceCarrierBatchDetails extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        HMInsuranceCarrierBatchDetails  HMInsuranceCarrierBatchDetails;
        date fromDate,toDate;
        fromDate = this.FromDate;
        toDate = this.ToDate;
        ret = super();
        if(ret)
        {
            if( ret && this.FromDate > this.ToDate)
            {
                ret = checkFailed("@SYS120590");
            }
            if(ret)
            {
                select count(RecId) from HMInsuranceCarrierBatchDetails
                where
                ( (HMInsuranceCarrierBatchDetails.FromDate >= fromDate && HMInsuranceCarrierBatchDetails.FromDate <= toDate)
                || (HMInsuranceCarrierBatchDetails.toDate >= fromDate && HMInsuranceCarrierBatchDetails.toDate <= toDate)
                || (fromDate >= HMInsuranceCarrierBatchDetails.FromDate && fromDate <= HMInsuranceCarrierBatchDetails.toDate)
                ||  (toDate >= HMInsuranceCarrierBatchDetails.FromDate && toDate <= HMInsuranceCarrierBatchDetails.toDate))
                && HMInsuranceCarrierBatchDetails.HMInsuranceCarrier == this.HMInsuranceCarrier
                && HMInsuranceCarrierBatchDetails.Status == HMInsuranceCarrierBatchStatus::Active
                && HMInsuranceCarrierBatchDetails.RecId != this.RecId;
                if(HMInsuranceCarrierBatchDetails.RecId > 0)
                {
                    ret = checkFailed("@MAZ13446");
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record for the <c>HMInsuranceCarrierBatchDetails</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The rec id of the <c>HMInsuranceCarrierBatchDetails</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMInsuranceCarrierBatchDetails</c> table; otherwise, an empty record.
    /// </returns>
    public static HMInsuranceCarrierBatchDetails find(
    RefRecId            _recId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMInsuranceCarrierBatchDetails   HMInsuranceCarrierBatchDetails;
    
        HMInsuranceCarrierBatchDetails.selectForUpdate(_forUpdate);
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            HMInsuranceCarrierBatchDetails.concurrencyModel(_concurrencyModel);
        }
    
        select HMInsuranceCarrierBatchDetails
            where HMInsuranceCarrierBatchDetails.RecId == _recId;
    
        return HMInsuranceCarrierBatchDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findbByBatchNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMInsuranceCarrierBatchDetails</c> table.
    /// </summary>
    /// <param name="_insuranceBatchNumber">
    ///    The batch # of the <c>HMInsuranceCarrierBatchDetails</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMInsuranceCarrierBatchDetails</c> table; otherwise, an empty record.
    /// </returns>
    public static HMInsuranceCarrierBatchDetails findbByBatchNumber(
    HMInsuranceCarrierBatchNumber     _insuranceBatchNumber,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMInsuranceCarrierBatchDetails   HMInsuranceCarrierBatchDetails;
    
        HMInsuranceCarrierBatchDetails.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            HMInsuranceCarrierBatchDetails.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly HMInsuranceCarrierBatchDetails
            where HMInsuranceCarrierBatchDetails.BatchNumber == _insuranceBatchNumber;
    
        return HMInsuranceCarrierBatchDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdbByBatchNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMInsuranceCarrierBatchDetails</c> table.
    /// </summary>
    /// <param name="_insuranceBatchNumber">
    ///    The batch # of the <c>HMInsuranceCarrierBatchDetails</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMInsuranceCarrierBatchDetails</c> table; otherwise, an empty record.
    /// </returns>
    public static RecId findRecIdbByBatchNumber(
    HMInsuranceCarrierBatchNumber     _insuranceBatchNumber,
    boolean                     _forUpdate = false,
    ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMInsuranceCarrierBatchDetails   HMInsuranceCarrierBatchDetails;
    
        HMInsuranceCarrierBatchDetails.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            HMInsuranceCarrierBatchDetails.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly RecId from HMInsuranceCarrierBatchDetails
            where HMInsuranceCarrierBatchDetails.BatchNumber == _insuranceBatchNumber;
    
        return HMInsuranceCarrierBatchDetails.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdByCarrierAndDate</Name>
				<Source><![CDATA[
    public static HMInsuranceCarrierBatchDetails findRecIdByCarrierAndDate(RecId _insuranceRecId, date _date = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
    {
        HMInsuranceCarrierBatchDetails  HMInsuranceCarrierBatchDetails;
        select * from HMInsuranceCarrierBatchDetails
        where HMInsuranceCarrierBatchDetails.HMInsuranceCarrier == _insuranceRecId
        && (HMInsuranceCarrierBatchDetails.FromDate <= _date
        && HMInsuranceCarrierBatchDetails.ToDate >= _date)
        && HMInsuranceCarrierBatchDetails.Status == HMInsuranceCarrierBatchStatus::Active;
    
        return HMInsuranceCarrierBatchDetails;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>Carrier batch details</Label>
	<TitleField1>BatchNumber</TitleField1>
	<TitleField2>HMInsuranceCarrier</TitleField2>
	<ReplacementKey>BatchIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BatchNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BatchNumber</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS53636</Label>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS124336</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMInsuranceCarrier</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Month</Name>
			<ExtendedDataType>HMTransDateMonthYear</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reference</Name>
			<HelpText>@MAZ13274</HelpText>
			<Label>@SYS112248</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>HMInsuranceCarrierBatchStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS124348</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BatchIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BatchNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionDefault</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMInsuranceCarrier</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMInsuranceCarrier</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMInsuranceCarrier</Name>
					<Field>HMInsuranceCarrier</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>