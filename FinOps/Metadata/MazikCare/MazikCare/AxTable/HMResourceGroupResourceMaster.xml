<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMResourceGroupResourceMaster</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMResourceGroupResourceMaster extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decreasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the priority of the selected transaction type.
    /// </summary>
    /// <returns>
    ///    true if the priority is decreased; otherwise, false.
    /// </returns>
    private boolean decreasePriority()
    {
        boolean ret ;
       // int newPriority;
        #Define.MinPriority(0)
    
        HMResourceGroupResourceMaster HMResourceGroupResourceMaster;
    
        if (this.Priority == #MinPriority)
        {
            ret = false;
        }
        else
        {
            // find the secondary order to swap
            HMResourceGroupResourceMaster = HMResourceGroupResourceMaster::findByPriorityInDirection(this.HMResourceGroup, this.Priority, false, true);
            if(HMResourceGroupResourceMaster)
            {
                this.swapPriority(this, HMResourceGroupResourceMaster, HMResourceGroupResourceMaster.Priority);
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>increasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Increases the priority of the selected Insurace policy.
    /// </summary>
    /// <returns>
    ///    true if the priority is increased; otherwise, false.
    /// </returns>
    private boolean increasePriority()
    {
        boolean ret;
      //  HMInsurancePolicyPriority newPriority;
    
        HMResourceGroupResourceMaster HMResourceGroupResourceMaster;
    
        // find the secondary order to swap
        HMResourceGroupResourceMaster = HMResourceGroupResourceMaster::findByPriorityInDirection(this.HMResourceGroup, this.Priority, true, true);
        this.swapPriority(this, HMResourceGroupResourceMaster, HMResourceGroupResourceMaster.Priority);
        ret = true;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.RecId == 0)
        {
            this.Priority = HMResourceGroupResourceMaster::getMinPriorityByResourceGroup(this.HMResourceGroup) + 1;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceGroupDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Description resourceGroupDescription()
    {
        HMResourceGroup hmResourceGroup;
    
        select Description from hmResourceGroup where hmResourceGroup.RecId == this.HMResourceGroup;
    
        return hmResourceGroup.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceMasterDescription</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public display Description resourceMasterDescription()
    {
        HMResourceMaster resourceMaster;
    
        select Description from resourceMaster
        where resourceMaster.RecId == this.HMResourceMaster;
    
        return resourceMaster.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Swaps the priorities of two records.
    /// </summary>
    /// <param name="_currHMResourceGroupResourceMaster">
    ///    The <c>HMResourceGroupResourceMaster</c> type value of the record.
    /// </param>
    /// <param name="_newHMResourceGroupResourceMaster">
    ///    A <c>HMResourceGroupResourceMaster</c> value that indicates the records with which to swap the priority.
    /// </param>
    /// <param name="_newPriority">
    ///    A <c>HMInsurancePolicyPriority</c> value that indicates the new priority to be assigned.
    /// </param>
    private void swapPriority(HMResourceGroupResourceMaster _currHMResourceGroupResourceMaster,
        HMResourceGroupResourceMaster _newHMResourceGroupResourceMaster,
        HMInsurancePolicyPriority _newPriority)
    {
        ttsbegin;
        _newHMResourceGroupResourceMaster.Priority = _currHMResourceGroupResourceMaster.Priority;
        _currHMResourceGroupResourceMaster.Priority = _newPriority;
    
        _newHMResourceGroupResourceMaster.update();
        _currHMResourceGroupResourceMaster.selectForUpdate(true);
        _currHMResourceGroupResourceMaster.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        HMResourceGroupResourceMaster      HMResourceGroupResourceMaster;
    
        ret = super();
    
        if( ret )
        {
            ttsBegin;
            while select forUpdate * from HMResourceGroupResourceMaster
            where HMResourceGroupResourceMaster.HMResourceGroup == this.HMResourceGroup
            && HMResourceGroupResourceMaster.Priority > this.Priority
            {
                HMResourceGroupResourceMaster.Priority--;
                if( HMResourceGroupResourceMaster.validateWrite())
                {
                    HMResourceGroupResourceMaster.update();
                }
            }
    
            ttsCommit;
    
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>HMResourceMaster</c> table.
    /// </summary>
    /// <param name="_recid">
    ///     The record ID of the <c>HMResourceMaster</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>HMResourceMaster</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static HMResourceGroupResourceMaster find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMResourceGroupResourceMaster  HMResourceGroupResourceMaster;
    
        HMResourceGroupResourceMaster.selectForUpdate(_forUpdate);
    
        if(_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            HMResourceGroupResourceMaster.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from HMResourceGroupResourceMaster where HMResourceGroupResourceMaster.RecId == _recid;
    
        return HMResourceGroupResourceMaster;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriorityInDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HMPatientInsurance</c> table
    /// </summary>
    /// <param name = "_resourceGroupRecId"></param>
    /// <param name = "_currPriority"></param>
    /// <param name = "_direction"></param>
    /// <param name = "_forUpdate"></param>
    /// <returns> The record ID of the <c>Patient</c> table to find. </returns>
    public static HMResourceGroupResourceMaster findByPriorityInDirection(RecId _resourceGroupRecId, HMInsurancePolicyPriority _currPriority, boolean _direction,
    boolean _forUpdate = false)
    {
        HMResourceGroupResourceMaster HMResourceGroupResourceMaster;
        HMInsurancePolicyPriority newPriority;
        int counter;
    
        select forUpdate HMResourceGroupResourceMaster where HMResourceGroupResourceMaster.HMResourceGroup == _resourceGroupRecId
            && HMResourceGroupResourceMaster.Priority == _currPriority;
        HMResourceGroupResourceMaster.selectForUpdate(_forUpdate);
    
        if (_direction)
        {
            newPriority = _currPriority + 1;
            counter = HMResourceGroupResourceMaster::getMinPriorityByResourceGroup(_resourceGroupRecId);
    
            while (newPriority <= counter)
            {
                select firstonly HMResourceGroupResourceMaster
                    where HMResourceGroupResourceMaster.Priority == newPriority
                    && HMResourceGroupResourceMaster.HMResourceGroup == _resourceGroupRecId;
    
                if (HMResourceGroupResourceMaster)
                {
                    break;
                }
                else
                {
                    ++newPriority;
                }
            }
        }
        else
        {
            newPriority = _currPriority - 1;
    
            while (newPriority > 0)
            {
                select firstonly HMResourceGroupResourceMaster
                    where HMResourceGroupResourceMaster.Priority == newPriority
                    && HMResourceGroupResourceMaster.HMResourceGroup == _resourceGroupRecId;
    
                if (HMResourceGroupResourceMaster)
                {
                    break;
                }
                else
                {
                    --newPriority;
                }
            }
        }
    
        return HMResourceGroupResourceMaster;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinPriorityByResourceGroup</Name>
				<Source><![CDATA[
    public static int getMinPriorityByResourceGroup(RecId _resourceGroupRecId)
    {
        HMResourceGroupResourceMaster HMResourceGroupResourceMaster;
    
        select maxOf(Priority) from HMResourceGroupResourceMaster
            where HMResourceGroupResourceMaster.HMResourceGroup == _resourceGroupRecId;
    
        return HMResourceGroupResourceMaster.Priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriorityOrder</Name>
				<Source><![CDATA[
    public static boolean updatePriorityOrder(HMResourceGroupResourceMaster _hmResourceGroupResourceMaster,
    boolean _isIncrease = false)
    {
        boolean ret;
        HMResourceGroupResourceMaster HMResourceGroupResourceMaster;
    
        HMResourceGroupResourceMaster = _hmResourceGroupResourceMaster;
    
        Debug::assert(HMResourceGroupResourceMaster.RecId != 0);
    
        if (_isIncrease)
        {
            ret = HMResourceGroupResourceMaster.increasePriority();
        }
        else
        {
            ret = HMResourceGroupResourceMaster.decreasePriority();
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@MAZ11215</DeveloperDocumentation>
	<Label>@MAZ11214</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>HMResourceGroup</TitleField1>
	<TitleField2>HMResourceMaster</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMResourceMaster</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMResourceMaster</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMResourceGroup</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS15433</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMResourceMaster</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS89158</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<HelpText>@MAZ11359</HelpText>
			<Label>@SYS130699</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ResourceGroupResourceMasterIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>HMResourceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HMResourceMaster</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PriorityIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Priority</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMResourceGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMResourceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMResourceGroup</Name>
					<Field>HMResourceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMResourceMaster</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HMResourceMaster</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMResourceMaster</Name>
					<Field>HMResourceMaster</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>