<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimDiagnosis</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimDiagnosis extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decreasePriority</Name>
				<Source><![CDATA[
    public void decreasePriority()
    {
        HMClaimDiagnosis    hmClaimDiagnosis;
    
    
        select count(recId) from hmClaimDiagnosis
        where hmClaimDiagnosis.HMClaimTable == this.HMClaimTable;
    
        if( this.Priority < hmClaimDiagnosis.RecId )
        {
            ttsBegin;
            select firstOnly forUpdate hmClaimDiagnosis
            where hmClaimDiagnosis.Priority == (this.Priority + 1)
            && hmClaimDiagnosis.HMClaimTable == this.HMClaimTable;
    
            if( hmClaimDiagnosis )
            {
                hmClaimDiagnosis.Priority--;
                hmClaimDiagnosis.update();
    
                this.Priority++;
                this.update();
            }
    
            ttsCommit;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>increasePriority</Name>
				<Source><![CDATA[
    public void increasePriority()
    {
        HMClaimDiagnosis    hmClaimDiagnosis;
    
        if( this.Priority > 1 )
        {
            ttsBegin;
            select firstOnly forUpdate hmClaimDiagnosis
            where hmClaimDiagnosis.Priority == (this.Priority - 1)
            && hmClaimDiagnosis.HMClaimTable == this.HMClaimTable;
    
            if( hmClaimDiagnosis )
            {
                hmClaimDiagnosis.Priority++;
                hmClaimDiagnosis.update();
    
                this.Priority--;
                this.update();
            }
    
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.Priority = HMClaimDiagnosis::getAvailablePriority(this.HMClaimTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
        HMClaimDiagnosis    hmClaimDiagnosis;
    
        ret = super();
    
        if(ret)
        {
            ttsBegin;
    
            while select forUpdate * from hmClaimDiagnosis
            where hmClaimDiagnosis.HMClaimTable == this.HMClaimTable
            && hmClaimDiagnosis.Priority > this.Priority
            {
                hmClaimDiagnosis.Priority--;
                if( hmClaimDiagnosis.validateWrite())
                {
                    hmClaimDiagnosis.update();
                }
            }
    
            ttsCommit;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMClaimDiagnosis</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMClaimDiagnosis</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMClaimDiagnosis</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMClaimDiagnosis::exist(_recId))
        {
            ret = checkFailed(strfmt(HMClaimDiagnosis::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMClaimDiagnosis</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMClaimDiagnosis</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmClaimDiagnosis
                 where
                     hmClaimDiagnosis.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HMClaimDiagnosis</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>HMClaimDiagnosis</c> table; otherwise, an empty record.
    /// </returns>
    public static HMClaimDiagnosis find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMClaimDiagnosis    hmClaimDiagnosis;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmClaimDiagnosis.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            hmClaimDiagnosis.selectForUpdate(_forUpdate);
    
            select firstonly hmClaimDiagnosis
                where hmClaimDiagnosis.RecId == _recId;
        }
    
        return hmClaimDiagnosis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailablePriority</Name>
				<Source><![CDATA[
    public static Integer getAvailablePriority(RecId _claimRecId)
    {
        HMClaimDiagnosis    hmClaimDiagnosis;
    
        select maxOf(Priority)
            from hmClaimDiagnosis
            where hmClaimDiagnosis.HMClaimTable == _claimRecId;
    
        if(hmClaimDiagnosis)
            return hmClaimDiagnosis.Priority + 1;
        else
            return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMClaim1500Diagnosis</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BillNClaimMgmt</ConfigurationKey>
	<DeveloperDocumentation>@MAZ9629</DeveloperDocumentation>
	<Label>@MAZ9628</Label>
	<TitleField1>HMClaimTable</TitleField1>
	<TitleField2>HMDiagnosisDictionary</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMClaimTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Diagnosis</Name>
			<Label>@MAZ130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClaimTable</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMDiagnosisDictionary</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ9635</HelpText>
			<Label>@MAZ130</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMDiagnosisName</Name>
			<ExtendedDataType>HMDiagnosisName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMICDCode</Name>
			<ExtendedDataType>HMICDCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMStatusText</Name>
			<ExtendedDataType>HMStatusText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>Integer</ExtendedDataType>
			<HelpText>@MAZ932</HelpText>
			<Label>@MAZ931</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HMClaimDiagnosisIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMClaimTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClaimTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HMClaimTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClaimTable</Name>
					<Field>HMClaimTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMDiagnosisDictionary</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HMDiagnosisDictionary</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMDiagnosisDictionary</Name>
					<Field>HMDiagnosisDictionary</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>