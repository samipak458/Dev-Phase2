<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientEncounterClinicStaff</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMPatientEncounterClinicStaff extends common
{
    /// <summary>
    /// Gets PhysicianName of <c>HMPatientEncounterClinicStaff</c>  table.
    /// </summary>
    /// <param name="_set">
    ///    boolean variable
    /// </param>
    /// <param name="_dirPersonName">
    ///    The person name of the <c>HMPatientEncounterClinicStaff</c>.
    /// </param>
    ///  <returns>
    /// The PhysicianName  of <c>HMPatientEncounterClinicStaff</c> setup table.
    /// </returns>
    //BP Deviation documented
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>physicianName</Name>
				<Source><![CDATA[
    public edit Name physicianName(boolean _set, Name _dirPersonName)
    {
    
        HMClinicStaff               hmClinicStaffLocal;
        HcmWorker                   hcmWorkerLocal;
        DirPerson                   dirPersonLocal;
     //   DirPartyTable             dirPartyTable;
        DirPersonName               dirPersonNameLocal;
        Name                        Retname;
    
        //breakpoint;
    
        if(!hasFieldAccess(tablenum(DirPerson),fieldnum(DirPerson,Name)))
        {
            throw error("@SYS57330");
        }
    
        if( _set)
        {
    
            select * from hmClinicStaffLocal
            join RecId,Person from hcmWorkerLocal
            join RecId,Name from dirPersonLocal
            join RecId,Person from dirPersonNameLocal
            where
            hmClinicStaffLocal.HcmWorker == hcmWorkerLocal.RecId
            && hcmWorkerLocal.Person == dirPersonLocal.RecId
            && dirPersonNameLocal.Person == dirPersonLocal.RecId
            && dirPersonLocal.Name == _dirPersonName;
    
            Retname = dirPersonLocal.Name;//dirPersonNameLocal.FirstName+dirPersonNameLocal.MiddleName+dirPersonNameLocal.LastName;
    
         //    info(sysquery::value(hmClinicStaffLocal.RecId));
             //info(_Retname);
             this.HMClinicStaff = hmClinicStaffLocal.RecId;
            //info(int642str(this.HMClinicStaff));
        }
    
    
    
        return DirPerson::find(HcmWorker::find( HMClinicStaff::find(this.HMClinicStaff).HcmWorker).Person).Name;
    
    
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPhysicianName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the physician name
    /// </summary>
    /// <returns>
    /// physician full na,e
    /// </returns>
    
    display Name showPhysicianName()
    {
        return DirPerson::find(HcmWorker::find(HMClinicStaff::find(this.HMClinicStaff).HcmWorker).Person).Name;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRole</Name>
				<Source><![CDATA[
    display Description showRole()
    {
        HMClinicStaffRole       hmClinicStaffRoleLocal;
        HMClinicStaff           hmClinicStaffLocal;
    
        select * from hmClinicStaffRoleLocal
            join * from hmClinicStaffLocal
            where hmClinicStaffLocal.RecId == this.HMClinicStaff
            && hmClinicStaffLocal.HMClinicStaffRole == hmClinicStaffRoleLocal.RecId;
    
        return (enum2str(hmClinicStaffRoleLocal.Role));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>HMPatientEncounterClinicStaff</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientEncounterClinicStaff</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;
    
        if (!HMPatientEncounterClinicStaff::exist(_recId))
        {
            isExisting = checkFailed(strfmt(HMPatientEncounterClinicStaff::txtNotExist(),_recId));
        }
    
        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>HMPatientEncounterClinicStaff</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientEncounterClinicStaff</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        HMPatientEncounterClinicStaff     hmPatientEncounterClinicStaff;
    
        select firstonly
            RecId
        from
            hmPatientEncounterClinicStaff
        where
            hmPatientEncounterClinicStaff.RecId == _recId;
    
        return hmPatientEncounterClinicStaff != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatientEncounterClinicStaff</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientEncounterClinicStaff</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatientEncounterClinicStaff</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatientEncounterClinicStaff find(
        RecId _recId,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
         HMPatientEncounterClinicStaff            hmPatientEncounterClinicStaff;
    
        hmPatientEncounterClinicStaff.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientEncounterClinicStaff.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly
                hmPatientEncounterClinicStaff
            where
                hmPatientEncounterClinicStaff.RecId == _recId;
    
        return hmPatientEncounterClinicStaff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPatientEncounter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatientEncounterClinicStaff</c> table against the patient encounter id sent.
    /// </summary>
    /// <param name="_PatEncRecId">
    ///    The record ID of the <c>HMPatientEncounter</c> record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatientEncounterClinicStaff</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatientEncounterClinicStaff findByPatientEncounter(RecId _PatEncRecId)
    {
        HMPatientEncounterClinicStaff            hmPatientEncounterClinicStaff;
    
    
        select firstonly
                hmPatientEncounterClinicStaff
            where
                hmPatientEncounterClinicStaff.HMPatientEncounter == _PatEncRecId;
    
        return hmPatientEncounterClinicStaff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPatientEncounterClinicStaff</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds the specified record in the <c>HMPatientEncounterClinicStaff</c> table.
    /// </summary>
    /// <param name="_PatientEncounterrecid">
    ///     The PatientEncounterrecid of the <c>HMPatientEncounterClinicStaff</c> table to find.
    /// </param>
    /// <param name="_ClinicStaff">
    /// The ClinicStaffid of the <c>HMPatientEncounterClinicStaff</c> table to find
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///      The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///      A record of the <c>HMPatientEncounterClinicStaff</c> table
    /// </returns>
    public static HMPatientEncounterClinicStaff findByPatientEncounterClinicStaff(RecId  _PatientEncounterrecid,
    RecId _ClinicStaff,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatientEncounterClinicStaff               hmPatientEncounterClinicStaff;
    
        hmPatientEncounterClinicStaff.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientEncounterClinicStaff.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly hmPatientEncounterClinicStaff
            where hmPatientEncounterClinicStaff.HMPatientEncounter ==_PatientEncounterrecid
            && hmPatientEncounterClinicStaff.HMClinicStaff == _ClinicStaff;
    
        return hmPatientEncounterClinicStaff;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerPatientNumberOfClinicStaff</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds per patient total number of clinical staff from <c>HMPatientEncounterClinicStaff</c> table.
    /// </summary>
    /// <param name="_patientRecId">
    ///     The RecId of the <c>HMPatient</c> table to find.
    /// </param>
    /// <returns>
    ///      An integer value representing the total number of clinical staff attended the patient in all encounters.
    /// </returns>
    public static int getPerPatientNumberOfClinicStaff(RecId _patientRecId)
    {
        HMPatientEncounterClinicStaff       hmPatEncClinicStaff;
       // HMPatientEncounter                  hmPatientEncounter;
        int                                 contr;
    
        while select HMClinicStaff from hmPatEncClinicStaff group by hmPatEncClinicStaff.HMClinicStaff
         //Todo   join RecId from hmPatientEncounter
               // where
                //hmPatEncClinicStaff.HMPatientEncounter == hmPatientEncounter.RecId &&
             //            hmPatientEncounter.Patient == _patientRecId
                {
                    contr++;
                }
    
        return contr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordExist</Name>
				<Source><![CDATA[
    public static boolean recordExist(RecId _clinicStaffRecId, RecId _encounterRecId)
    {
        HMPatientEncounterClinicStaff   HMPatientEncounterClinicStaff;
    
        select count(RecId) from HMPatientEncounterClinicStaff
        where HMPatientEncounterClinicStaff.HMClinicStaff == _clinicStaffRecId
        && HMPatientEncounterClinicStaff.HMPatientEncounter == _encounterRecId;
    
        if(HMPatientEncounterClinicStaff.RecId > 0)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMPatientEncounterClinicStaff</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HIS</ConfigurationKey>
	<DeveloperDocumentation>@MAZ1273</DeveloperDocumentation>
	<Label>@MAZ1249</Label>
	<TitleField1>HMPatientEncounter</TitleField1>
	<TitleField2>HMClinicStaff</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatientEncounter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMClinicStaff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimaryPhysician</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatientEncounter</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMClinicStaff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsPrimaryPhysician</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClinicStaff</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@MAZ1090</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMPatientEncounter</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPrimaryPhysician</Name>
			<HelpText>@MAZ1250</HelpText>
			<Label>@MAZ92</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HMPatientEncounterClinicStaffIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>HMPatientEncounter</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HMClinicStaff</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClinicStaff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMClinicStaff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClinicStaff</Name>
					<Field>HMClinicStaff</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>