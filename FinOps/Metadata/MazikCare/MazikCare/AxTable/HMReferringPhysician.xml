<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMReferringPhysician</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMReferringPhysician extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayEmail</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Email displayEmail()
    {
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
    
        select firstOnly * from logisticsElectronicAddress
            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Email
                && logisticsElectronicAddress.Description == 'Email'
        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
            && dirPartyLocation.Party == this.DirPerson;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFax</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display TeleFax displayFax()
    {
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
    
        select firstOnly * from logisticsElectronicAddress
            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Fax
                && logisticsElectronicAddress.Description == 'Fax'
        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
            && dirPartyLocation.Party == this.DirPerson;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHomePhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone displayHomePhone()
    {
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
    
        select firstOnly * from logisticsElectronicAddress
            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Phone
                && logisticsElectronicAddress.Description == 'HomePhone'
        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
            && dirPartyLocation.Party == this.DirPerson;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMobilePhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone displayMobilePhone()
    {
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
    
        select firstOnly * from logisticsElectronicAddress
            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Phone
                && logisticsElectronicAddress.Description == 'MobilePhone'
        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
            && dirPartyLocation.Party == this.DirPerson;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Name displayName()
    {
        return DirPerson::find(this.DirPerson).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOfficePhone</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display Phone displayOfficePhone()
    {
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
    
        select firstOnly * from logisticsElectronicAddress
            where logisticsElectronicAddress.Type ==  LogisticsElectronicAddressMethodType::Phone
                && logisticsElectronicAddress.Description == 'OfficePhone'
        join * from dirPartyLocation where dirPartyLocation.Location == logisticsElectronicAddress.Location
            && dirPartyLocation.Party == this.DirPerson;
    
        return logisticsElectronicAddress.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPatternValid</Name>
				<Source><![CDATA[
    public boolean isPatternValid(str _pattern, str _strToTest)
    {
        System.Text.RegularExpressions.Regex regEx;
        System.Text.RegularExpressions.Match regMatch;
        InteropPermission permission = new InteropPermission(InteropKind::ClrInterop);
        boolean retVal;
        permission.assert();
        //BP Deviation documented
        regEx = new System.Text.RegularExpressions.Regex(_pattern);
    
    
        regMatch = regEx.Match(_strToTest);
        retVal = regMatch.get_Success();
        //retVal true = Pattern matches
        //retVal false = Pattern does not match
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        #ISOCountryRegionCodes
    
        ret = super();
    
        // <IN>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if(!this.NationalProviderIdentifier)
            {
                warning(strFmt("@SYS84753","@MAZ21"));
                ret = false;
            }
    
            if(ret && strLen(this.NationalProviderIdentifier) != 10 ||  !this.isPatternValid( @"^\d{10}$", this.NationalProviderIdentifier))
            {
                ret=checkFailed("@MAZ1107");
            }
        }
        // </IN>
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>HMReferringPhysician</c> table; if
    ///    not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMReferringPhysician</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId _recId)
    {
        boolean isExisting = true;
    
        if (!HMReferringPhysician::exist(_recId))
        {
            isExisting = checkFailed(strfmt(HMReferringPhysician::txtNotExist(),_recId));
        }
    
        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMReferringPhysician</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMReferringPhysician</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmReferringPhysician
                 where
                     hmReferringPhysician.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>HMReferringPhysician</c> table.
    /// </summary>
    /// <param name="_recid">
    ///     The record ID of the <c>HMReferringPhysician</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>HMReferringPhysician</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static HMReferringPhysician find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMReferringPhysician  hmReferringPhysician;
    
        hmReferringPhysician.selectForUpdate(_forUpdate);
    
        if(_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmReferringPhysician.concurrencyModel(_concurrencyModel);
        }
    
        select * from hmReferringPhysician where hmReferringPhysician.RecId == _recid;
    
        return hmReferringPhysician;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMReferringPhysician</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS28261";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HIS</ConfigurationKey>
	<DeveloperDocumentation>@MAZ861</DeveloperDocumentation>
	<Label>@MAZ19</Label>
	<TitleField1>UniqueProviderIdentifierNumber</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>DirpersonIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>displayName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Hospital</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DirPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Salutation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameSuffix</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialtyCodeRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NationalProviderIdentifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UniqueProviderIdentifierNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SpecialtyCodeRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NationalProviderIdentifier</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UniqueProviderIdentifierNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NationalProviderIdentifier1</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirPerson</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS31456</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Hospital</Name>
			<ExtendedDataType>HMReferringPhysicianHospital</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NameSuffix</Name>
			<EnumType>HRMNameSuffix</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NationalProviderIdentifier</Name>
			<CountryRegionCodes>US</CountryRegionCodes>
			<ExtendedDataType>HMNPI</ExtendedDataType>
			<HelpText>@MAZ878</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NationalProviderIdentifier1</Name>
			<CountryRegionCodes>US</CountryRegionCodes>
			<ExtendedDataType>HMNPI</ExtendedDataType>
			<HelpText>@MAZ878</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Salutation</Name>
			<EnumType>HRMSalutation</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SpecialtyCodeRecId</Name>
			<ExtendedDataType>HMSpecialtyCodeRecId</ExtendedDataType>
			<HelpText>@MAZ874</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UniqueProviderIdentifierNumber</Name>
			<CountryRegionCodes>US</CountryRegionCodes>
			<ExtendedDataType>HMUniqueProviderIdentifierNumber</ExtendedDataType>
			<HelpText>@MAZ1271</HelpText>
			<Label>@MAZ22</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DirpersonIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DirPerson</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LogisticsLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPerson</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>DirPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirPerson</Name>
					<Field>DirPerson</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Location_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Location_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HMReferringPhysician</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SpecialtyCode_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMSpecialtyCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SpecialtyCodeRecId</Name>
					<Field>SpecialtyCodeRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>