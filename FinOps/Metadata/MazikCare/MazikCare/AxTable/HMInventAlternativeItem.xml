<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMInventAlternativeItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMInventAlternativeItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>decreasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decreases the priority of the selected alternate item.
    /// </summary>
    /// <returns>
    ///    true if the priority is decreased; otherwise, false.
    /// </returns>
    private boolean decreasePriority()
    {
        boolean ret ;
    
        #Define.MinPriority(1)
    
        HMInventAlternativeItem     hmInventAlternativeItem;
    
        if (this.Priority == #MinPriority  || this.Priority == HMInventAlternativeItem::getMaxPriorityByItem(this.InventTable))
        {
            ret = false;
        }
        else
        {
            // find the secondary order to swap
            select * from hmInventAlternativeItem
                where hmInventAlternativeItem.Priority < this.Priority;
    
            if(hmInventAlternativeItem)
            {
                this.swapPriority(this, hmInventAlternativeItem, hmInventAlternativeItem.Priority);
                ret = true;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        ItemId      itemId =  this.InventTable;
        Priority    priority = this.Priority;
    
        super();
    
        this.updateOrdering(itemId,priority);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>increasePriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Increases the priority of the selected alternate item.
    /// </summary>
    /// <returns>
    ///    true if the priority is increased; otherwise, false.
    /// </returns>
    private boolean increasePriority()
    {
        boolean ret;
    
        HMInventAlternativeItem     hmInventAlternativeItem;
    
        // find the secondary order to swap
        select maxOf(Priority) from hmInventAlternativeItem
            where hmInventAlternativeItem.Priority < this.Priority;
    
        if (hmInventAlternativeItem)
        {
            this.swapPriority(this, hmInventAlternativeItem, hmInventAlternativeItem.Priority);
        }
    
        ret = true;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.RecId == 0)
        {
            this.Priority = HMInventAlternativeItem::getMaxPriorityByItem(this.InventTable) + 1;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown</Name>
				<Source><![CDATA[
    public void moveDown()
    {
        UnitofWork  uow = new UnitofWork();
    
        //1 means highest priority
        HMInventAlternativeItem   hmInventAlternativeItem;
    
        select count(recId) from hmInventAlternativeItem
            where hmInventAlternativeItem.InventTable == this.InventTable;
    
        if (this.Priority < hmInventAlternativeItem.RecId)
        {
            select firstOnly forUpdate hmInventAlternativeItem
                where hmInventAlternativeItem.Priority == (this.Priority + 1)
                && hmInventAlternativeItem.InventTable == this.InventTable;
    
            if (hmInventAlternativeItem)
            {
                hmInventAlternativeItem.Priority--;
    
                uow.updateonSaveChanges(hmInventAlternativeItem);
    
                this.Priority++;
    
                uow.updateonSaveChanges(this);
            }
    
            uow.saveChanges();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp</Name>
				<Source><![CDATA[
    public void moveUp()
    {
        UnitofWork  uow = new UnitofWork();
    
        //1 means highest priority
        HMInventAlternativeItem   hmInventAlternativeItem;
    
        if (this.Priority > 1)
        {
            select firstOnly forUpdate hmInventAlternativeItem
                where hmInventAlternativeItem.Priority == (this.Priority - 1)
                && hmInventAlternativeItem.InventTable == this.InventTable;
    
            if (hmInventAlternativeItem)
            {
                hmInventAlternativeItem.Priority++;
    
                uow.updateonSaveChanges(hmInventAlternativeItem);
    
                this.Priority--;
    
                uow.updateonSaveChanges(this);
            }
    
            uow.saveChanges();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapPriority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Swaps the priorities of two records.
    /// </summary>
    /// <param name="_currHMInventAlternativeItem">
    ///    The <c>HMInventAlternativeItem</c> type value of the record.
    /// </param>
    /// <param name="_newHMInventAlternativeItem">
    ///    A <c>HMInventAlternativeItem</c> value that indicates the records with which to swap the priority.
    /// </param>
    /// <param name="_newPriority">
    ///    A <c>Priority</c> value that indicates the new priority to be assigned.
    /// </param>
    private void swapPriority(HMInventAlternativeItem _currHMInventAlternativeItem,
        HMInventAlternativeItem _newHMInventAlternativeItem,
        Priority _newPriority)
    {
        ttsbegin;
        _newHMInventAlternativeItem.Priority = _currHMInventAlternativeItem.Priority;
        _currHMInventAlternativeItem.Priority = _newPriority;
    
        _newHMInventAlternativeItem.selectForUpdate(true);
        if(_newHMInventAlternativeItem.validateWrite())
        {
            _newHMInventAlternativeItem.update();
        }
        _currHMInventAlternativeItem.selectForUpdate(true);
        if(_currHMInventAlternativeItem.validateWrite())
        {
            _currHMInventAlternativeItem.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrdering</Name>
				<Source><![CDATA[
    private void updateOrdering(ItemId  _itemId,Priority  _priority)
    {
        HMInventAlternativeItem     hmInventAlternativeItem;
    
        ttsBegin;
        while select forUpdate * from hmInventAlternativeItem
            where hmInventAlternativeItem.InventTable == _itemId
            && hmInventAlternativeItem.Priority > _priority
        {
            hmInventAlternativeItem.Priority--;
            if(hmInventAlternativeItem.validateWrite())
            {
                hmInventAlternativeItem.update();
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
        if(ret)
        {
            if(this.AltItemId == this.InventTable)
            {
                warning("@MAZ12873");
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMInventAlternativeItem</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMInventAlternativeItem</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMInventAlternativeItem</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMInventAlternativeItem::exist(_recId))
        {
            ret = checkFailed(strfmt(HMInventAlternativeItem::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMInventAlternativeItem</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMInventAlternativeItem</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     HMInventAlternativeItem
                 where
                     HMInventAlternativeItem.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMInventAlternativeItem</c> table.
    /// </summary>
    /// <param name="_recid">
    ///    The record ID of the <c>HMInventAlternativeItem</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMInventAlternativeItem</c> table; otherwise, an empty record.
    /// </returns>
    public static HMInventAlternativeItem find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMInventAlternativeItem   hmInventAlternativeItem;
    
        hmInventAlternativeItem.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmInventAlternativeItem.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmInventAlternativeItem
            where hmInventAlternativeItem.RecId == _recid;
    
        return hmInventAlternativeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxPriorityByItem</Name>
				<Source><![CDATA[
    public static int getMaxPriorityByItem(ItemId _itemId)
    {
        HMInventAlternativeItem     hmInventAlternativeItem;
    
        select maxOf(Priority) from hmInventAlternativeItem
            where hmInventAlternativeItem.InventTable == _itemId;
    
        return hmInventAlternativeItem.Priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMInventAlternativeItem</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MaterialManagement</ConfigurationKey>
	<DeveloperDocumentation>@MAZ12716</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@MAZ12715</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>InventTable</TitleField1>
	<TitleField2>AltItemId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@GLS105540</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltConfigId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventStyleId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventSizeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltInventColorId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AltItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Priority</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltConfigId</Name>
			<ExtendedDataType>ConfigIdAlternative</ExtendedDataType>
			<GroupPrompt>@SYS14011</GroupPrompt>
			<Label>@SYS53395</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventColorId</Name>
			<ExtendedDataType>EcoResItemColorName</ExtendedDataType>
			<GroupPrompt>@SYS73726</GroupPrompt>
			<HelpText>@SYS75749</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventSizeId</Name>
			<ExtendedDataType>EcoResItemSizeName</ExtendedDataType>
			<GroupPrompt>@SYS73727</GroupPrompt>
			<HelpText>@SYS75748</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltInventStyleId</Name>
			<ExtendedDataType>EcoResItemStyleName</ExtendedDataType>
			<GroupPrompt>@FPK270000</GroupPrompt>
			<HelpText>@FPK270015</HelpText>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AltItemId</Name>
			<ExtendedDataType>ItemIdAlternative</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTable</Name>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Priority</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>Priority</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AltConfigId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AltInventStyleId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AltInventSizeId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AltInventColorId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AltItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>EcoResColor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResColor</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>HMInventAlternativeItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventColorId</Name>
					<Field>AltInventColorId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResConfiguration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>EcoResConfiguration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HMInventAlternativeItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltConfigId</Name>
					<Field>AltConfigId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResSize</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResSize</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>HMInventAlternativeItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventSizeId</Name>
					<Field>AltInventSizeId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>EcoResStyle</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResStyle</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>HMInventAlternativeItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltInventStyleId</Name>
					<Field>AltInventStyleId</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Role>HMInventAlternativeItem</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AltItemId</Name>
					<Field>AltItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable_MainItem</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventTable_MainItem</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTable</Name>
					<Field>InventTable</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>