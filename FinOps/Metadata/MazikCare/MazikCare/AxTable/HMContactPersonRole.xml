<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMContactPersonRole</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMContactPersonRole extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertRole</Name>
				<Source><![CDATA[
    public static boolean insertRole(ContactPersonId _contactPersonId, container _location)
    {
        HMContactPersonRole HMContactPersonRole;
        RecordInsertList    HMContactPersonRoleList =  new RecordInsertList(tableNum(HMContactPersonRole));
        int i;
        RecId locationRecId;
        try
        {
            ttsbegin;
            delete_from HMContactPersonRole where HMContactPersonRole.ContactPerson == _contactPersonId;
            for(i=1;i<=conLen(_location);i++)
            {
                locationRecId = conPeek(_location,i);
                HMContactPersonRole.ContactPerson = _contactPersonId;
                HMContactPersonRole.LogisticsLocationRole = locationRecId;
                HMContactPersonRoleList.add(HMContactPersonRole);
            }
            HMContactPersonRoleList.insertDatabase();
            ttsCommit;
            return true;
        }
        catch
        {
            return false;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationRoles</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a container with three containers related to the location of the entity: the role Rec Ids, the role names and the role Translation RecIds.
    /// </summary>
    /// <returns>
    ///    A two-dimension container that has the record ID, and name and value pair.
    /// </returns>
    public static container locationRoles(ContactpersonId _contactpersonId)
    {
        container                   roleRecIds, roleNames, roleTranslationRecIds;
        HMContactPersonRole         HMContactPersonRole;
        LogisticsLocationRole       locationRole;
        LogisticsLocationRoleTranslation locationRoleTransl;
        UserInfo userInfo;
    
        while select LogisticsLocationRole from HMContactPersonRole
            join Name from locationRole
            outer join Description from locationRoleTransl
            exists join userInfo
                order by locationRole.Name
                where HMContactPersonRole.LogisticsLocationRole == locationRole.RecId &&
                      HMContactPersonRole.ContactPerson == _contactpersonId &&
                      (locationRole.Type != LogisticsLocationRoleType::OneTime) &&
                      locationRoleTransl.LocationRole == locationRole.RecId &&
                      locationRoleTransl.LanguageId == userInfo.Language &&
                      userInfo.Id == curUserId()
        {
            roleRecIds += locationRole.RecId;
            roleNames += (locationRoleTransl.Description == '' ? locationRole.Name : locationRoleTransl.Description);
            roleTranslationRecIds += locationRoleTransl.RecId;
        }
    
        return [roleRecIds, roleNames, roleTranslationRecIds];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>MazikCare</ConfigurationKey>
	<DeveloperDocumentation>@MAZ12061</DeveloperDocumentation>
	<Label>@MAZ12062</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ContactPerson</TitleField1>
	<TitleField2>LogisticsLocationRole</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPerson</Name>
			<Label>@MAZ95</Label>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsLocationRole</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ContactPersonRoleIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LogisticsLocationRole</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContactPerson</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPerson</Name>
					<Field>ContactPerson</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsLocationRole</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocationRole</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsLocationRole</Name>
					<Field>LogisticsLocationRole</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>