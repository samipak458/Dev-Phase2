<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMClaimTemplate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMClaimTemplate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        DocuRef docuRefLocal;
    
        try
        {
            HMCreateTable::deleteClass(this.ClassName);
            HMCreateTable::deleteQuery(this.QueryName);
            HMCreateTable::deleteTable(this.TableName);
    
            ttsBegin;
    
            select forUpdate RecId from docuRefLocal
                where docuRefLocal.RefTableId == this.TableId
                && docuRefLocal.RefCompanyId == this.dataAreaId
                && docuRefLocal.RefRecId == this.RecId;
    
            docuRefLocal.delete();
            ttsCommit;
            super();
    
    
        }
        catch
        {
            info("@MAZ7067");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the specified record exists in the <c>HMClaimTemplate</c> table; if not, an error message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;
    
        if (!HMClaimTemplate::exist(_recId))
        {
            ret = checkFailed(strfmt(HMClaimTemplate::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>HMClaimTemplate</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean exist;
    
        exist = (select firstonly
                    RecId
                from
                    hmClaimTemplate
                where
                    hmClaimTemplate.RecId == _recId).RecId != 0;
    
        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HMClaimTemplate</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>HMClaimTemplate</c> table; otherwise, an empty record.
    /// </returns>
    public static HMClaimTemplate find(
        recId   _recId,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMClaimTemplate    hmClaimTemplate;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmClaimTemplate.concurrencyModel(_concurrencyModel);
        }
    
        if (_recId)
        {
            hmClaimTemplate.selectForUpdate(_forUpdate);
    
            select firstonly hmClaimTemplate
                where hmClaimTemplate.RecId == _recId;
        }
    
        return hmClaimTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>HMClaimTemplate</c> table.
    /// </summary>
    /// <param name="_templateName">
    /// The tempalten name of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>HMClaimTemplate</c> table; otherwise, an empty record.
    /// </returns>
    public static HMClaimTemplate findByTemplateName(
        HMClaimTemplateName   _templateName,
        boolean _forUpdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMClaimTemplate    hmClaimTemplate;
    
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmClaimTemplate.concurrencyModel(_concurrencyModel);
        }
    
        if (_templateName)
        {
            hmClaimTemplate.selectForUpdate(_forUpdate);
    
            select firstonly hmClaimTemplate
                where hmClaimTemplate.TemplateName == _templateName;
        }
    
        return hmClaimTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BillNClaimMgmt</ConfigurationKey>
	<DeveloperDocumentation>@MAZ7034</DeveloperDocumentation>
	<Label>@MAZ7032</Label>
	<TitleField1>Code</TitleField1>
	<TitleField2>TemplateName</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClassName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QueryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TableName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TemplateName</Name>
			<Label>@MAZ7036</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TemplateName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ClassName</Name>
			<ExtendedDataType>HMClaimTemplateClassName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Code</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>HMClaimTemplateCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>QueryName</Name>
			<ExtendedDataType>HMClaimTemplateQueryName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableName</Name>
			<ExtendedDataType>HMClaimTemplateTableName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TemplateName</Name>
			<ExtendedDataType>HMClaimTemplateName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TemplateType</Name>
			<EnumType>HMClaimTemplateType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HMTemplateNameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TemplateName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CodeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Code</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>