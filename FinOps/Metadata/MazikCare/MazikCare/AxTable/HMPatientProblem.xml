<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientProblem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMPatientProblem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeProblemsCountStatement</Name>
				<Source><![CDATA[
    //BP deviation documented
    display Description activeProblemsCountStatement()
    {
        return strFmt("@MAZ921", HMPatientProblem::activeProblemsCount(this.HMPatient));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.HMPatientProblemStatus = HMPatientProblemStatus::Active;
        this.OnsetDate = DateTimeUtil::date(DateTimeUtil::getSystemDateTime());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDeleted</Name>
				<Source><![CDATA[
    public void markDeleted()
    {
        DialogButton diagBut;
    
        str strMessage = strFmt("@SYS302359","@MAZ127");
        str strTitle = "@SYS114651";
    
        diagBut = Box::yesNo(strMessage, DialogButton::No, strTitle);
        if (diagBut == DialogButton::Yes)
        {
            ttsBegin;
            this.HMPatientProblemStatus = HMPatientProblemStatus::Deleted;
    
            this.update();
            ttsCommit;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>markInactive</Name>
				<Source><![CDATA[
    public void markInactive(boolean _ignorePrompt = false)
    {
        DialogButton diagBut;
    
        str strMessage = "@MAZ5096";
        str strTitle = "@SYS114651";
    
        if( !_ignorePrompt )
            diagBut = Box::yesNo(strMessage, DialogButton::No, strTitle);
    
        if ( _ignorePrompt || diagBut == DialogButton::Yes)
        {
            ttsBegin;
            this.HMPatientProblemStatus = HMPatientProblemStatus::Inactive;
    
            this.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markResolved</Name>
				<Source><![CDATA[
    public void markResolved(boolean _ignorePrompt = false)
    {
        DialogButton diagBut;
    
        str strMessage = "@MAZ972";
        str strTitle = "@SYS114651";
    
        if( !_ignorePrompt )
            diagBut = Box::yesNo(strMessage, DialogButton::No, strTitle);
    
        if ( _ignorePrompt || diagBut == DialogButton::Yes)
        {
            ttsBegin;
            this.HMPatientProblemStatus = HMPatientProblemStatus::Resolved;
    
            if( this.HMChronicity == HMChronicity::Chronic && this.HMPatientProblemStatus == HMPatientProblemStatus::Resolved)
            {
                checkFailed("@MAZ922");
            }
            else
            {
                this.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        HMPatientProblem        hmPatientProblemLocal;
        //  recId       _recId;
    
        ret = super();
    
        //Chronic problem can not marked as resolved
      /*  if( this.HMChronicity == HMChronicity::Chronic && this.HMPatientProblemStatus == HMPatientProblemStatus::Resolved)
        {
            ret = ret && checkFailed("@MAZ922");
        } */
    
      //  select HMPatientProblemlocal where HMPatientProblemlocal.HMDiagnosisDictionary==this.HMDiagnosisDictionary && HMPatientProblemlocal.HMPatient==this.HMPatient;
    
        //info(int642str(HMPatientProblemlocal.HMDiagnosisDictionary));
    
       // if(HMPatientProblemlocal.HMPatientProblemStatus == HMPatientProblemStatus::Active)
       // {
          //  ret=false;
           // info(int642str(this.HMDiagnosisDictionary));
      //  }
    
    //    _recId=HMPatientProblem::find(this.HMDiagnosisDictionary).HMDiagnosisDictionary;
    //
    //    if(this.HMDiagnosisDictionary==HMPatientProblem::find(this.HMDiagnosisDictionary).HMDiagnosisDictionary && this.HMPatientProblemStatus==HMPatientProblemStatus::Active)
    //    {
    //
    //        ret=false;
    //    }
    //
    //    else
    //
    //    {
    //
    //        ret=true;
    //    }
    
    
    
            //select * from HMPatientProblemlocal
                //where HMPatientProblemlocal.HMDiagnosisDictionary == this.HMDiagnosisDictionary
                    //&& HMPatientProblemlocal.HMPatient == this.HMPatient;
            //if (this.HMDiagnosisDictionary == HMPatientProblemlocal.HMDiagnosisDictionary && this.HMPatientProblemStatus == HMPatientProblemStatus::Active
                //&& this.HMPatient ==  HMPatientProblemlocal.HMPatient)
    
        select count(RecId) from hmPatientProblemLocal where hmPatientProblemLocal.HMDiagnosisDictionary == this.HMDiagnosisDictionary
        && hmPatientProblemLocal.HMPatient ==  this.HMPatient && hmPatientProblemLocal.HMPatientProblemStatus ==  HMPatientProblemStatus::Active;
    
        if(hmPatientProblemLocal.RecId == 0)
            {
    
                ret = true;
    
            }
    
            else
    
            {
    
               ret = false;
            }
    
            return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeProblemsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns number of active problems associated with the Patient
    /// </summary>
    /// <param name="_hmPatient">
    /// Patient for whom active problems are to be retrieved
    /// </param>
    /// <returns>
    /// Number of active problems
    /// </returns>
    public static int64 activeProblemsCount(recId _hmPatient)
    {
        HMPatientProblem hmPatientProblem;
    
        select count(RecId) from hmPatientProblem
        where hmPatientProblem.HMPatient == _hmPatient && hmPatientProblem.HMPatientProblemStatus == HMPatientProblemStatus::Active;
    
        return hmPatientProblem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMPatientProblem</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientProblem</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMPatientProblem</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMPatientProblem::exist(_recId))
        {
            ret = checkFailed(strfmt(HMPatientProblem::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMPatientProblem</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientProblem</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmPatientProblem
                 where
                     hmPatientProblem.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>HMPatientProblem</c> table.
    /// </summary>
    /// <param name="_recid">
    ///     The record ID of the <c>HMPatientProblem</c> table to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///     The concurrency model option that will be used when it reads the record; optional.
    /// </param>
    /// <returns>
    ///     A record of the <c>HMPatientProblem</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static HMPatientProblem find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatientProblem  hmPatientProblem;
        hmPatientProblem.selectForUpdate(_forUpdate);
    
        if(_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientProblem.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmPatientProblem where hmPatientProblem.RecId == _recid;
    
        return hmPatientProblem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveProblem</Name>
				<Source><![CDATA[
    public static boolean isActiveProblem(recId _HMPatient, recId _HMDiagnosisDictionary)
    {
        HMPatientProblem hmPatientProblem;
    
        select count(recId) from hmPatientProblem
        where  hmPatientProblem.HMPatient == _HMPatient
        && hmPatientProblem.HMDiagnosisDictionary == _HMDiagnosisDictionary
        && hmPatientProblem.HMPatientProblemStatus == HMPatientProblemStatus::Active;
    
        if( hmPatientProblem.RecId > 0 )
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMPatientProblem</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HIS</ConfigurationKey>
	<DeveloperDocumentation>@MAZ894</DeveloperDocumentation>
	<Label>@MAZ893</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>HMPatient</TitleField1>
	<TitleField2>HMDiagnosisDictionary</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnsetDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMChronicity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPatientProblemStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMComments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnsetDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMChronicity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMComments</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPatientProblemType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMDiagnosisDictionary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnsetDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMChronicity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPatientProblemStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMComments</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMChronicity</Name>
			<HelpText>@MAZ886</HelpText>
			<EnumType>HMChronicity</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>HMComments</Name>
			<ExtendedDataType>HMComments</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMDiagnosisDictionary</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ885</HelpText>
			<Label>@MAZ923</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMPatient</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<HelpText>@MAZ883</HelpText>
			<Label>@MAZ9</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMPatientProblemStatus</Name>
			<EnumType>HMPatientProblemStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HMPatientProblemType</Name>
			<EnumType>HMPatientProblemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OnsetDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@MAZ884</HelpText>
			<Label>@MAZ623</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMDiagnosisDictionary</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>HMDiagnosisDictionary</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMDiagnosisDictionary</Name>
					<Field>HMDiagnosisDictionary</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMPatient</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMPatient</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMPatient</Name>
					<Field>HMPatient</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>