<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientChargeEntryTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMPatientChargeEntryTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appointmentDate</Name>
				<Source><![CDATA[
    display TransDate appointmentDate()
    {
        return HMResourceSchedulingAppointment::find(this.HMResourceSchedulingAppointment).AppointmentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsChargeEntryLinesForClaim</Name>
				<Source><![CDATA[
    public boolean containsChargeEntryLinesForClaim()
    {
        HMClaimChargeLine			claimChargeLine;
        HMPatientChargeEntryLine	chargeLine;
        HMBillParameters			billParameters = HMBillParameters::find();
        boolean						isBillStatusPaid = false;
        HMCaseTrans					caseTrans;

        if (billParameters.IsBillStatusPaid == NoYes::Yes)
        {
            isBillStatusPaid = true;
		}

        select chargeLine
        where chargeLine.HMPatientChargeEntryTable == this.RecId
			join caseTrans 
				where chargeLine.HMCaseTrans == caseTrans.RecId 
				&& (caseTrans.BillingStatus == HMBillStatus::Paid || !isBillStatusPaid)
					notExists join claimChargeLine
					where claimChargeLine.HMPatientChargeEntryLine == chargeLine.RecId
					&& claimChargeLine.IsRejected == NoYes::No;
    
        if (chargeLine)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseInsuranceNum</Name>
				<Source><![CDATA[
    public AccountNum getCaseInsuranceNum()
    {
        HMPatientInsurance  hmPatientInsurance;
        HMInsuranceCarrier  hmInsuranceCarrier;
        HMCaseInsurance     hmCaseInsurance;
        CustTable           custTable;
        HMCase              hmCase;
    
        select AccountNum from custTable
        join hmInsuranceCarrier
        join hmPatientInsurance
        join hmCase
        join hmCaseInsurance
            where custTable.RecId == hmInsuranceCarrier.CustTable
                && hmInsuranceCarrier.Code == hmPatientInsurance.InsuranceCarrier
                //&& hmPatientInsurance.recid == HMCase.HMPatientInsurance
                && hmCaseInsurance.HMPatientInsurance == hmPatientInsurance.RecId
                && hmCaseInsurance.HMCase == hmcase.RecId
                && hmCaseInsurance.IsActive == NoYes::Yes
                && HMCase.RecId == this.HMCase;
    
        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCasePatient</Name>
				<Source><![CDATA[
    public AccountNum getCasePatient()
    {
        HMPatientInsurance  hmPatientInsurance;
        HMPatient           hmPatient;
        HMCaseInsurance     hmCaseInsurance;
        CustTable           custTable;
        HMCase              hmCase;
    
        select AccountNum from custTable
        join hmPatient
        join hmCase
            where custTable.RecId == hmPatient.CustTable
                && hmCase.HMPatient == hmPatient.RecId
                && HMCase.RecId == this.HMCase;
    
        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGuarantorNum</Name>
				<Source><![CDATA[
    public AccountNum getGuarantorNum()
    {
        HMPatientInsurance  hmPatientInsurance;
        HMInsuranceCarrier  hmInsuranceCarrier;
        HMCaseInsurance     hmCaseInsurance;
        CustTable           custTable;
        HMCase              hmCase;
    
        select AccountNum from custTable
        join hmInsuranceCarrier
        join hmPatientInsurance
        join hmCase
        join hmCaseInsurance
            where custTable.AccountNum == hmPatientInsurance.InsuranceCarrier
                && hmCaseInsurance.HMPatientInsurance == hmPatientInsurance.RecId
                && hmCaseInsurance.HMCase == hmcase.RecId
                && hmCaseInsurance.IsActive == NoYes::Yes
                && HMCase.RecId == this.HMCase
                && HMPatientInsurance.HMPayerType == HMPayerType::Gurantor;
    
        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientGender</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the gender of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The gender of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    display String30 getPatientGender()
    {
        return HMPatient::find(this.HMPatient).patientGender();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientPrimaryInsurance</Name>
				<Source><![CDATA[
    public HMPatientInsurance getPatientPrimaryInsurance()
    {
        return HMPatient::find(this.HMPatient).getPrimaryPatientInsurance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPatientSecondaryInsurance</Name>
				<Source><![CDATA[
    public HMPatientInsurance getPatientSecondaryInsurance()
    {
        return HMPatient::find(this.HMPatient).getSecondaryPatientInsurance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysician</Name>
				<Source><![CDATA[
    display Description getPhysician()
    {
        HMResourceMaster resource;
        HMCase hmcase;
    
        hmcase = HMCase::find(this.HMCase);
    
        select description from resource
        where resource.RecId == hmcase.HMResourceMaster;
    
        return  resource.Description;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryInsurance</Name>
				<Source><![CDATA[
    public recid getPrimaryInsurance()
    {
        return HMPatient::find(this.HMPatient).getPrimaryInsurance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalCharges</Name>
				<Source><![CDATA[
    display HMChargeEntryCharge getTotalCharges()
    {
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        select sum (Charge) from hmPatientChargeEntryLineLocal group by hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable
        where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == this.RecId;
    
        return hmPatientChargeEntryLineLocal.Charge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalChargesWithCurrency</Name>
				<Source><![CDATA[
    display String30 getTotalChargesWithCurrency()
    {
        HMCaseTrans casetrans;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        select sum (TotalAmount) from casetrans
        where casetrans.HMCase == this.HMCase
            && casetrans.IsPPS == NoYes::No;
    
        return (strLRTrim(CompanyInfoHelper::standardCurrency())+ ' ' + num2str(casetrans.TotalAmount,0,2,1,2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    display HMChargeEntryCharge getTotalAmount()
    {
        HMCaseTrans casetrans;
    
        select sum (TotalAmount) from casetrans
        where casetrans.HMCase == this.HMCase
            && casetrans.BillingStatus != HMBillStatus::NotPosted;
    
        return casetrans.TotalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChargeEntryInsured</Name>
				<Source><![CDATA[
    public boolean isChargeEntryInsured()
    {
        HMPatientInsurance  hmPatientInsurance;
        boolean ret;
    
        select count(RecId) from hmPatientInsurance
        where hmPatientInsurance.HMPatient == this.HMPatient
        && hmPatientInsurance.HMPayerType == HMPayerType::InsuranceCarrier
        && hmPatientInsurance.InsuranceStatus == HMInsuranceStatus::Active
        && (hmPatientInsurance.EffectiveDate <= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) && hmPatientInsurance.EndDate >= DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    
        if(hmPatientInsurance.RecId > 0)
        {
            ret = true;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientAgeNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the age of <c>DirPerson</c> setup table.
    /// </summary>
    /// <returns>
    /// The age of <c>DirPerson</c> setup table.
    /// </returns>
    //BP Deviation Documented
    display String30 patientAgeNew()
    {
        return HMPatient::find(this.HMPatient).patientAgeNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientChartNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account of <c>CustTable</c>  table.
    /// </summary>
    /// <returns>
    /// The account of <c>CustTable</c>  table.
    /// </returns>
    //BP Deviation Documented
    display CustAccount patientChartNum()
    {
        return HMPatient::find(this.HMPatient).patientChartNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>patientName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of <c>DirPartyTable</c>table.
    /// </summary>
    /// <returns>
    /// The name of <c>DirPartyTable</c>table.
    /// </returns>
    //BP Deviation Documented
    display DirPartyName patientName()
    {
        return HMPatient::find(this.HMPatient).patientName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record is located in the <c>HMPatientChargeEntryTable</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientChargeEntryTable</c> table record to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If the specified record is not located in the <c>HMPatientChargeEntryTable</c> table, an error message is
    ///    displayed.
    /// </remarks>
    public static boolean checkExist(RecId _recId)
    {
        boolean ret = true;
    
        if (!HMPatientChargeEntryTable::exist(_recId))
        {
            ret = checkFailed(strfmt(HMPatientChargeEntryTable::txtNotExist(), _recId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>HMPatientChargeEntryTable</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>HMPatientChargeEntryTable</c> table to check if it exists.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        boolean found;
    
        found = (select firstonly
                     RecId
                 from
                     hmPatientChargeEntryTable
                 where
                     hmPatientChargeEntryTable.RecId == _recId).RecId != 0;
    
        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatientChargeEntryTable</c> table.
    /// </summary>
    /// <param name="_recid">
    ///    The record ID of the <c>HMPatientChargeEntryTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatientChargeEntryTable</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatientChargeEntryTable find(
    RecId               _recid,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatientChargeEntryTable   hmPatientChargeEntryTable;
    
        hmPatientChargeEntryTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientChargeEntryTable.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmPatientChargeEntryTable
            where hmPatientChargeEntryTable.RecId == _recid;
    
        return hmPatientChargeEntryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatientChargeEntryTable</c> table.
    /// </summary>
    /// <param name="_appointmentRecId">
    ///    The appointment recid of the <c>HMPatientChargeEntryTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatientChargeEntryTable</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatientChargeEntryTable findByAppointment(
    RecId               _appointmentRecId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatientChargeEntryTable   hmPatientChargeEntryTable;
    
        hmPatientChargeEntryTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientChargeEntryTable.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmPatientChargeEntryTable
            where hmPatientChargeEntryTable.HMResourceSchedulingAppointment == _appointmentRecId;
    
        return hmPatientChargeEntryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCase</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>HMPatientChargeEntryTable</c> table.
    /// </summary>
    /// <param name="_appointmentRecId">
    ///    The appointment recid of the <c>HMPatientChargeEntryTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>HMPatientChargeEntryTable</c> table; otherwise, an empty record.
    /// </returns>
    public static HMPatientChargeEntryTable findByCase(
    RecId               _caseRecId,
    boolean             _forUpdate = false,
    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        HMPatientChargeEntryTable   hmPatientChargeEntryTable;
    
        hmPatientChargeEntryTable.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            hmPatientChargeEntryTable.concurrencyModel(_concurrencyModel);
        }
    
        select firstonly * from hmPatientChargeEntryTable
            where hmPatientChargeEntryTable.HMCase == _caseRecId;
    
        return hmPatientChargeEntryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextInventOrderNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next invent order number for the specified parent record in the <c>HMPatientChargeEntryTable</c> table.
    /// </summary>
    /// <param name="_chargeEntry">
    ///    The record ID of HMPatientChargeEntryTable.
    /// </param>
    /// <returns>
    ///    returns an integer.
    /// </returns>
    public static int getNextInventOrderNumber(RecId _chargeEntry)
    {
        int result = 0;
        HMPatientChargeEntryLine  hmPatientChargeEntryLineLocal;
    
        select count(RecId) from hmPatientChargeEntryLineLocal
            where hmPatientChargeEntryLineLocal.HMPatientChargeEntryTable == _chargeEntry;
    
        if (hmPatientChargeEntryLineLocal.RecId > 0)
        {
             result = int642int(hmPatientChargeEntryLineLocal.RecId) + 1;
        }
        else
        {
          result = 1;
        }
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the message to use when a specific record in the <c>HMPatientChargeEntryTable</c> does not exist.
    /// </summary>
    /// <returns>
    ///    The message that states a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS127989";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BillNClaimMgmt</ConfigurationKey>
	<DeveloperDocumentation>@MAZ7796</DeveloperDocumentation>
	<Label>@MAZ7795</Label>
	<TitleField1>HMPatient</TitleField1>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>HMPatient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMResourceSchedulingAppointment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CaseType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMPatient</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HMResourceSchedulingAppointment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaseType</Name>
			<ExtendedDataType>HMChargeEntryCaseType</ExtendedDataType>
			<EnumType>HMCaseType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ChargeEntryDate</Name>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<HelpText>@MAZ13396</HelpText>
			<Label>@MAZ4437</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMCase</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMClinicStaff</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMPatient</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@MAZ9</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>HMResourceSchedulingAppointment</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS80090</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTable</Name>
			<ExtendedDataType>SalesId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<ExtendedDataType>HMChargeEntryStatus</ExtendedDataType>
			<EnumType>HMBillStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TotalCaseAmount</Name>
			<ExtendedDataType>String50</ExtendedDataType>
			<HelpText>Total amount of case</HelpText>
			<Label>Total amount</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMCase</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>HMCase</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMCase</Name>
					<Field>HMCase</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMClinicStaff</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMClinicStaff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMClinicStaff</Name>
					<Field>HMClinicStaff</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMPatient</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMPatient</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMPatient</Name>
					<Field>HMPatient</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMResourceSchedulingAppointment</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMResourceSchedulingAppointment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMResourceSchedulingAppointment</Name>
					<Field>HMResourceSchedulingAppointment</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTable</Name>
					<Field>SalesTable</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HMCaseInsurance</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HMCaseInsurance</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>HMCase</Name>
					<Field>HMCase</Field>
					<RelatedField>HMCase</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>