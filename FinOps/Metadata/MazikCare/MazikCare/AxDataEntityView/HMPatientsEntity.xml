<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMPatientsEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class HMPatientsEntity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        super(_entityCtx, _dataSourceCtx);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, DirPartyBaseEntity))
        {
            // Takes care of maintaining the reference to existing parties if this record provides a party number.
            DirPartyBaseEntity::initializeDirPartyBaseEntityDataSource(_entityCtx, _dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistEntity</Name>
				<Source><![CDATA[
    public void persistEntity(DataEntityRuntimeContext _entityCtx)
    {
        //this.skipDataSourceValidateField(fieldNum(HMPatientsEntity, InvoiceAccount), true);

        if (_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            //this.DefaultDimension = DimensionDefaultResolver::checkAndCreateSelfReference(tablenum(CustTable), this.CustomerAccount, this.DefaultDimensionDisplayValue);
        }

        super(_entityCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, CustTable))
        {
            //this.MainContactWorker = smmUtility::getEntityWorkerRecId(this.EmployeeResponsibleNumber);
            this.processChangesForApproval(_entityCtx);
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, DirPartyBaseEntity))
        {
            this.processChangesForApproval(_entityCtx);
        }

        super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, DirPartyBaseEntity))
        {
            boolean addressLocationExist = false;
            boolean invoiceAddressLocationExist = false;
            boolean deliveryAddressLocationExist = false;

            DirPartyBaseEntityHelper partyHelper = new DirPartyBaseEntityHelper();
            CustDefaultLocationEntityHelper custDefaultLocationHelper = new CustDefaultLocationEntityHelper();

            _entityCtx
                .getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity))
                .setDatabaseOperation(DataEntityDatabaseOperation::None);
            _entityCtx
                .getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity))
                .setDatabaseOperation(DataEntityDatabaseOperation::None);
            
            if (this.AddressLocationId == '')
            {
                DataEntityDataSourceRuntimeContext addressDataSourceContext;
                addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                this.AddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);
                
                if (this.AddressLocationId != '')
                {
                    addressLocationExist = true;
                    this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                }
            }
            
            // If Invoice Address has the same (non-blank) Location Id as the Primary Address, then it should be ignored
            if ((this.InvoiceAddressLocationId == '') ||
                (this.InvoiceAddressLocationId != this.AddressLocationId))
            {
                if (this.InvoiceAddressLocationId == '')
                {
                    DataEntityDataSourceRuntimeContext addressDataSourceContext;
                    addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                    LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                    this.InvoiceAddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);

                    if (this.InvoiceAddressLocationId != '')
                    {
                        invoiceAddressLocationExist = true;
                        this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                    }
                }

                if (!invoiceAddressLocationExist)
                {
                    custDefaultLocationHelper.preInsertUpdate(_entityCtx, _dataSourceCtx,
                        dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                }
            }
            else
            {
                this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
            }

            //// If Delivery Address has the same (non-blank) Location Id as the Invoice or Primary Address,
            //// then it should be ignored
            if ((this.DeliveryAddressLocationId == '') ||
                ((this.DeliveryAddressLocationId != this.AddressLocationId))) //&&
                 //(this.DeliveryAddressLocationId != this.InvoiceAddressLocationId)))
            {
                if (this.DeliveryAddressLocationId == '')
                {
                    DataEntityDataSourceRuntimeContext addressDataSourceContext;
                    addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                    LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                    this.DeliveryAddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);

                    if (this.DeliveryAddressLocationId != '')
                    {
                        deliveryAddressLocationExist = true;
                        this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                    }
                }

                if (!deliveryAddressLocationExist)
                {
                    custDefaultLocationHelper.preInsertUpdate(_entityCtx, _dataSourceCtx,
                        dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                }
            }
            else
            {
                this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
            }
            
            if (!addressLocationExist)
            {
                partyHelper.preInsertEntityDataSource(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
            }

            ret = partyHelper.validateNameFields(_dataSourceCtx);

            if (ret)
            {
                ret = super(_entityCtx, _dataSourceCtx);
            }

            if (ret)
            {
                partyHelper.postInsertEntityDataSource(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                custDefaultLocationHelper.postInsertUpdate(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity), LogisticsLocationRoleType::Invoice, this.InvoiceAddressLocationId);
                custDefaultLocationHelper.postInsertUpdate(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity), LogisticsLocationRoleType::Delivery, this.DeliveryAddressLocationId);

            }
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, CustTable))
        {
            ret = this.validateCustTableDataSource(_dataSourceCtx) && super(_entityCtx, _dataSourceCtx);
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employeeResponsibleWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to be used to compute the value of EmployeeResponsibleWorker field.
    /// </summary>
    /// <returns>A query to be used to compute the value of EmployeeResponsibleWorker field.</returns>
    private static str employeeResponsibleWorker()
    {
        return smmUtility::workerPersonnelNumberQuery(
            tablestr(HMPatientsEntity), dataEntityDataSourceStr(HMPatientsEntity, CustTable), fieldstr(CustTable, MainContactWorker));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceIsPrimaryAndChanged</Name>
				<Source><![CDATA[
    protected boolean invoiceIsPrimaryAndChanged()
    {
        //return this.InvoiceAddressLocationId == this.AddressLocationId
        //            && (this.InvoiceAddressCity != this.AddressCity
        //            || this.InvoiceAddressStreet != this.AddressStreet
        //            || this.InvoiceAddressDescription !=  this.AddressDescription
        //            || this.InvoiceAddressCountryRegionId != this.AddressCountryRegionId
        //            || this.InvoiceAddressCountryRegionISOCode != this.AddressCountryRegionISOCode
        //            || this.InvoiceAddressZipCode != this.AddressZipCode
        //            || this.InvoiceAddressTimeZone != this.AddressTimeZone
        //            || this.InvoiceAddressCounty != this.AddressCounty
        //            || this.InvoiceAddressDistrictName != this.AddressDistrictName
        //            || this.InvoiceAddressLatitude != this.AddressLatitude
        //            || this.InvoiceAddressLongitude != this.AddressLongitude
        //            || this.InvoiceAddressState != this.AddressState
        //            || this.InvoiceAddressBuildingComplement != this.AddressBuildingComplement
        //            || this.InvoiceAddressStreetNumber != this.AddressStreetNumber);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddressIsPrimaryAndChanged</Name>
				<Source><![CDATA[
    protected boolean deliveryAddressIsPrimaryAndChanged()
    {
        //return this.DeliveryAddressLocationId == this.AddressLocationId
        //            && (this.DeliveryAddressCity != this.AddressCity
        //            || this.DeliveryAddressStreet != this.AddressStreet
        //            || this.DeliveryAddressDescription !=  this.AddressDescription
        //            || this.DeliveryAddressCountryRegionId != this.AddressCountryRegionId
        //            || this.DeliveryAddressCountryRegionISOCode != this.AddressCountryRegionISOCode
        //            || this.DeliveryAddressZipCode != this.AddressZipCode
        //            || this.DeliveryAddressTimeZone != this.AddressTimeZone
        //            || this.DeliveryAddressCounty != this.AddressCounty
        //            || this.DeliveryAddressDistrictName != this.AddressDistrictName
        //            || this.DeliveryAddressLatitude != this.AddressLatitude
        //            || this.DeliveryAddressLongitude != this.AddressLongitude
        //            || this.DeliveryAddressState != this.AddressState
        //            || this.DeliveryAddressBuildingComplement != this.AddressBuildingComplement
        //            || this.DeliveryAddressStreetNumber != this.AddressStreetNumber);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryAddressIsNotChanged</Name>
				<Source><![CDATA[
    protected boolean primaryAddressIsNotChanged(LogisticsPostalAddressBaseEntity originPostalAddressEntity)
    {
        return originPostalAddressEntity.City == this.AddressCity
                && originPostalAddressEntity.Street == this.AddressStreet
                && originPostalAddressEntity.Description == this.AddressDescription
                && originPostalAddressEntity.CountryRegionId == this.AddressCountryRegionId
                && originPostalAddressEntity.CountryRegionISOCode == this.AddressCountryRegionISOCode
                && originPostalAddressEntity.ZipCode == this.AddressZipCode
                && originPostalAddressEntity.TimeZone == this.AddressTimeZone
                && originPostalAddressEntity.County == this.AddressCounty
                && originPostalAddressEntity.DistrictName == this.AddressDistrictName
                && originPostalAddressEntity.Latitude == this.AddressLatitude
                && originPostalAddressEntity.Longitude == this.AddressLongitude
                && originPostalAddressEntity.State == this.AddressState
                && originPostalAddressEntity.BuildingCompliment == this.AddressBuildingComplement
                && originPostalAddressEntity.StreetNumber == this.AddressStreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInvoiceAddressToBuffer</Name>
				<Source><![CDATA[
    protected void copyInvoiceAddressToBuffer(LogisticsPostalAddressBaseEntity postalAddressEntity)
    {
        //postalAddressEntity.City = this.InvoiceAddressCity;
        //postalAddressEntity.Street = this.InvoiceAddressStreet;
        //postalAddressEntity.Description = this.InvoiceAddressDescription;
        //postalAddressEntity.CountryRegionId = this.InvoiceAddressCountryRegionId;
        //postalAddressEntity.CountryRegionISOCode = this.InvoiceAddressCountryRegionISOCode;
        //postalAddressEntity.StreetNumber = this.InvoiceAddressStreetNumber;
        //postalAddressEntity.TimeZone = this.InvoiceAddressTimeZone;
        //postalAddressEntity.DistrictName = this.InvoiceAddressDistrictName;
        //postalAddressEntity.Latitude = this.InvoiceAddressLatitude;
        //postalAddressEntity.Longitude = this.InvoiceAddressLongitude;
        //postalAddressEntity.State = this.InvoiceAddressState;
        //postalAddressEntity.BuildingCompliment = this.InvoiceAddressBuildingComplement;
        //postalAddressEntity.ZipCode = this.InvoiceAddressZipCode;
        //postalAddressEntity.County = this.InvoiceAddressCounty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDeliveryAddressToBuffer</Name>
				<Source><![CDATA[
    protected void copyDeliveryAddressToBuffer(LogisticsPostalAddressBaseEntity postalAddressEntity)
    {
        //postalAddressEntity.City = this.DeliveryAddressCity;
        //postalAddressEntity.Street = this.DeliveryAddressStreet;
        //postalAddressEntity.Description = this.DeliveryAddressDescription;
        //postalAddressEntity.CountryRegionId = this.DeliveryAddressCountryRegionId;
        //postalAddressEntity.CountryRegionISOCode = this.DeliveryAddressCountryRegionISOCode;
        //postalAddressEntity.StreetNumber = this.DeliveryAddressStreetNumber;
        //postalAddressEntity.TimeZone = this.DeliveryAddressTimeZone;
        //postalAddressEntity.DistrictName = this.DeliveryAddressDistrictName;
        //postalAddressEntity.Latitude = this.DeliveryAddressLatitude;
        //postalAddressEntity.Longitude = this.DeliveryAddressLongitude;
        //postalAddressEntity.State = this.DeliveryAddressState;
        //postalAddressEntity.BuildingCompliment = this.DeliveryAddressBuildingComplement;
        //postalAddressEntity.ZipCode = this.DeliveryAddressZipCode;
        //postalAddressEntity.County = this.DeliveryAddressCounty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, DirPartyBaseEntity))
        {
            boolean addressLocationExist = false;
            boolean invoiceAddressLocationExist = false;
            boolean deliveryAddressLocationExist = false;

            DirPartyBaseEntityHelper partyHelper = new DirPartyBaseEntityHelper();
            CustDefaultLocationEntityHelper custDefaultLocationHelper = new CustDefaultLocationEntityHelper();
            
            if (this.AddressLocationId == '')
            {
                DataEntityDataSourceRuntimeContext addressDataSourceContext;
                addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                this.AddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);

                if (this.AddressLocationId != '')
                {
                    addressLocationExist = true;
                    this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                }
            }
            
            // Coordinates saving between party and address entity datasources, the last parameter will let address entity create a new address for update.
            // If Invoice Address has the same (non-blank) Location Id as the Primary Address, then it should be ignored
            if ((this.InvoiceAddressLocationId == '') ||
                (this.InvoiceAddressLocationId != this.AddressLocationId))
            {
                if (this.InvoiceAddressLocationId == '')
                {
                    DataEntityDataSourceRuntimeContext addressDataSourceContext;
                    addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                    LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                    this.InvoiceAddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);

                    if (this.InvoiceAddressLocationId != '')
                    {
                        invoiceAddressLocationExist = true;
                        this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                    }
                }

                if (!invoiceAddressLocationExist)
                {
                    custDefaultLocationHelper.preInsertUpdate(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
                }
            }
            else
            {
                this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity));
            }

            //// If Delivery Address has the same (non-blank) Location Id as the Primary or Invoice Address,
            //// then it should be ignored
            if ((this.DeliveryAddressLocationId == '') ||
                ((this.DeliveryAddressLocationId != this.AddressLocationId))) //&&
                //(this.DeliveryAddressLocationId != this.InvoiceAddressLocationId)))
            {
                if (this.DeliveryAddressLocationId == '')
                {
                    DataEntityDataSourceRuntimeContext addressDataSourceContext;
                    addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                    LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();
                    this.DeliveryAddressLocationId  = this.resolveAddressLocationId(postalAddressEntity);

                    if (this.DeliveryAddressLocationId != '')
                    {
                        deliveryAddressLocationExist = true;
                        this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                    }
                }

                if (!deliveryAddressLocationExist)
                {
                    custDefaultLocationHelper.preInsertUpdate(_entityCtx, _dataSourceCtx,
                        dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
                }
            }
            else
            {
                this.doNotUpdateDataSource(_entityCtx, dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity));
            }

            if (!addressLocationExist)
            {
                if (this.AddressLocationId)
                {
                    DataEntityDataSourceRuntimeContext addressDataSourceContext = _entityCtx.getRuntimeContextByName(dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                    //Get Values from buffer, which used to note the change is made from invoice or delivery.
                    LogisticsPostalAddressBaseEntity postalAddressEntity = addressDataSourceContext.getBuffer();

                    //find origin primary address info from LogisticsPostalAddressBaseEntity.
                    LogisticsPostalAddressBaseEntity originPostalAddressEntity;

                    select firstonly originPostalAddressEntity
                        where originPostalAddressEntity.LocationId == this.AddressLocationId;

                    //if invoice is primary and invoice address or primary address has been changed.
                    //if (this.InvoiceAddressLocationId && this.invoiceIsPrimaryAndChanged())
                    //{
                    //    // Check its primary address is not changed, then only chance is invoice address has been changed.
                    //    // Copy the changes to primary address and update from primary address
                    //    if (this.primaryAddressIsNotChanged(originPostalAddressEntity))
                    //    {
                    //        this.copyInvoiceAddressToBuffer(postalAddressEntity);
                    //    }
                    //}

                    //// If Delivery is primary and Delivery address or primary address has been changed.
                    //else if (this.DeliveryAddressLocationId && this.deliveryAddressIsPrimaryAndChanged())
                    //{
                    //    // Check its primary address is not changed, then only chance is Delivery address has been changed.
                    //    // Copy the changes to primary address and update from primary address.
                    //    if (this.primaryAddressIsNotChanged(originPostalAddressEntity))
                    //    {
                    //        this.copyDeliveryAddressToBuffer(postalAddressEntity);
                    //    }
                    //}
                }
                partyHelper.preUpdateEntityDataSource(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
            }           
            
            ret = partyHelper.validateNameFields(_dataSourceCtx);

            if (ret)
            {
                ret = super(_entityCtx, _dataSourceCtx);
            }

            if (ret)
            {
                partyHelper.postUpdateEntityDataSource(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, LogisticsPostalAddressBaseEntity));
                custDefaultLocationHelper.postInsertUpdate(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity), LogisticsLocationRoleType::Invoice, this.InvoiceAddressLocationId);
                custDefaultLocationHelper.postInsertUpdate(_entityCtx, _dataSourceCtx,
                    dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity), LogisticsLocationRoleType::Delivery, this.DeliveryAddressLocationId);
            }
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, CustTable))
        {
            ret = this.validateCustTableDataSource(_dataSourceCtx) && super(_entityCtx, _dataSourceCtx);
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUpdateDataSource</Name>
				<Source><![CDATA[
    private void doNotUpdateDataSource(DataEntityRuntimeContext _entityCtx, str _addressDataSourceName)
    {
        DataEntityDataSourceRuntimeContext addressDataSourceContext = _entityCtx.getRuntimeContextByName(_addressDataSourceName);
        addressDataSourceContext.setDataSaved(true);
        addressDataSourceContext.setDatabaseOperation(DataEntityDatabaseOperation::None);

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustTableDataSource</Name>
				<Source><![CDATA[
    private boolean validateCustTableDataSource(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret = true;

        //if (strLen(this.InvoiceAccount) && this.CustomerAccount != this.InvoiceAccount)
        //{
        //    ret =  _dataSourceCtx.getBuffer().validateField(fieldNum(CustTable, InvoiceAccount));
        //}

        // updateEntityDataSource() failure does not prevent the datasource from being saved, unless it is an inner join
        // In case of update operation, throwing validation error is needed to cancel the update
        if (!ret && _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            _dataSourceCtx.throwValidateWriteFailed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        // Do not delete the DirParty directly - it will be deleted as part of customer deletion.
        // This will ensure that the customer is always deleted before DirParty.
        // Do not delete address for delivery & invoice role type when customer deletion
        // Because LogisticsPostalAddressBaseEntity will delete this record.
        if (_dataSourceCtx.name()    == dataEntityDataSourceStr(HMPatientsEntity, DirPartyBaseEntity)
            || _dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, DeliveryLogisticsPostalAddressBaseEntity)
            || _dataSourceCtx.name() == dataEntityDataSourceStr(HMPatientsEntity, InvoiceLogisticsPostalAddressBaseEntity))
        {
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            _dataSourceCtx.setDataSaved(true);
            ret = true;
        }
        else
        {
            ret = super(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow()
    {
        if (!this.skipNumberSequenceCheck() && CustGroup::doesAnyGroupHaveCustAccountNumberSequenceSet())
        {
            CustGroup custGroup = CustGroup::find(this.CustomerGroupId);

            RefRecId numberSequenceRecId = custGroup.CustAccountNumSeq ?
                custGroup.CustAccountNumSeq : CustParameters::numRefCustAccount().NumberSequenceId;

            HMPatientNumberSeqHandler::enableNumberSequenceControl(this, fieldNum(HMPatientsEntity, CustomerAccount), numberSequenceRecId);
        }

		// Default the partytype only when a matching partynumber is not found.
        this.PartyType = DirUtility::PARTYTYPE_PERSON;
        //if (this.PartyType == '' && !DirPartyTable::find(this.PartyNumber))
        //{
        //    switch (DirAppParameters::defaultPartyType(tableNum(CustTable)))
        //    {
        //        case DirPartyBaseType::Organization:
        //            this.PartyType = DirUtility::PARTYTYPE_ORGANIZATION;
        //            break;

        //        case DirPartyBaseType::Person:
        //            this.PartyType = DirUtility::PARTYTYPE_PERSON;
        //            break;
        //    }
        //}

        //if (this.WriteOffReason)
        //{
        //    this.WriteOffCompany = this.DataAreaId;
        //}

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCTQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// A change tracking query used by DMF to determine what values have changed in the specified data sources since the last export.
    /// </summary>
    /// <returns>A query that represents the data sources used by the entity.</returns>
    public static Query defaultCTQuery()
    {
        Query q = new Query();

        QueryBuildDataSource custTableQBDS = q.addDataSource(tableNum(CustTable));

        QueryBuildDataSource qbdCustCollection = custTableQBDS.addDataSource(tableNum(CustCollectionsContact));
        qbdCustCollection.joinMode(JoinMode::OuterJoin);
        qbdCustCollection.relations(true);

        QueryBuildDataSource qbdWHSCustTable = custTableQBDS.addDataSource(tableNum(WHSCustTable));
        qbdWHSCustTable.joinMode(JoinMode::OuterJoin);
        qbdWHSCustTable.relations(true);

        QueryBuildDataSource qbdRetail = custTableQBDS.addDataSource(tableNum(RetailCustTable));
        qbdRetail.joinMode(JoinMode::OuterJoin);
        qbdRetail.relations(true);

        QueryBuildDataSource qbdNafCode = custTableQBDS.addDataSource(tableNum(CompanyNAFCode));
        qbdNafCode.joinMode(JoinMode::OuterJoin);
        qbdNafCode.relations(true);

        QueryBuildDataSource qbdTaxInfo = custTableQBDS.addDataSource(tableNum(TaxInformationCustTable_IN));
        qbdTaxInfo.joinMode(JoinMode::OuterJoin);
        qbdTaxInfo.addLink(fieldNum(CustTable, AccountNum), fieldNum(TaxInformationCustTable_IN, CustTable));

        QueryBuildDataSource qbdTaxGST = custTableQBDS.addDataSource(tableNum(TaxGSTReliefGroupHeading_MY));
        qbdTaxGST.joinMode(JoinMode::OuterJoin);
        qbdTaxGST.relations(true);

        // Adding tables used by DimensionSetEntity data source
        QueryBuildDataSource qbdDim = custTableQBDS.addDataSource(tableNum(DimensionAttributeValueSet));
        qbdDim.addLink(fieldNum(CustTable, DefaultDimension), fieldNum(DimensionAttributeValueSet, RecId));

        // Adding tables used by CustWriteOffFinancialReasonsSetupEntity data source
        QueryBuildDataSource qbdCustWriteOff = custTableQBDS.addDataSource(tableNum(CustWriteOffFinancialReasonsSetup));
        qbdCustWriteOff.addLink(fieldNum(CustTable, CustWriteOffRefRecId), fieldNum(CustWriteOffFinancialReasonsSetup, RecId));

        // Adding tables used by DirPartyBaseEntity data source
        QueryBuildDataSource qbdDirParty = DirPartyBaseEntity::addChangeTrackingDataSourcesForPartyBase(custTableQBDS, fieldNum(CustTable, Party));

        // Adding tables used by DirPartyBaseEntity related datasources
        // ---LogisticsPostalAddressBaseEntity
        QueryBuildDataSource qbdPostalAddress = LogisticsPostalAddressBaseEntity::addChangeTrackingDataSourcesForAddressBase(qbdDirParty, fieldNum(DirPartyTable, PrimaryAddressLocation));

        QueryBuildDataSource qbdLogisticsLocationEx = qbdDirParty.addDataSource(tableNum(LogisticsLocationExt));
        qbdLogisticsLocationEx.addLink(fieldNum(DirPartyTable, RecId), fieldNum(LogisticsLocationExt, Location));

        // ---DefaultDeliveryLocation
        QueryBuildDataSource  qbdCustDefaultRoleLoc = custTableQBDS.addDataSource(tableNum(CustDefaultLocation));

        qbdCustDefaultRoleLoc.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustDefaultLocation, AccountNum));

        QueryBuildDataSource  qbdDirPartyLocationRole = qbdCustDefaultRoleLoc.addDataSource(tableNum(DirPartyLocationRole));
        qbdDirPartyLocationRole.addLink(fieldNum(CustDefaultLocation, PartyLocationRole), fieldNum(DirPartyLocationRole, RecId));

        QueryBuildDataSource  qbdLogLocationRole = qbdDirPartyLocationRole.addDataSource(tableNum(LogisticsLocationRole));
        qbdLogLocationRole.addLink(fieldNum(DirPartyLocationRole, LocationRole), fieldNum(LogisticsLocationRole, RecId));

        QueryBuildDataSource  qbdDirPartyLocation = qbdDirPartyLocationRole.addDataSource(tableNum(DirPartyLocation));
        qbdDirPartyLocation.addLink(fieldNum(DirPartyLocationRole, PartyLocation ), fieldNum(DirPartyLocation, RecId));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAddressLocationId</Name>
				<Source><![CDATA[
    private LogisticsLocationId resolveAddressLocationId(LogisticsPostalAddressBaseEntity _postalAddressEntity)
    {
        LogisticsLocationId locationId;

        // resolveRemittanceAddressLocationId returns a duplicate address in LogisticsLocation table.
        locationId = LogisticsPostalAddressBaseEntity::resolveRemittanceAddressLocationId(_postalAddressEntity, this.PartyNumber);
        _postalAddressEntity.LocationId = locationId;

        return locationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsControlledChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the data entity is trying to make changes on fields which are change-controlled.
    /// </summary>
    /// <returns>True if such changes are being made; false otherwise.</returns>
    protected boolean containsControlledChanges()
    {
        boolean result = false;
           //(CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::Name)
           //     && this.OrganizationName != this.orig().OrganizationName);

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CreditMax)
        //        && this.CreditLimit != this.orig().CreditLimit)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::TaxGroup)
        //        && this.SalesTaxGroup != this.orig().SalesTaxGroup)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustomerGroup)
        //        && this.CustomerGroupId != this.orig().CustomerGroupId)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::MethodOfPayment)
        //        && this.PaymentMethod != this.orig().PaymentMethod)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::PaymentSpecification)
        //        && this.PaymentSpecification != this.orig().PaymentSpecification)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::TaxExemptNumber)
        //        && this.TaxExemptNumber != this.orig().TaxExemptNumber)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::BankAccount)
        //        && this.PaymentBankAccount != this.orig().PaymentBankAccount)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CashDisc)
        //        && this.PaymentCashDiscount != this.orig().PaymentCashDiscount)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CashDiscBaseDays)
        //        && this.PaymentTermsBaseDays != this.orig().PaymentTermsBaseDays)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CreditRating)
        //        && this.CreditRating != this.orig().CreditRating)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustExcludeCollectionFees)
        //        && this.IsExcludedFromCollectionFeeCalculation != this.orig().IsExcludedFromCollectionFeeCalculation)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustExcludeInterestCharges)
        //        && this.IsExcludedFromInterestChargeCalculation != this.orig().IsExcludedFromInterestChargeCalculation)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::InvoiceAccount)
        //        && this.InvoiceAccount != this.orig().InvoiceAccount)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::MandatoryCreditLimit)
        //        && this.CreditLimitIsMandatory != this.orig().CreditLimitIsMandatory)

        //|| (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::PaymTermId)
        //        && this.PaymentTerms != this.orig().PaymentTerms);
        
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChangesForApproval</Name>
				<Source><![CDATA[
    //public static void preTargetProcessSetBased(DMFDefinitionGroupExecution _dixfGroup)
    //{
    //    HMPatientsStaging staging;

    //    staging.skipDataMethods(true);

    //    update_recordset staging
    //            setting DirPartyTable = staging.CustomerParty
    //            where staging.DefinitionGroup == _dixfGroup.DefinitionGroup
    //               && staging.ExecutionId     == _dixfGroup.ExecutionId
    //               && (staging.TransferStatus == DMFTransferStatus::NotStarted || staging.TransferStatus == DMFTransferStatus::Validated)
    //        && staging.DirPartyTable == 0;

    //}

    /// <summary>
    /// Validates the contents prior to writing it.
    /// </summary>
    /// <param name = "_entityCtx">The entity context, containing a database operation type.</param>
    private void processChangesForApproval(DataEntityRuntimeContext _entityCtx)
    {
        CustTableChangeProposalDataEntityBehavior selectedBehavior = CustParameters::find().CustTableChangeProposalDataEntityBehavior;

        if (selectedBehavior == CustTableChangeProposalDataEntityBehavior::AllowWithoutApproval)
        {
            // Bypass all validation, since we elected not to restrict.
            // Doing this early exit for the only scenario where everything will be persisted as is
            // also allows us to assume we can modify the DE values below for reject or approval scenarios.
            return;
        }
    
        if(_entityCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update)
        {
            boolean controlledChangesMade = this.containsControlledChanges();

            if(!controlledChangesMade)
            {
                // Nothing to change, can early exit.
                // Can also assume if we don't hit this exit that a change request will be required.
                return;
            }

            if(selectedBehavior == CustTableChangeProposalDataEntityBehavior::RejectChanges)
            {
                // Making changes while settings require us to reject changes.
                throw error("@AccountsReceivable:CustChangeProposal_CannotBeChangedFromDE");
            }

            CustTable cust = CustTable::find(this.CustomerAccount);
            RecId custRecId = cust.RecId;

            if (!custRecId)
            {
                // We are trying to update a record that does not exist.
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            if (!cust.canModifyChangeProposal())
            {
                // Changes are made to controlled fields, but the customer is not in a position to accept them
                // due to an existing set of pending changes.
                throw error("@AccountsReceivable:CustTableChangeProposal_ChangesNotAllowed");
            }

            // If we got this far without early exiting or throwing, then we must apply the changes.
            CustTableChangeProposal change = CustTableChangeProposal::findOrCreateAutogenerated(custRecId, true);

            this.initializeCustTableChangeProposal(change);

            ttsbegin;
            change.update();
            ttscommit;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustTableChangeProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustTableChangeProposal</c> table buffer.
    /// </summary>
    /// <param name = "_custTableChangeProposal">
    /// <c>CustTableChangeProposal</c> table buffer.
    /// </param>
    protected void initializeCustTableChangeProposal(CustTableChangeProposal _custTableChangeProposal)
    {
        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::Name)
        //        && this.OrganizationName != this.orig().OrganizationName)
        //{
        //    _custTableChangeProposal.Name = this.OrganizationName;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::Name);
        //    this.OrganizationName = this.orig().OrganizationName;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CreditMax)
        //        && this.CreditLimit != this.orig().CreditLimit)
        //{
        //    _custTableChangeProposal.CreditMax = this.CreditLimit;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CreditMax);
        //    this.CreditLimit = this.orig().CreditLimit;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::TaxGroup)
        //        && this.SalesTaxGroup != this.orig().SalesTaxGroup)
        //{
        //    _custTableChangeProposal.TaxGroup = this.SalesTaxGroup;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::TaxGroup);
        //    this.SalesTaxGroup = this.orig().SalesTaxGroup;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustomerGroup)
        //        && this.CustomerGroupId != this.orig().CustomerGroupId)
        //{
        //    _custTableChangeProposal.CustGroupId = this.CustomerGroupId;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CustomerGroup);
        //    this.CustomerGroupId = this.orig().CustomerGroupId;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::MethodOfPayment)
        //        && this.PaymentMethod != this.orig().PaymentMethod)
        //{
        //    _custTableChangeProposal.CustPaymMode = this.PaymentMethod;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::MethodOfPayment);
        //    this.PaymentMethod = this.orig().PaymentMethod;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::PaymentSpecification)
        //        && this.PaymentSpecification != this.orig().PaymentSpecification)
        //{
        //    _custTableChangeProposal.CustPaymSpec = this.PaymentSpecification;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::PaymentSpecification);
        //    this.PaymentSpecification = this.orig().PaymentSpecification;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::TaxExemptNumber)
        //        && this.TaxExemptNumber != this.orig().TaxExemptNumber)
        //{
        //    _custTableChangeProposal.VATNum = this.TaxExemptNumber;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::TaxExemptNumber);
        //    this.TaxExemptNumber = this.orig().TaxExemptNumber;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::BankAccount)
        //        && this.PaymentBankAccount != this.orig().PaymentBankAccount)
        //{
        //    _custTableChangeProposal.BankAccountId = this.PaymentBankAccount;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::BankAccount);
        //    this.PaymentBankAccount = this.orig().PaymentBankAccount;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CashDisc)
        //        && this.PaymentCashDiscount != this.orig().PaymentCashDiscount)
        //{
        //    _custTableChangeProposal.CashDiscCode = this.PaymentCashDiscount;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CashDisc);
        //    this.PaymentCashDiscount = this.orig().PaymentCashDiscount;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CashDiscBaseDays)
        //        && this.PaymentTermsBaseDays != this.orig().PaymentTermsBaseDays)
        //{
        //    _custTableChangeProposal.CashDiscBaseDays = this.PaymentTermsBaseDays;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CashDiscBaseDays);
        //    this.PaymentTermsBaseDays = this.orig().PaymentTermsBaseDays;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CreditRating)
        //        && this.CreditRating != this.orig().CreditRating)
        //{
        //    _custTableChangeProposal.CreditRating = this.CreditRating;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CreditRating);
        //    this.CreditRating = this.orig().CreditRating;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustExcludeCollectionFees)
        //        && this.IsExcludedFromCollectionFeeCalculation != this.orig().IsExcludedFromCollectionFeeCalculation)
        //{
        //    _custTableChangeProposal.CustExcludeCollectionFee = this.IsExcludedFromCollectionFeeCalculation;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CustExcludeCollectionFees);
        //    this.IsExcludedFromCollectionFeeCalculation = this.orig().IsExcludedFromCollectionFeeCalculation;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::CustExcludeInterestCharges)
        //        && this.IsExcludedFromInterestChargeCalculation != this.orig().IsExcludedFromInterestChargeCalculation)
        //{
        //    _custTableChangeProposal.CustExcludeInterestCharges = this.IsExcludedFromInterestChargeCalculation;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::CustExcludeInterestCharges);
        //    this.IsExcludedFromInterestChargeCalculation = this.orig().IsExcludedFromInterestChargeCalculation;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::InvoiceAccount)
        //        && this.InvoiceAccount != this.orig().InvoiceAccount)
        //{
        //    _custTableChangeProposal.InvoiceAccount = this.InvoiceAccount;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::InvoiceAccount);
        //    this.InvoiceAccount = this.orig().InvoiceAccount;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::MandatoryCreditLimit)
        //        && this.CreditLimitIsMandatory != this.orig().CreditLimitIsMandatory)
        //{
        //    _custTableChangeProposal.MandatoryCreditLimit = this.CreditLimitIsMandatory;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::MandatoryCreditLimit);
        //    this.CreditLimitIsMandatory = this.orig().CreditLimitIsMandatory;
        //}

        //if (CustTableChangeProposalFieldEnablement::isEnabledFor(CustTableChangeProposalField::PaymTermId)
        //        && this.PaymentTerms != this.orig().PaymentTerms)
        //{
        //    _custTableChangeProposal.CustPaymTermId = this.PaymentTerms;
        //    _custTableChangeProposal.setFlagForChangedField(CustTableChangeProposalField::PaymTermId);
        //    this.PaymentTerms = this.orig().PaymentTerms;
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityDataSourceToFieldMapping</Name>
				<Source><![CDATA[
    public static container getEntityDataSourceToFieldMapping(container mapping)
    {
        //mapping += [[tablestr(DirPartyBaseEntity), tablenum(LogisticsPostalAddress), fieldstr(HMPatientsEntity, AddressRecordId)],
        //            [identifierstr(DirPartyBaseEntity), tablenum(LogisticsElectronicAddress), fieldstr(HMPatientsEntity, PrimaryContactURLRecordId)],
        //            [identifierstr(DirPartyBaseEntity1), tablenum(LogisticsElectronicAddress), fieldstr(HMPatientsEntity, PrimaryContactPhoneRecordId)],
        //            [identifierstr(DirPartyBaseEntity2), tablenum(LogisticsElectronicAddress), fieldstr(HMPatientsEntity, PrimaryContactEmailRecordId)],
        //            [identifierstr(DirPartyBaseEntity3), tablenum(LogisticsElectronicAddress), fieldstr(HMPatientsEntity, PrimaryContactFaxRecordId)],
        //            [identifierstr(DirPartyBaseEntity4), tablenum(DirPartyLocation), fieldstr(HMPatientsEntity, DirPartyLocationRecordId)],
        //            [identifierstr(DirPartyBaseEntity5), tablenum(LogisticsPostalAddress), fieldstr(HMPatientsEntity, InvoiceAddressRecordId)],
        //            [identifierstr(DirPartyBaseEntity6), tablenum(LogisticsPostalAddress), fieldstr(HMPatientsEntity, DeliveryAddressRecordId)],
        //            [identifierStr(DirPartyBaseEntity7), tablenum(DirPartyTable), fieldstr(HMPatientsEntity, PartyRecordId)]];
        return mapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dualWriteShouldSkipDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines that the datasource CustDefaultLocation should not be skipped for change tracking to be able to sync customer addresses
    /// </summary>
    /// <param name = "_entityToAnalyze">The entity being tracked.</param>
    /// <param name = "_datasourceName">The datasource within the entity to track.</param>
    /// <param name = "_primaryTableId">The table ID of the datasource being tracked.</param>
    /// <param name = "_fieldMapping">The set of field mappings related to this map.</param>
    /// <returns>false if the datasource should not be skipped; otherwise, !atLeastOneFieldMapped.</returns>
    public static boolean dualWriteShouldSkipDataSource(DictDataEntity _entityToAnalyze,str _datasourceName,tableid _primaryTableId,Map _fieldMapping, boolean atLeastOneFieldMapped)
    {
        if(_primaryTableId == tableNum(CustDefaultLocation))
        {
            return false;
        }
        
        return !atLeastOneFieldMapped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.skipNumberSequenceCheck() && !CustGroup::doesAnyGroupHaveCustAccountNumberSequenceSet())
        {
            NumberSeqRecordFieldHandler::enableNumberSequenceControlForField(
            this, fieldNum(HMPatientsEntity, CustomerAccount), CustParameters::numRefCustAccount());
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace country region token in full primary address.
    /// </summary>
    public void postLoad()
    {
        super();

        LogisticsAddressCountryRegionTranslation::replaceAddressTokenByFieldName(this, fieldStr(HMPatientsEntity, FullPrimaryAddress), fieldStr(HMPatientsEntity, AddressCountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGetStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the fields.
    /// </summary>
    public static void postGetStagingData(DMFDefinitionGroupExecution _dmfDefinitionGroupExecution)
    {
        HMPatientsStaging   staging;
        container           con;
        HMAgeHelper         hmAgeHelper = new HMAgeHelper();

        while select forupdate staging
            where staging.DefinitionGroup == _dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == _dmfDefinitionGroupExecution.ExecutionId
                && staging.TransferStatus == DMFTransferStatus::NotStarted
        {
            ttsbegin;
            if(staging.BirthDate != dateNull())
            {
                con = hmAgeHelper.getYearsMonthsDaysFromDate(staging.BirthDate);

                staging.HMAgeValue = conPeek(con,1);
                staging.AgeInDays = conPeek(con,3);
                staging.AgeInMonths = conPeek(con,2);
            }
            else
            {
                staging.HMAgeValue = 0;
                staging.AgeInDays = 0;
                staging.AgeInMonths = 0;
            }
            staging.update();
            ttscommit; 
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@MAZ:HMPatientsEntityDevDoc</DeveloperDocumentation>
	<FormRef>CustTable</FormRef>
	<Label>@MAZ10</Label>
	<Tags>Customers</Tags>
	<DataManagementEnabled>Yes</DataManagementEnabled>
	<DataManagementStagingTable>HMPatientsStaging</DataManagementStagingTable>
	<IsPublic>Yes</IsPublic>
	<Modules>AccountsReceivable</Modules>
	<PrimaryCompanyContext>DataAreaId</PrimaryCompanyContext>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>HMPatients</PublicCollectionName>
	<PublicEntityName>HMPatients</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PartyType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrganizationName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NameAlias</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomerGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressStreet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressStreetNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressCity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressCounty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressBuildingComplement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressZipCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryContactEmail</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrimaryContactPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AddressTimeZone</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerAccount</Name>
			<AllowEdit>Yes</AllowEdit>
			<Mandatory>No</Mandatory>
			<DataField>AccountNum</DataField>
			<DataSource>CustTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyType</Name>
			<DataField>PartyType</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NameAlias</Name>
			<DataField>NameAlias</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CustomerGroupId</Name>
			<Mandatory>Yes</Mandatory>
			<DataField>CustGroup</DataField>
			<DataSource>CustTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonFirstName</Name>
			<DataField>PersonFirstName</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonMiddleName</Name>
			<DataField>PersonMiddleName</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonLastNamePrefix</Name>
			<DataField>PersonLastNamePrefix</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonLastName</Name>
			<DataField>PersonLastName</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonProfessionalTitle</Name>
			<DataField>PersonProfessionalTitle</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonProfessionalSuffix</Name>
			<DataField>PersonProfessionalSuffix</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonGender</Name>
			<DataField>PersonGender</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonMaritalStatus</Name>
			<DataField>PersonMaritalStatus</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryDay</Name>
			<DataField>PersonAnniversaryDay</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryMonth</Name>
			<DataField>PersonAnniversaryMonth</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryYear</Name>
			<DataField>PersonAnniversaryYear</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonChildrenNames</Name>
			<DataField>PersonChildrenNames</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FullPrimaryAddress</Name>
			<DataField>Address</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDescription</Name>
			<DataField>Description</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressZipCode</Name>
			<DataField>ZipCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCity</Name>
			<DataField>City</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountryRegionId</Name>
			<DataField>CountryRegionId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCountryRegionISOCode</Name>
			<DataField>CountryRegionISOCode</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressCounty</Name>
			<DataField>County</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressDistrictName</Name>
			<DataField>DistrictName</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLatitude</Name>
			<DataField>Latitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLocationId</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLocationRoles</Name>
			<DataField>AddressLocationRoles</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLongitude</Name>
			<DataField>Longitude</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressState</Name>
			<DataField>State</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreet</Name>
			<DataField>Street</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressStreetNumber</Name>
			<DataField>StreetNumber</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressTimeZone</Name>
			<DataField>TimeZone</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressBuildingComplement</Name>
			<DataField>BuildingCompliment</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidFrom</Name>
			<DataField>ValidFrom</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressValidTo</Name>
			<DataField>ValidTo</DataField>
			<DataSource>LogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmail</Name>
			<DataField>PrimaryContactEmail</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailDescription</Name>
			<DataField>PrimaryContactEmailDescription</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailPurpose</Name>
			<DataField>PrimaryContactEmailPurpose</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhone</Name>
			<DataField>PrimaryContactPhone</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneDescription</Name>
			<DataField>PrimaryContactPhoneDescription</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneExtension</Name>
			<DataField>PrimaryContactPhoneExtension</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneIsMobile</Name>
			<DataField>PrimaryContactPhoneIsMobile</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhonePurpose</Name>
			<DataField>PrimaryContactPhonePurpose</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressValidFrom</Name>
			<Label>@AccountsReceivable:CustCustomerV3DeliveryAddressValidFrom</Label>
			<DataField>ValidFrom</DataField>
			<DataSource>DeliveryLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressValidTo</Name>
			<Label>@AccountsReceivable:CustCustomerV3DeliveryAddressValidTo</Label>
			<DataField>ValidTo</DataField>
			<DataSource>DeliveryLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceAddressValidFrom</Name>
			<Label>@AccountsReceivable:CustCustomerV3InvoiceAddressValidFrom</Label>
			<DataField>ValidFrom</DataField>
			<DataSource>InvoiceLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceAddressValidTo</Name>
			<Label>@AccountsReceivable:CustCustomerV3InvoiceAddressValidTo</Label>
			<DataField>ValidTo</DataField>
			<DataSource>InvoiceLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationName</Name>
			<AccessModifier>Private</AccessModifier>
			<Label>@GlobalAddressBook:OrganizationName</Label>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyNumber</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>DirPartyBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgeInDays</Name>
			<DataField>AgeInDays</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AgeInMonths</Name>
			<DataField>AgeInMonths</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BirthDate</Name>
			<DataField>BirthDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BirthTime</Name>
			<DataField>BirthTime</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BloodGroup</Name>
			<DataField>BloodGroup</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>BoxId</Name>
			<DataField>BoxId</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CallNotes</Name>
			<DataField>CallNotes</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CanContact</Name>
			<DataField>CanContact</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CivicAddress</Name>
			<DataField>CivicAddress</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Client</Name>
			<DataField>Client</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactFirst</Name>
			<DataField>ContactFirst</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactPerson</Name>
			<DataField>ContactPerson</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ContactPhoneMobile</Name>
			<DataField>ContactPhoneMobile</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreatedBy_Patient</Name>
			<DataField>CreatedBy</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreatedDateTime_Patient</Name>
			<DataField>CreatedDateTime</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CreditCardToken</Name>
			<DataField>CreditCardToken</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>CriticalMedicalInformation</Name>
			<DataField>CriticalMedicalInformation</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DataAreaId_Patient</Name>
			<DataField>DataAreaId</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>del_Category</Name>
			<DataField>del_Category</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DocuRef</Name>
			<DataField>DocuRef</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DrivingLicenseNumber</Name>
			<DataField>DrivingLicenseNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmployeeNumber</Name>
			<DataField>EmployeeNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Employer</Name>
			<DataField>Employer</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Employment</Name>
			<DataField>Employment</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmploymentEmail</Name>
			<DataField>EmploymentEmail</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmploymentFax</Name>
			<DataField>EmploymentFax</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmploymentLogisticsLocation</Name>
			<DataField>EmploymentLogisticsLocation</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EmploymentPhone</Name>
			<DataField>EmploymentPhone</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>EncounterActive</Name>
			<DataField>EncounterActive</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Executive</Name>
			<DataField>Executive</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExecutiveProtocol</Name>
			<DataField>ExecutiveProtocol</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ExtraCoveredByClient</Name>
			<DataField>ExtraCoveredByClient</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FamilyPhysician</Name>
			<DataField>FamilyPhysician</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Field1</Name>
			<DataField>Field1</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FileLocation</Name>
			<DataField>FileLocation</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>FormProvision</Name>
			<DataField>FormProvision</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Gender</Name>
			<DataField>Gender</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HasCareBookRegistration</Name>
			<DataField>HasCareBookRegistration</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HcmEthnicOrigin</Name>
			<DataField>HcmEthnicOrigin</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HcmLanguageCode</Name>
			<DataField>HcmLanguageCode</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Height</Name>
			<DataField>Height</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HIPAA</Name>
			<DataField>HIPAA</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HipaaDateAcknowledge</Name>
			<DataField>HipaaDateAcknowledge</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMAgeValue</Name>
			<DataField>HMAgeValue</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMBookingOrigin</Name>
			<DataField>HMBookingOrigin</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMCalcBirthDate</Name>
			<DataField>HMCalcBirthDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMClinicStaff</Name>
			<DataField>HMClinicStaff</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMClinicStaffFamilyDoctor</Name>
			<DataField>HMClinicStaffFamilyDoctor</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMIdentificationNumber</Name>
			<DataField>HMIdentificationNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMLaboratories</Name>
			<DataField>HMLaboratories</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMNationalIdExpiryDate</Name>
			<DataField>HMNationalIdExpiryDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMNationalIdType</Name>
			<DataField>HMNationalIdType</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMPatientAllergyInvestigationStatus</Name>
			<DataField>HMPatientAllergyInvestigationStatus</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMPatientRestriction</Name>
			<DataField>HMPatientRestriction</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMPharmacy</Name>
			<DataField>HMPharmacy</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMProfession</Name>
			<DataField>HMProfession</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMRaceCode</Name>
			<DataField>HMRaceCode</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>HMReferringPhysician</Name>
			<DataField>HMReferringPhysician</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Image</Name>
			<DataField>Image</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InClinicFileLocation</Name>
			<DataField>InClinicFileLocation</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsAuthorized</Name>
			<DataField>IsAuthorized</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsOnHold</Name>
			<DataField>IsOnHold</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsOutstanding</Name>
			<DataField>IsOutstanding</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>IsVIP</Name>
			<DataField>IsVIP</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>JobTitle</Name>
			<DataField>JobTitle</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LogisticsAddressCountryRegion</Name>
			<DataField>LogisticsAddressCountryRegion</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModifiedBy_Patient</Name>
			<DataField>ModifiedBy</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ModifiedDateTime_Patient</Name>
			<DataField>ModifiedDateTime</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NameSuffix</Name>
			<DataField>NameSuffix</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OtherName</Name>
			<DataField>OtherName</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Partition_Patient</Name>
			<DataField>Partition</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PassportExpireDate</Name>
			<DataField>PassportExpireDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PassportNum</Name>
			<DataField>PassportNum</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PatientHighlights</Name>
			<DataField>PatientHighlights</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PhysicalChartNumber</Name>
			<DataField>PhysicalChartNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PictureRefused</Name>
			<DataField>PictureRefused</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Pilot</Name>
			<DataField>Pilot</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreEmployment</Name>
			<DataField>PreEmployment</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PreEmploymentProtocol</Name>
			<DataField>PreEmploymentProtocol</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrefModeOfCommunication</Name>
			<DataField>PrefModeOfCommunication</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryPhysician</Name>
			<DataField>PrimaryPhysician</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProfessionalStatus</Name>
			<DataField>ProfessionalStatus</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProvincialHealthCardExpDate</Name>
			<DataField>ProvincialHealthCardExpDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ProvincialHealthCardNumber</Name>
			<DataField>ProvincialHealthCardNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RAMQ</Name>
			<DataField>RAMQ</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReasonTableMerge</Name>
			<DataField>ReasonTableMerge</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReasonTablePatientDeactivate</Name>
			<DataField>ReasonTablePatientDeactivate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RecallDate</Name>
			<DataField>RecallDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>ReferringPhysician</Name>
			<DataField>ReferringPhysician</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefusedToProvidePicture</Name>
			<DataField>RefusedToProvidePicture</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefuseToSign</Name>
			<DataField>RefuseToSign</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RefuseToSignAcknowledge</Name>
			<DataField>RefuseToSignAcknowledge</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RegistrationDate</Name>
			<DataField>RegistrationDate</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Relationship</Name>
			<DataField>Relationship</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>RISRegistered</Name>
			<DataField>RISRegistered</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Salutation</Name>
			<DataField>Salutation</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SelfEmployed</Name>
			<DataField>SelfEmployed</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>smmBusRelTable</Name>
			<DataField>smmBusRelTable</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>SocialSecurityNumber</Name>
			<DataField>SocialSecurityNumber</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Status</Name>
			<DataField>Status</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TextOnInvoice</Name>
			<DataField>TextOnInvoice</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Weight</Name>
			<DataField>Weight</DataField>
			<DataSource>HMPatient</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DeliveryAddressLocationId</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>DeliveryLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InvoiceAddressLocationId</Name>
			<AccessModifier>Private</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>LocationId</DataField>
			<DataSource>InvoiceLogisticsPostalAddressBaseEntity</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>CustomerAccount</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DirPartyEntityMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>OrganizationName</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyNumber</MapField>
					<MapFieldTo>PartyNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyType</MapField>
					<MapFieldTo>PartyType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>CustTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>CustTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DirPartyBaseEntity</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DirPartyBaseEntity</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>LogisticsPostalAddressBaseEntity</Name>
								<ApplyDateFilter>Yes</ApplyDateFilter>
								<DynamicFields>Yes</DynamicFields>
								<Table>LogisticsPostalAddressBaseEntity</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>LogisticsLocationExt</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>LogisticsLocationExt</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges>
											<AxQuerySimpleDataSourceRange>
												<Name>DataAreaId</Name>
												<Field>DataAreaId</Field>
												<Tags>currentCompany</Tags>
												<Value>(DataAreaId == CustTable.DataAreaId)</Value>
											</AxQuerySimpleDataSourceRange>
										</Ranges>
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>RecId</Field>
												<JoinDataSource>LogisticsPostalAddressBaseEntity</JoinDataSource>
												<RelatedField>Location</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PrimaryAddressLocation</Field>
										<JoinDataSource>DirPartyBaseEntity</JoinDataSource>
										<RelatedField>LocationRecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DefaultDeliveryLocation</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustDefaultRoleLocation</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>DeliveryLogisticsPostalAddressBaseEntity</Name>
										<ApplyDateFilter>Yes</ApplyDateFilter>
										<DynamicFields>Yes</DynamicFields>
										<Table>LogisticsPostalAddressBaseEntity</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>LogisticsLocation</Field>
												<JoinDataSource>DefaultDeliveryLocation</JoinDataSource>
												<RelatedField>LocationRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>Type</Name>
										<Field>Type</Field>
										<Value>Delivery</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>AccountNum</Field>
										<JoinDataSource>CustTable</JoinDataSource>
										<RelatedField>AccountNum</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>RecId</Field>
										<JoinDataSource>DirPartyBaseEntity</JoinDataSource>
										<RelatedField>Party</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DefaultInvoiceLocation</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>CustDefaultRoleLocation</Table>
								<DataSources>
									<AxQuerySimpleEmbeddedDataSource>
										<Name>InvoiceLogisticsPostalAddressBaseEntity</Name>
										<ApplyDateFilter>Yes</ApplyDateFilter>
										<DynamicFields>Yes</DynamicFields>
										<Table>LogisticsPostalAddressBaseEntity</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
										<JoinMode>OuterJoin</JoinMode>
										<Relations>
											<AxQuerySimpleDataSourceRelation>
												<Name>QueryDataSourceRelation1</Name>
												<Field>LogisticsLocation</Field>
												<JoinDataSource>DefaultInvoiceLocation</JoinDataSource>
												<RelatedField>LocationRecId</RelatedField>
											</AxQuerySimpleDataSourceRelation>
										</Relations>
									</AxQuerySimpleEmbeddedDataSource>
								</DataSources>
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>Type</Name>
										<Field>Type</Field>
										<Value>Invoice</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>AccountNum</Field>
										<JoinDataSource>CustTable</JoinDataSource>
										<RelatedField>AccountNum</RelatedField>
									</AxQuerySimpleDataSourceRelation>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation2</Name>
										<Field>RecId</Field>
										<JoinDataSource>DirPartyBaseEntity</JoinDataSource>
										<RelatedField>Party</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>Party</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustCollectionsContact</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>CustCollectionsContact</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>CustTable</Name>
								<JoinRelationName>CustTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>WHSCustTable</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>WHSCustTable</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>FulfillmentPolicy</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>WHSFulfillmentPolicy</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<JoinRelationName>WHSFulfillmentPolicy</JoinRelationName>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<UseRelations>Yes</UseRelations>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>CustTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CompanyNAFCode</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CompanyNAFCode</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinRelationName>CompanyNAFCode</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DefaultDimensionDAVS</Name>
						<AllowAdd>No</AllowAdd>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DimensionSetEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>DefaultDimension</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>CustWriteOffSetup</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>CustWriteOffFinancialReasonsSetupEntity</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>CustWriteOffRefRecId</Field>
								<JoinDataSource>CustTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>HMPatient</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>HMPatient</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<JoinDataSource>CustTable</JoinDataSource>
								<JoinRelationName>CustTable</JoinRelationName>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources />
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>